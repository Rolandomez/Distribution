package typings.activexLibreoffice.com_.sun.star.sdbcx

import typings.activexLibreoffice.`type`
import typings.activexLibreoffice.com_.sun.star.uno.XInterface
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * is used to identify rows within a result set and to find rows by a bookmark.
  *
  * Bookmarks are only valid in the scope of the current result set and are not interchangeable between result sets. A bookmark could be a complex data
  * structure, so it could not be compared in a safe way. Because of that, a provider has to implement the compare method for bookmarks.
  */
trait XRowLocate
  extends StObject
     with XInterface {
  
  /**
    * returns the bookmark of the current row of a result set.
    * @returns the current bookmark
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  val Bookmark: js.Any
  
  /**
    * compares two bookmarks and returns an indication of their relative values.
    *
    * The bookmarks must apply to the same {@link ResultSet} . You cannot reliably compare bookmarks from different ResultSets, even if they were created
    * from the same source or statement. ;  A bookmark that is not valid, or incorrectly formed, will cause an exception.
    * @param first the first bookmark
    * @param second the second bookmark
    * @returns a value of {@link com.sun.star.sdbcx.CompareBookmark}
    * @see com.sun.star.sdbcx.CompareBookmark
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def compareBookmarks(first: js.Any, second: js.Any): Double
  
  /**
    * returns the bookmark of the current row of a result set.
    * @returns the current bookmark
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def getBookmark(): js.Any
  
  /**
    * determines whether the bookmarks of a result set are ordered or not.
    * @returns `TRUE` if so
    * @see com.sun.star.sdbcx.CompareBookmark
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def hasOrderedBookmarks(): Boolean
  
  /**
    * returns the hash value for a specified bookmark.
    * @param bookmark the bookmark to hash
    * @returns the hashed value
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def hashBookmark(bookmark: js.Any): Double
  
  /**
    * moves the cursor a relative number of rows, either positive or negative starting at a given bookmark position.
    *
    * If the bookmark could not be located, a result set will be positioned after the last record. ;  If the bookmark is invalid, or not generated by the
    * current result set, then the behavior is not defined, even an abnormal termination is possible.
    * @param bookmark the bookmark where to move
    * @param rows count of rows move relative to the bookmark
    * @returns `TRUE` if successful
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def moveRelativeToBookmark(bookmark: js.Any, rows: Double): Boolean
  
  /**
    * moves the cursor to the row identified by an valid bookmark.
    *
    * If the bookmark could not be located, a result set will be positioned after the last record. ;  If the bookmark is invalid, or not generated by the
    * current result set, then the behavior is not defined, even an abnormal termination is possible.
    * @param bookmark the bookmark where to move
    * @returns `TRUE` if successful
    * @throws com::sun::star::sdbc::SQLException if a database access error occurs.
    */
  def moveToBookmark(bookmark: js.Any): Boolean
}
object XRowLocate {
  
  inline def apply(
    Bookmark: js.Any,
    acquire: () => Unit,
    compareBookmarks: (js.Any, js.Any) => Double,
    getBookmark: () => js.Any,
    hasOrderedBookmarks: () => Boolean,
    hashBookmark: js.Any => Double,
    moveRelativeToBookmark: (js.Any, Double) => Boolean,
    moveToBookmark: js.Any => Boolean,
    queryInterface: `type` => js.Any,
    release: () => Unit
  ): XRowLocate = {
    val __obj = js.Dynamic.literal(Bookmark = Bookmark.asInstanceOf[js.Any], acquire = js.Any.fromFunction0(acquire), compareBookmarks = js.Any.fromFunction2(compareBookmarks), getBookmark = js.Any.fromFunction0(getBookmark), hasOrderedBookmarks = js.Any.fromFunction0(hasOrderedBookmarks), hashBookmark = js.Any.fromFunction1(hashBookmark), moveRelativeToBookmark = js.Any.fromFunction2(moveRelativeToBookmark), moveToBookmark = js.Any.fromFunction1(moveToBookmark), queryInterface = js.Any.fromFunction1(queryInterface), release = js.Any.fromFunction0(release))
    __obj.asInstanceOf[XRowLocate]
  }
  
  extension [Self <: XRowLocate](x: Self) {
    
    inline def setBookmark(value: js.Any): Self = StObject.set(x, "Bookmark", value.asInstanceOf[js.Any])
    
    inline def setCompareBookmarks(value: (js.Any, js.Any) => Double): Self = StObject.set(x, "compareBookmarks", js.Any.fromFunction2(value))
    
    inline def setGetBookmark(value: () => js.Any): Self = StObject.set(x, "getBookmark", js.Any.fromFunction0(value))
    
    inline def setHasOrderedBookmarks(value: () => Boolean): Self = StObject.set(x, "hasOrderedBookmarks", js.Any.fromFunction0(value))
    
    inline def setHashBookmark(value: js.Any => Double): Self = StObject.set(x, "hashBookmark", js.Any.fromFunction1(value))
    
    inline def setMoveRelativeToBookmark(value: (js.Any, Double) => Boolean): Self = StObject.set(x, "moveRelativeToBookmark", js.Any.fromFunction2(value))
    
    inline def setMoveToBookmark(value: js.Any => Boolean): Self = StObject.set(x, "moveToBookmark", js.Any.fromFunction1(value))
  }
}
