package typings.vueI18n.mod

import typings.vueRuntimeCore.mod.App
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait I18n[Messages, DateTimeFormats, NumberFormats, OptionLocale, Legacy] extends StObject {
  
  /**
    * The property whether or not the Composition API is available
    *
    * @remarks
    * If you specified `allowComposition: true` option in Legacy API mode, return `true`, else `false`. else you use the Composition API mode, this property will always return `true`.
    */
  val allowComposition: Boolean
  
  /**
    * Release global scope resource
    */
  def dispose(): Unit
  
  /**
    * The property accessible to the global Composer instance or VueI18n instance
    *
    * @remarks
    * If the [I18n#mode](general#mode) is `'legacy'`, then you can access to a global {@link VueI18n} instance, else then [I18n#mode](general#mode) is `'composition' `, you can access to the global {@link Composer} instance.
    *
    * An instance of this property is **global scope***.
    */
  val global: /* import warning: importer.ImportType#apply Failed type conversion: Legacy extends true ? vue-i18n.vue-i18n.VueI18n<Messages, DateTimeFormats, NumberFormats, OptionLocale, @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, OptionLocale extends string ? [@intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>] extends [never] ? @intlify/core-base.@intlify/core-base.Locale : @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>> : OptionLocale | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, vue-i18n.vue-i18n.Composer<Messages, DateTimeFormats, NumberFormats, OptionLocale, @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, OptionLocale extends @intlify/core-base.@intlify/core-base.Locale ? [@intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>] extends [never] ? @intlify/core-base.@intlify/core-base.Locale : @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>> : OptionLocale | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>>> : Legacy extends false ? vue-i18n.vue-i18n.Composer<Messages, DateTimeFormats, NumberFormats, OptionLocale, @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, OptionLocale extends @intlify/core-base.@intlify/core-base.Locale ? [@intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>] extends [never] ? @intlify/core-base.@intlify/core-base.Locale : @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>> : OptionLocale | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>> : unknown */ js.Any
  
  /**
    * Install entry point
    *
    * @param app - A target Vue app instance
    * @param options - An install options
    */
  def install(app: App[Any], options: Any*): Unit
  
  /**
    * Vue I18n API mode
    *
    * @remarks
    * If you specified `legacy: true` option in `createI18n`, return `legacy`, else `composition`
    *
    * @defaultValue `'legacy'`
    */
  val mode: I18nMode
}
object I18n {
  
  inline def apply[Messages, DateTimeFormats, NumberFormats, OptionLocale, Legacy](
    allowComposition: Boolean,
    dispose: () => Unit,
    global: /* import warning: importer.ImportType#apply Failed type conversion: Legacy extends true ? vue-i18n.vue-i18n.VueI18n<Messages, DateTimeFormats, NumberFormats, OptionLocale, @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, OptionLocale extends string ? [@intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>] extends [never] ? @intlify/core-base.@intlify/core-base.Locale : @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>> : OptionLocale | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, vue-i18n.vue-i18n.Composer<Messages, DateTimeFormats, NumberFormats, OptionLocale, @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, OptionLocale extends @intlify/core-base.@intlify/core-base.Locale ? [@intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>] extends [never] ? @intlify/core-base.@intlify/core-base.Locale : @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>> : OptionLocale | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>>> : Legacy extends false ? vue-i18n.vue-i18n.Composer<Messages, DateTimeFormats, NumberFormats, OptionLocale, @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, OptionLocale extends @intlify/core-base.@intlify/core-base.Locale ? [@intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>] extends [never] ? @intlify/core-base.@intlify/core-base.Locale : @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>> : OptionLocale | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>> : unknown */ js.Any,
    install: (App[Any], /* repeated */ Any) => Unit,
    mode: I18nMode
  ): I18n[Messages, DateTimeFormats, NumberFormats, OptionLocale, Legacy] = {
    val __obj = js.Dynamic.literal(allowComposition = allowComposition.asInstanceOf[js.Any], dispose = js.Any.fromFunction0(dispose), global = global.asInstanceOf[js.Any], install = js.Any.fromFunction2(install), mode = mode.asInstanceOf[js.Any])
    __obj.asInstanceOf[I18n[Messages, DateTimeFormats, NumberFormats, OptionLocale, Legacy]]
  }
  
  extension [Self <: I18n[?, ?, ?, ?, ?], Messages, DateTimeFormats, NumberFormats, OptionLocale, Legacy](x: Self & (I18n[Messages, DateTimeFormats, NumberFormats, OptionLocale, Legacy])) {
    
    inline def setAllowComposition(value: Boolean): Self = StObject.set(x, "allowComposition", value.asInstanceOf[js.Any])
    
    inline def setDispose(value: () => Unit): Self = StObject.set(x, "dispose", js.Any.fromFunction0(value))
    
    inline def setGlobal(
      value: /* import warning: importer.ImportType#apply Failed type conversion: Legacy extends true ? vue-i18n.vue-i18n.VueI18n<Messages, DateTimeFormats, NumberFormats, OptionLocale, @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, OptionLocale extends string ? [@intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>] extends [never] ? @intlify/core-base.@intlify/core-base.Locale : @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>> : OptionLocale | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, vue-i18n.vue-i18n.Composer<Messages, DateTimeFormats, NumberFormats, OptionLocale, @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, OptionLocale extends @intlify/core-base.@intlify/core-base.Locale ? [@intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>] extends [never] ? @intlify/core-base.@intlify/core-base.Locale : @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>> : OptionLocale | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>>> : Legacy extends false ? vue-i18n.vue-i18n.Composer<Messages, DateTimeFormats, NumberFormats, OptionLocale, @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>, OptionLocale extends @intlify/core-base.@intlify/core-base.Locale ? [@intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>] extends [never] ? @intlify/core-base.@intlify/core-base.Locale : @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>> : OptionLocale | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<Messages>, keyof std.NonNullable<Messages>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<DateTimeFormats>, keyof std.NonNullable<DateTimeFormats>> | @intlify/core-base.@intlify/core-base.PickupLocales<std.NonNullable<NumberFormats>, keyof std.NonNullable<NumberFormats>>> : unknown */ js.Any
    ): Self = StObject.set(x, "global", value.asInstanceOf[js.Any])
    
    inline def setInstall(value: (App[Any], /* repeated */ Any) => Unit): Self = StObject.set(x, "install", js.Any.fromFunction2(value))
    
    inline def setMode(value: I18nMode): Self = StObject.set(x, "mode", value.asInstanceOf[js.Any])
  }
}
