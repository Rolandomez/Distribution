package typings.vite.mod

import typings.rollup.mod.RollupOptions
import typings.rollup.mod.WatcherOptions
import typings.vite.mod.Terser.MinifyOptions
import typings.vite.viteBooleans.`false`
import typings.vite.viteStrings.`inline`
import typings.vite.viteStrings.esbuild
import typings.vite.viteStrings.hidden
import typings.vite.viteStrings.modules
import typings.vite.viteStrings.terser
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait BuildOptions extends StObject {
  
  /**
    * Directory relative from `outDir` where the built js/css/image assets will
    * be placed.
    * @default 'assets'
    */
  var assetsDir: js.UndefOr[String] = js.undefined
  
  /**
    * Static asset files smaller than this number (in bytes) will be inlined as
    * base64 strings. Default limit is `4096` (4kb). Set to `0` to disable.
    * @default 4096
    */
  var assetsInlineLimit: js.UndefOr[Double] = js.undefined
  
  /**
    * Adjust chunk size warning limit (in kbs).
    * @default 500
    */
  var chunkSizeWarningLimit: js.UndefOr[Double] = js.undefined
  
  /**
    * Options to pass on to `@rollup/plugin-commonjs`
    */
  var commonjsOptions: js.UndefOr[RollupCommonJSOptions] = js.undefined
  
  /**
    * Copy the public directory to outDir on write.
    * @default true
    * @experimental
    */
  var copyPublicDir: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Whether to code-split CSS. When enabled, CSS in async chunks will be
    * inlined as strings in the chunk and inserted via dynamically created
    * style tags when the chunk is loaded.
    * @default true
    */
  var cssCodeSplit: js.UndefOr[Boolean] = js.undefined
  
  /**
    * An optional separate target for CSS minification.
    * As esbuild only supports configuring targets to mainstream
    * browsers, users may need this option when they are targeting
    * a niche browser that comes with most modern JavaScript features
    * but has poor CSS support, e.g. Android WeChat WebView, which
    * doesn't support the #RGBA syntax.
    */
  var cssTarget: js.UndefOr[String | js.Array[String] | `false`] = js.undefined
  
  /**
    * Options to pass on to `@rollup/plugin-dynamic-import-vars`
    */
  var dynamicImportVarsOptions: js.UndefOr[RollupDynamicImportVarsOptions] = js.undefined
  
  /**
    * Empty outDir on write.
    * @default true when outDir is a sub directory of project root
    */
  var emptyOutDir: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * Build in library mode. The value should be the global name of the lib in
    * UMD mode. This will produce esm + cjs + umd bundle formats with default
    * configurations that are suitable for distributing libraries.
    */
  var lib: js.UndefOr[LibraryOptions | `false`] = js.undefined
  
  /**
    * Whether to emit a manifest.json under assets dir to map hash-less filenames
    * to their hashed versions. Useful when you want to generate your own HTML
    * instead of using the one generated by Vite.
    *
    * Example:
    *
    * ```json
    * {
    *   "main.js": {
    *     "file": "main.68fe3fad.js",
    *     "css": "main.e6b63442.css",
    *     "imports": [...],
    *     "dynamicImports": [...]
    *   }
    * }
    * ```
    * @default false
    */
  var manifest: js.UndefOr[Boolean | String] = js.undefined
  
  /**
    * Set to `false` to disable minification, or specify the minifier to use.
    * Available options are 'terser' or 'esbuild'.
    * @default 'esbuild'
    */
  var minify: js.UndefOr[Boolean | terser | esbuild] = js.undefined
  
  /**
    * Configure module preload
    * Note: does not apply to library mode.
    * @default true
    */
  var modulePreload: js.UndefOr[Boolean | ModulePreloadOptions] = js.undefined
  
  /**
    * Directory relative from `root` where build output will be placed. If the
    * directory exists, it will be removed before the build.
    * @default 'dist'
    */
  var outDir: js.UndefOr[String] = js.undefined
  
  /**
    * whether to inject module preload polyfill.
    * Note: does not apply to library mode.
    * @default true
    * @deprecated use `modulePreload.polyfill` instead
    */
  var polyfillModulePreload: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Set to false to disable reporting compressed chunk sizes.
    * Can slightly improve build speed.
    */
  var reportCompressedSize: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Will be merged with internal rollup options.
    * https://rollupjs.org/guide/en/#big-list-of-options
    */
  var rollupOptions: js.UndefOr[RollupOptions] = js.undefined
  
  /**
    * If `true`, a separate sourcemap file will be created. If 'inline', the
    * sourcemap will be appended to the resulting output file as data URI.
    * 'hidden' works like `true` except that the corresponding sourcemap
    * comments in the bundled files are suppressed.
    * @default false
    */
  var sourcemap: js.UndefOr[Boolean | `inline` | hidden] = js.undefined
  
  /**
    * Produce SSR oriented build. Note this requires specifying SSR entry via
    * `rollupOptions.input`.
    */
  var ssr: js.UndefOr[Boolean | String] = js.undefined
  
  /**
    * Generate SSR manifest for determining style links and asset preload
    * directives in production.
    */
  var ssrManifest: js.UndefOr[Boolean | String] = js.undefined
  
  /**
    * Compatibility transform target. The transform is performed with esbuild
    * and the lowest supported target is es2015/es6. Note this only handles
    * syntax transformation and does not cover polyfills (except for dynamic
    * import)
    *
    * Default: 'modules' - Similar to `@babel/preset-env`'s targets.esmodules,
    * transpile targeting browsers that natively support dynamic es module imports.
    * https://caniuse.com/es6-module-dynamic-import
    *
    * Another special value is 'esnext' - which only performs minimal transpiling
    * (for minification compat) and assumes native dynamic imports support.
    *
    * For custom targets, see https://esbuild.github.io/api/#target and
    * https://esbuild.github.io/content-types/#javascript for more details.
    */
  var target: js.UndefOr[modules | String | js.Array[String] | `false`] = js.undefined
  
  /**
    * Options for terser
    * https://terser.org/docs/api-reference#minify-options
    */
  var terserOptions: js.UndefOr[MinifyOptions] = js.undefined
  
  /**
    * Rollup watch options
    * https://rollupjs.org/guide/en/#watchoptions
    */
  var watch: js.UndefOr[WatcherOptions | Null] = js.undefined
  
  /**
    * Whether to write bundle to disk
    * @default true
    */
  var write: js.UndefOr[Boolean] = js.undefined
}
object BuildOptions {
  
  inline def apply(): BuildOptions = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[BuildOptions]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: BuildOptions] (val x: Self) extends AnyVal {
    
    inline def setAssetsDir(value: String): Self = StObject.set(x, "assetsDir", value.asInstanceOf[js.Any])
    
    inline def setAssetsDirUndefined: Self = StObject.set(x, "assetsDir", js.undefined)
    
    inline def setAssetsInlineLimit(value: Double): Self = StObject.set(x, "assetsInlineLimit", value.asInstanceOf[js.Any])
    
    inline def setAssetsInlineLimitUndefined: Self = StObject.set(x, "assetsInlineLimit", js.undefined)
    
    inline def setChunkSizeWarningLimit(value: Double): Self = StObject.set(x, "chunkSizeWarningLimit", value.asInstanceOf[js.Any])
    
    inline def setChunkSizeWarningLimitUndefined: Self = StObject.set(x, "chunkSizeWarningLimit", js.undefined)
    
    inline def setCommonjsOptions(value: RollupCommonJSOptions): Self = StObject.set(x, "commonjsOptions", value.asInstanceOf[js.Any])
    
    inline def setCommonjsOptionsUndefined: Self = StObject.set(x, "commonjsOptions", js.undefined)
    
    inline def setCopyPublicDir(value: Boolean): Self = StObject.set(x, "copyPublicDir", value.asInstanceOf[js.Any])
    
    inline def setCopyPublicDirUndefined: Self = StObject.set(x, "copyPublicDir", js.undefined)
    
    inline def setCssCodeSplit(value: Boolean): Self = StObject.set(x, "cssCodeSplit", value.asInstanceOf[js.Any])
    
    inline def setCssCodeSplitUndefined: Self = StObject.set(x, "cssCodeSplit", js.undefined)
    
    inline def setCssTarget(value: String | js.Array[String] | `false`): Self = StObject.set(x, "cssTarget", value.asInstanceOf[js.Any])
    
    inline def setCssTargetUndefined: Self = StObject.set(x, "cssTarget", js.undefined)
    
    inline def setCssTargetVarargs(value: String*): Self = StObject.set(x, "cssTarget", js.Array(value*))
    
    inline def setDynamicImportVarsOptions(value: RollupDynamicImportVarsOptions): Self = StObject.set(x, "dynamicImportVarsOptions", value.asInstanceOf[js.Any])
    
    inline def setDynamicImportVarsOptionsUndefined: Self = StObject.set(x, "dynamicImportVarsOptions", js.undefined)
    
    inline def setEmptyOutDir(value: Boolean): Self = StObject.set(x, "emptyOutDir", value.asInstanceOf[js.Any])
    
    inline def setEmptyOutDirNull: Self = StObject.set(x, "emptyOutDir", null)
    
    inline def setEmptyOutDirUndefined: Self = StObject.set(x, "emptyOutDir", js.undefined)
    
    inline def setLib(value: LibraryOptions | `false`): Self = StObject.set(x, "lib", value.asInstanceOf[js.Any])
    
    inline def setLibUndefined: Self = StObject.set(x, "lib", js.undefined)
    
    inline def setManifest(value: Boolean | String): Self = StObject.set(x, "manifest", value.asInstanceOf[js.Any])
    
    inline def setManifestUndefined: Self = StObject.set(x, "manifest", js.undefined)
    
    inline def setMinify(value: Boolean | terser | esbuild): Self = StObject.set(x, "minify", value.asInstanceOf[js.Any])
    
    inline def setMinifyUndefined: Self = StObject.set(x, "minify", js.undefined)
    
    inline def setModulePreload(value: Boolean | ModulePreloadOptions): Self = StObject.set(x, "modulePreload", value.asInstanceOf[js.Any])
    
    inline def setModulePreloadUndefined: Self = StObject.set(x, "modulePreload", js.undefined)
    
    inline def setOutDir(value: String): Self = StObject.set(x, "outDir", value.asInstanceOf[js.Any])
    
    inline def setOutDirUndefined: Self = StObject.set(x, "outDir", js.undefined)
    
    inline def setPolyfillModulePreload(value: Boolean): Self = StObject.set(x, "polyfillModulePreload", value.asInstanceOf[js.Any])
    
    inline def setPolyfillModulePreloadUndefined: Self = StObject.set(x, "polyfillModulePreload", js.undefined)
    
    inline def setReportCompressedSize(value: Boolean): Self = StObject.set(x, "reportCompressedSize", value.asInstanceOf[js.Any])
    
    inline def setReportCompressedSizeUndefined: Self = StObject.set(x, "reportCompressedSize", js.undefined)
    
    inline def setRollupOptions(value: RollupOptions): Self = StObject.set(x, "rollupOptions", value.asInstanceOf[js.Any])
    
    inline def setRollupOptionsUndefined: Self = StObject.set(x, "rollupOptions", js.undefined)
    
    inline def setSourcemap(value: Boolean | `inline` | hidden): Self = StObject.set(x, "sourcemap", value.asInstanceOf[js.Any])
    
    inline def setSourcemapUndefined: Self = StObject.set(x, "sourcemap", js.undefined)
    
    inline def setSsr(value: Boolean | String): Self = StObject.set(x, "ssr", value.asInstanceOf[js.Any])
    
    inline def setSsrManifest(value: Boolean | String): Self = StObject.set(x, "ssrManifest", value.asInstanceOf[js.Any])
    
    inline def setSsrManifestUndefined: Self = StObject.set(x, "ssrManifest", js.undefined)
    
    inline def setSsrUndefined: Self = StObject.set(x, "ssr", js.undefined)
    
    inline def setTarget(value: modules | String | js.Array[String] | `false`): Self = StObject.set(x, "target", value.asInstanceOf[js.Any])
    
    inline def setTargetUndefined: Self = StObject.set(x, "target", js.undefined)
    
    inline def setTargetVarargs(value: String*): Self = StObject.set(x, "target", js.Array(value*))
    
    inline def setTerserOptions(value: MinifyOptions): Self = StObject.set(x, "terserOptions", value.asInstanceOf[js.Any])
    
    inline def setTerserOptionsUndefined: Self = StObject.set(x, "terserOptions", js.undefined)
    
    inline def setWatch(value: WatcherOptions): Self = StObject.set(x, "watch", value.asInstanceOf[js.Any])
    
    inline def setWatchNull: Self = StObject.set(x, "watch", null)
    
    inline def setWatchUndefined: Self = StObject.set(x, "watch", js.undefined)
    
    inline def setWrite(value: Boolean): Self = StObject.set(x, "write", value.asInstanceOf[js.Any])
    
    inline def setWriteUndefined: Self = StObject.set(x, "write", js.undefined)
  }
}
