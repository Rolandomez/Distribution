package typings.vite.mod

import typings.std.Record
import typings.vite.anon.Format
import typings.vite.anon.ResolveOptionsaliasAliasO
import typings.vite.viteBooleans.`false`
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait UserConfig extends StObject {
  
  /**
    * Whether your application is a Single Page Application (SPA),
    * a Multi-Page Application (MPA), or Custom Application (SSR
    * and frameworks with custom HTML handling)
    * @default 'spa'
    */
  var appType: js.UndefOr[AppType] = js.undefined
  
  /**
    * Specify additional picomatch patterns to be treated as static assets.
    */
  var assetsInclude: js.UndefOr[String | js.RegExp | (js.Array[String | js.RegExp])] = js.undefined
  
  /**
    * Base public path when served in development or production.
    * @default '/'
    */
  var base: js.UndefOr[String] = js.undefined
  
  /**
    * Build specific options
    */
  var build: js.UndefOr[BuildOptions] = js.undefined
  
  /**
    * Directory to save cache files. Files in this directory are pre-bundled
    * deps or some other cache files that generated by vite, which can improve
    * the performance. You can use `--force` flag or manually delete the directory
    * to regenerate the cache files. The value can be either an absolute file
    * system path or a path relative to project root.
    * Default to `.vite` when no `package.json` is detected.
    * @default 'node_modules/.vite'
    */
  var cacheDir: js.UndefOr[String] = js.undefined
  
  /**
    * Default: true
    */
  var clearScreen: js.UndefOr[Boolean] = js.undefined
  
  /**
    * CSS related options (preprocessors and CSS modules)
    */
  var css: js.UndefOr[CSSOptions] = js.undefined
  
  /**
    * Custom logger.
    */
  var customLogger: js.UndefOr[Logger] = js.undefined
  
  /**
    * Define global variable replacements.
    * Entries will be defined on `window` during dev and replaced during build.
    */
  var define: js.UndefOr[Record[String, Any]] = js.undefined
  
  /**
    * Environment files directory. Can be an absolute path, or a path relative from
    * the location of the config file itself.
    * @default root
    */
  var envDir: js.UndefOr[String] = js.undefined
  
  /**
    * Env variables starts with `envPrefix` will be exposed to your client source code via import.meta.env.
    * @default 'VITE_'
    */
  var envPrefix: js.UndefOr[String | js.Array[String]] = js.undefined
  
  /**
    * Transform options to pass to esbuild.
    * Or set to `false` to disable esbuild.
    */
  var esbuild: js.UndefOr[ESBuildOptions | `false`] = js.undefined
  
  /**
    * Experimental features
    *
    * Features under this field could change in the future and might NOT follow semver.
    * Please be careful and always pin Vite's version when using them.
    * @experimental
    */
  var experimental: js.UndefOr[ExperimentalOptions] = js.undefined
  
  /**
    * JSON loading options
    */
  var json: js.UndefOr[JsonOptions] = js.undefined
  
  /**
    * Legacy options
    *
    * Features under this field only follow semver for patches, they could be removed in a
    * future minor version. Please always pin Vite's version to a minor when using them.
    */
  var legacy: js.UndefOr[LegacyOptions] = js.undefined
  
  /**
    * Log level.
    * Default: 'info'
    */
  var logLevel: js.UndefOr[LogLevel] = js.undefined
  
  /**
    * Explicitly set a mode to run in. This will override the default mode for
    * each command, and can be overridden by the command line --mode option.
    */
  var mode: js.UndefOr[String] = js.undefined
  
  /**
    * Dep optimization options
    */
  var optimizeDeps: js.UndefOr[DepOptimizationOptions] = js.undefined
  
  /**
    * Array of vite plugins to use.
    */
  var plugins: js.UndefOr[js.Array[PluginOption]] = js.undefined
  
  /**
    * Preview specific options, e.g. host, port, https...
    */
  var preview: js.UndefOr[PreviewOptions] = js.undefined
  
  /**
    * Directory to serve as plain static assets. Files in this directory are
    * served and copied to build dist dir as-is without transform. The value
    * can be either an absolute file system path or a path relative to project root.
    *
    * Set to `false` or an empty string to disable copied static assets to build dist dir.
    * @default 'public'
    */
  var publicDir: js.UndefOr[String | `false`] = js.undefined
  
  /**
    * Configure resolver
    */
  var resolve: js.UndefOr[ResolveOptionsaliasAliasO] = js.undefined
  
  /**
    * Project root directory. Can be an absolute path, or a path relative from
    * the location of the config file itself.
    * @default process.cwd()
    */
  var root: js.UndefOr[String] = js.undefined
  
  /**
    * Server specific options, e.g. host, port, https...
    */
  var server: js.UndefOr[ServerOptions] = js.undefined
  
  /**
    * SSR specific options
    */
  var ssr: js.UndefOr[SSROptions] = js.undefined
  
  /**
    * Worker bundle options
    */
  var worker: js.UndefOr[Format] = js.undefined
}
object UserConfig {
  
  inline def apply(): UserConfig = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[UserConfig]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: UserConfig] (val x: Self) extends AnyVal {
    
    inline def setAppType(value: AppType): Self = StObject.set(x, "appType", value.asInstanceOf[js.Any])
    
    inline def setAppTypeUndefined: Self = StObject.set(x, "appType", js.undefined)
    
    inline def setAssetsInclude(value: String | js.RegExp | (js.Array[String | js.RegExp])): Self = StObject.set(x, "assetsInclude", value.asInstanceOf[js.Any])
    
    inline def setAssetsIncludeUndefined: Self = StObject.set(x, "assetsInclude", js.undefined)
    
    inline def setAssetsIncludeVarargs(value: (String | js.RegExp)*): Self = StObject.set(x, "assetsInclude", js.Array(value*))
    
    inline def setBase(value: String): Self = StObject.set(x, "base", value.asInstanceOf[js.Any])
    
    inline def setBaseUndefined: Self = StObject.set(x, "base", js.undefined)
    
    inline def setBuild(value: BuildOptions): Self = StObject.set(x, "build", value.asInstanceOf[js.Any])
    
    inline def setBuildUndefined: Self = StObject.set(x, "build", js.undefined)
    
    inline def setCacheDir(value: String): Self = StObject.set(x, "cacheDir", value.asInstanceOf[js.Any])
    
    inline def setCacheDirUndefined: Self = StObject.set(x, "cacheDir", js.undefined)
    
    inline def setClearScreen(value: Boolean): Self = StObject.set(x, "clearScreen", value.asInstanceOf[js.Any])
    
    inline def setClearScreenUndefined: Self = StObject.set(x, "clearScreen", js.undefined)
    
    inline def setCss(value: CSSOptions): Self = StObject.set(x, "css", value.asInstanceOf[js.Any])
    
    inline def setCssUndefined: Self = StObject.set(x, "css", js.undefined)
    
    inline def setCustomLogger(value: Logger): Self = StObject.set(x, "customLogger", value.asInstanceOf[js.Any])
    
    inline def setCustomLoggerUndefined: Self = StObject.set(x, "customLogger", js.undefined)
    
    inline def setDefine(value: Record[String, Any]): Self = StObject.set(x, "define", value.asInstanceOf[js.Any])
    
    inline def setDefineUndefined: Self = StObject.set(x, "define", js.undefined)
    
    inline def setEnvDir(value: String): Self = StObject.set(x, "envDir", value.asInstanceOf[js.Any])
    
    inline def setEnvDirUndefined: Self = StObject.set(x, "envDir", js.undefined)
    
    inline def setEnvPrefix(value: String | js.Array[String]): Self = StObject.set(x, "envPrefix", value.asInstanceOf[js.Any])
    
    inline def setEnvPrefixUndefined: Self = StObject.set(x, "envPrefix", js.undefined)
    
    inline def setEnvPrefixVarargs(value: String*): Self = StObject.set(x, "envPrefix", js.Array(value*))
    
    inline def setEsbuild(value: ESBuildOptions | `false`): Self = StObject.set(x, "esbuild", value.asInstanceOf[js.Any])
    
    inline def setEsbuildUndefined: Self = StObject.set(x, "esbuild", js.undefined)
    
    inline def setExperimental(value: ExperimentalOptions): Self = StObject.set(x, "experimental", value.asInstanceOf[js.Any])
    
    inline def setExperimentalUndefined: Self = StObject.set(x, "experimental", js.undefined)
    
    inline def setJson(value: JsonOptions): Self = StObject.set(x, "json", value.asInstanceOf[js.Any])
    
    inline def setJsonUndefined: Self = StObject.set(x, "json", js.undefined)
    
    inline def setLegacy(value: LegacyOptions): Self = StObject.set(x, "legacy", value.asInstanceOf[js.Any])
    
    inline def setLegacyUndefined: Self = StObject.set(x, "legacy", js.undefined)
    
    inline def setLogLevel(value: LogLevel): Self = StObject.set(x, "logLevel", value.asInstanceOf[js.Any])
    
    inline def setLogLevelUndefined: Self = StObject.set(x, "logLevel", js.undefined)
    
    inline def setMode(value: String): Self = StObject.set(x, "mode", value.asInstanceOf[js.Any])
    
    inline def setModeUndefined: Self = StObject.set(x, "mode", js.undefined)
    
    inline def setOptimizeDeps(value: DepOptimizationOptions): Self = StObject.set(x, "optimizeDeps", value.asInstanceOf[js.Any])
    
    inline def setOptimizeDepsUndefined: Self = StObject.set(x, "optimizeDeps", js.undefined)
    
    inline def setPlugins(value: js.Array[PluginOption]): Self = StObject.set(x, "plugins", value.asInstanceOf[js.Any])
    
    inline def setPluginsUndefined: Self = StObject.set(x, "plugins", js.undefined)
    
    inline def setPluginsVarargs(value: PluginOption*): Self = StObject.set(x, "plugins", js.Array(value*))
    
    inline def setPreview(value: PreviewOptions): Self = StObject.set(x, "preview", value.asInstanceOf[js.Any])
    
    inline def setPreviewUndefined: Self = StObject.set(x, "preview", js.undefined)
    
    inline def setPublicDir(value: String | `false`): Self = StObject.set(x, "publicDir", value.asInstanceOf[js.Any])
    
    inline def setPublicDirUndefined: Self = StObject.set(x, "publicDir", js.undefined)
    
    inline def setResolve(value: ResolveOptionsaliasAliasO): Self = StObject.set(x, "resolve", value.asInstanceOf[js.Any])
    
    inline def setResolveUndefined: Self = StObject.set(x, "resolve", js.undefined)
    
    inline def setRoot(value: String): Self = StObject.set(x, "root", value.asInstanceOf[js.Any])
    
    inline def setRootUndefined: Self = StObject.set(x, "root", js.undefined)
    
    inline def setServer(value: ServerOptions): Self = StObject.set(x, "server", value.asInstanceOf[js.Any])
    
    inline def setServerUndefined: Self = StObject.set(x, "server", js.undefined)
    
    inline def setSsr(value: SSROptions): Self = StObject.set(x, "ssr", value.asInstanceOf[js.Any])
    
    inline def setSsrUndefined: Self = StObject.set(x, "ssr", js.undefined)
    
    inline def setWorker(value: Format): Self = StObject.set(x, "worker", value.asInstanceOf[js.Any])
    
    inline def setWorkerUndefined: Self = StObject.set(x, "worker", js.undefined)
  }
}
