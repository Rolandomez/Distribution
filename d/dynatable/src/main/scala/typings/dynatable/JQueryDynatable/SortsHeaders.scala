package typings.dynatable.JQueryDynatable

import typings.dynatable.JQuery
import typings.std.Element
import typings.std.Event
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SortsHeaders extends StObject {
  
  /**
    * Inject the arrow down inside the $link
    *
    * @param $link The jQuery object to be used
    */
  def appendArrowDown($link: JQuery): Unit
  
  /**
    * Inject the arrow up inside the $link
    *
    * @param $link The jQuery object to be used
    */
  def appendArrowUp($link: JQuery): Unit
  
  /** Go through each cell and call `attachOne` */
  def attach(): Unit
  
  /**
    * If sorting is allowed for the provided cell, it injects the hml generated by `create`
    *
    * @param cell The cell Element to be parsed
    */
  def attachOne(cell: Element): Unit
  
  /**
    * Generate the html markup to be inserted inside the header of the sortable column
    *
    * @param cell An Element which point to the cell in the header row
    * @return A jQuery object containing the markup of the link
    */
  def create(cell: Element): JQuery
  
  /** Create and init the sorts */
  def init(): Unit
  
  /**
    * Check if sort feature is enabled
    *
    * @return A boolean if sort feature is enabled
    */
  def initOnLoad(): Boolean
  
  /** Remove all the sort headers from the table */
  def removeAll(): Unit
  
  /** Remove all arrows Elements from the table */
  def removeAllArrows(): Unit
  
  /**
    * Remove the arrow found inside the provided $link
    *
    * @param $link The jQuery object containing the `<a>` markup in the sortable headers
    */
  def removeArrow($link: JQuery): Unit
  
  /**
    * Remove the link generated by dynatable inside the sortable header
    * and restore its original html content
    *
    * @param cell The cell Element that will be parsed
    */
  def removeOne(cell: Element): Unit
  
  /**
    * @todo learn more about this method and document it
    *
    * @param $link The jQuery object to be used
    * @param column The Column object that will be used
    * @return A boolean which is true if supplied test function passes for ALL items in an array
    */
  def sortedByColumn($link: JQuery, column: Column): Boolean
  
  /**
    * Inspect the settings to determine the order to use
    *
    * @param column The Column object that will be used
    * @return A number (-1 or +1) describing the order to use (DESC or ASC)
    */
  def sortedByColumnValue(column: Column): Double
  
  /**
    * Refresh the [multi] sorting of the dataset
    *
    * @param $e The event object (of the click on the table sortable header)
    * @param $link The header link
    * @param column The Column object to be sorted
    */
  def toggleSort(e: Event, $link: JQuery, column: Column): Unit
}
object SortsHeaders {
  
  @scala.inline
  def apply(
    appendArrowDown: JQuery => Unit,
    appendArrowUp: JQuery => Unit,
    attach: () => Unit,
    attachOne: Element => Unit,
    create: Element => JQuery,
    init: () => Unit,
    initOnLoad: () => Boolean,
    removeAll: () => Unit,
    removeAllArrows: () => Unit,
    removeArrow: JQuery => Unit,
    removeOne: Element => Unit,
    sortedByColumn: (JQuery, Column) => Boolean,
    sortedByColumnValue: Column => Double,
    toggleSort: (Event, JQuery, Column) => Unit
  ): SortsHeaders = {
    val __obj = js.Dynamic.literal(appendArrowDown = js.Any.fromFunction1(appendArrowDown), appendArrowUp = js.Any.fromFunction1(appendArrowUp), attach = js.Any.fromFunction0(attach), attachOne = js.Any.fromFunction1(attachOne), create = js.Any.fromFunction1(create), init = js.Any.fromFunction0(init), initOnLoad = js.Any.fromFunction0(initOnLoad), removeAll = js.Any.fromFunction0(removeAll), removeAllArrows = js.Any.fromFunction0(removeAllArrows), removeArrow = js.Any.fromFunction1(removeArrow), removeOne = js.Any.fromFunction1(removeOne), sortedByColumn = js.Any.fromFunction2(sortedByColumn), sortedByColumnValue = js.Any.fromFunction1(sortedByColumnValue), toggleSort = js.Any.fromFunction3(toggleSort))
    __obj.asInstanceOf[SortsHeaders]
  }
  
  @scala.inline
  implicit class SortsHeadersMutableBuilder[Self <: SortsHeaders] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setAppendArrowDown(value: JQuery => Unit): Self = StObject.set(x, "appendArrowDown", js.Any.fromFunction1(value))
    
    @scala.inline
    def setAppendArrowUp(value: JQuery => Unit): Self = StObject.set(x, "appendArrowUp", js.Any.fromFunction1(value))
    
    @scala.inline
    def setAttach(value: () => Unit): Self = StObject.set(x, "attach", js.Any.fromFunction0(value))
    
    @scala.inline
    def setAttachOne(value: Element => Unit): Self = StObject.set(x, "attachOne", js.Any.fromFunction1(value))
    
    @scala.inline
    def setCreate(value: Element => JQuery): Self = StObject.set(x, "create", js.Any.fromFunction1(value))
    
    @scala.inline
    def setInit(value: () => Unit): Self = StObject.set(x, "init", js.Any.fromFunction0(value))
    
    @scala.inline
    def setInitOnLoad(value: () => Boolean): Self = StObject.set(x, "initOnLoad", js.Any.fromFunction0(value))
    
    @scala.inline
    def setRemoveAll(value: () => Unit): Self = StObject.set(x, "removeAll", js.Any.fromFunction0(value))
    
    @scala.inline
    def setRemoveAllArrows(value: () => Unit): Self = StObject.set(x, "removeAllArrows", js.Any.fromFunction0(value))
    
    @scala.inline
    def setRemoveArrow(value: JQuery => Unit): Self = StObject.set(x, "removeArrow", js.Any.fromFunction1(value))
    
    @scala.inline
    def setRemoveOne(value: Element => Unit): Self = StObject.set(x, "removeOne", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSortedByColumn(value: (JQuery, Column) => Boolean): Self = StObject.set(x, "sortedByColumn", js.Any.fromFunction2(value))
    
    @scala.inline
    def setSortedByColumnValue(value: Column => Double): Self = StObject.set(x, "sortedByColumnValue", js.Any.fromFunction1(value))
    
    @scala.inline
    def setToggleSort(value: (Event, JQuery, Column) => Unit): Self = StObject.set(x, "toggleSort", js.Any.fromFunction3(value))
  }
}
