package typings.typescriptNn5FuAjk.protocolDTsMod.ts.server.protocol

import typings.typescriptNn5FuAjk.Array
import typings.typescriptNn5FuAjk.typescriptNn5FuAjkBooleans.`true`
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * An item found in a completion response.
  */
trait CompletionEntry extends StObject {
  
  /**
    * A property to be sent back to TS Server in the CompletionDetailsRequest, along with `name`,
    * that allows TS Server to look up the symbol represented by the completion item, disambiguating
    * items with the same name.
    */
  var data: js.UndefOr[Any] = js.undefined
  
  /**
    * Indicates whether commiting this completion entry will require additional code actions to be
    * made to avoid errors. The CompletionEntryDetails will have these actions.
    */
  var hasAction: js.UndefOr[`true`] = js.undefined
  
  /**
    * Text to insert instead of `name`.
    * This is used to support bracketed completions; If `name` might be "a-b" but `insertText` would be `["a-b"]`,
    * coupled with `replacementSpan` to replace a dotted access with a bracket access.
    */
  var insertText: js.UndefOr[String] = js.undefined
  
  /**
    * If true, this completion was generated from traversing the name table of an unchecked JS file,
    * and therefore may not be accurate.
    */
  var isFromUncheckedFile: js.UndefOr[`true`] = js.undefined
  
  /**
    * If true, this completion was an auto-import-style completion of an import statement (i.e., the
    * module specifier was inserted along with the imported identifier). Used for telemetry reporting.
    */
  var isImportStatementCompletion: js.UndefOr[`true`] = js.undefined
  
  /**
    * If true, this completion was for an auto-import of a module not yet in the program, but listed
    * in the project package.json. Used for telemetry reporting.
    */
  var isPackageJsonImport: js.UndefOr[`true`] = js.undefined
  
  /**
    * If true, this completion should be highlighted as recommended. There will only be one of these.
    * This will be set when we know the user should write an expression with a certain type and that type is an enum or constructable class.
    * Then either that enum/class or a namespace containing it will be the recommended symbol.
    */
  var isRecommended: js.UndefOr[`true`] = js.undefined
  
  /**
    * `insertText` should be interpreted as a snippet if true.
    */
  var isSnippet: js.UndefOr[`true`] = js.undefined
  
  /**
    * The symbol's kind (such as 'className' or 'parameterName').
    */
  var kind: ScriptElementKind
  
  /**
    * Optional modifiers for the kind (such as 'public').
    */
  var kindModifiers: js.UndefOr[String] = js.undefined
  
  /**
    * Additional details for the label.
    */
  var labelDetails: js.UndefOr[CompletionEntryLabelDetails] = js.undefined
  
  /**
    * The symbol's name.
    */
  var name: String
  
  /**
    * An optional span that indicates the text to be replaced by this completion item.
    * If present, this span should be used instead of the default one.
    * It will be set if the required span differs from the one generated by the default replacement behavior.
    */
  var replacementSpan: js.UndefOr[TextSpan] = js.undefined
  
  /**
    * A string that is used for comparing completion items so that they can be ordered.  This
    * is often the same as the name but may be different in certain circumstances.
    */
  var sortText: String
  
  /**
    * Identifier (not necessarily human-readable) identifying where this completion came from.
    */
  var source: js.UndefOr[String] = js.undefined
  
  /**
    * Human-readable description of the `source`.
    */
  var sourceDisplay: js.UndefOr[Array[SymbolDisplayPart]] = js.undefined
}
object CompletionEntry {
  
  inline def apply(kind: ScriptElementKind, name: String, sortText: String): CompletionEntry = {
    val __obj = js.Dynamic.literal(kind = kind.asInstanceOf[js.Any], name = name.asInstanceOf[js.Any], sortText = sortText.asInstanceOf[js.Any])
    __obj.asInstanceOf[CompletionEntry]
  }
  
  extension [Self <: CompletionEntry](x: Self) {
    
    inline def setData(value: Any): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
    
    inline def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
    
    inline def setHasAction(value: `true`): Self = StObject.set(x, "hasAction", value.asInstanceOf[js.Any])
    
    inline def setHasActionUndefined: Self = StObject.set(x, "hasAction", js.undefined)
    
    inline def setInsertText(value: String): Self = StObject.set(x, "insertText", value.asInstanceOf[js.Any])
    
    inline def setInsertTextUndefined: Self = StObject.set(x, "insertText", js.undefined)
    
    inline def setIsFromUncheckedFile(value: `true`): Self = StObject.set(x, "isFromUncheckedFile", value.asInstanceOf[js.Any])
    
    inline def setIsFromUncheckedFileUndefined: Self = StObject.set(x, "isFromUncheckedFile", js.undefined)
    
    inline def setIsImportStatementCompletion(value: `true`): Self = StObject.set(x, "isImportStatementCompletion", value.asInstanceOf[js.Any])
    
    inline def setIsImportStatementCompletionUndefined: Self = StObject.set(x, "isImportStatementCompletion", js.undefined)
    
    inline def setIsPackageJsonImport(value: `true`): Self = StObject.set(x, "isPackageJsonImport", value.asInstanceOf[js.Any])
    
    inline def setIsPackageJsonImportUndefined: Self = StObject.set(x, "isPackageJsonImport", js.undefined)
    
    inline def setIsRecommended(value: `true`): Self = StObject.set(x, "isRecommended", value.asInstanceOf[js.Any])
    
    inline def setIsRecommendedUndefined: Self = StObject.set(x, "isRecommended", js.undefined)
    
    inline def setIsSnippet(value: `true`): Self = StObject.set(x, "isSnippet", value.asInstanceOf[js.Any])
    
    inline def setIsSnippetUndefined: Self = StObject.set(x, "isSnippet", js.undefined)
    
    inline def setKind(value: ScriptElementKind): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    inline def setKindModifiers(value: String): Self = StObject.set(x, "kindModifiers", value.asInstanceOf[js.Any])
    
    inline def setKindModifiersUndefined: Self = StObject.set(x, "kindModifiers", js.undefined)
    
    inline def setLabelDetails(value: CompletionEntryLabelDetails): Self = StObject.set(x, "labelDetails", value.asInstanceOf[js.Any])
    
    inline def setLabelDetailsUndefined: Self = StObject.set(x, "labelDetails", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setReplacementSpan(value: TextSpan): Self = StObject.set(x, "replacementSpan", value.asInstanceOf[js.Any])
    
    inline def setReplacementSpanUndefined: Self = StObject.set(x, "replacementSpan", js.undefined)
    
    inline def setSortText(value: String): Self = StObject.set(x, "sortText", value.asInstanceOf[js.Any])
    
    inline def setSource(value: String): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
    
    inline def setSourceDisplay(value: Array[SymbolDisplayPart]): Self = StObject.set(x, "sourceDisplay", value.asInstanceOf[js.Any])
    
    inline def setSourceDisplayUndefined: Self = StObject.set(x, "sourceDisplay", js.undefined)
    
    inline def setSourceUndefined: Self = StObject.set(x, "source", js.undefined)
  }
}
