package typings.recurlyRecurlyJs

import typings.recurlyRecurlyJs.anon.ClientAuthorization
import typings.recurlyRecurlyJs.anon.OnPaymentAuthorized
import typings.recurlyRecurlyJs.libApplePayNativeMod.ApplePayContactField
import typings.recurlyRecurlyJs.libApplePayNativeMod.ApplePayPaymentRequest
import typings.recurlyRecurlyJs.libEmitterMod.Emitter
import typings.recurlyRecurlyJs.libPricingCheckoutMod.CheckoutPricingInstance
import typings.recurlyRecurlyJs.libPricingCheckoutMod.CheckoutPricingPromise
import typings.std.HTMLFormElement
import typings.std.VoidFunction
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object libApplePayMod {
  
  type ApplePay = js.Function1[/* config */ ApplePayConfig, ApplePayInstance]
  
  trait ApplePayConfig extends StObject {
    
    /**
      * If provided, will use Braintree to process the ApplePay transaction.
      */
    var braintree: js.UndefOr[ClientAuthorization] = js.undefined
    
    /**
      * Callbacks for the events emitted by the payment session when a user selects options in the payment sheet.
      */
    var callbacks: js.UndefOr[OnPaymentAuthorized] = js.undefined
    
    /**
      * Your ISO 3166 country code (ex: ‘US’). This is your country code as the merchant. Required if not
      * set in `options.paymentRequest.countryCode`.
      */
    var country: js.UndefOr[String] = js.undefined
    
    /**
      * ISO 4217 purchase currency (ex: ‘USD’). Required if not set in `options.paymentRequest.currencyCode`.
      */
    var currency: js.UndefOr[String] = js.undefined
    
    /**
      * If `requiredShippingContactFields` is specified, validate that the browser supports the minimum version required for that option.
      */
    var enforceVersion: js.UndefOr[Boolean] = js.undefined
    
    /**
      * If provided, tokens generated by the `recurly.ApplePay` instance will include customer billing address from the
      * form, overriding any billing address gathered from Apple Pay.
      *
      * See {@link https://developers.recurly.com/reference/recurly-js/index.html#getting-a-token|Getting a Token} for all
      * compatible fields.
      */
    var form: js.UndefOr[HTMLFormElement] = js.undefined
    
    /**
      * `options.pricing` line item descriptions to display in the Apple Pay payment sheet.
      */
    var i18n: js.UndefOr[I18n] = js.undefined
    
    /**
      * Purchase description to display in the Apple Pay payment sheet.
      */
    var label: js.UndefOr[String] = js.undefined
    
    /**
      * The request for a payment.
      */
    var paymentRequest: js.UndefOr[ApplePayPaymentRequest] = js.undefined
    
    /**
      * If provided, will override `options.total` and provide the current total price on the CheckoutPricing instance
      * when the Apple Pay flow is initiated.
      */
    var pricing: js.UndefOr[CheckoutPricingInstance | CheckoutPricingPromise] = js.undefined
    
    /**
      * Display the recurring payment request on a monthly cadence
      */
    var recurring: js.UndefOr[Boolean] = js.undefined
    
    /**
      * If set, the apple flow will require the user to provide these attributes.
      * See docs here: https://recurly.com/developers/reference/recurly-js/#apple-pay
      * @deprecated use paymentRequest.requiredShippingContactFields field instead
      */
    var requiredShippingContactFields: js.UndefOr[js.Array[ApplePayContactField]] = js.undefined
    
    /**
      * Total cost to display in the Apple Pay payment sheet. Defaults to '0'.
      */
    var total: js.UndefOr[String] = js.undefined
  }
  object ApplePayConfig {
    
    inline def apply(): ApplePayConfig = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[ApplePayConfig]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: ApplePayConfig] (val x: Self) extends AnyVal {
      
      inline def setBraintree(value: ClientAuthorization): Self = StObject.set(x, "braintree", value.asInstanceOf[js.Any])
      
      inline def setBraintreeUndefined: Self = StObject.set(x, "braintree", js.undefined)
      
      inline def setCallbacks(value: OnPaymentAuthorized): Self = StObject.set(x, "callbacks", value.asInstanceOf[js.Any])
      
      inline def setCallbacksUndefined: Self = StObject.set(x, "callbacks", js.undefined)
      
      inline def setCountry(value: String): Self = StObject.set(x, "country", value.asInstanceOf[js.Any])
      
      inline def setCountryUndefined: Self = StObject.set(x, "country", js.undefined)
      
      inline def setCurrency(value: String): Self = StObject.set(x, "currency", value.asInstanceOf[js.Any])
      
      inline def setCurrencyUndefined: Self = StObject.set(x, "currency", js.undefined)
      
      inline def setEnforceVersion(value: Boolean): Self = StObject.set(x, "enforceVersion", value.asInstanceOf[js.Any])
      
      inline def setEnforceVersionUndefined: Self = StObject.set(x, "enforceVersion", js.undefined)
      
      inline def setForm(value: HTMLFormElement): Self = StObject.set(x, "form", value.asInstanceOf[js.Any])
      
      inline def setFormUndefined: Self = StObject.set(x, "form", js.undefined)
      
      inline def setI18n(value: I18n): Self = StObject.set(x, "i18n", value.asInstanceOf[js.Any])
      
      inline def setI18nUndefined: Self = StObject.set(x, "i18n", js.undefined)
      
      inline def setLabel(value: String): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      inline def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      inline def setPaymentRequest(value: ApplePayPaymentRequest): Self = StObject.set(x, "paymentRequest", value.asInstanceOf[js.Any])
      
      inline def setPaymentRequestUndefined: Self = StObject.set(x, "paymentRequest", js.undefined)
      
      inline def setPricing(value: CheckoutPricingInstance | CheckoutPricingPromise): Self = StObject.set(x, "pricing", value.asInstanceOf[js.Any])
      
      inline def setPricingUndefined: Self = StObject.set(x, "pricing", js.undefined)
      
      inline def setRecurring(value: Boolean): Self = StObject.set(x, "recurring", value.asInstanceOf[js.Any])
      
      inline def setRecurringUndefined: Self = StObject.set(x, "recurring", js.undefined)
      
      inline def setRequiredShippingContactFields(value: js.Array[ApplePayContactField]): Self = StObject.set(x, "requiredShippingContactFields", value.asInstanceOf[js.Any])
      
      inline def setRequiredShippingContactFieldsUndefined: Self = StObject.set(x, "requiredShippingContactFields", js.undefined)
      
      inline def setRequiredShippingContactFieldsVarargs(value: ApplePayContactField*): Self = StObject.set(x, "requiredShippingContactFields", js.Array(value*))
      
      inline def setTotal(value: String): Self = StObject.set(x, "total", value.asInstanceOf[js.Any])
      
      inline def setTotalUndefined: Self = StObject.set(x, "total", js.undefined)
    }
  }
  
  /* Rewritten from type alias, can be one of: 
    - typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.token
    - typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.error
    - typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.ready
    - typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingContactSelected
    - typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.paymentAuthorized
    - typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingMethodSelected
    - typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.cancel
  */
  trait ApplePayEvent extends StObject
  object ApplePayEvent {
    
    inline def cancel: typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.cancel = "cancel".asInstanceOf[typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.cancel]
    
    inline def error: typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.error = "error".asInstanceOf[typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.error]
    
    inline def paymentAuthorized: typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.paymentAuthorized = "paymentAuthorized".asInstanceOf[typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.paymentAuthorized]
    
    inline def ready: typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.ready = "ready".asInstanceOf[typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.ready]
    
    inline def shippingContactSelected: typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingContactSelected = "shippingContactSelected".asInstanceOf[typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingContactSelected]
    
    inline def shippingMethodSelected: typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingMethodSelected = "shippingMethodSelected".asInstanceOf[typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.shippingMethodSelected]
    
    inline def token: typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.token = "token".asInstanceOf[typings.recurlyRecurlyJs.recurlyRecurlyJsStrings.token]
  }
  
  @js.native
  trait ApplePayInstance
    extends StObject
       with Emitter[ApplePayEvent] {
    
    def begin(): Unit = js.native
    def begin(cb: VoidFunction): Unit = js.native
    
    /**
      * @see {@link https://developers.recurly.com/reference/recurly-js/index.html#fn-applepayready|ApplePay.ready}
      */
    def ready(): Unit = js.native
    def ready(cb: VoidFunction): Unit = js.native
  }
  
  trait I18n extends StObject {
    
    /**
      * The short, localized description of the discount line item
      */
    var discountLineItemLabel: String
    
    /**
      * The short, localized description of the gift card line item
      */
    var giftCardLineItemLabel: String
    
    /**
      * The short, localized description of the subtotal line item
      */
    var subtotalLineItemLabel: String
    
    /**
      * The short, localized description of the tax line item
      */
    var taxLineItemLabel: String
    
    /**
      * The short, localized description of the total line item
      */
    var totalLineItemLabel: String
  }
  object I18n {
    
    inline def apply(
      discountLineItemLabel: String,
      giftCardLineItemLabel: String,
      subtotalLineItemLabel: String,
      taxLineItemLabel: String,
      totalLineItemLabel: String
    ): I18n = {
      val __obj = js.Dynamic.literal(discountLineItemLabel = discountLineItemLabel.asInstanceOf[js.Any], giftCardLineItemLabel = giftCardLineItemLabel.asInstanceOf[js.Any], subtotalLineItemLabel = subtotalLineItemLabel.asInstanceOf[js.Any], taxLineItemLabel = taxLineItemLabel.asInstanceOf[js.Any], totalLineItemLabel = totalLineItemLabel.asInstanceOf[js.Any])
      __obj.asInstanceOf[I18n]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: I18n] (val x: Self) extends AnyVal {
      
      inline def setDiscountLineItemLabel(value: String): Self = StObject.set(x, "discountLineItemLabel", value.asInstanceOf[js.Any])
      
      inline def setGiftCardLineItemLabel(value: String): Self = StObject.set(x, "giftCardLineItemLabel", value.asInstanceOf[js.Any])
      
      inline def setSubtotalLineItemLabel(value: String): Self = StObject.set(x, "subtotalLineItemLabel", value.asInstanceOf[js.Any])
      
      inline def setTaxLineItemLabel(value: String): Self = StObject.set(x, "taxLineItemLabel", value.asInstanceOf[js.Any])
      
      inline def setTotalLineItemLabel(value: String): Self = StObject.set(x, "totalLineItemLabel", value.asInstanceOf[js.Any])
    }
  }
}
