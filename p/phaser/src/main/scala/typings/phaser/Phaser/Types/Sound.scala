package typings.phaser.Phaser.Types

import typings.phaser.Phaser.Sound.BaseSound
import typings.phaser.Phaser.Sound.BaseSoundManager
import typings.phaser.Phaser.Types.Math.Vector2Like
import typings.phaser.phaserStrings.HRTF
import typings.phaser.phaserStrings.equalpower
import typings.phaser.phaserStrings.exponential
import typings.phaser.phaserStrings.inverse
import typings.phaser.phaserStrings.linear
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object Sound {
  
  /**
    * Audio sprite sound type.
    */
  trait AudioSpriteSound extends StObject {
    
    /**
      * Local reference to 'spritemap' object form json file generated by audiosprite tool.
      */
    var spritemap: js.Object
  }
  object AudioSpriteSound {
    
    inline def apply(spritemap: js.Object): AudioSpriteSound = {
      val __obj = js.Dynamic.literal(spritemap = spritemap.asInstanceOf[js.Any])
      __obj.asInstanceOf[AudioSpriteSound]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: AudioSpriteSound] (val x: Self) extends AnyVal {
      
      inline def setSpritemap(value: js.Object): Self = StObject.set(x, "spritemap", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * A Audio Data object.
    * 
    * You can pass an array of these objects to the WebAudioSoundManager `decodeAudio` method to have it decode
    * them all at once.
    */
  trait DecodeAudioConfig extends StObject {
    
    /**
      * The audio data, either a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.
      */
    var data: js.typedarray.ArrayBuffer | String
    
    /**
      * The string-based key to be used to reference the decoded audio in the audio cache.
      */
    var key: String
  }
  object DecodeAudioConfig {
    
    inline def apply(data: js.typedarray.ArrayBuffer | String, key: String): DecodeAudioConfig = {
      val __obj = js.Dynamic.literal(data = data.asInstanceOf[js.Any], key = key.asInstanceOf[js.Any])
      __obj.asInstanceOf[DecodeAudioConfig]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: DecodeAudioConfig] (val x: Self) extends AnyVal {
      
      inline def setData(value: js.typedarray.ArrayBuffer | String): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      inline def setKey(value: String): Self = StObject.set(x, "key", value.asInstanceOf[js.Any])
    }
  }
  
  type EachActiveSoundCallback = js.Function4[
    /* manager */ BaseSoundManager, 
    /* sound */ BaseSound, 
    /* index */ Double, 
    /* sounds */ js.Array[BaseSound], 
    Unit
  ]
  
  /**
    * Config object containing various sound settings.
    */
  trait SoundConfig extends StObject {
    
    /**
      * Time, in seconds, that should elapse before the sound actually starts its playback.
      */
    var delay: js.UndefOr[Double] = js.undefined
    
    /**
      * Represents detuning of sound in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).
      */
    var detune: js.UndefOr[Double] = js.undefined
    
    /**
      * Whether or not the sound or current sound marker should loop.
      */
    var loop: js.UndefOr[Boolean] = js.undefined
    
    /**
      * Boolean indicating whether the sound should be muted or not.
      */
    var mute: js.UndefOr[Boolean] = js.undefined
    
    /**
      * A value between -1 (full left pan) and 1 (full right pan). 0 means no pan.
      */
    var pan: js.UndefOr[Double] = js.undefined
    
    /**
      * Defines the speed at which the sound should be played.
      */
    var rate: js.UndefOr[Double] = js.undefined
    
    /**
      * Position of playback for this sound, in seconds.
      */
    var seek: js.UndefOr[Double] = js.undefined
    
    /**
      * An optional config object containing default spatial sound settings.
      */
    var source: js.UndefOr[SpatialSoundConfig] = js.undefined
    
    /**
      * A value between 0 (silence) and 1 (full volume).
      */
    var volume: js.UndefOr[Double] = js.undefined
  }
  object SoundConfig {
    
    inline def apply(): SoundConfig = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SoundConfig]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: SoundConfig] (val x: Self) extends AnyVal {
      
      inline def setDelay(value: Double): Self = StObject.set(x, "delay", value.asInstanceOf[js.Any])
      
      inline def setDelayUndefined: Self = StObject.set(x, "delay", js.undefined)
      
      inline def setDetune(value: Double): Self = StObject.set(x, "detune", value.asInstanceOf[js.Any])
      
      inline def setDetuneUndefined: Self = StObject.set(x, "detune", js.undefined)
      
      inline def setLoop(value: Boolean): Self = StObject.set(x, "loop", value.asInstanceOf[js.Any])
      
      inline def setLoopUndefined: Self = StObject.set(x, "loop", js.undefined)
      
      inline def setMute(value: Boolean): Self = StObject.set(x, "mute", value.asInstanceOf[js.Any])
      
      inline def setMuteUndefined: Self = StObject.set(x, "mute", js.undefined)
      
      inline def setPan(value: Double): Self = StObject.set(x, "pan", value.asInstanceOf[js.Any])
      
      inline def setPanUndefined: Self = StObject.set(x, "pan", js.undefined)
      
      inline def setRate(value: Double): Self = StObject.set(x, "rate", value.asInstanceOf[js.Any])
      
      inline def setRateUndefined: Self = StObject.set(x, "rate", js.undefined)
      
      inline def setSeek(value: Double): Self = StObject.set(x, "seek", value.asInstanceOf[js.Any])
      
      inline def setSeekUndefined: Self = StObject.set(x, "seek", js.undefined)
      
      inline def setSource(value: SpatialSoundConfig): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
      
      inline def setSourceUndefined: Self = StObject.set(x, "source", js.undefined)
      
      inline def setVolume(value: Double): Self = StObject.set(x, "volume", value.asInstanceOf[js.Any])
      
      inline def setVolumeUndefined: Self = StObject.set(x, "volume", js.undefined)
    }
  }
  
  /**
    * Marked section of a sound represented by name, and optionally start time, duration, and config object.
    */
  trait SoundMarker extends StObject {
    
    /**
      * An optional config object containing default marker settings.
      */
    var config: js.UndefOr[SoundConfig] = js.undefined
    
    /**
      * Playback duration of this marker.
      */
    var duration: js.UndefOr[Double] = js.undefined
    
    /**
      * Unique identifier of a sound marker.
      */
    var name: String
    
    /**
      * Sound position offset at witch playback should start.
      */
    var start: js.UndefOr[Double] = js.undefined
  }
  object SoundMarker {
    
    inline def apply(name: String): SoundMarker = {
      val __obj = js.Dynamic.literal(name = name.asInstanceOf[js.Any])
      __obj.asInstanceOf[SoundMarker]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: SoundMarker] (val x: Self) extends AnyVal {
      
      inline def setConfig(value: SoundConfig): Self = StObject.set(x, "config", value.asInstanceOf[js.Any])
      
      inline def setConfigUndefined: Self = StObject.set(x, "config", js.undefined)
      
      inline def setDuration(value: Double): Self = StObject.set(x, "duration", value.asInstanceOf[js.Any])
      
      inline def setDurationUndefined: Self = StObject.set(x, "duration", js.undefined)
      
      inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      inline def setStart(value: Double): Self = StObject.set(x, "start", value.asInstanceOf[js.Any])
      
      inline def setStartUndefined: Self = StObject.set(x, "start", js.undefined)
    }
  }
  
  /**
    * Config object containing settings for the source of the spatial sound.
    * 
    * See https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Web_audio_spatialization_basics
    */
  trait SpatialSoundConfig extends StObject {
    
    /**
      * The angle, in degrees, of a cone inside of which there will be no volume reduction.
      */
    var coneInnerAngle: js.UndefOr[Double] = js.undefined
    
    /**
      * The angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` property.
      */
    var coneOuterAngle: js.UndefOr[Double] = js.undefined
    
    /**
      * The amount of volume reduction outside the cone defined by the `coneOuterAngle` attribute. Its default value is 0, meaning that no sound can be heard. A value between 0 and 1.
      */
    var coneOuterGain: js.UndefOr[Double] = js.undefined
    
    /**
      * Which algorithm to use to reduce the volume of the audio source as it moves away from the listener. Possible values are "linear", "inverse" and "exponential". The default value is "inverse".
      */
    var distanceModel: js.UndefOr[linear | inverse | exponential] = js.undefined
    
    /**
      * Set this Sound object to automatically track the x/y position of this object. Can be a Phaser Game Object, Vec2 or anything that exposes public x/y properties.
      */
    var follow: js.UndefOr[Vector2Like] = js.undefined
    
    /**
      * The maximum distance between the audio source and the listener, after which the volume is not reduced any further.
      */
    var maxDistance: js.UndefOr[Double] = js.undefined
    
    /**
      * The horizontal position of the audio source's vector in a right-hand Cartesian coordinate system.
      */
    var orientationX: js.UndefOr[Double] = js.undefined
    
    /**
      * The vertical position of the audio source's vector in a right-hand Cartesian coordinate system.
      */
    var orientationY: js.UndefOr[Double] = js.undefined
    
    /**
      * Represents the longitudinal (back and forth) position of the audio source's vector in a right-hand Cartesian coordinate system.
      */
    var orientationZ: js.UndefOr[Double] = js.undefined
    
    /**
      * An enumerated value determining which spatialization algorithm to use to position the audio in 3D space.
      */
    var panningModel: js.UndefOr[equalpower | HRTF] = js.undefined
    
    /**
      * A double value representing the reference distance for reducing volume as the audio source moves further from the listener. For distances greater than this the volume will be reduced based on `rolloffFactor` and `distanceModel`.
      */
    var refDistance: js.UndefOr[Double] = js.undefined
    
    /**
      * A double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.
      */
    var rolloffFactor: js.UndefOr[Double] = js.undefined
    
    /**
      * The horizontal position of the audio in a right-hand Cartesian coordinate system.
      */
    var x: js.UndefOr[Double] = js.undefined
    
    /**
      * The vertical position of the audio in a right-hand Cartesian coordinate system.
      */
    var y: js.UndefOr[Double] = js.undefined
    
    /**
      * Represents the longitudinal (back and forth) position of the audio in a right-hand Cartesian coordinate system.
      */
    var z: js.UndefOr[Double] = js.undefined
  }
  object SpatialSoundConfig {
    
    inline def apply(): SpatialSoundConfig = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SpatialSoundConfig]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: SpatialSoundConfig] (val x: Self) extends AnyVal {
      
      inline def setConeInnerAngle(value: Double): Self = StObject.set(x, "coneInnerAngle", value.asInstanceOf[js.Any])
      
      inline def setConeInnerAngleUndefined: Self = StObject.set(x, "coneInnerAngle", js.undefined)
      
      inline def setConeOuterAngle(value: Double): Self = StObject.set(x, "coneOuterAngle", value.asInstanceOf[js.Any])
      
      inline def setConeOuterAngleUndefined: Self = StObject.set(x, "coneOuterAngle", js.undefined)
      
      inline def setConeOuterGain(value: Double): Self = StObject.set(x, "coneOuterGain", value.asInstanceOf[js.Any])
      
      inline def setConeOuterGainUndefined: Self = StObject.set(x, "coneOuterGain", js.undefined)
      
      inline def setDistanceModel(value: linear | inverse | exponential): Self = StObject.set(x, "distanceModel", value.asInstanceOf[js.Any])
      
      inline def setDistanceModelUndefined: Self = StObject.set(x, "distanceModel", js.undefined)
      
      inline def setFollow(value: Vector2Like): Self = StObject.set(x, "follow", value.asInstanceOf[js.Any])
      
      inline def setFollowUndefined: Self = StObject.set(x, "follow", js.undefined)
      
      inline def setMaxDistance(value: Double): Self = StObject.set(x, "maxDistance", value.asInstanceOf[js.Any])
      
      inline def setMaxDistanceUndefined: Self = StObject.set(x, "maxDistance", js.undefined)
      
      inline def setOrientationX(value: Double): Self = StObject.set(x, "orientationX", value.asInstanceOf[js.Any])
      
      inline def setOrientationXUndefined: Self = StObject.set(x, "orientationX", js.undefined)
      
      inline def setOrientationY(value: Double): Self = StObject.set(x, "orientationY", value.asInstanceOf[js.Any])
      
      inline def setOrientationYUndefined: Self = StObject.set(x, "orientationY", js.undefined)
      
      inline def setOrientationZ(value: Double): Self = StObject.set(x, "orientationZ", value.asInstanceOf[js.Any])
      
      inline def setOrientationZUndefined: Self = StObject.set(x, "orientationZ", js.undefined)
      
      inline def setPanningModel(value: equalpower | HRTF): Self = StObject.set(x, "panningModel", value.asInstanceOf[js.Any])
      
      inline def setPanningModelUndefined: Self = StObject.set(x, "panningModel", js.undefined)
      
      inline def setRefDistance(value: Double): Self = StObject.set(x, "refDistance", value.asInstanceOf[js.Any])
      
      inline def setRefDistanceUndefined: Self = StObject.set(x, "refDistance", js.undefined)
      
      inline def setRolloffFactor(value: Double): Self = StObject.set(x, "rolloffFactor", value.asInstanceOf[js.Any])
      
      inline def setRolloffFactorUndefined: Self = StObject.set(x, "rolloffFactor", js.undefined)
      
      inline def setX(value: Double): Self = StObject.set(x, "x", value.asInstanceOf[js.Any])
      
      inline def setXUndefined: Self = StObject.set(x, "x", js.undefined)
      
      inline def setY(value: Double): Self = StObject.set(x, "y", value.asInstanceOf[js.Any])
      
      inline def setYUndefined: Self = StObject.set(x, "y", js.undefined)
      
      inline def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      inline def setZUndefined: Self = StObject.set(x, "z", js.undefined)
    }
  }
  
  /**
    * An entry in the Web Audio Decoding Queue.
    */
  trait WebAudioDecodeEntry extends StObject {
    
    /**
      * Has the decoding of this sound file started?
      */
    var decoding: Boolean
    
    /**
      * The callback to invoke if the decoding fails.
      */
    var failure: js.Function
    
    /**
      * The key of the sound.
      */
    var key: String
    
    /**
      * The callback to invoke on successful decoding.
      */
    var success: js.Function
  }
  object WebAudioDecodeEntry {
    
    inline def apply(decoding: Boolean, failure: js.Function, key: String, success: js.Function): WebAudioDecodeEntry = {
      val __obj = js.Dynamic.literal(decoding = decoding.asInstanceOf[js.Any], failure = failure.asInstanceOf[js.Any], key = key.asInstanceOf[js.Any], success = success.asInstanceOf[js.Any])
      __obj.asInstanceOf[WebAudioDecodeEntry]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: WebAudioDecodeEntry] (val x: Self) extends AnyVal {
      
      inline def setDecoding(value: Boolean): Self = StObject.set(x, "decoding", value.asInstanceOf[js.Any])
      
      inline def setFailure(value: js.Function): Self = StObject.set(x, "failure", value.asInstanceOf[js.Any])
      
      inline def setKey(value: String): Self = StObject.set(x, "key", value.asInstanceOf[js.Any])
      
      inline def setSuccess(value: js.Function): Self = StObject.set(x, "success", value.asInstanceOf[js.Any])
    }
  }
}
