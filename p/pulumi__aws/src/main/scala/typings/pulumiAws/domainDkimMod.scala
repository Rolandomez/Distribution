package typings.pulumiAws

import typings.pulumiPulumi.mod.CustomResource
import typings.pulumiPulumi.outputMod.Input
import typings.pulumiPulumi.outputMod.Output_
import typings.pulumiPulumi.resourceMod.CustomResourceOptions
import typings.pulumiPulumi.resourceMod.ID
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object domainDkimMod {
  
  @JSImport("@pulumi/aws/ses/domainDkim", "DomainDkim")
  @js.native
  class DomainDkim protected () extends CustomResource {
    /**
      * Create a DomainDkim resource with the given unique name, arguments, and options.
      *
      * @param name The _unique_ name of the resource.
      * @param args The arguments to use to populate this resource's properties.
      * @param opts A bag of options that control this resource's behavior.
      */
    def this(name: String, args: DomainDkimArgs) = this()
    def this(name: String, args: DomainDkimArgs, opts: CustomResourceOptions) = this()
    
    /**
      * DKIM tokens generated by SES.
      * These tokens should be used to create CNAME records used to verify SES Easy DKIM.
      * See below for an example of how this might be achieved
      * when the domain is hosted in Route 53 and managed by this provider.
      * Find out more about verifying domains in Amazon SES
      * in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).
      */
    val dkimTokens: Output_[js.Array[String]] = js.native
    
    /**
      * Verified domain name to generate DKIM tokens for.
      */
    val domain: Output_[String] = js.native
  }
  /* static members */
  object DomainDkim {
    
    @JSImport("@pulumi/aws/ses/domainDkim", "DomainDkim")
    @js.native
    val ^ : js.Any = js.native
    
    /**
      * Get an existing DomainDkim resource's state with the given name, ID, and optional extra
      * properties used to qualify the lookup.
      *
      * @param name The _unique_ name of the resulting resource.
      * @param id The _unique_ provider ID of the resource to lookup.
      * @param state Any extra arguments used during the lookup.
      * @param opts Optional settings to control the behavior of the CustomResource.
      */
    @scala.inline
    def get(name: String, id: Input[ID]): DomainDkim = (^.asInstanceOf[js.Dynamic].applyDynamic("get")(name.asInstanceOf[js.Any], id.asInstanceOf[js.Any])).asInstanceOf[DomainDkim]
    @scala.inline
    def get(name: String, id: Input[ID], state: Unit, opts: CustomResourceOptions): DomainDkim = (^.asInstanceOf[js.Dynamic].applyDynamic("get")(name.asInstanceOf[js.Any], id.asInstanceOf[js.Any], state.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[DomainDkim]
    @scala.inline
    def get(name: String, id: Input[ID], state: DomainDkimState): DomainDkim = (^.asInstanceOf[js.Dynamic].applyDynamic("get")(name.asInstanceOf[js.Any], id.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[DomainDkim]
    @scala.inline
    def get(name: String, id: Input[ID], state: DomainDkimState, opts: CustomResourceOptions): DomainDkim = (^.asInstanceOf[js.Dynamic].applyDynamic("get")(name.asInstanceOf[js.Any], id.asInstanceOf[js.Any], state.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[DomainDkim]
    
    /**
      * Returns true if the given object is an instance of DomainDkim.  This is designed to work even
      * when multiple copies of the Pulumi SDK have been loaded into the same process.
      */
    @scala.inline
    def isInstance(obj: js.Any): /* is @pulumi/aws.@pulumi/aws/ses/domainDkim.DomainDkim */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInstance")(obj.asInstanceOf[js.Any]).asInstanceOf[/* is @pulumi/aws.@pulumi/aws/ses/domainDkim.DomainDkim */ Boolean]
  }
  
  trait DomainDkimArgs extends StObject {
    
    /**
      * Verified domain name to generate DKIM tokens for.
      */
    val domain: Input[String]
  }
  object DomainDkimArgs {
    
    @scala.inline
    def apply(domain: Input[String]): DomainDkimArgs = {
      val __obj = js.Dynamic.literal(domain = domain.asInstanceOf[js.Any])
      __obj.asInstanceOf[DomainDkimArgs]
    }
    
    @scala.inline
    implicit class DomainDkimArgsMutableBuilder[Self <: DomainDkimArgs] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setDomain(value: Input[String]): Self = StObject.set(x, "domain", value.asInstanceOf[js.Any])
    }
  }
  
  trait DomainDkimState extends StObject {
    
    /**
      * DKIM tokens generated by SES.
      * These tokens should be used to create CNAME records used to verify SES Easy DKIM.
      * See below for an example of how this might be achieved
      * when the domain is hosted in Route 53 and managed by this provider.
      * Find out more about verifying domains in Amazon SES
      * in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).
      */
    val dkimTokens: js.UndefOr[Input[js.Array[Input[String]]]] = js.undefined
    
    /**
      * Verified domain name to generate DKIM tokens for.
      */
    val domain: js.UndefOr[Input[String]] = js.undefined
  }
  object DomainDkimState {
    
    @scala.inline
    def apply(): DomainDkimState = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[DomainDkimState]
    }
    
    @scala.inline
    implicit class DomainDkimStateMutableBuilder[Self <: DomainDkimState] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setDkimTokens(value: Input[js.Array[Input[String]]]): Self = StObject.set(x, "dkimTokens", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDkimTokensUndefined: Self = StObject.set(x, "dkimTokens", js.undefined)
      
      @scala.inline
      def setDkimTokensVarargs(value: Input[String]*): Self = StObject.set(x, "dkimTokens", js.Array(value :_*))
      
      @scala.inline
      def setDomain(value: Input[String]): Self = StObject.set(x, "domain", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainUndefined: Self = StObject.set(x, "domain", js.undefined)
    }
  }
}
