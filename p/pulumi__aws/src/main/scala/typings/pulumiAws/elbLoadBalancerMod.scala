package typings.pulumiAws

import org.scalablytyped.runtime.StringDictionary
import typings.pulumiAws.outputMod.elb.LoadBalancerAccessLogs
import typings.pulumiAws.outputMod.elb.LoadBalancerHealthCheck
import typings.pulumiAws.outputMod.elb.LoadBalancerListener
import typings.pulumiPulumi.mod.CustomResource
import typings.pulumiPulumi.outputMod.Input
import typings.pulumiPulumi.outputMod.Output_
import typings.pulumiPulumi.resourceMod.CustomResourceOptions
import typings.pulumiPulumi.resourceMod.ID
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object elbLoadBalancerMod {
  
  @JSImport("@pulumi/aws/elb/loadBalancer", "LoadBalancer")
  @js.native
  class LoadBalancer protected () extends CustomResource {
    /**
      * Create a LoadBalancer resource with the given unique name, arguments, and options.
      *
      * @param name The _unique_ name of the resource.
      * @param args The arguments to use to populate this resource's properties.
      * @param opts A bag of options that control this resource's behavior.
      */
    def this(name: String, args: LoadBalancerArgs) = this()
    def this(name: String, args: LoadBalancerArgs, opts: CustomResourceOptions) = this()
    
    /**
      * An Access Logs block. Access Logs documented below.
      */
    val accessLogs: Output_[js.UndefOr[LoadBalancerAccessLogs]] = js.native
    
    /**
      * The ARN of the ELB
      */
    val arn: Output_[String] = js.native
    
    /**
      * The AZ's to serve traffic in.
      */
    val availabilityZones: Output_[js.Array[String]] = js.native
    
    /**
      * Boolean to enable connection draining. Default: `false`
      */
    val connectionDraining: Output_[js.UndefOr[Boolean]] = js.native
    
    /**
      * The time in seconds to allow for connections to drain. Default: `300`
      */
    val connectionDrainingTimeout: Output_[js.UndefOr[Double]] = js.native
    
    /**
      * Enable cross-zone load balancing. Default: `true`
      */
    val crossZoneLoadBalancing: Output_[js.UndefOr[Boolean]] = js.native
    
    /**
      * The DNS name of the ELB
      */
    val dnsName: Output_[String] = js.native
    
    /**
      * A healthCheck block. Health Check documented below.
      */
    val healthCheck: Output_[LoadBalancerHealthCheck] = js.native
    
    /**
      * The time in seconds that the connection is allowed to be idle. Default: `60`
      */
    val idleTimeout: Output_[js.UndefOr[Double]] = js.native
    
    /**
      * A list of instance ids to place in the ELB pool.
      */
    val instances: Output_[js.Array[String]] = js.native
    
    /**
      * If true, ELB will be an internal ELB.
      */
    val internal: Output_[Boolean] = js.native
    
    /**
      * A list of listener blocks. Listeners documented below.
      */
    val listeners: Output_[js.Array[LoadBalancerListener]] = js.native
    
    /**
      * The name of the ELB. By default generated by this provider.
      */
    val name: Output_[String] = js.native
    
    /**
      * Creates a unique name beginning with the specified
      * prefix. Conflicts with `name`.
      */
    val namePrefix: Output_[js.UndefOr[String]] = js.native
    
    /**
      * A list of security group IDs to assign to the ELB.
      * Only valid if creating an ELB within a VPC
      */
    val securityGroups: Output_[js.Array[String]] = js.native
    
    /**
      * The name of the security group that you can use as
      * part of your inbound rules for your load balancer's back-end application
      * instances. Use this for Classic or Default VPC only.
      */
    val sourceSecurityGroup: Output_[String] = js.native
    
    /**
      * The ID of the security group that you can use as
      * part of your inbound rules for your load balancer's back-end application
      * instances. Only available on ELBs launched in a VPC.
      */
    val sourceSecurityGroupId: Output_[String] = js.native
    
    /**
      * A list of subnet IDs to attach to the ELB.
      */
    val subnets: Output_[js.Array[String]] = js.native
    
    /**
      * A map of tags to assign to the resource.
      */
    val tags: Output_[js.UndefOr[StringDictionary[String]]] = js.native
    
    /**
      * The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
      */
    val zoneId: Output_[String] = js.native
  }
  /* static members */
  object LoadBalancer {
    
    @JSImport("@pulumi/aws/elb/loadBalancer", "LoadBalancer")
    @js.native
    val ^ : js.Any = js.native
    
    /**
      * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
      * properties used to qualify the lookup.
      *
      * @param name The _unique_ name of the resulting resource.
      * @param id The _unique_ provider ID of the resource to lookup.
      * @param state Any extra arguments used during the lookup.
      * @param opts Optional settings to control the behavior of the CustomResource.
      */
    inline def get(name: String, id: Input[ID]): LoadBalancer = (^.asInstanceOf[js.Dynamic].applyDynamic("get")(name.asInstanceOf[js.Any], id.asInstanceOf[js.Any])).asInstanceOf[LoadBalancer]
    inline def get(name: String, id: Input[ID], state: Unit, opts: CustomResourceOptions): LoadBalancer = (^.asInstanceOf[js.Dynamic].applyDynamic("get")(name.asInstanceOf[js.Any], id.asInstanceOf[js.Any], state.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[LoadBalancer]
    inline def get(name: String, id: Input[ID], state: LoadBalancerState): LoadBalancer = (^.asInstanceOf[js.Dynamic].applyDynamic("get")(name.asInstanceOf[js.Any], id.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[LoadBalancer]
    inline def get(name: String, id: Input[ID], state: LoadBalancerState, opts: CustomResourceOptions): LoadBalancer = (^.asInstanceOf[js.Dynamic].applyDynamic("get")(name.asInstanceOf[js.Any], id.asInstanceOf[js.Any], state.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[LoadBalancer]
    
    /**
      * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
      * when multiple copies of the Pulumi SDK have been loaded into the same process.
      */
    inline def isInstance(obj: js.Any): /* is @pulumi/aws.@pulumi/aws/elb/loadBalancer.LoadBalancer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInstance")(obj.asInstanceOf[js.Any]).asInstanceOf[/* is @pulumi/aws.@pulumi/aws/elb/loadBalancer.LoadBalancer */ Boolean]
  }
  
  trait LoadBalancerArgs extends StObject {
    
    /**
      * An Access Logs block. Access Logs documented below.
      */
    val accessLogs: js.UndefOr[Input[typings.pulumiAws.inputMod.elb.LoadBalancerAccessLogs]] = js.undefined
    
    /**
      * The AZ's to serve traffic in.
      */
    val availabilityZones: js.UndefOr[Input[js.Array[Input[String]]]] = js.undefined
    
    /**
      * Boolean to enable connection draining. Default: `false`
      */
    val connectionDraining: js.UndefOr[Input[Boolean]] = js.undefined
    
    /**
      * The time in seconds to allow for connections to drain. Default: `300`
      */
    val connectionDrainingTimeout: js.UndefOr[Input[Double]] = js.undefined
    
    /**
      * Enable cross-zone load balancing. Default: `true`
      */
    val crossZoneLoadBalancing: js.UndefOr[Input[Boolean]] = js.undefined
    
    /**
      * A healthCheck block. Health Check documented below.
      */
    val healthCheck: js.UndefOr[Input[typings.pulumiAws.inputMod.elb.LoadBalancerHealthCheck]] = js.undefined
    
    /**
      * The time in seconds that the connection is allowed to be idle. Default: `60`
      */
    val idleTimeout: js.UndefOr[Input[Double]] = js.undefined
    
    /**
      * A list of instance ids to place in the ELB pool.
      */
    val instances: js.UndefOr[Input[js.Array[Input[String]]]] = js.undefined
    
    /**
      * If true, ELB will be an internal ELB.
      */
    val internal: js.UndefOr[Input[Boolean]] = js.undefined
    
    /**
      * A list of listener blocks. Listeners documented below.
      */
    val listeners: Input[js.Array[Input[typings.pulumiAws.inputMod.elb.LoadBalancerListener]]]
    
    /**
      * The name of the ELB. By default generated by this provider.
      */
    val name: js.UndefOr[Input[String]] = js.undefined
    
    /**
      * Creates a unique name beginning with the specified
      * prefix. Conflicts with `name`.
      */
    val namePrefix: js.UndefOr[Input[String]] = js.undefined
    
    /**
      * A list of security group IDs to assign to the ELB.
      * Only valid if creating an ELB within a VPC
      */
    val securityGroups: js.UndefOr[Input[js.Array[Input[String]]]] = js.undefined
    
    /**
      * The name of the security group that you can use as
      * part of your inbound rules for your load balancer's back-end application
      * instances. Use this for Classic or Default VPC only.
      */
    val sourceSecurityGroup: js.UndefOr[Input[String]] = js.undefined
    
    /**
      * A list of subnet IDs to attach to the ELB.
      */
    val subnets: js.UndefOr[Input[js.Array[Input[String]]]] = js.undefined
    
    /**
      * A map of tags to assign to the resource.
      */
    val tags: js.UndefOr[Input[StringDictionary[Input[String]]]] = js.undefined
  }
  object LoadBalancerArgs {
    
    inline def apply(listeners: Input[js.Array[Input[typings.pulumiAws.inputMod.elb.LoadBalancerListener]]]): LoadBalancerArgs = {
      val __obj = js.Dynamic.literal(listeners = listeners.asInstanceOf[js.Any])
      __obj.asInstanceOf[LoadBalancerArgs]
    }
    
    extension [Self <: LoadBalancerArgs](x: Self) {
      
      inline def setAccessLogs(value: Input[typings.pulumiAws.inputMod.elb.LoadBalancerAccessLogs]): Self = StObject.set(x, "accessLogs", value.asInstanceOf[js.Any])
      
      inline def setAccessLogsUndefined: Self = StObject.set(x, "accessLogs", js.undefined)
      
      inline def setAvailabilityZones(value: Input[js.Array[Input[String]]]): Self = StObject.set(x, "availabilityZones", value.asInstanceOf[js.Any])
      
      inline def setAvailabilityZonesUndefined: Self = StObject.set(x, "availabilityZones", js.undefined)
      
      inline def setAvailabilityZonesVarargs(value: Input[String]*): Self = StObject.set(x, "availabilityZones", js.Array(value :_*))
      
      inline def setConnectionDraining(value: Input[Boolean]): Self = StObject.set(x, "connectionDraining", value.asInstanceOf[js.Any])
      
      inline def setConnectionDrainingTimeout(value: Input[Double]): Self = StObject.set(x, "connectionDrainingTimeout", value.asInstanceOf[js.Any])
      
      inline def setConnectionDrainingTimeoutUndefined: Self = StObject.set(x, "connectionDrainingTimeout", js.undefined)
      
      inline def setConnectionDrainingUndefined: Self = StObject.set(x, "connectionDraining", js.undefined)
      
      inline def setCrossZoneLoadBalancing(value: Input[Boolean]): Self = StObject.set(x, "crossZoneLoadBalancing", value.asInstanceOf[js.Any])
      
      inline def setCrossZoneLoadBalancingUndefined: Self = StObject.set(x, "crossZoneLoadBalancing", js.undefined)
      
      inline def setHealthCheck(value: Input[typings.pulumiAws.inputMod.elb.LoadBalancerHealthCheck]): Self = StObject.set(x, "healthCheck", value.asInstanceOf[js.Any])
      
      inline def setHealthCheckUndefined: Self = StObject.set(x, "healthCheck", js.undefined)
      
      inline def setIdleTimeout(value: Input[Double]): Self = StObject.set(x, "idleTimeout", value.asInstanceOf[js.Any])
      
      inline def setIdleTimeoutUndefined: Self = StObject.set(x, "idleTimeout", js.undefined)
      
      inline def setInstances(value: Input[js.Array[Input[String]]]): Self = StObject.set(x, "instances", value.asInstanceOf[js.Any])
      
      inline def setInstancesUndefined: Self = StObject.set(x, "instances", js.undefined)
      
      inline def setInstancesVarargs(value: Input[String]*): Self = StObject.set(x, "instances", js.Array(value :_*))
      
      inline def setInternal(value: Input[Boolean]): Self = StObject.set(x, "internal", value.asInstanceOf[js.Any])
      
      inline def setInternalUndefined: Self = StObject.set(x, "internal", js.undefined)
      
      inline def setListeners(value: Input[js.Array[Input[typings.pulumiAws.inputMod.elb.LoadBalancerListener]]]): Self = StObject.set(x, "listeners", value.asInstanceOf[js.Any])
      
      inline def setListenersVarargs(value: Input[typings.pulumiAws.inputMod.elb.LoadBalancerListener]*): Self = StObject.set(x, "listeners", js.Array(value :_*))
      
      inline def setName(value: Input[String]): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      inline def setNamePrefix(value: Input[String]): Self = StObject.set(x, "namePrefix", value.asInstanceOf[js.Any])
      
      inline def setNamePrefixUndefined: Self = StObject.set(x, "namePrefix", js.undefined)
      
      inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      inline def setSecurityGroups(value: Input[js.Array[Input[String]]]): Self = StObject.set(x, "securityGroups", value.asInstanceOf[js.Any])
      
      inline def setSecurityGroupsUndefined: Self = StObject.set(x, "securityGroups", js.undefined)
      
      inline def setSecurityGroupsVarargs(value: Input[String]*): Self = StObject.set(x, "securityGroups", js.Array(value :_*))
      
      inline def setSourceSecurityGroup(value: Input[String]): Self = StObject.set(x, "sourceSecurityGroup", value.asInstanceOf[js.Any])
      
      inline def setSourceSecurityGroupUndefined: Self = StObject.set(x, "sourceSecurityGroup", js.undefined)
      
      inline def setSubnets(value: Input[js.Array[Input[String]]]): Self = StObject.set(x, "subnets", value.asInstanceOf[js.Any])
      
      inline def setSubnetsUndefined: Self = StObject.set(x, "subnets", js.undefined)
      
      inline def setSubnetsVarargs(value: Input[String]*): Self = StObject.set(x, "subnets", js.Array(value :_*))
      
      inline def setTags(value: Input[StringDictionary[Input[String]]]): Self = StObject.set(x, "tags", value.asInstanceOf[js.Any])
      
      inline def setTagsUndefined: Self = StObject.set(x, "tags", js.undefined)
    }
  }
  
  trait LoadBalancerState extends StObject {
    
    /**
      * An Access Logs block. Access Logs documented below.
      */
    val accessLogs: js.UndefOr[Input[typings.pulumiAws.inputMod.elb.LoadBalancerAccessLogs]] = js.undefined
    
    /**
      * The ARN of the ELB
      */
    val arn: js.UndefOr[Input[String]] = js.undefined
    
    /**
      * The AZ's to serve traffic in.
      */
    val availabilityZones: js.UndefOr[Input[js.Array[Input[String]]]] = js.undefined
    
    /**
      * Boolean to enable connection draining. Default: `false`
      */
    val connectionDraining: js.UndefOr[Input[Boolean]] = js.undefined
    
    /**
      * The time in seconds to allow for connections to drain. Default: `300`
      */
    val connectionDrainingTimeout: js.UndefOr[Input[Double]] = js.undefined
    
    /**
      * Enable cross-zone load balancing. Default: `true`
      */
    val crossZoneLoadBalancing: js.UndefOr[Input[Boolean]] = js.undefined
    
    /**
      * The DNS name of the ELB
      */
    val dnsName: js.UndefOr[Input[String]] = js.undefined
    
    /**
      * A healthCheck block. Health Check documented below.
      */
    val healthCheck: js.UndefOr[Input[typings.pulumiAws.inputMod.elb.LoadBalancerHealthCheck]] = js.undefined
    
    /**
      * The time in seconds that the connection is allowed to be idle. Default: `60`
      */
    val idleTimeout: js.UndefOr[Input[Double]] = js.undefined
    
    /**
      * A list of instance ids to place in the ELB pool.
      */
    val instances: js.UndefOr[Input[js.Array[Input[String]]]] = js.undefined
    
    /**
      * If true, ELB will be an internal ELB.
      */
    val internal: js.UndefOr[Input[Boolean]] = js.undefined
    
    /**
      * A list of listener blocks. Listeners documented below.
      */
    val listeners: js.UndefOr[Input[js.Array[Input[typings.pulumiAws.inputMod.elb.LoadBalancerListener]]]] = js.undefined
    
    /**
      * The name of the ELB. By default generated by this provider.
      */
    val name: js.UndefOr[Input[String]] = js.undefined
    
    /**
      * Creates a unique name beginning with the specified
      * prefix. Conflicts with `name`.
      */
    val namePrefix: js.UndefOr[Input[String]] = js.undefined
    
    /**
      * A list of security group IDs to assign to the ELB.
      * Only valid if creating an ELB within a VPC
      */
    val securityGroups: js.UndefOr[Input[js.Array[Input[String]]]] = js.undefined
    
    /**
      * The name of the security group that you can use as
      * part of your inbound rules for your load balancer's back-end application
      * instances. Use this for Classic or Default VPC only.
      */
    val sourceSecurityGroup: js.UndefOr[Input[String]] = js.undefined
    
    /**
      * The ID of the security group that you can use as
      * part of your inbound rules for your load balancer's back-end application
      * instances. Only available on ELBs launched in a VPC.
      */
    val sourceSecurityGroupId: js.UndefOr[Input[String]] = js.undefined
    
    /**
      * A list of subnet IDs to attach to the ELB.
      */
    val subnets: js.UndefOr[Input[js.Array[Input[String]]]] = js.undefined
    
    /**
      * A map of tags to assign to the resource.
      */
    val tags: js.UndefOr[Input[StringDictionary[Input[String]]]] = js.undefined
    
    /**
      * The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
      */
    val zoneId: js.UndefOr[Input[String]] = js.undefined
  }
  object LoadBalancerState {
    
    inline def apply(): LoadBalancerState = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[LoadBalancerState]
    }
    
    extension [Self <: LoadBalancerState](x: Self) {
      
      inline def setAccessLogs(value: Input[typings.pulumiAws.inputMod.elb.LoadBalancerAccessLogs]): Self = StObject.set(x, "accessLogs", value.asInstanceOf[js.Any])
      
      inline def setAccessLogsUndefined: Self = StObject.set(x, "accessLogs", js.undefined)
      
      inline def setArn(value: Input[String]): Self = StObject.set(x, "arn", value.asInstanceOf[js.Any])
      
      inline def setArnUndefined: Self = StObject.set(x, "arn", js.undefined)
      
      inline def setAvailabilityZones(value: Input[js.Array[Input[String]]]): Self = StObject.set(x, "availabilityZones", value.asInstanceOf[js.Any])
      
      inline def setAvailabilityZonesUndefined: Self = StObject.set(x, "availabilityZones", js.undefined)
      
      inline def setAvailabilityZonesVarargs(value: Input[String]*): Self = StObject.set(x, "availabilityZones", js.Array(value :_*))
      
      inline def setConnectionDraining(value: Input[Boolean]): Self = StObject.set(x, "connectionDraining", value.asInstanceOf[js.Any])
      
      inline def setConnectionDrainingTimeout(value: Input[Double]): Self = StObject.set(x, "connectionDrainingTimeout", value.asInstanceOf[js.Any])
      
      inline def setConnectionDrainingTimeoutUndefined: Self = StObject.set(x, "connectionDrainingTimeout", js.undefined)
      
      inline def setConnectionDrainingUndefined: Self = StObject.set(x, "connectionDraining", js.undefined)
      
      inline def setCrossZoneLoadBalancing(value: Input[Boolean]): Self = StObject.set(x, "crossZoneLoadBalancing", value.asInstanceOf[js.Any])
      
      inline def setCrossZoneLoadBalancingUndefined: Self = StObject.set(x, "crossZoneLoadBalancing", js.undefined)
      
      inline def setDnsName(value: Input[String]): Self = StObject.set(x, "dnsName", value.asInstanceOf[js.Any])
      
      inline def setDnsNameUndefined: Self = StObject.set(x, "dnsName", js.undefined)
      
      inline def setHealthCheck(value: Input[typings.pulumiAws.inputMod.elb.LoadBalancerHealthCheck]): Self = StObject.set(x, "healthCheck", value.asInstanceOf[js.Any])
      
      inline def setHealthCheckUndefined: Self = StObject.set(x, "healthCheck", js.undefined)
      
      inline def setIdleTimeout(value: Input[Double]): Self = StObject.set(x, "idleTimeout", value.asInstanceOf[js.Any])
      
      inline def setIdleTimeoutUndefined: Self = StObject.set(x, "idleTimeout", js.undefined)
      
      inline def setInstances(value: Input[js.Array[Input[String]]]): Self = StObject.set(x, "instances", value.asInstanceOf[js.Any])
      
      inline def setInstancesUndefined: Self = StObject.set(x, "instances", js.undefined)
      
      inline def setInstancesVarargs(value: Input[String]*): Self = StObject.set(x, "instances", js.Array(value :_*))
      
      inline def setInternal(value: Input[Boolean]): Self = StObject.set(x, "internal", value.asInstanceOf[js.Any])
      
      inline def setInternalUndefined: Self = StObject.set(x, "internal", js.undefined)
      
      inline def setListeners(value: Input[js.Array[Input[typings.pulumiAws.inputMod.elb.LoadBalancerListener]]]): Self = StObject.set(x, "listeners", value.asInstanceOf[js.Any])
      
      inline def setListenersUndefined: Self = StObject.set(x, "listeners", js.undefined)
      
      inline def setListenersVarargs(value: Input[typings.pulumiAws.inputMod.elb.LoadBalancerListener]*): Self = StObject.set(x, "listeners", js.Array(value :_*))
      
      inline def setName(value: Input[String]): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      inline def setNamePrefix(value: Input[String]): Self = StObject.set(x, "namePrefix", value.asInstanceOf[js.Any])
      
      inline def setNamePrefixUndefined: Self = StObject.set(x, "namePrefix", js.undefined)
      
      inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      inline def setSecurityGroups(value: Input[js.Array[Input[String]]]): Self = StObject.set(x, "securityGroups", value.asInstanceOf[js.Any])
      
      inline def setSecurityGroupsUndefined: Self = StObject.set(x, "securityGroups", js.undefined)
      
      inline def setSecurityGroupsVarargs(value: Input[String]*): Self = StObject.set(x, "securityGroups", js.Array(value :_*))
      
      inline def setSourceSecurityGroup(value: Input[String]): Self = StObject.set(x, "sourceSecurityGroup", value.asInstanceOf[js.Any])
      
      inline def setSourceSecurityGroupId(value: Input[String]): Self = StObject.set(x, "sourceSecurityGroupId", value.asInstanceOf[js.Any])
      
      inline def setSourceSecurityGroupIdUndefined: Self = StObject.set(x, "sourceSecurityGroupId", js.undefined)
      
      inline def setSourceSecurityGroupUndefined: Self = StObject.set(x, "sourceSecurityGroup", js.undefined)
      
      inline def setSubnets(value: Input[js.Array[Input[String]]]): Self = StObject.set(x, "subnets", value.asInstanceOf[js.Any])
      
      inline def setSubnetsUndefined: Self = StObject.set(x, "subnets", js.undefined)
      
      inline def setSubnetsVarargs(value: Input[String]*): Self = StObject.set(x, "subnets", js.Array(value :_*))
      
      inline def setTags(value: Input[StringDictionary[Input[String]]]): Self = StObject.set(x, "tags", value.asInstanceOf[js.Any])
      
      inline def setTagsUndefined: Self = StObject.set(x, "tags", js.undefined)
      
      inline def setZoneId(value: Input[String]): Self = StObject.set(x, "zoneId", value.asInstanceOf[js.Any])
      
      inline def setZoneIdUndefined: Self = StObject.set(x, "zoneId", js.undefined)
    }
  }
}
