package typings.swiper

import typings.swiper.swiperOptionsMod.SwiperOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object swiperSvelteMod {
  
  /* import warning: RemoveDifficultInheritance.summarizeChanges 
  - Dropped / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SvelteComponentTyped<SwiperProps, {  swiper :CustomEvent<void>,   autoplayStart :CustomEvent<[swiper: SwiperClass]>,   autoplayStop :CustomEvent<[swiper: SwiperClass]>,   autoplayPause :CustomEvent<[swiper: SwiperClass]>,   autoplayResume :CustomEvent<[swiper: SwiperClass]>,   autoplay :CustomEvent<[swiper: SwiperClass]>,   hashChange :CustomEvent<[swiper: SwiperClass]>,   hashSet :CustomEvent<[swiper: SwiperClass]>,   keyPress :CustomEvent<[swiper: SwiperClass, keyCode: string]>,   lazyImageLoad :CustomEvent<[swiper: SwiperClass, slideEl: HTMLElement, imageEl: HTMLElement]>,   lazyImageReady :CustomEvent<[swiper: SwiperClass, slideEl: HTMLElement, imageEl: HTMLElement]>,   scroll :CustomEvent<[swiper: SwiperClass, event: WheelEvent]>,   navigationHide :CustomEvent<[swiper: SwiperClass]>,   navigationShow :CustomEvent<[swiper: SwiperClass]>,   navigationPrev :CustomEvent<[swiper: SwiperClass]>,   navigationNext :CustomEvent<[swiper: SwiperClass]>,   paginationRender :CustomEvent<[swiper: SwiperClass, paginationEl: HTMLElement]>,   paginationUpdate :CustomEvent<[swiper: SwiperClass, paginationEl: HTMLElement]>,   paginationHide :CustomEvent<[swiper: SwiperClass]>,   paginationShow :CustomEvent<[swiper: SwiperClass]>,   scrollbarDragStart :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   scrollbarDragMove :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   scrollbarDragEnd :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   zoomChange :CustomEvent<[swiper: SwiperClass, scale: number, imageEl: HTMLElement, slideEl: HTMLElement]>,   init :CustomEvent<[swiper: SwiperClass]>,   beforeDestroy :CustomEvent<[swiper: SwiperClass]>,   slideChange :CustomEvent<[swiper: SwiperClass]>,   slideChangeTransitionStart :CustomEvent<[swiper: SwiperClass]>,   slideChangeTransitionEnd :CustomEvent<[swiper: SwiperClass]>,   slideNextTransitionStart :CustomEvent<[swiper: SwiperClass]>,   slideNextTransitionEnd :CustomEvent<[swiper: SwiperClass]>,   slidePrevTransitionStart :CustomEvent<[swiper: SwiperClass]>,   slidePrevTransitionEnd :CustomEvent<[swiper: SwiperClass]>,   transitionStart :CustomEvent<[swiper: SwiperClass]>,   transitionEnd :CustomEvent<[swiper: SwiperClass]>,   touchStart :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   touchMove :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   touchMoveOpposite :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   sliderMove :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   touchEnd :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   click :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   tap :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   doubleTap :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   imagesReady :CustomEvent<[swiper: SwiperClass]>,   progress :CustomEvent<[swiper: SwiperClass, progress: number]>,   reachBeginning :CustomEvent<[swiper: SwiperClass]>,   reachEnd :CustomEvent<[swiper: SwiperClass]>,   toEdge :CustomEvent<[swiper: SwiperClass]>,   fromEdge :CustomEvent<[swiper: SwiperClass]>,   setTranslate :CustomEvent<[swiper: SwiperClass, translate: number]>,   setTransition :CustomEvent<[swiper: SwiperClass, transition: number]>,   resize :CustomEvent<[swiper: SwiperClass]>,   observerUpdate :CustomEvent<[swiper: SwiperClass]>,   beforeLoopFix :CustomEvent<[swiper: SwiperClass]>,   loopFix :CustomEvent<[swiper: SwiperClass]>,   breakpoint :CustomEvent<[swiper: SwiperClass, breakpointParams: SwiperOptions]>,   _beforeBreakpoint :CustomEvent<[swiper: SwiperClass, breakpointParams: SwiperOptions]>,   _containerClasses :CustomEvent<[swiper: SwiperClass, classNames: string]>,   _slideClass :CustomEvent<[swiper: SwiperClass, slideEl: HTMLElement, classNames: string]>,   _slideClasses :CustomEvent<[swiper: SwiperClass, slides: Array<{  slideEl :HTMLElement,   classNames :string,   index :number}>]>,   _swiper :CustomEvent<[swiper: SwiperClass]>,   _freeModeNoMomentumRelease :CustomEvent<[swiper: SwiperClass]>,   activeIndexChange :CustomEvent<[swiper: SwiperClass]>,   snapIndexChange :CustomEvent<[swiper: SwiperClass]>,   realIndexChange :CustomEvent<[swiper: SwiperClass]>,   afterInit :CustomEvent<[swiper: SwiperClass]>,   beforeInit :CustomEvent<[swiper: SwiperClass]>,   beforeResize :CustomEvent<[swiper: SwiperClass]>,   beforeSlideChangeStart :CustomEvent<[swiper: SwiperClass]>,   beforeTransitionStart :CustomEvent<[swiper: SwiperClass, speed: number, internal: any]>,   changeDirection :CustomEvent<[swiper: SwiperClass]>,   doubleClick :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   destroy :CustomEvent<[swiper: SwiperClass]>,   momentumBounce :CustomEvent<[swiper: SwiperClass]>,   orientationchange :CustomEvent<[swiper: SwiperClass]>,   slideResetTransitionStart :CustomEvent<[swiper: SwiperClass]>,   slideResetTransitionEnd :CustomEvent<[swiper: SwiperClass]>,   sliderFirstMove :CustomEvent<[swiper: SwiperClass, event: TouchEvent]>,   slidesLengthChange :CustomEvent<[swiper: SwiperClass]>,   slidesGridLengthChange :CustomEvent<[swiper: SwiperClass]>,   snapGridLengthChange :CustomEvent<[swiper: SwiperClass]>,   update :CustomEvent<[swiper: SwiperClass]>,   lock :CustomEvent<[swiper: SwiperClass]>,   unlock :CustomEvent<[swiper: SwiperClass]>}, {  default :{  virtualData :{  slides :Array<any>,   offset :number,   from :number,   to :number,   slidesGrid :Array<number>}},   container-start :{},   wrapper-start :{},   wrapper-end :{},   container-end :{}}> * / any
  - Dropped / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SvelteComponentTyped<SwiperProps, {  swiper :CustomEvent<void>,   autoplayStart :CustomEvent<[swiper: SwiperClass]>,   autoplayStop :CustomEvent<[swiper: SwiperClass]>,   autoplayPause :CustomEvent<[swiper: SwiperClass]>,   autoplayResume :CustomEvent<[swiper: SwiperClass]>,   autoplay :CustomEvent<[swiper: SwiperClass]>,   hashChange :CustomEvent<[swiper: SwiperClass]>,   hashSet :CustomEvent<[swiper: SwiperClass]>,   keyPress :CustomEvent<[swiper: SwiperClass, keyCode: string]>,   lazyImageLoad :CustomEvent<[swiper: SwiperClass, slideEl: HTMLElement, imageEl: HTMLElement]>,   lazyImageReady :CustomEvent<[swiper: SwiperClass, slideEl: HTMLElement, imageEl: HTMLElement]>,   scroll :CustomEvent<[swiper: SwiperClass, event: WheelEvent]>,   navigationHide :CustomEvent<[swiper: SwiperClass]>,   navigationShow :CustomEvent<[swiper: SwiperClass]>,   navigationPrev :CustomEvent<[swiper: SwiperClass]>,   navigationNext :CustomEvent<[swiper: SwiperClass]>,   paginationRender :CustomEvent<[swiper: SwiperClass, paginationEl: HTMLElement]>,   paginationUpdate :CustomEvent<[swiper: SwiperClass, paginationEl: HTMLElement]>,   paginationHide :CustomEvent<[swiper: SwiperClass]>,   paginationShow :CustomEvent<[swiper: SwiperClass]>,   scrollbarDragStart :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   scrollbarDragMove :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   scrollbarDragEnd :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   zoomChange :CustomEvent<[swiper: SwiperClass, scale: number, imageEl: HTMLElement, slideEl: HTMLElement]>,   init :CustomEvent<[swiper: SwiperClass]>,   beforeDestroy :CustomEvent<[swiper: SwiperClass]>,   slideChange :CustomEvent<[swiper: SwiperClass]>,   slideChangeTransitionStart :CustomEvent<[swiper: SwiperClass]>,   slideChangeTransitionEnd :CustomEvent<[swiper: SwiperClass]>,   slideNextTransitionStart :CustomEvent<[swiper: SwiperClass]>,   slideNextTransitionEnd :CustomEvent<[swiper: SwiperClass]>,   slidePrevTransitionStart :CustomEvent<[swiper: SwiperClass]>,   slidePrevTransitionEnd :CustomEvent<[swiper: SwiperClass]>,   transitionStart :CustomEvent<[swiper: SwiperClass]>,   transitionEnd :CustomEvent<[swiper: SwiperClass]>,   touchStart :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   touchMove :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   touchMoveOpposite :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   sliderMove :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   touchEnd :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   click :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   tap :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   doubleTap :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   imagesReady :CustomEvent<[swiper: SwiperClass]>,   progress :CustomEvent<[swiper: SwiperClass, progress: number]>,   reachBeginning :CustomEvent<[swiper: SwiperClass]>,   reachEnd :CustomEvent<[swiper: SwiperClass]>,   toEdge :CustomEvent<[swiper: SwiperClass]>,   fromEdge :CustomEvent<[swiper: SwiperClass]>,   setTranslate :CustomEvent<[swiper: SwiperClass, translate: number]>,   setTransition :CustomEvent<[swiper: SwiperClass, transition: number]>,   resize :CustomEvent<[swiper: SwiperClass]>,   observerUpdate :CustomEvent<[swiper: SwiperClass]>,   beforeLoopFix :CustomEvent<[swiper: SwiperClass]>,   loopFix :CustomEvent<[swiper: SwiperClass]>,   breakpoint :CustomEvent<[swiper: SwiperClass, breakpointParams: SwiperOptions]>,   _beforeBreakpoint :CustomEvent<[swiper: SwiperClass, breakpointParams: SwiperOptions]>,   _containerClasses :CustomEvent<[swiper: SwiperClass, classNames: string]>,   _slideClass :CustomEvent<[swiper: SwiperClass, slideEl: HTMLElement, classNames: string]>,   _slideClasses :CustomEvent<[swiper: SwiperClass, slides: Array<{  slideEl :HTMLElement,   classNames :string,   index :number}>]>,   _swiper :CustomEvent<[swiper: SwiperClass]>,   _freeModeNoMomentumRelease :CustomEvent<[swiper: SwiperClass]>,   activeIndexChange :CustomEvent<[swiper: SwiperClass]>,   snapIndexChange :CustomEvent<[swiper: SwiperClass]>,   realIndexChange :CustomEvent<[swiper: SwiperClass]>,   afterInit :CustomEvent<[swiper: SwiperClass]>,   beforeInit :CustomEvent<[swiper: SwiperClass]>,   beforeResize :CustomEvent<[swiper: SwiperClass]>,   beforeSlideChangeStart :CustomEvent<[swiper: SwiperClass]>,   beforeTransitionStart :CustomEvent<[swiper: SwiperClass, speed: number, internal: any]>,   changeDirection :CustomEvent<[swiper: SwiperClass]>,   doubleClick :CustomEvent<[swiper: SwiperClass, event: MouseEvent | TouchEvent | PointerEvent]>,   destroy :CustomEvent<[swiper: SwiperClass]>,   momentumBounce :CustomEvent<[swiper: SwiperClass]>,   orientationchange :CustomEvent<[swiper: SwiperClass]>,   slideResetTransitionStart :CustomEvent<[swiper: SwiperClass]>,   slideResetTransitionEnd :CustomEvent<[swiper: SwiperClass]>,   sliderFirstMove :CustomEvent<[swiper: SwiperClass, event: TouchEvent]>,   slidesLengthChange :CustomEvent<[swiper: SwiperClass]>,   slidesGridLengthChange :CustomEvent<[swiper: SwiperClass]>,   snapGridLengthChange :CustomEvent<[swiper: SwiperClass]>,   update :CustomEvent<[swiper: SwiperClass]>,   lock :CustomEvent<[swiper: SwiperClass]>,   unlock :CustomEvent<[swiper: SwiperClass]>}, {  default :{  virtualData :{  slides :Array<any>,   offset :number,   from :number,   to :number,   slidesGrid :Array<number>}},   container-start :{},   wrapper-start :{},   wrapper-end :{},   container-end :{}}> * / any */ @JSImport("swiper/svelte/swiper-svelte", "Swiper")
  @js.native
  open class Swiper () extends StObject
  
  /* import warning: RemoveDifficultInheritance.summarizeChanges 
  - Dropped / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SvelteComponentTyped<SwiperSlideProps, {}, {  default :{  data :{  isActive :boolean,   isVisible :boolean,   isDuplicate :boolean,   isPrev :boolean,   isNext :boolean}}}> * / any
  - Dropped / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify SvelteComponentTyped<SwiperSlideProps, {}, {  default :{  data :{  isActive :boolean,   isVisible :boolean,   isDuplicate :boolean,   isPrev :boolean,   isNext :boolean}}}> * / any */ @JSImport("swiper/svelte/swiper-svelte", "SwiperSlide")
  @js.native
  open class SwiperSlide () extends StObject
  
  // @ts-ignore
  /* import warning: RemoveDifficultInheritance.summarizeChanges 
  - Dropped / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify svelte.JSX.HTMLAttributes<HTMLElementTagNameMap['div']> * / any */ trait SwiperProps
    extends StObject
       with SwiperOptions
  object SwiperProps {
    
    inline def apply(): SwiperProps = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SwiperProps]
    }
  }
  
  // @ts-ignore
  /* import warning: RemoveDifficultInheritance.summarizeChanges 
  - Dropped / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify svelte.JSX.HTMLAttributes<HTMLElementTagNameMap['div']> * / any */ trait SwiperSlideProps extends StObject {
    
    /**
      * Slide's index in slides array/collection
      *
      * @default false
      */
    var virtualIndex: js.UndefOr[Double] = js.undefined
    
    /**
      * Enables additional wrapper required for zoom mode
      *
      * @default false
      */
    var zoom: js.UndefOr[Boolean] = js.undefined
  }
  object SwiperSlideProps {
    
    inline def apply(): SwiperSlideProps = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SwiperSlideProps]
    }
    
    extension [Self <: SwiperSlideProps](x: Self) {
      
      inline def setVirtualIndex(value: Double): Self = StObject.set(x, "virtualIndex", value.asInstanceOf[js.Any])
      
      inline def setVirtualIndexUndefined: Self = StObject.set(x, "virtualIndex", js.undefined)
      
      inline def setZoom(value: Boolean): Self = StObject.set(x, "zoom", value.asInstanceOf[js.Any])
      
      inline def setZoomUndefined: Self = StObject.set(x, "zoom", js.undefined)
    }
  }
}
