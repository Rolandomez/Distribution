package typings.stripe.anon

import typings.stripe.mod.Stripe.Account
import typings.stripe.mod.Stripe.Application
import typings.stripe.mod.Stripe.Charge
import typings.stripe.mod.Stripe.Customer
import typings.stripe.mod.Stripe.CustomerSource
import typings.stripe.mod.Stripe.DeletedBankAccount
import typings.stripe.mod.Stripe.DeletedCard
import typings.stripe.mod.Stripe.DeletedCustomer
import typings.stripe.mod.Stripe.Invoice
import typings.stripe.mod.Stripe.Metadata
import typings.stripe.mod.Stripe.PaymentIntent.AmountDetails
import typings.stripe.mod.Stripe.PaymentIntent.AutomaticPaymentMethods
import typings.stripe.mod.Stripe.PaymentIntent.CancellationReason
import typings.stripe.mod.Stripe.PaymentIntent.CaptureMethod
import typings.stripe.mod.Stripe.PaymentIntent.ConfirmationMethod
import typings.stripe.mod.Stripe.PaymentIntent.LastPaymentError
import typings.stripe.mod.Stripe.PaymentIntent.NextAction
import typings.stripe.mod.Stripe.PaymentIntent.PaymentMethodOptions
import typings.stripe.mod.Stripe.PaymentIntent.Processing
import typings.stripe.mod.Stripe.PaymentIntent.SetupFutureUsage
import typings.stripe.mod.Stripe.PaymentIntent.Shipping
import typings.stripe.mod.Stripe.PaymentIntent.Status
import typings.stripe.mod.Stripe.PaymentIntent.TransferData
import typings.stripe.mod.Stripe.PaymentMethod
import typings.stripe.mod.Stripe.Review
import typings.stripe.stripeStrings.payment_intent
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined stripe.stripe.Stripe.Response<stripe.stripe.Stripe.PaymentIntent> */
trait ResponsePaymentIntent extends StObject {
  
  /**
    * Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    */
  var amount: Double
  
  /**
    * Amount that can be captured from this PaymentIntent.
    */
  var amount_capturable: Double
  
  var amount_details: js.UndefOr[AmountDetails] = js.undefined
  
  /**
    * Amount that was collected by this PaymentIntent.
    */
  var amount_received: Double
  
  /**
    * ID of the Connect application that created the PaymentIntent.
    */
  var application: String | Application | Null
  
  /**
    * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    */
  var application_fee_amount: Double | Null
  
  /**
    * Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)
    */
  var automatic_payment_methods: AutomaticPaymentMethods | Null
  
  /**
    * Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
    */
  var canceled_at: Double | Null
  
  /**
    * Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
    */
  var cancellation_reason: CancellationReason | Null
  
  /**
    * Controls when the funds will be captured from the customer's account.
    */
  var capture_method: CaptureMethod
  
  /**
    * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
    *
    * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
    *
    * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
    */
  var client_secret: String | Null
  
  var confirmation_method: ConfirmationMethod
  
  /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
  var created: Double
  
  /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
  var currency: String
  
  /**
    * ID of the Customer this PaymentIntent belongs to, if one exists.
    *
    * Payment methods attached to other Customers cannot be used with this PaymentIntent.
    *
    * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
    */
  var customer: String | Customer | DeletedCustomer | Null
  
  /**
    * An arbitrary string attached to the object. Often useful for displaying to users.
    */
  var description: String | Null
  
  /**
    * Unique identifier for the object.
    */
  var id: String
  
  /**
    * ID of the invoice that created this PaymentIntent, if it exists.
    */
  var invoice: String | Invoice | Null
  
  var lastResponse: ApiVersion
  
  /**
    * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
    */
  var last_payment_error: LastPaymentError | Null
  
  /**
    * The latest charge created by this payment intent.
    */
  var latest_charge: js.UndefOr[String | Charge | Null] = js.undefined
  
  /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
  var livemode: Boolean
  
  /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
    */
  var metadata: Metadata
  
  /**
    * If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
    */
  var next_action: NextAction | Null
  
  /**
    * String representing the object's type. Objects of the same type share the same value.
    */
  var `object`: payment_intent
  
  /**
    * The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    */
  var on_behalf_of: String | Account | Null
  
  /**
    * ID of the payment method used in this PaymentIntent.
    */
  var payment_method: String | PaymentMethod | Null
  
  /**
    * Payment-method-specific configuration for this PaymentIntent.
    */
  var payment_method_options: PaymentMethodOptions | Null
  
  /**
    * The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
    */
  var payment_method_types: js.Array[String]
  
  /**
    * If present, this property tells you about the processing state of the payment.
    */
  var processing: Processing | Null
  
  /**
    * Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    */
  var receipt_email: String | Null
  
  /**
    * ID of the review associated with this PaymentIntent, if any.
    */
  var review: String | Review | Null
  
  /**
    * Indicates that you intend to make future payments with this PaymentIntent's payment method.
    *
    * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    *
    * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    */
  var setup_future_usage: SetupFutureUsage | Null
  
  /**
    * Shipping information for this PaymentIntent.
    */
  var shipping: Shipping | Null
  
  /**
    * This is a legacy field that will be removed in the future. It is the ID of the Source object that is associated with this PaymentIntent, if one was supplied.
    */
  var source: String | CustomerSource | DeletedBankAccount | DeletedCard | Null
  
  /**
    * For non-card charges, you can use this value as the complete description that appears on your customers' statements. Must contain at least one letter, maximum 22 characters.
    */
  var statement_descriptor: String | Null
  
  /**
    * Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that's set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    */
  var statement_descriptor_suffix: String | Null
  
  /**
    * Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
    */
  var status: Status
  
  /**
    * The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    */
  var transfer_data: TransferData | Null
  
  /**
    * A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    */
  var transfer_group: String | Null
}
object ResponsePaymentIntent {
  
  inline def apply(
    amount: Double,
    amount_capturable: Double,
    amount_received: Double,
    capture_method: CaptureMethod,
    confirmation_method: ConfirmationMethod,
    created: Double,
    currency: String,
    id: String,
    lastResponse: ApiVersion,
    livemode: Boolean,
    metadata: Metadata,
    payment_method_types: js.Array[String],
    status: Status
  ): ResponsePaymentIntent = {
    val __obj = js.Dynamic.literal(amount = amount.asInstanceOf[js.Any], amount_capturable = amount_capturable.asInstanceOf[js.Any], amount_received = amount_received.asInstanceOf[js.Any], capture_method = capture_method.asInstanceOf[js.Any], confirmation_method = confirmation_method.asInstanceOf[js.Any], created = created.asInstanceOf[js.Any], currency = currency.asInstanceOf[js.Any], id = id.asInstanceOf[js.Any], lastResponse = lastResponse.asInstanceOf[js.Any], livemode = livemode.asInstanceOf[js.Any], metadata = metadata.asInstanceOf[js.Any], payment_method_types = payment_method_types.asInstanceOf[js.Any], status = status.asInstanceOf[js.Any], application = null, application_fee_amount = null, automatic_payment_methods = null, canceled_at = null, cancellation_reason = null, client_secret = null, customer = null, description = null, invoice = null, last_payment_error = null, next_action = null, on_behalf_of = null, payment_method = null, payment_method_options = null, processing = null, receipt_email = null, review = null, setup_future_usage = null, shipping = null, source = null, statement_descriptor = null, statement_descriptor_suffix = null, transfer_data = null, transfer_group = null)
    __obj.updateDynamic("object")("payment_intent")
    __obj.asInstanceOf[ResponsePaymentIntent]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: ResponsePaymentIntent] (val x: Self) extends AnyVal {
    
    inline def setAmount(value: Double): Self = StObject.set(x, "amount", value.asInstanceOf[js.Any])
    
    inline def setAmount_capturable(value: Double): Self = StObject.set(x, "amount_capturable", value.asInstanceOf[js.Any])
    
    inline def setAmount_details(value: AmountDetails): Self = StObject.set(x, "amount_details", value.asInstanceOf[js.Any])
    
    inline def setAmount_detailsUndefined: Self = StObject.set(x, "amount_details", js.undefined)
    
    inline def setAmount_received(value: Double): Self = StObject.set(x, "amount_received", value.asInstanceOf[js.Any])
    
    inline def setApplication(value: String | Application): Self = StObject.set(x, "application", value.asInstanceOf[js.Any])
    
    inline def setApplicationNull: Self = StObject.set(x, "application", null)
    
    inline def setApplication_fee_amount(value: Double): Self = StObject.set(x, "application_fee_amount", value.asInstanceOf[js.Any])
    
    inline def setApplication_fee_amountNull: Self = StObject.set(x, "application_fee_amount", null)
    
    inline def setAutomatic_payment_methods(value: AutomaticPaymentMethods): Self = StObject.set(x, "automatic_payment_methods", value.asInstanceOf[js.Any])
    
    inline def setAutomatic_payment_methodsNull: Self = StObject.set(x, "automatic_payment_methods", null)
    
    inline def setCanceled_at(value: Double): Self = StObject.set(x, "canceled_at", value.asInstanceOf[js.Any])
    
    inline def setCanceled_atNull: Self = StObject.set(x, "canceled_at", null)
    
    inline def setCancellation_reason(value: CancellationReason): Self = StObject.set(x, "cancellation_reason", value.asInstanceOf[js.Any])
    
    inline def setCancellation_reasonNull: Self = StObject.set(x, "cancellation_reason", null)
    
    inline def setCapture_method(value: CaptureMethod): Self = StObject.set(x, "capture_method", value.asInstanceOf[js.Any])
    
    inline def setClient_secret(value: String): Self = StObject.set(x, "client_secret", value.asInstanceOf[js.Any])
    
    inline def setClient_secretNull: Self = StObject.set(x, "client_secret", null)
    
    inline def setConfirmation_method(value: ConfirmationMethod): Self = StObject.set(x, "confirmation_method", value.asInstanceOf[js.Any])
    
    inline def setCreated(value: Double): Self = StObject.set(x, "created", value.asInstanceOf[js.Any])
    
    inline def setCurrency(value: String): Self = StObject.set(x, "currency", value.asInstanceOf[js.Any])
    
    inline def setCustomer(value: String | Customer | DeletedCustomer): Self = StObject.set(x, "customer", value.asInstanceOf[js.Any])
    
    inline def setCustomerNull: Self = StObject.set(x, "customer", null)
    
    inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    inline def setDescriptionNull: Self = StObject.set(x, "description", null)
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setInvoice(value: String | Invoice): Self = StObject.set(x, "invoice", value.asInstanceOf[js.Any])
    
    inline def setInvoiceNull: Self = StObject.set(x, "invoice", null)
    
    inline def setLastResponse(value: ApiVersion): Self = StObject.set(x, "lastResponse", value.asInstanceOf[js.Any])
    
    inline def setLast_payment_error(value: LastPaymentError): Self = StObject.set(x, "last_payment_error", value.asInstanceOf[js.Any])
    
    inline def setLast_payment_errorNull: Self = StObject.set(x, "last_payment_error", null)
    
    inline def setLatest_charge(value: String | Charge): Self = StObject.set(x, "latest_charge", value.asInstanceOf[js.Any])
    
    inline def setLatest_chargeNull: Self = StObject.set(x, "latest_charge", null)
    
    inline def setLatest_chargeUndefined: Self = StObject.set(x, "latest_charge", js.undefined)
    
    inline def setLivemode(value: Boolean): Self = StObject.set(x, "livemode", value.asInstanceOf[js.Any])
    
    inline def setMetadata(value: Metadata): Self = StObject.set(x, "metadata", value.asInstanceOf[js.Any])
    
    inline def setNext_action(value: NextAction): Self = StObject.set(x, "next_action", value.asInstanceOf[js.Any])
    
    inline def setNext_actionNull: Self = StObject.set(x, "next_action", null)
    
    inline def setObject(value: payment_intent): Self = StObject.set(x, "object", value.asInstanceOf[js.Any])
    
    inline def setOn_behalf_of(value: String | Account): Self = StObject.set(x, "on_behalf_of", value.asInstanceOf[js.Any])
    
    inline def setOn_behalf_ofNull: Self = StObject.set(x, "on_behalf_of", null)
    
    inline def setPayment_method(value: String | PaymentMethod): Self = StObject.set(x, "payment_method", value.asInstanceOf[js.Any])
    
    inline def setPayment_methodNull: Self = StObject.set(x, "payment_method", null)
    
    inline def setPayment_method_options(value: PaymentMethodOptions): Self = StObject.set(x, "payment_method_options", value.asInstanceOf[js.Any])
    
    inline def setPayment_method_optionsNull: Self = StObject.set(x, "payment_method_options", null)
    
    inline def setPayment_method_types(value: js.Array[String]): Self = StObject.set(x, "payment_method_types", value.asInstanceOf[js.Any])
    
    inline def setPayment_method_typesVarargs(value: String*): Self = StObject.set(x, "payment_method_types", js.Array(value*))
    
    inline def setProcessing(value: Processing): Self = StObject.set(x, "processing", value.asInstanceOf[js.Any])
    
    inline def setProcessingNull: Self = StObject.set(x, "processing", null)
    
    inline def setReceipt_email(value: String): Self = StObject.set(x, "receipt_email", value.asInstanceOf[js.Any])
    
    inline def setReceipt_emailNull: Self = StObject.set(x, "receipt_email", null)
    
    inline def setReview(value: String | Review): Self = StObject.set(x, "review", value.asInstanceOf[js.Any])
    
    inline def setReviewNull: Self = StObject.set(x, "review", null)
    
    inline def setSetup_future_usage(value: SetupFutureUsage): Self = StObject.set(x, "setup_future_usage", value.asInstanceOf[js.Any])
    
    inline def setSetup_future_usageNull: Self = StObject.set(x, "setup_future_usage", null)
    
    inline def setShipping(value: Shipping): Self = StObject.set(x, "shipping", value.asInstanceOf[js.Any])
    
    inline def setShippingNull: Self = StObject.set(x, "shipping", null)
    
    inline def setSource(value: String | CustomerSource | DeletedBankAccount | DeletedCard): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
    
    inline def setSourceNull: Self = StObject.set(x, "source", null)
    
    inline def setStatement_descriptor(value: String): Self = StObject.set(x, "statement_descriptor", value.asInstanceOf[js.Any])
    
    inline def setStatement_descriptorNull: Self = StObject.set(x, "statement_descriptor", null)
    
    inline def setStatement_descriptor_suffix(value: String): Self = StObject.set(x, "statement_descriptor_suffix", value.asInstanceOf[js.Any])
    
    inline def setStatement_descriptor_suffixNull: Self = StObject.set(x, "statement_descriptor_suffix", null)
    
    inline def setStatus(value: Status): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    inline def setTransfer_data(value: TransferData): Self = StObject.set(x, "transfer_data", value.asInstanceOf[js.Any])
    
    inline def setTransfer_dataNull: Self = StObject.set(x, "transfer_data", null)
    
    inline def setTransfer_group(value: String): Self = StObject.set(x, "transfer_group", value.asInstanceOf[js.Any])
    
    inline def setTransfer_groupNull: Self = StObject.set(x, "transfer_group", null)
  }
}
