package typings.stripe.anon

import typings.stripe.mod.Stripe.Account
import typings.stripe.mod.Stripe.ApiList
import typings.stripe.mod.Stripe.Application
import typings.stripe.mod.Stripe.Customer
import typings.stripe.mod.Stripe.CustomerSource
import typings.stripe.mod.Stripe.DeletedApplication
import typings.stripe.mod.Stripe.DeletedCustomer
import typings.stripe.mod.Stripe.Discount
import typings.stripe.mod.Stripe.Invoice
import typings.stripe.mod.Stripe.Metadata
import typings.stripe.mod.Stripe.PaymentMethod
import typings.stripe.mod.Stripe.SetupIntent
import typings.stripe.mod.Stripe.Subscription.AutomaticTax
import typings.stripe.mod.Stripe.Subscription.BillingThresholds
import typings.stripe.mod.Stripe.Subscription.CancellationDetails
import typings.stripe.mod.Stripe.Subscription.CollectionMethod
import typings.stripe.mod.Stripe.Subscription.PauseCollection
import typings.stripe.mod.Stripe.Subscription.PaymentSettings
import typings.stripe.mod.Stripe.Subscription.PendingInvoiceItemInterval
import typings.stripe.mod.Stripe.Subscription.PendingUpdate
import typings.stripe.mod.Stripe.Subscription.Status
import typings.stripe.mod.Stripe.Subscription.TransferData
import typings.stripe.mod.Stripe.Subscription.TrialSettings
import typings.stripe.mod.Stripe.SubscriptionItem
import typings.stripe.mod.Stripe.SubscriptionSchedule
import typings.stripe.mod.Stripe.TaxRate
import typings.stripe.mod.Stripe.TestHelpers.TestClock
import typings.stripe.stripeStrings.subscription
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined stripe.stripe.Stripe.Response<stripe.stripe.Stripe.Subscription> */
trait ResponseSubscription extends StObject {
  
  /**
    * ID of the Connect Application that created the subscription.
    */
  var application: String | Application | DeletedApplication | Null
  
  /**
    * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
    */
  var application_fee_percent: Double | Null
  
  var automatic_tax: AutomaticTax
  
  /**
    * Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
    */
  var billing_cycle_anchor: Double
  
  /**
    * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    */
  var billing_thresholds: BillingThresholds | Null
  
  /**
    * A date in the future at which the subscription will automatically get canceled
    */
  var cancel_at: Double | Null
  
  /**
    * If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
    */
  var cancel_at_period_end: Boolean
  
  /**
    * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
    */
  var canceled_at: Double | Null
  
  /**
    * Details about why this subscription was cancelled
    */
  var cancellation_details: CancellationDetails | Null
  
  /**
    * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
    */
  var collection_method: CollectionMethod
  
  /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
  var created: Double
  
  /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
  var currency: String
  
  /**
    * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
    */
  var current_period_end: Double
  
  /**
    * Start of the current period that the subscription has been invoiced for.
    */
  var current_period_start: Double
  
  /**
    * ID of the customer who owns the subscription.
    */
  var customer: String | Customer | DeletedCustomer
  
  /**
    * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
    */
  var days_until_due: Double | Null
  
  /**
    * ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    */
  var default_payment_method: String | PaymentMethod | Null
  
  /**
    * ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    */
  var default_source: String | CustomerSource | Null
  
  /**
    * The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
    */
  var default_tax_rates: js.UndefOr[js.Array[TaxRate] | Null] = js.undefined
  
  /**
    * The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces.
    */
  var description: String | Null
  
  /**
    * Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
    */
  var discount: Discount | Null
  
  /**
    * If the subscription has ended, the date the subscription ended.
    */
  var ended_at: Double | Null
  
  /**
    * Unique identifier for the object.
    */
  var id: String
  
  /**
    * List of subscription items, each with an attached price.
    */
  var items: ApiList[SubscriptionItem]
  
  var lastResponse: ApiVersion
  
  /**
    * The most recent invoice this subscription has generated.
    */
  var latest_invoice: String | Invoice | Null
  
  /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
  var livemode: Boolean
  
  /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
  var metadata: Metadata
  
  /**
    * Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
    */
  var next_pending_invoice_item_invoice: Double | Null
  
  /**
    * String representing the object's type. Objects of the same type share the same value.
    */
  var `object`: subscription
  
  /**
    * The account (if any) the charge was made on behalf of for charges associated with this subscription. See the Connect documentation for details.
    */
  var on_behalf_of: String | Account | Null
  
  /**
    * If specified, payment collection for this subscription will be paused.
    */
  var pause_collection: PauseCollection | Null
  
  /**
    * Payment settings passed on to invoices created by the subscription.
    */
  var payment_settings: PaymentSettings | Null
  
  /**
    * Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
    */
  var pending_invoice_item_interval: PendingInvoiceItemInterval | Null
  
  /**
    * You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
    */
  var pending_setup_intent: String | SetupIntent | Null
  
  /**
    * If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
    */
  var pending_update: PendingUpdate | Null
  
  /**
    * The schedule attached to the subscription
    */
  var schedule: String | SubscriptionSchedule | Null
  
  /**
    * Date when the subscription was first created. The date might differ from the `created` date due to backdating.
    */
  var start_date: Double
  
  /**
    * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
    *
    * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
    *
    * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
    *
    * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
    *
    * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
    */
  var status: Status
  
  /**
    * ID of the test clock this subscription belongs to.
    */
  var test_clock: String | TestClock | Null
  
  /**
    * The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    */
  var transfer_data: TransferData | Null
  
  /**
    * If the subscription has a trial, the end of that trial.
    */
  var trial_end: Double | Null
  
  /**
    * Settings related to subscription trials.
    */
  var trial_settings: TrialSettings | Null
  
  /**
    * If the subscription has a trial, the beginning of that trial.
    */
  var trial_start: Double | Null
}
object ResponseSubscription {
  
  inline def apply(
    automatic_tax: AutomaticTax,
    billing_cycle_anchor: Double,
    cancel_at_period_end: Boolean,
    collection_method: CollectionMethod,
    created: Double,
    currency: String,
    current_period_end: Double,
    current_period_start: Double,
    customer: String | Customer | DeletedCustomer,
    id: String,
    items: ApiList[SubscriptionItem],
    lastResponse: ApiVersion,
    livemode: Boolean,
    metadata: Metadata,
    start_date: Double,
    status: Status
  ): ResponseSubscription = {
    val __obj = js.Dynamic.literal(automatic_tax = automatic_tax.asInstanceOf[js.Any], billing_cycle_anchor = billing_cycle_anchor.asInstanceOf[js.Any], cancel_at_period_end = cancel_at_period_end.asInstanceOf[js.Any], collection_method = collection_method.asInstanceOf[js.Any], created = created.asInstanceOf[js.Any], currency = currency.asInstanceOf[js.Any], current_period_end = current_period_end.asInstanceOf[js.Any], current_period_start = current_period_start.asInstanceOf[js.Any], customer = customer.asInstanceOf[js.Any], id = id.asInstanceOf[js.Any], items = items.asInstanceOf[js.Any], lastResponse = lastResponse.asInstanceOf[js.Any], livemode = livemode.asInstanceOf[js.Any], metadata = metadata.asInstanceOf[js.Any], start_date = start_date.asInstanceOf[js.Any], status = status.asInstanceOf[js.Any], application = null, application_fee_percent = null, billing_thresholds = null, cancel_at = null, canceled_at = null, cancellation_details = null, days_until_due = null, default_payment_method = null, default_source = null, description = null, discount = null, ended_at = null, latest_invoice = null, next_pending_invoice_item_invoice = null, on_behalf_of = null, pause_collection = null, payment_settings = null, pending_invoice_item_interval = null, pending_setup_intent = null, pending_update = null, schedule = null, test_clock = null, transfer_data = null, trial_end = null, trial_settings = null, trial_start = null)
    __obj.updateDynamic("object")("subscription")
    __obj.asInstanceOf[ResponseSubscription]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: ResponseSubscription] (val x: Self) extends AnyVal {
    
    inline def setApplication(value: String | Application | DeletedApplication): Self = StObject.set(x, "application", value.asInstanceOf[js.Any])
    
    inline def setApplicationNull: Self = StObject.set(x, "application", null)
    
    inline def setApplication_fee_percent(value: Double): Self = StObject.set(x, "application_fee_percent", value.asInstanceOf[js.Any])
    
    inline def setApplication_fee_percentNull: Self = StObject.set(x, "application_fee_percent", null)
    
    inline def setAutomatic_tax(value: AutomaticTax): Self = StObject.set(x, "automatic_tax", value.asInstanceOf[js.Any])
    
    inline def setBilling_cycle_anchor(value: Double): Self = StObject.set(x, "billing_cycle_anchor", value.asInstanceOf[js.Any])
    
    inline def setBilling_thresholds(value: BillingThresholds): Self = StObject.set(x, "billing_thresholds", value.asInstanceOf[js.Any])
    
    inline def setBilling_thresholdsNull: Self = StObject.set(x, "billing_thresholds", null)
    
    inline def setCancel_at(value: Double): Self = StObject.set(x, "cancel_at", value.asInstanceOf[js.Any])
    
    inline def setCancel_atNull: Self = StObject.set(x, "cancel_at", null)
    
    inline def setCancel_at_period_end(value: Boolean): Self = StObject.set(x, "cancel_at_period_end", value.asInstanceOf[js.Any])
    
    inline def setCanceled_at(value: Double): Self = StObject.set(x, "canceled_at", value.asInstanceOf[js.Any])
    
    inline def setCanceled_atNull: Self = StObject.set(x, "canceled_at", null)
    
    inline def setCancellation_details(value: CancellationDetails): Self = StObject.set(x, "cancellation_details", value.asInstanceOf[js.Any])
    
    inline def setCancellation_detailsNull: Self = StObject.set(x, "cancellation_details", null)
    
    inline def setCollection_method(value: CollectionMethod): Self = StObject.set(x, "collection_method", value.asInstanceOf[js.Any])
    
    inline def setCreated(value: Double): Self = StObject.set(x, "created", value.asInstanceOf[js.Any])
    
    inline def setCurrency(value: String): Self = StObject.set(x, "currency", value.asInstanceOf[js.Any])
    
    inline def setCurrent_period_end(value: Double): Self = StObject.set(x, "current_period_end", value.asInstanceOf[js.Any])
    
    inline def setCurrent_period_start(value: Double): Self = StObject.set(x, "current_period_start", value.asInstanceOf[js.Any])
    
    inline def setCustomer(value: String | Customer | DeletedCustomer): Self = StObject.set(x, "customer", value.asInstanceOf[js.Any])
    
    inline def setDays_until_due(value: Double): Self = StObject.set(x, "days_until_due", value.asInstanceOf[js.Any])
    
    inline def setDays_until_dueNull: Self = StObject.set(x, "days_until_due", null)
    
    inline def setDefault_payment_method(value: String | PaymentMethod): Self = StObject.set(x, "default_payment_method", value.asInstanceOf[js.Any])
    
    inline def setDefault_payment_methodNull: Self = StObject.set(x, "default_payment_method", null)
    
    inline def setDefault_source(value: String | CustomerSource): Self = StObject.set(x, "default_source", value.asInstanceOf[js.Any])
    
    inline def setDefault_sourceNull: Self = StObject.set(x, "default_source", null)
    
    inline def setDefault_tax_rates(value: js.Array[TaxRate]): Self = StObject.set(x, "default_tax_rates", value.asInstanceOf[js.Any])
    
    inline def setDefault_tax_ratesNull: Self = StObject.set(x, "default_tax_rates", null)
    
    inline def setDefault_tax_ratesUndefined: Self = StObject.set(x, "default_tax_rates", js.undefined)
    
    inline def setDefault_tax_ratesVarargs(value: TaxRate*): Self = StObject.set(x, "default_tax_rates", js.Array(value*))
    
    inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    inline def setDescriptionNull: Self = StObject.set(x, "description", null)
    
    inline def setDiscount(value: Discount): Self = StObject.set(x, "discount", value.asInstanceOf[js.Any])
    
    inline def setDiscountNull: Self = StObject.set(x, "discount", null)
    
    inline def setEnded_at(value: Double): Self = StObject.set(x, "ended_at", value.asInstanceOf[js.Any])
    
    inline def setEnded_atNull: Self = StObject.set(x, "ended_at", null)
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setItems(value: ApiList[SubscriptionItem]): Self = StObject.set(x, "items", value.asInstanceOf[js.Any])
    
    inline def setLastResponse(value: ApiVersion): Self = StObject.set(x, "lastResponse", value.asInstanceOf[js.Any])
    
    inline def setLatest_invoice(value: String | Invoice): Self = StObject.set(x, "latest_invoice", value.asInstanceOf[js.Any])
    
    inline def setLatest_invoiceNull: Self = StObject.set(x, "latest_invoice", null)
    
    inline def setLivemode(value: Boolean): Self = StObject.set(x, "livemode", value.asInstanceOf[js.Any])
    
    inline def setMetadata(value: Metadata): Self = StObject.set(x, "metadata", value.asInstanceOf[js.Any])
    
    inline def setNext_pending_invoice_item_invoice(value: Double): Self = StObject.set(x, "next_pending_invoice_item_invoice", value.asInstanceOf[js.Any])
    
    inline def setNext_pending_invoice_item_invoiceNull: Self = StObject.set(x, "next_pending_invoice_item_invoice", null)
    
    inline def setObject(value: subscription): Self = StObject.set(x, "object", value.asInstanceOf[js.Any])
    
    inline def setOn_behalf_of(value: String | Account): Self = StObject.set(x, "on_behalf_of", value.asInstanceOf[js.Any])
    
    inline def setOn_behalf_ofNull: Self = StObject.set(x, "on_behalf_of", null)
    
    inline def setPause_collection(value: PauseCollection): Self = StObject.set(x, "pause_collection", value.asInstanceOf[js.Any])
    
    inline def setPause_collectionNull: Self = StObject.set(x, "pause_collection", null)
    
    inline def setPayment_settings(value: PaymentSettings): Self = StObject.set(x, "payment_settings", value.asInstanceOf[js.Any])
    
    inline def setPayment_settingsNull: Self = StObject.set(x, "payment_settings", null)
    
    inline def setPending_invoice_item_interval(value: PendingInvoiceItemInterval): Self = StObject.set(x, "pending_invoice_item_interval", value.asInstanceOf[js.Any])
    
    inline def setPending_invoice_item_intervalNull: Self = StObject.set(x, "pending_invoice_item_interval", null)
    
    inline def setPending_setup_intent(value: String | SetupIntent): Self = StObject.set(x, "pending_setup_intent", value.asInstanceOf[js.Any])
    
    inline def setPending_setup_intentNull: Self = StObject.set(x, "pending_setup_intent", null)
    
    inline def setPending_update(value: PendingUpdate): Self = StObject.set(x, "pending_update", value.asInstanceOf[js.Any])
    
    inline def setPending_updateNull: Self = StObject.set(x, "pending_update", null)
    
    inline def setSchedule(value: String | SubscriptionSchedule): Self = StObject.set(x, "schedule", value.asInstanceOf[js.Any])
    
    inline def setScheduleNull: Self = StObject.set(x, "schedule", null)
    
    inline def setStart_date(value: Double): Self = StObject.set(x, "start_date", value.asInstanceOf[js.Any])
    
    inline def setStatus(value: Status): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    inline def setTest_clock(value: String | TestClock): Self = StObject.set(x, "test_clock", value.asInstanceOf[js.Any])
    
    inline def setTest_clockNull: Self = StObject.set(x, "test_clock", null)
    
    inline def setTransfer_data(value: TransferData): Self = StObject.set(x, "transfer_data", value.asInstanceOf[js.Any])
    
    inline def setTransfer_dataNull: Self = StObject.set(x, "transfer_data", null)
    
    inline def setTrial_end(value: Double): Self = StObject.set(x, "trial_end", value.asInstanceOf[js.Any])
    
    inline def setTrial_endNull: Self = StObject.set(x, "trial_end", null)
    
    inline def setTrial_settings(value: TrialSettings): Self = StObject.set(x, "trial_settings", value.asInstanceOf[js.Any])
    
    inline def setTrial_settingsNull: Self = StObject.set(x, "trial_settings", null)
    
    inline def setTrial_start(value: Double): Self = StObject.set(x, "trial_start", value.asInstanceOf[js.Any])
    
    inline def setTrial_startNull: Self = StObject.set(x, "trial_start", null)
  }
}
