package typings.stripe.anon

import typings.stripe.mod.Stripe.Account
import typings.stripe.mod.Stripe.Application
import typings.stripe.mod.Stripe.Customer
import typings.stripe.mod.Stripe.DeletedCustomer
import typings.stripe.mod.Stripe.Mandate
import typings.stripe.mod.Stripe.Metadata
import typings.stripe.mod.Stripe.PaymentMethod
import typings.stripe.mod.Stripe.SetupAttempt
import typings.stripe.mod.Stripe.SetupIntent.AutomaticPaymentMethods
import typings.stripe.mod.Stripe.SetupIntent.CancellationReason
import typings.stripe.mod.Stripe.SetupIntent.FlowDirection
import typings.stripe.mod.Stripe.SetupIntent.LastSetupError
import typings.stripe.mod.Stripe.SetupIntent.NextAction
import typings.stripe.mod.Stripe.SetupIntent.PaymentMethodOptions
import typings.stripe.mod.Stripe.SetupIntent.Status
import typings.stripe.stripeStrings.setup_intent
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined stripe.stripe.Stripe.Response<stripe.stripe.Stripe.SetupIntent> */
trait ResponseSetupIntent extends StObject {
  
  /**
    * ID of the Connect application that created the SetupIntent.
    */
  var application: String | Application | Null
  
  /**
    * If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
    *
    * It can only be used for this Stripe Account's own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    */
  var attach_to_self: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Settings for automatic payment methods compatible with this Setup Intent
    */
  var automatic_payment_methods: AutomaticPaymentMethods | Null
  
  /**
    * Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
    */
  var cancellation_reason: CancellationReason | Null
  
  /**
    * The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
    *
    * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
    */
  var client_secret: String | Null
  
  /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
  var created: Double
  
  /**
    * ID of the Customer this SetupIntent belongs to, if one exists.
    *
    * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    */
  var customer: String | Customer | DeletedCustomer | Null
  
  /**
    * An arbitrary string attached to the object. Often useful for displaying to users.
    */
  var description: String | Null
  
  /**
    * Indicates the directions of money movement for which this payment method is intended to be used.
    *
    * Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    */
  var flow_directions: js.Array[FlowDirection] | Null
  
  /**
    * Unique identifier for the object.
    */
  var id: String
  
  var lastResponse: ApiVersion
  
  /**
    * The error encountered in the previous SetupIntent confirmation.
    */
  var last_setup_error: LastSetupError | Null
  
  /**
    * The most recent SetupAttempt for this SetupIntent.
    */
  var latest_attempt: String | SetupAttempt | Null
  
  /**
    * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    */
  var livemode: Boolean
  
  /**
    * ID of the multi use Mandate generated by the SetupIntent.
    */
  var mandate: String | Mandate | Null
  
  /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
  var metadata: Metadata | Null
  
  /**
    * If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
    */
  var next_action: NextAction | Null
  
  /**
    * String representing the object's type. Objects of the same type share the same value.
    */
  var `object`: setup_intent
  
  /**
    * The account (if any) for which the setup is intended.
    */
  var on_behalf_of: String | Account | Null
  
  /**
    * ID of the payment method used with this SetupIntent.
    */
  var payment_method: String | PaymentMethod | Null
  
  /**
    * Payment-method-specific configuration for this SetupIntent.
    */
  var payment_method_options: PaymentMethodOptions | Null
  
  /**
    * The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
    */
  var payment_method_types: js.Array[String]
  
  /**
    * ID of the single_use Mandate generated by the SetupIntent.
    */
  var single_use_mandate: String | Mandate | Null
  
  /**
    * [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
    */
  var status: Status
  
  /**
    * Indicates how the payment method is intended to be used in the future.
    *
    * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
    */
  var usage: String
}
object ResponseSetupIntent {
  
  inline def apply(
    created: Double,
    id: String,
    lastResponse: ApiVersion,
    livemode: Boolean,
    payment_method_types: js.Array[String],
    status: Status,
    usage: String
  ): ResponseSetupIntent = {
    val __obj = js.Dynamic.literal(created = created.asInstanceOf[js.Any], id = id.asInstanceOf[js.Any], lastResponse = lastResponse.asInstanceOf[js.Any], livemode = livemode.asInstanceOf[js.Any], payment_method_types = payment_method_types.asInstanceOf[js.Any], status = status.asInstanceOf[js.Any], usage = usage.asInstanceOf[js.Any], application = null, automatic_payment_methods = null, cancellation_reason = null, client_secret = null, customer = null, description = null, flow_directions = null, last_setup_error = null, latest_attempt = null, mandate = null, metadata = null, next_action = null, on_behalf_of = null, payment_method = null, payment_method_options = null, single_use_mandate = null)
    __obj.updateDynamic("object")("setup_intent")
    __obj.asInstanceOf[ResponseSetupIntent]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: ResponseSetupIntent] (val x: Self) extends AnyVal {
    
    inline def setApplication(value: String | Application): Self = StObject.set(x, "application", value.asInstanceOf[js.Any])
    
    inline def setApplicationNull: Self = StObject.set(x, "application", null)
    
    inline def setAttach_to_self(value: Boolean): Self = StObject.set(x, "attach_to_self", value.asInstanceOf[js.Any])
    
    inline def setAttach_to_selfUndefined: Self = StObject.set(x, "attach_to_self", js.undefined)
    
    inline def setAutomatic_payment_methods(value: AutomaticPaymentMethods): Self = StObject.set(x, "automatic_payment_methods", value.asInstanceOf[js.Any])
    
    inline def setAutomatic_payment_methodsNull: Self = StObject.set(x, "automatic_payment_methods", null)
    
    inline def setCancellation_reason(value: CancellationReason): Self = StObject.set(x, "cancellation_reason", value.asInstanceOf[js.Any])
    
    inline def setCancellation_reasonNull: Self = StObject.set(x, "cancellation_reason", null)
    
    inline def setClient_secret(value: String): Self = StObject.set(x, "client_secret", value.asInstanceOf[js.Any])
    
    inline def setClient_secretNull: Self = StObject.set(x, "client_secret", null)
    
    inline def setCreated(value: Double): Self = StObject.set(x, "created", value.asInstanceOf[js.Any])
    
    inline def setCustomer(value: String | Customer | DeletedCustomer): Self = StObject.set(x, "customer", value.asInstanceOf[js.Any])
    
    inline def setCustomerNull: Self = StObject.set(x, "customer", null)
    
    inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    inline def setDescriptionNull: Self = StObject.set(x, "description", null)
    
    inline def setFlow_directions(value: js.Array[FlowDirection]): Self = StObject.set(x, "flow_directions", value.asInstanceOf[js.Any])
    
    inline def setFlow_directionsNull: Self = StObject.set(x, "flow_directions", null)
    
    inline def setFlow_directionsVarargs(value: FlowDirection*): Self = StObject.set(x, "flow_directions", js.Array(value*))
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setLastResponse(value: ApiVersion): Self = StObject.set(x, "lastResponse", value.asInstanceOf[js.Any])
    
    inline def setLast_setup_error(value: LastSetupError): Self = StObject.set(x, "last_setup_error", value.asInstanceOf[js.Any])
    
    inline def setLast_setup_errorNull: Self = StObject.set(x, "last_setup_error", null)
    
    inline def setLatest_attempt(value: String | SetupAttempt): Self = StObject.set(x, "latest_attempt", value.asInstanceOf[js.Any])
    
    inline def setLatest_attemptNull: Self = StObject.set(x, "latest_attempt", null)
    
    inline def setLivemode(value: Boolean): Self = StObject.set(x, "livemode", value.asInstanceOf[js.Any])
    
    inline def setMandate(value: String | Mandate): Self = StObject.set(x, "mandate", value.asInstanceOf[js.Any])
    
    inline def setMandateNull: Self = StObject.set(x, "mandate", null)
    
    inline def setMetadata(value: Metadata): Self = StObject.set(x, "metadata", value.asInstanceOf[js.Any])
    
    inline def setMetadataNull: Self = StObject.set(x, "metadata", null)
    
    inline def setNext_action(value: NextAction): Self = StObject.set(x, "next_action", value.asInstanceOf[js.Any])
    
    inline def setNext_actionNull: Self = StObject.set(x, "next_action", null)
    
    inline def setObject(value: setup_intent): Self = StObject.set(x, "object", value.asInstanceOf[js.Any])
    
    inline def setOn_behalf_of(value: String | Account): Self = StObject.set(x, "on_behalf_of", value.asInstanceOf[js.Any])
    
    inline def setOn_behalf_ofNull: Self = StObject.set(x, "on_behalf_of", null)
    
    inline def setPayment_method(value: String | PaymentMethod): Self = StObject.set(x, "payment_method", value.asInstanceOf[js.Any])
    
    inline def setPayment_methodNull: Self = StObject.set(x, "payment_method", null)
    
    inline def setPayment_method_options(value: PaymentMethodOptions): Self = StObject.set(x, "payment_method_options", value.asInstanceOf[js.Any])
    
    inline def setPayment_method_optionsNull: Self = StObject.set(x, "payment_method_options", null)
    
    inline def setPayment_method_types(value: js.Array[String]): Self = StObject.set(x, "payment_method_types", value.asInstanceOf[js.Any])
    
    inline def setPayment_method_typesVarargs(value: String*): Self = StObject.set(x, "payment_method_types", js.Array(value*))
    
    inline def setSingle_use_mandate(value: String | Mandate): Self = StObject.set(x, "single_use_mandate", value.asInstanceOf[js.Any])
    
    inline def setSingle_use_mandateNull: Self = StObject.set(x, "single_use_mandate", null)
    
    inline def setStatus(value: Status): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    inline def setUsage(value: String): Self = StObject.set(x, "usage", value.asInstanceOf[js.Any])
  }
}
