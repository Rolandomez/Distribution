package typings.stripe.anon

import typings.stripe.mod.Stripe.BalanceTransaction
import typings.stripe.mod.Stripe.Charge
import typings.stripe.mod.Stripe.Metadata
import typings.stripe.mod.Stripe.PaymentIntent
import typings.stripe.mod.Stripe.Refund.NextAction
import typings.stripe.mod.Stripe.Refund.Reason
import typings.stripe.mod.Stripe.TransferReversal
import typings.stripe.stripeStrings.refund
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined stripe.stripe.Stripe.Response<stripe.stripe.Stripe.Refund> */
trait ResponseRefund extends StObject {
  
  /**
    * Amount, in %s.
    */
  var amount: Double
  
  /**
    * Balance transaction that describes the impact on your account balance.
    */
  var balance_transaction: String | BalanceTransaction | Null
  
  /**
    * ID of the charge that was refunded.
    */
  var charge: String | Charge | Null
  
  /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    */
  var created: Double
  
  /**
    * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    */
  var currency: String
  
  /**
    * An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
    */
  var description: js.UndefOr[String] = js.undefined
  
  /**
    * If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
    */
  var failure_balance_transaction: js.UndefOr[String | BalanceTransaction] = js.undefined
  
  /**
    * If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request` or `unknown`.
    */
  var failure_reason: js.UndefOr[String] = js.undefined
  
  /**
    * Unique identifier for the object.
    */
  var id: String
  
  /**
    * For payment methods without native refund support (e.g., Konbini, PromptPay), email for the customer to receive refund instructions.
    */
  var instructions_email: js.UndefOr[String] = js.undefined
  
  var lastResponse: ApiVersion
  
  /**
    * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
  var metadata: Metadata | Null
  
  var next_action: js.UndefOr[NextAction] = js.undefined
  
  /**
    * String representing the object's type. Objects of the same type share the same value.
    */
  var `object`: refund
  
  /**
    * ID of the PaymentIntent that was refunded.
    */
  var payment_intent: String | PaymentIntent | Null
  
  /**
    * Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    */
  var reason: Reason | Null
  
  /**
    * This is the transaction number that appears on email receipts sent for this refund.
    */
  var receipt_number: String | Null
  
  /**
    * The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
    */
  var source_transfer_reversal: String | TransferReversal | Null
  
  /**
    * Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
    */
  var status: String | Null
  
  /**
    * If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
    */
  var transfer_reversal: String | TransferReversal | Null
}
object ResponseRefund {
  
  inline def apply(amount: Double, created: Double, currency: String, id: String, lastResponse: ApiVersion): ResponseRefund = {
    val __obj = js.Dynamic.literal(amount = amount.asInstanceOf[js.Any], created = created.asInstanceOf[js.Any], currency = currency.asInstanceOf[js.Any], id = id.asInstanceOf[js.Any], lastResponse = lastResponse.asInstanceOf[js.Any], balance_transaction = null, charge = null, metadata = null, payment_intent = null, reason = null, receipt_number = null, source_transfer_reversal = null, status = null, transfer_reversal = null)
    __obj.updateDynamic("object")("refund")
    __obj.asInstanceOf[ResponseRefund]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: ResponseRefund] (val x: Self) extends AnyVal {
    
    inline def setAmount(value: Double): Self = StObject.set(x, "amount", value.asInstanceOf[js.Any])
    
    inline def setBalance_transaction(value: String | BalanceTransaction): Self = StObject.set(x, "balance_transaction", value.asInstanceOf[js.Any])
    
    inline def setBalance_transactionNull: Self = StObject.set(x, "balance_transaction", null)
    
    inline def setCharge(value: String | Charge): Self = StObject.set(x, "charge", value.asInstanceOf[js.Any])
    
    inline def setChargeNull: Self = StObject.set(x, "charge", null)
    
    inline def setCreated(value: Double): Self = StObject.set(x, "created", value.asInstanceOf[js.Any])
    
    inline def setCurrency(value: String): Self = StObject.set(x, "currency", value.asInstanceOf[js.Any])
    
    inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    inline def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    inline def setFailure_balance_transaction(value: String | BalanceTransaction): Self = StObject.set(x, "failure_balance_transaction", value.asInstanceOf[js.Any])
    
    inline def setFailure_balance_transactionUndefined: Self = StObject.set(x, "failure_balance_transaction", js.undefined)
    
    inline def setFailure_reason(value: String): Self = StObject.set(x, "failure_reason", value.asInstanceOf[js.Any])
    
    inline def setFailure_reasonUndefined: Self = StObject.set(x, "failure_reason", js.undefined)
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setInstructions_email(value: String): Self = StObject.set(x, "instructions_email", value.asInstanceOf[js.Any])
    
    inline def setInstructions_emailUndefined: Self = StObject.set(x, "instructions_email", js.undefined)
    
    inline def setLastResponse(value: ApiVersion): Self = StObject.set(x, "lastResponse", value.asInstanceOf[js.Any])
    
    inline def setMetadata(value: Metadata): Self = StObject.set(x, "metadata", value.asInstanceOf[js.Any])
    
    inline def setMetadataNull: Self = StObject.set(x, "metadata", null)
    
    inline def setNext_action(value: NextAction): Self = StObject.set(x, "next_action", value.asInstanceOf[js.Any])
    
    inline def setNext_actionUndefined: Self = StObject.set(x, "next_action", js.undefined)
    
    inline def setObject(value: refund): Self = StObject.set(x, "object", value.asInstanceOf[js.Any])
    
    inline def setPayment_intent(value: String | PaymentIntent): Self = StObject.set(x, "payment_intent", value.asInstanceOf[js.Any])
    
    inline def setPayment_intentNull: Self = StObject.set(x, "payment_intent", null)
    
    inline def setReason(value: Reason): Self = StObject.set(x, "reason", value.asInstanceOf[js.Any])
    
    inline def setReasonNull: Self = StObject.set(x, "reason", null)
    
    inline def setReceipt_number(value: String): Self = StObject.set(x, "receipt_number", value.asInstanceOf[js.Any])
    
    inline def setReceipt_numberNull: Self = StObject.set(x, "receipt_number", null)
    
    inline def setSource_transfer_reversal(value: String | TransferReversal): Self = StObject.set(x, "source_transfer_reversal", value.asInstanceOf[js.Any])
    
    inline def setSource_transfer_reversalNull: Self = StObject.set(x, "source_transfer_reversal", null)
    
    inline def setStatus(value: String): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    inline def setStatusNull: Self = StObject.set(x, "status", null)
    
    inline def setTransfer_reversal(value: String | TransferReversal): Self = StObject.set(x, "transfer_reversal", value.asInstanceOf[js.Any])
    
    inline def setTransfer_reversalNull: Self = StObject.set(x, "transfer_reversal", null)
  }
}
