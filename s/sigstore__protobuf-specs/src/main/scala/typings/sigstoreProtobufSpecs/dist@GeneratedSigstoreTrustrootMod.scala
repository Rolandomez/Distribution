package typings.sigstoreProtobufSpecs

import typings.sigstoreProtobufSpecs.`dist@GeneratedSigstoreCommonMod`.DistinguishedName
import typings.sigstoreProtobufSpecs.`dist@GeneratedSigstoreCommonMod`.HashAlgorithm
import typings.sigstoreProtobufSpecs.`dist@GeneratedSigstoreCommonMod`.LogId
import typings.sigstoreProtobufSpecs.`dist@GeneratedSigstoreCommonMod`.PublicKey
import typings.sigstoreProtobufSpecs.`dist@GeneratedSigstoreCommonMod`.TimeRange
import typings.sigstoreProtobufSpecs.`dist@GeneratedSigstoreCommonMod`.X509CertificateChain
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object `dist@GeneratedSigstoreTrustrootMod` {
  
  trait CertificateAuthority extends StObject {
    
    /** The certificate chain for this CA. */
    var certChain: js.UndefOr[X509CertificateChain] = js.undefined
    
    /**
      * The root certificate MUST be self-signed, and so the subject and
      * issuer are the same.
      */
    var subject: js.UndefOr[DistinguishedName] = js.undefined
    
    /** The URI at which the CA can be accessed. */
    var uri: String
    
    /**
      * The time the *entire* chain was valid. This is at max the
      * longest interval when *all* certificates in the chain were valid,
      * but it MAY be shorter.
      */
    var validFor: js.UndefOr[TimeRange] = js.undefined
  }
  object CertificateAuthority {
    
    inline def apply(uri: String): CertificateAuthority = {
      val __obj = js.Dynamic.literal(uri = uri.asInstanceOf[js.Any])
      __obj.asInstanceOf[CertificateAuthority]
    }
    
    @JSImport("@sigstore/protobuf-specs/dist/@/generated/sigstore_trustroot", "CertificateAuthority")
    @js.native
    val ^ : js.Any = js.native
    
    inline def fromJSON(`object`: Any): CertificateAuthority = ^.asInstanceOf[js.Dynamic].applyDynamic("fromJSON")(`object`.asInstanceOf[js.Any]).asInstanceOf[CertificateAuthority]
    
    inline def toJSON(message: CertificateAuthority): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("toJSON")(message.asInstanceOf[js.Any]).asInstanceOf[Any]
    
    @scala.inline
    implicit open class MutableBuilder[Self <: CertificateAuthority] (val x: Self) extends AnyVal {
      
      inline def setCertChain(value: X509CertificateChain): Self = StObject.set(x, "certChain", value.asInstanceOf[js.Any])
      
      inline def setCertChainUndefined: Self = StObject.set(x, "certChain", js.undefined)
      
      inline def setSubject(value: DistinguishedName): Self = StObject.set(x, "subject", value.asInstanceOf[js.Any])
      
      inline def setSubjectUndefined: Self = StObject.set(x, "subject", js.undefined)
      
      inline def setUri(value: String): Self = StObject.set(x, "uri", value.asInstanceOf[js.Any])
      
      inline def setValidFor(value: TimeRange): Self = StObject.set(x, "validFor", value.asInstanceOf[js.Any])
      
      inline def setValidForUndefined: Self = StObject.set(x, "validFor", js.undefined)
    }
  }
  
  trait TransparencyLogInstance extends StObject {
    
    /** The base URL at which can be used to URLs for the client. */
    var baseUrl: String
    
    /** The hash algorithm used for the Merkle Tree. */
    var hashAlgorithm: HashAlgorithm
    
    /** The unique identifier for this transparency log. */
    var logId: js.UndefOr[LogId] = js.undefined
    
    /**
      * The public key used to verify signatures generated by the log.
      * This attribute contains the signature algorithm used by the log.
      */
    var publicKey: js.UndefOr[PublicKey] = js.undefined
  }
  object TransparencyLogInstance {
    
    inline def apply(baseUrl: String, hashAlgorithm: HashAlgorithm): TransparencyLogInstance = {
      val __obj = js.Dynamic.literal(baseUrl = baseUrl.asInstanceOf[js.Any], hashAlgorithm = hashAlgorithm.asInstanceOf[js.Any])
      __obj.asInstanceOf[TransparencyLogInstance]
    }
    
    @JSImport("@sigstore/protobuf-specs/dist/@/generated/sigstore_trustroot", "TransparencyLogInstance")
    @js.native
    val ^ : js.Any = js.native
    
    inline def fromJSON(`object`: Any): TransparencyLogInstance = ^.asInstanceOf[js.Dynamic].applyDynamic("fromJSON")(`object`.asInstanceOf[js.Any]).asInstanceOf[TransparencyLogInstance]
    
    inline def toJSON(message: TransparencyLogInstance): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("toJSON")(message.asInstanceOf[js.Any]).asInstanceOf[Any]
    
    @scala.inline
    implicit open class MutableBuilder[Self <: TransparencyLogInstance] (val x: Self) extends AnyVal {
      
      inline def setBaseUrl(value: String): Self = StObject.set(x, "baseUrl", value.asInstanceOf[js.Any])
      
      inline def setHashAlgorithm(value: HashAlgorithm): Self = StObject.set(x, "hashAlgorithm", value.asInstanceOf[js.Any])
      
      inline def setLogId(value: LogId): Self = StObject.set(x, "logId", value.asInstanceOf[js.Any])
      
      inline def setLogIdUndefined: Self = StObject.set(x, "logId", js.undefined)
      
      inline def setPublicKey(value: PublicKey): Self = StObject.set(x, "publicKey", value.asInstanceOf[js.Any])
      
      inline def setPublicKeyUndefined: Self = StObject.set(x, "publicKey", js.undefined)
    }
  }
  
  trait TrustedRoot extends StObject {
    
    /**
      * A set of trusted certificate authorites (e.g Fulcio), and any
      * intermediate certificates they provide.
      * If a CA is issuing multiple intermediate certificate, each
      * combination shall be represented as separate chain. I.e, a single
      * root cert may appear in multiple chains but with different
      * intermediate and/or leaf certificates.
      * The certificates are intended to be used for verifying artifact
      * signatures.
      */
    var certificateAuthorities: js.Array[CertificateAuthority]
    
    /** A set of trusted certificate transparency logs. */
    var ctlogs: js.Array[TransparencyLogInstance]
    
    /** MUST be application/vnd.dev.sigstore.trustedroot+json;version=0.1 */
    var mediaType: String
    
    /** A set of trusted timestamping authorities. */
    var timestampAuthorities: js.Array[CertificateAuthority]
    
    /** A set of trusted Rekor servers. */
    var tlogs: js.Array[TransparencyLogInstance]
  }
  object TrustedRoot {
    
    inline def apply(
      certificateAuthorities: js.Array[CertificateAuthority],
      ctlogs: js.Array[TransparencyLogInstance],
      mediaType: String,
      timestampAuthorities: js.Array[CertificateAuthority],
      tlogs: js.Array[TransparencyLogInstance]
    ): TrustedRoot = {
      val __obj = js.Dynamic.literal(certificateAuthorities = certificateAuthorities.asInstanceOf[js.Any], ctlogs = ctlogs.asInstanceOf[js.Any], mediaType = mediaType.asInstanceOf[js.Any], timestampAuthorities = timestampAuthorities.asInstanceOf[js.Any], tlogs = tlogs.asInstanceOf[js.Any])
      __obj.asInstanceOf[TrustedRoot]
    }
    
    @JSImport("@sigstore/protobuf-specs/dist/@/generated/sigstore_trustroot", "TrustedRoot")
    @js.native
    val ^ : js.Any = js.native
    
    inline def fromJSON(`object`: Any): TrustedRoot = ^.asInstanceOf[js.Dynamic].applyDynamic("fromJSON")(`object`.asInstanceOf[js.Any]).asInstanceOf[TrustedRoot]
    
    inline def toJSON(message: TrustedRoot): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("toJSON")(message.asInstanceOf[js.Any]).asInstanceOf[Any]
    
    @scala.inline
    implicit open class MutableBuilder[Self <: TrustedRoot] (val x: Self) extends AnyVal {
      
      inline def setCertificateAuthorities(value: js.Array[CertificateAuthority]): Self = StObject.set(x, "certificateAuthorities", value.asInstanceOf[js.Any])
      
      inline def setCertificateAuthoritiesVarargs(value: CertificateAuthority*): Self = StObject.set(x, "certificateAuthorities", js.Array(value*))
      
      inline def setCtlogs(value: js.Array[TransparencyLogInstance]): Self = StObject.set(x, "ctlogs", value.asInstanceOf[js.Any])
      
      inline def setCtlogsVarargs(value: TransparencyLogInstance*): Self = StObject.set(x, "ctlogs", js.Array(value*))
      
      inline def setMediaType(value: String): Self = StObject.set(x, "mediaType", value.asInstanceOf[js.Any])
      
      inline def setTimestampAuthorities(value: js.Array[CertificateAuthority]): Self = StObject.set(x, "timestampAuthorities", value.asInstanceOf[js.Any])
      
      inline def setTimestampAuthoritiesVarargs(value: CertificateAuthority*): Self = StObject.set(x, "timestampAuthorities", js.Array(value*))
      
      inline def setTlogs(value: js.Array[TransparencyLogInstance]): Self = StObject.set(x, "tlogs", value.asInstanceOf[js.Any])
      
      inline def setTlogsVarargs(value: TransparencyLogInstance*): Self = StObject.set(x, "tlogs", js.Array(value*))
    }
  }
}
