package typings.sigstoreProtobufSpecs.`dist@GeneratedGoogleProtobufDescriptorMod`

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait FileOptions extends StObject {
  
  /**
    * Enables the use of arenas for the proto messages in this file. This applies
    * only to generated classes for C++.
    */
  var ccEnableArenas: Boolean
  
  /**
    * Should generic services be generated in each language?  "Generic" services
    * are not specific to any particular RPC system.  They are generated by the
    * main code generators in each language (without additional plugins).
    * Generic services were the only kind of service generation supported by
    * early versions of google.protobuf.
    *
    * Generic services are now considered deprecated in favor of using plugins
    * that generate code specific to your particular RPC system.  Therefore,
    * these default to false.  Old code which depends on generic services should
    * explicitly set them to true.
    */
  var ccGenericServices: Boolean
  
  /** Namespace for generated classes; defaults to the package. */
  var csharpNamespace: String
  
  /**
    * Is this file deprecated?
    * Depending on the target platform, this can emit Deprecated annotations
    * for everything in the file, or it will be completely ignored; in the very
    * least, this is a formalization for deprecating files.
    */
  var deprecated: Boolean
  
  /**
    * Sets the Go package where structs generated from this .proto will be
    * placed. If omitted, the Go package will be derived from the following:
    *   - The basename of the package import path, if provided.
    *   - Otherwise, the package statement in the .proto file, if present.
    *   - Otherwise, the basename of the .proto file, without extension.
    */
  var goPackage: String
  
  /**
    * This option does nothing.
    *
    * @deprecated
    */
  var javaGenerateEqualsAndHash: Boolean
  
  var javaGenericServices: Boolean
  
  /**
    * If enabled, then the Java code generator will generate a separate .java
    * file for each top-level message, enum, and service defined in the .proto
    * file.  Thus, these types will *not* be nested inside the wrapper class
    * named by java_outer_classname.  However, the wrapper class will still be
    * generated to contain the file's getDescriptor() method as well as any
    * top-level extensions defined in the file.
    */
  var javaMultipleFiles: Boolean
  
  /**
    * Controls the name of the wrapper Java class generated for the .proto file.
    * That class will always contain the .proto file's getDescriptor() method as
    * well as any top-level extensions defined in the .proto file.
    * If java_multiple_files is disabled, then all the other classes from the
    * .proto file will be nested inside the single wrapper outer class.
    */
  var javaOuterClassname: String
  
  /**
    * Sets the Java package where classes generated from this .proto will be
    * placed.  By default, the proto package is used, but this is often
    * inappropriate because proto packages do not normally start with backwards
    * domain names.
    */
  var javaPackage: String
  
  /**
    * If set true, then the Java2 code generator will generate code that
    * throws an exception whenever an attempt is made to assign a non-UTF-8
    * byte sequence to a string field.
    * Message reflection will do the same.
    * However, an extension field still accepts non-UTF-8 byte sequences.
    * This option has no effect on when used with the lite runtime.
    */
  var javaStringCheckUtf8: Boolean
  
  /**
    * Sets the objective c class prefix which is prepended to all objective c
    * generated classes from this .proto. There is no default.
    */
  var objcClassPrefix: String
  
  var optimizeFor: FileOptionsOptimizeMode
  
  /**
    * Sets the php class prefix which is prepended to all php generated classes
    * from this .proto. Default is empty.
    */
  var phpClassPrefix: String
  
  var phpGenericServices: Boolean
  
  /**
    * Use this option to change the namespace of php generated metadata classes.
    * Default is empty. When this option is empty, the proto file name will be
    * used for determining the namespace.
    */
  var phpMetadataNamespace: String
  
  /**
    * Use this option to change the namespace of php generated classes. Default
    * is empty. When this option is empty, the package name will be used for
    * determining the namespace.
    */
  var phpNamespace: String
  
  var pyGenericServices: Boolean
  
  /**
    * Use this option to change the package of ruby generated classes. Default
    * is empty. When this option is not set, the package name will be used for
    * determining the ruby package.
    */
  var rubyPackage: String
  
  /**
    * By default Swift generators will take the proto package and CamelCase it
    * replacing '.' with underscore and use that to prefix the types/symbols
    * defined. When this options is provided, they will use this value instead
    * to prefix the types/symbols defined.
    */
  var swiftPrefix: String
  
  /**
    * The parser stores options it doesn't recognize here.
    * See the documentation for the "Options" section above.
    */
  var uninterpretedOption: js.Array[UninterpretedOption]
}
object FileOptions {
  
  inline def apply(
    ccEnableArenas: Boolean,
    ccGenericServices: Boolean,
    csharpNamespace: String,
    deprecated: Boolean,
    goPackage: String,
    javaGenerateEqualsAndHash: Boolean,
    javaGenericServices: Boolean,
    javaMultipleFiles: Boolean,
    javaOuterClassname: String,
    javaPackage: String,
    javaStringCheckUtf8: Boolean,
    objcClassPrefix: String,
    optimizeFor: FileOptionsOptimizeMode,
    phpClassPrefix: String,
    phpGenericServices: Boolean,
    phpMetadataNamespace: String,
    phpNamespace: String,
    pyGenericServices: Boolean,
    rubyPackage: String,
    swiftPrefix: String,
    uninterpretedOption: js.Array[UninterpretedOption]
  ): FileOptions = {
    val __obj = js.Dynamic.literal(ccEnableArenas = ccEnableArenas.asInstanceOf[js.Any], ccGenericServices = ccGenericServices.asInstanceOf[js.Any], csharpNamespace = csharpNamespace.asInstanceOf[js.Any], deprecated = deprecated.asInstanceOf[js.Any], goPackage = goPackage.asInstanceOf[js.Any], javaGenerateEqualsAndHash = javaGenerateEqualsAndHash.asInstanceOf[js.Any], javaGenericServices = javaGenericServices.asInstanceOf[js.Any], javaMultipleFiles = javaMultipleFiles.asInstanceOf[js.Any], javaOuterClassname = javaOuterClassname.asInstanceOf[js.Any], javaPackage = javaPackage.asInstanceOf[js.Any], javaStringCheckUtf8 = javaStringCheckUtf8.asInstanceOf[js.Any], objcClassPrefix = objcClassPrefix.asInstanceOf[js.Any], optimizeFor = optimizeFor.asInstanceOf[js.Any], phpClassPrefix = phpClassPrefix.asInstanceOf[js.Any], phpGenericServices = phpGenericServices.asInstanceOf[js.Any], phpMetadataNamespace = phpMetadataNamespace.asInstanceOf[js.Any], phpNamespace = phpNamespace.asInstanceOf[js.Any], pyGenericServices = pyGenericServices.asInstanceOf[js.Any], rubyPackage = rubyPackage.asInstanceOf[js.Any], swiftPrefix = swiftPrefix.asInstanceOf[js.Any], uninterpretedOption = uninterpretedOption.asInstanceOf[js.Any])
    __obj.asInstanceOf[FileOptions]
  }
  
  @JSImport("@sigstore/protobuf-specs/dist/@/generated/google/protobuf/descriptor", "FileOptions")
  @js.native
  val ^ : js.Any = js.native
  
  inline def fromJSON(`object`: Any): FileOptions = ^.asInstanceOf[js.Dynamic].applyDynamic("fromJSON")(`object`.asInstanceOf[js.Any]).asInstanceOf[FileOptions]
  
  inline def toJSON(message: FileOptions): Any = ^.asInstanceOf[js.Dynamic].applyDynamic("toJSON")(message.asInstanceOf[js.Any]).asInstanceOf[Any]
  
  @scala.inline
  implicit open class MutableBuilder[Self <: FileOptions] (val x: Self) extends AnyVal {
    
    inline def setCcEnableArenas(value: Boolean): Self = StObject.set(x, "ccEnableArenas", value.asInstanceOf[js.Any])
    
    inline def setCcGenericServices(value: Boolean): Self = StObject.set(x, "ccGenericServices", value.asInstanceOf[js.Any])
    
    inline def setCsharpNamespace(value: String): Self = StObject.set(x, "csharpNamespace", value.asInstanceOf[js.Any])
    
    inline def setDeprecated(value: Boolean): Self = StObject.set(x, "deprecated", value.asInstanceOf[js.Any])
    
    inline def setGoPackage(value: String): Self = StObject.set(x, "goPackage", value.asInstanceOf[js.Any])
    
    inline def setJavaGenerateEqualsAndHash(value: Boolean): Self = StObject.set(x, "javaGenerateEqualsAndHash", value.asInstanceOf[js.Any])
    
    inline def setJavaGenericServices(value: Boolean): Self = StObject.set(x, "javaGenericServices", value.asInstanceOf[js.Any])
    
    inline def setJavaMultipleFiles(value: Boolean): Self = StObject.set(x, "javaMultipleFiles", value.asInstanceOf[js.Any])
    
    inline def setJavaOuterClassname(value: String): Self = StObject.set(x, "javaOuterClassname", value.asInstanceOf[js.Any])
    
    inline def setJavaPackage(value: String): Self = StObject.set(x, "javaPackage", value.asInstanceOf[js.Any])
    
    inline def setJavaStringCheckUtf8(value: Boolean): Self = StObject.set(x, "javaStringCheckUtf8", value.asInstanceOf[js.Any])
    
    inline def setObjcClassPrefix(value: String): Self = StObject.set(x, "objcClassPrefix", value.asInstanceOf[js.Any])
    
    inline def setOptimizeFor(value: FileOptionsOptimizeMode): Self = StObject.set(x, "optimizeFor", value.asInstanceOf[js.Any])
    
    inline def setPhpClassPrefix(value: String): Self = StObject.set(x, "phpClassPrefix", value.asInstanceOf[js.Any])
    
    inline def setPhpGenericServices(value: Boolean): Self = StObject.set(x, "phpGenericServices", value.asInstanceOf[js.Any])
    
    inline def setPhpMetadataNamespace(value: String): Self = StObject.set(x, "phpMetadataNamespace", value.asInstanceOf[js.Any])
    
    inline def setPhpNamespace(value: String): Self = StObject.set(x, "phpNamespace", value.asInstanceOf[js.Any])
    
    inline def setPyGenericServices(value: Boolean): Self = StObject.set(x, "pyGenericServices", value.asInstanceOf[js.Any])
    
    inline def setRubyPackage(value: String): Self = StObject.set(x, "rubyPackage", value.asInstanceOf[js.Any])
    
    inline def setSwiftPrefix(value: String): Self = StObject.set(x, "swiftPrefix", value.asInstanceOf[js.Any])
    
    inline def setUninterpretedOption(value: js.Array[UninterpretedOption]): Self = StObject.set(x, "uninterpretedOption", value.asInstanceOf[js.Any])
    
    inline def setUninterpretedOptionVarargs(value: UninterpretedOption*): Self = StObject.set(x, "uninterpretedOption", js.Array(value*))
  }
}
