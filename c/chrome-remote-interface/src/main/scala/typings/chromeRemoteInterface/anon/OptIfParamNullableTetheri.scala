package typings.chromeRemoteInterface.anon

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined chrome-remote-interface.chrome-remote-interface.OptIfParamNullable<devtools-protocol.devtools-protocol/types/protocol-proxy-api.default.TetheringApi> */
trait OptIfParamNullableTetheri extends StObject {
  
  var bind: /* import warning: importer.ImportType#apply Failed type conversion: (params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void> extends (params : any): any ? chrome-remote-interface.chrome-remote-interface.IsNullableObj<std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void>>[0]> extends true ? (params : std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void>>[0] | undefined): std.ReturnType<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void>> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void> */ js.Any
  
  var on: /* import warning: importer.ImportType#apply Failed type conversion: (event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void extends (params : any): any ? chrome-remote-interface.chrome-remote-interface.IsNullableObj<std.Parameters<(event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void>[0]> extends true ? (params : std.Parameters<(event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void>[0] | undefined): std.ReturnType<(event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void> : (event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void : (event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void */ js.Any
  
  var unbind: /* import warning: importer.ImportType#apply Failed type conversion: (params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void> extends (params : any): any ? chrome-remote-interface.chrome-remote-interface.IsNullableObj<std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void>>[0]> extends true ? (params : std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void>>[0] | undefined): std.ReturnType<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void>> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void> */ js.Any
}
object OptIfParamNullableTetheri {
  
  inline def apply(
    bind: /* import warning: importer.ImportType#apply Failed type conversion: (params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void> extends (params : any): any ? chrome-remote-interface.chrome-remote-interface.IsNullableObj<std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void>>[0]> extends true ? (params : std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void>>[0] | undefined): std.ReturnType<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void>> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void> */ js.Any,
    on: /* import warning: importer.ImportType#apply Failed type conversion: (event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void extends (params : any): any ? chrome-remote-interface.chrome-remote-interface.IsNullableObj<std.Parameters<(event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void>[0]> extends true ? (params : std.Parameters<(event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void>[0] | undefined): std.ReturnType<(event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void> : (event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void : (event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void */ js.Any,
    unbind: /* import warning: importer.ImportType#apply Failed type conversion: (params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void> extends (params : any): any ? chrome-remote-interface.chrome-remote-interface.IsNullableObj<std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void>>[0]> extends true ? (params : std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void>>[0] | undefined): std.ReturnType<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void>> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void> */ js.Any
  ): OptIfParamNullableTetheri = {
    val __obj = js.Dynamic.literal(bind = bind.asInstanceOf[js.Any], on = on.asInstanceOf[js.Any], unbind = unbind.asInstanceOf[js.Any])
    __obj.asInstanceOf[OptIfParamNullableTetheri]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: OptIfParamNullableTetheri] (val x: Self) extends AnyVal {
    
    inline def setBind(
      value: /* import warning: importer.ImportType#apply Failed type conversion: (params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void> extends (params : any): any ? chrome-remote-interface.chrome-remote-interface.IsNullableObj<std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void>>[0]> extends true ? (params : std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void>>[0] | undefined): std.ReturnType<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void>> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.BindRequest): std.Promise<void> */ js.Any
    ): Self = StObject.set(x, "bind", value.asInstanceOf[js.Any])
    
    inline def setOn(
      value: /* import warning: importer.ImportType#apply Failed type conversion: (event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void extends (params : any): any ? chrome-remote-interface.chrome-remote-interface.IsNullableObj<std.Parameters<(event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void>[0]> extends true ? (params : std.Parameters<(event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void>[0] | undefined): std.ReturnType<(event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void> : (event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void : (event : 'accepted', listener : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.AcceptedEvent): void): void */ js.Any
    ): Self = StObject.set(x, "on", value.asInstanceOf[js.Any])
    
    inline def setUnbind(
      value: /* import warning: importer.ImportType#apply Failed type conversion: (params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void> extends (params : any): any ? chrome-remote-interface.chrome-remote-interface.IsNullableObj<std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void>>[0]> extends true ? (params : std.Parameters<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void>>[0] | undefined): std.ReturnType<(params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void>> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void> : (params : devtools-protocol.devtools-protocol.Protocol.Tethering.UnbindRequest): std.Promise<void> */ js.Any
    ): Self = StObject.set(x, "unbind", value.asInstanceOf[js.Any])
  }
}
