package typings.typedoc.mod

import typings.std.PropertyKey
import typings.typedoc.anon.PartialTypeVisitorvoid
import typings.typedoc.distLibModelsTypesMod.TypeVisitor
import typings.typedoc.distLibUtilsGeneralMod.NeverIfInternal
import typings.typedoc.mod.^
import typings.typedoc.typedocStrings.basePath
import typings.typedoc.typedocStrings.blockTags
import typings.typedoc.typedocStrings.categorizeByGroup
import typings.typedoc.typedocStrings.categoryOrder
import typings.typedoc.typedocStrings.cleanOutputDir
import typings.typedoc.typedocStrings.cname
import typings.typedoc.typedocStrings.commentStyle
import typings.typedoc.typedocStrings.compilerOptions
import typings.typedoc.typedocStrings.customCss
import typings.typedoc.typedocStrings.darkHighlightTheme
import typings.typedoc.typedocStrings.defaultCategory
import typings.typedoc.typedocStrings.disableSources
import typings.typedoc.typedocStrings.emit
import typings.typedoc.typedocStrings.entryPointStrategy
import typings.typedoc.typedocStrings.entryPoints
import typings.typedoc.typedocStrings.exclude
import typings.typedoc.typedocStrings.excludeExternals
import typings.typedoc.typedocStrings.excludeInternal
import typings.typedoc.typedocStrings.excludeNotDocumented
import typings.typedoc.typedocStrings.excludePrivate
import typings.typedoc.typedocStrings.excludeProtected
import typings.typedoc.typedocStrings.excludeTags
import typings.typedoc.typedocStrings.externalPattern
import typings.typedoc.typedocStrings.externalSymbolLinkMappings
import typings.typedoc.typedocStrings.gaID
import typings.typedoc.typedocStrings.gitRemote
import typings.typedoc.typedocStrings.gitRevision
import typings.typedoc.typedocStrings.githubPages
import typings.typedoc.typedocStrings.help
import typings.typedoc.typedocStrings.hideGenerator
import typings.typedoc.typedocStrings.htmlLang
import typings.typedoc.typedocStrings.includeVersion
import typings.typedoc.typedocStrings.includes
import typings.typedoc.typedocStrings.inlineTags
import typings.typedoc.typedocStrings.intentionallyNotExported
import typings.typedoc.typedocStrings.json
import typings.typedoc.typedocStrings.lightHighlightTheme
import typings.typedoc.typedocStrings.logLevel
import typings.typedoc.typedocStrings.logger
import typings.typedoc.typedocStrings.markedOptions
import typings.typedoc.typedocStrings.media
import typings.typedoc.typedocStrings.modifierTags
import typings.typedoc.typedocStrings.name
import typings.typedoc.typedocStrings.navigationLinks
import typings.typedoc.typedocStrings.options
import typings.typedoc.typedocStrings.out
import typings.typedoc.typedocStrings.plugin
import typings.typedoc.typedocStrings.preserveWatchOutput
import typings.typedoc.typedocStrings.pretty
import typings.typedoc.typedocStrings.readme
import typings.typedoc.typedocStrings.requiredToBeDocumented
import typings.typedoc.typedocStrings.searchCategoryBoosts
import typings.typedoc.typedocStrings.searchGroupBoosts
import typings.typedoc.typedocStrings.searchInComments
import typings.typedoc.typedocStrings.showConfig
import typings.typedoc.typedocStrings.sidebarLinks
import typings.typedoc.typedocStrings.skipErrorChecking
import typings.typedoc.typedocStrings.sort
import typings.typedoc.typedocStrings.sourceLinkTemplate
import typings.typedoc.typedocStrings.theme
import typings.typedoc.typedocStrings.titleLink
import typings.typedoc.typedocStrings.treatWarningsAsErrors
import typings.typedoc.typedocStrings.tsconfig
import typings.typedoc.typedocStrings.validation
import typings.typedoc.typedocStrings.version
import typings.typedoc.typedocStrings.visibilityFilters
import typings.typedoc.typedocStrings.watch
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}


inline def BindOption(name: NeverIfInternal[String]): js.Function2[
/* target */ typings.typedoc.anon.Application | typings.typedoc.anon.Options, 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ typings.typedoc.anon.Application | typings.typedoc.anon.Options, 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_basePath(name: basePath): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_blockTags(name: blockTags): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_categorizeByGroup(name: categorizeByGroup): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_categoryOrder(name: categoryOrder): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_cleanOutputDir(name: cleanOutputDir): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_cname(name: cname): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_commentStyle(name: commentStyle): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}? unknown : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'} : { readonly JSDoc :'jsdoc',  readonly Block :'block',  readonly Line :'line',  readonly All :'all'}[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_compilerOptions(name: compilerOptions): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_customCss(name: customCss): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_darkHighlightTheme(name: darkHighlightTheme): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_defaultCategory(name: defaultCategory): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_disableSources(name: disableSources): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_emit(name: emit): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}? unknown : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly both :'both',  readonly docs :'docs',  readonly none :'none'} : { readonly both :'both',  readonly docs :'docs',  readonly none :'none'}[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_entryPointStrategy(name: entryPointStrategy): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}? unknown : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'} : { readonly Resolve :'resolve',  readonly Expand :'expand',  readonly Packages :'packages'}[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_entryPoints(name: entryPoints): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_exclude(name: exclude): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_excludeExternals(name: excludeExternals): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_excludeInternal(name: excludeInternal): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_excludeNotDocumented(name: excludeNotDocumented): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_excludePrivate(name: excludePrivate): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_excludeProtected(name: excludeProtected): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_excludeTags(name: excludeTags): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_externalPattern(name: externalPattern): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_externalSymbolLinkMappings(name: externalSymbolLinkMappings): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, std.Record<string, string>>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_gaID(name: gaID): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_gitRemote(name: gitRemote): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_gitRevision(name: gitRevision): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_githubPages(name: githubPages): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_help(name: help): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_hideGenerator(name: hideGenerator): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_htmlLang(name: htmlLang): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_includeVersion(name: includeVersion): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_includes(name: includes): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_inlineTags(name: inlineTags): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_intentionallyNotExported(name: intentionallyNotExported): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_json(name: json): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_lightHighlightTheme(name: lightHighlightTheme): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends shiki.shiki.Theme? unknown : shiki.shiki.Theme extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : shiki.shiki.Theme extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? shiki.shiki.Theme : shiki.shiki.Theme[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_logLevel(name: logLevel): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any? unknown : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any : / * import warning: ResolveTypeQueries.resolve Couldn't resolve typeof LogLevel * / any[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_logger(name: logger): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_markedOptions(name: markedOptions): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends unknown? unknown : unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : unknown extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? unknown : unknown[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_media(name: media): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_modifierTags(name: modifierTags): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array</ * template literal string: @${string} * / string>? unknown : std.Array</ * template literal string: @${string} * / string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array</ * template literal string: @${string} * / string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array</ * template literal string: @${string} * / string> : std.Array</ * template literal string: @${string} * / string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_name(name: name): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_navigationLinks(name: navigationLinks): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_options(name: options): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_out(name: out): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_plugin(name: plugin): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<string>? unknown : std.Array<string> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<string> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<string> : std.Array<string>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_preserveWatchOutput(name: preserveWatchOutput): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_pretty(name: pretty): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_readme(name: readme): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_requiredToBeDocumented(name: requiredToBeDocumented): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>? unknown : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}> : std.Array<keyof { readonly All :number,  readonly ClassOrInterface :number,  readonly VariableOrProperty :number,  readonly FunctionOrMethod :number,  readonly ClassMember :number,  readonly SomeSignature :number,  readonly SomeModule :number,  readonly SomeType :number,  readonly SomeValue :number,  readonly SomeMember :number,  readonly SomeExport :number,  readonly ExportContainer :number,  readonly Inheritable :number,  readonly ContainsCallSignatures :number,  readonly SignatureContainer :number}>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_searchCategoryBoosts(name: searchCategoryBoosts): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_searchGroupBoosts(name: searchGroupBoosts): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, number>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_searchInComments(name: searchInComments): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_showConfig(name: showConfig): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_sidebarLinks(name: sidebarLinks): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<std.Record<string, string>>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_skipErrorChecking(name: skipErrorChecking): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_sort(name: sort): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>? unknown : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy> : std.Array<typedoc.typedoc/dist/lib/utils/sort.SortStrategy>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_sourceLinkTemplate(name: sourceLinkTemplate): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_theme(name: theme): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_titleLink(name: titleLink): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_treatWarningsAsErrors(name: treatWarningsAsErrors): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_tsconfig(name: tsconfig): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends string? unknown : string extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : string extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? string : string[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_validation(name: validation): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions : typedoc.typedoc/dist/lib/utils/options/declaration.ValidationOptions[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_version(name: version): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_visibilityFilters(name: visibilityFilters): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>? unknown : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}> : typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<{  protected :boolean | undefined,   private :boolean | undefined,   inherited :boolean | undefined,   external :boolean | undefined, [tag: / * template literal string: @${string} * / string] : boolean}>[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def BindOption_watch(name: watch): js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("BindOption")(name.asInstanceOf[js.Any]).asInstanceOf[js.Function2[
/* target */ (typings.typedoc.anon.Application & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)) | (typings.typedoc.anon.Options & (/* import warning: importer.ImportType#apply Failed type conversion: {[ K2 in std.PropertyKey ]: unknown extends boolean? unknown : boolean extends typedoc.typedoc/dist/lib/utils/options/declaration.ManuallyValidatedOption<infer ManuallyValidated>? ManuallyValidated : boolean extends string | std.Array<string> | number | boolean | std.Record<string, boolean>? boolean : boolean[any | undefined]} */ js.Any)), 
/* key */ PropertyKey, 
Unit]]

inline def makeRecursiveVisitor(visitor: PartialTypeVisitorvoid): TypeVisitor[Unit] = ^.asInstanceOf[js.Dynamic].applyDynamic("makeRecursiveVisitor")(visitor.asInstanceOf[js.Any]).asInstanceOf[TypeVisitor[Unit]]

inline def normalizePath(path: String): String = ^.asInstanceOf[js.Dynamic].applyDynamic("normalizePath")(path.asInstanceOf[js.Any]).asInstanceOf[String]

inline def resetReflectionID(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("resetReflectionID")().asInstanceOf[Unit]

inline def splitUnquotedString(input: String, delimiter: String): js.Array[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("splitUnquotedString")(input.asInstanceOf[js.Any], delimiter.asInstanceOf[js.Any])).asInstanceOf[js.Array[String]]
