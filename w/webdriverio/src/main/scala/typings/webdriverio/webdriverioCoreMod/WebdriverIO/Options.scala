package typings.webdriverio.webdriverioCoreMod.WebdriverIO

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait Options extends StObject {
  
  /**
    * Define the protocol you want to use for your browser automation.
    * Currently only [`webdriver`](https://www.npmjs.com/package/webdriver) and
    * [`devtools`](https://www.npmjs.com/package/devtools) are supported,
    * as these are the main browser automation technologies available.
    */
  var automationProtocol: js.UndefOr[String] = js.undefined
  
  /**
    * If you want your test run to stop after a specific number of test failures, use bail.
    * (It defaults to 0, which runs all tests no matter what.) Note: Please be aware that
    * when using a third party test runner (such as Mocha), additional configuration might
    * be required.
    */
  var bail: js.UndefOr[Double] = js.undefined
  
  /**
    * Shorten url command calls by setting a base URL.
    */
  var baseUrl: js.UndefOr[String] = js.undefined
  
  var capabilities: js.UndefOr[
    (js.Array[
      /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify WebDriver.DesiredCapabilities */ js.Any
    ]) | MultiRemoteCapabilities
  ] = js.undefined
  
  /**
    * Exclude specs from test execution.
    */
  var exclude: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * Node arguments to specify when launching child processes.
    */
  var execArgv: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * Files to watch when running `wdio` with the `--watch` flag.
    */
  var filesToWatch: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * Defines the test framework to be used by the WDIO testrunner.
    */
  var framework: js.UndefOr[String] = js.undefined
  
  /**
    * Sauce Labs provides a headless offering that allows you to run Chrome and Firefox tests headless.
    */
  var headless: js.UndefOr[String] = js.undefined
  
  /**
    * Your cloud service access key or secret key (only works for Sauce Labs, Browserstack,
    * TestingBot, CrossBrowserTesting or LambdaTest accounts). If set, WebdriverIO will
    * automatically set connection options for you.
    */
  var key: js.UndefOr[String] = js.undefined
  
  /**
    * Maximum number of total parallel running workers.
    */
  var maxInstances: js.UndefOr[Double] = js.undefined
  
  /**
    * Maximum number of total parallel running workers per capability.
    */
  var maxInstancesPerCapability: js.UndefOr[Double] = js.undefined
  
  /**
    * Directory to store all testrunner log files (including reporter logs and wdio logs).
    * If not set, all logs are streamed to stdout. Since most reporters are made to log to
    * stdout, it is recommended to only use this option for specific reporters where it
    * makes more sense to push report into a file (like the junit reporter, for example).
    *
    * When running in standalone mode, the only log generated by WebdriverIO will be the wdio log.
    */
  var outputDir: js.UndefOr[String] = js.undefined
  
  /**
    * If running on Sauce Labs, you can choose to run tests between different datacenters:
    * US or EU. To change your region to EU, add region: 'eu' to your config.
    */
  var region: js.UndefOr[String] = js.undefined
  
  /**
    * Determines in which interval the reporter should check if they are synchronised
    * if they report their logs asynchronously (e.g. if logs are streamed to a 3rd
    * party vendor).
    */
  var reporterSyncInterval: js.UndefOr[Double] = js.undefined
  
  /**
    * Determines the maximum time reporters have to finish uploading all their logs
    * until an error is being thrown by the testrunner.
    */
  var reporterSyncTimeout: js.UndefOr[Double] = js.undefined
  
  /**
    * List of reporters to use. A reporter can be either a string, or an array of
    * `['reporterName', { <reporter options> }]` where the first element is a string
    * with the reporter name and the second element an object with reporter options.
    */
  var reporters: js.UndefOr[js.Array[String | js.Object]] = js.undefined
  
  var runner: js.UndefOr[String] = js.undefined
  
  /**
    * Services take over a specific job you don't want to take care of. They enhance
    * your test setup with almost no effort.
    */
  var services: js.UndefOr[js.Array[ServiceEntry]] = js.undefined
  
  /**
    * The number of retry attempts for an entire specfile when it fails as a whole.
    */
  var specFileRetries: js.UndefOr[Double] = js.undefined
  
  /**
    * Delay in seconds between the spec file retry attempts
    */
  var specFileRetriesDelay: js.UndefOr[Double] = js.undefined
  
  /**
    * Define specs for test execution.
    */
  var specs: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * An object describing various of suites, which you can then specify
    * with the --suite option on the wdio CLI.
    */
  var suites: js.UndefOr[js.Object] = js.undefined
  
  /**
    * Your cloud service username (only works for Sauce Labs, Browserstack, TestingBot,
    * CrossBrowserTesting or LambdaTest accounts). If set, WebdriverIO will automatically
    * set connection options for you.
    */
  var user: js.UndefOr[String] = js.undefined
  
  /**
    * Default interval for all `waitFor*` commands to check if an expected state (e.g.,
    * visibility) has been changed.
    */
  var waitforInterval: js.UndefOr[Double] = js.undefined
  
  /**
    * Default timeout for all `waitFor*` commands. (Note the lowercase f in the option name.)
    * This timeout only affects commands starting with `waitFor*` and their default wait time.
    */
  var waitforTimeout: js.UndefOr[Double] = js.undefined
}
object Options {
  
  inline def apply(): Options = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Options]
  }
  
  extension [Self <: Options](x: Self) {
    
    inline def setAutomationProtocol(value: String): Self = StObject.set(x, "automationProtocol", value.asInstanceOf[js.Any])
    
    inline def setAutomationProtocolUndefined: Self = StObject.set(x, "automationProtocol", js.undefined)
    
    inline def setBail(value: Double): Self = StObject.set(x, "bail", value.asInstanceOf[js.Any])
    
    inline def setBailUndefined: Self = StObject.set(x, "bail", js.undefined)
    
    inline def setBaseUrl(value: String): Self = StObject.set(x, "baseUrl", value.asInstanceOf[js.Any])
    
    inline def setBaseUrlUndefined: Self = StObject.set(x, "baseUrl", js.undefined)
    
    inline def setCapabilities(
      value: (js.Array[
          /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify WebDriver.DesiredCapabilities */ js.Any
        ]) | MultiRemoteCapabilities
    ): Self = StObject.set(x, "capabilities", value.asInstanceOf[js.Any])
    
    inline def setCapabilitiesUndefined: Self = StObject.set(x, "capabilities", js.undefined)
    
    inline def setCapabilitiesVarargs(
      value: (/* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify WebDriver.DesiredCapabilities */ js.Any)*
    ): Self = StObject.set(x, "capabilities", js.Array(value :_*))
    
    inline def setExclude(value: js.Array[String]): Self = StObject.set(x, "exclude", value.asInstanceOf[js.Any])
    
    inline def setExcludeUndefined: Self = StObject.set(x, "exclude", js.undefined)
    
    inline def setExcludeVarargs(value: String*): Self = StObject.set(x, "exclude", js.Array(value :_*))
    
    inline def setExecArgv(value: js.Array[String]): Self = StObject.set(x, "execArgv", value.asInstanceOf[js.Any])
    
    inline def setExecArgvUndefined: Self = StObject.set(x, "execArgv", js.undefined)
    
    inline def setExecArgvVarargs(value: String*): Self = StObject.set(x, "execArgv", js.Array(value :_*))
    
    inline def setFilesToWatch(value: js.Array[String]): Self = StObject.set(x, "filesToWatch", value.asInstanceOf[js.Any])
    
    inline def setFilesToWatchUndefined: Self = StObject.set(x, "filesToWatch", js.undefined)
    
    inline def setFilesToWatchVarargs(value: String*): Self = StObject.set(x, "filesToWatch", js.Array(value :_*))
    
    inline def setFramework(value: String): Self = StObject.set(x, "framework", value.asInstanceOf[js.Any])
    
    inline def setFrameworkUndefined: Self = StObject.set(x, "framework", js.undefined)
    
    inline def setHeadless(value: String): Self = StObject.set(x, "headless", value.asInstanceOf[js.Any])
    
    inline def setHeadlessUndefined: Self = StObject.set(x, "headless", js.undefined)
    
    inline def setKey(value: String): Self = StObject.set(x, "key", value.asInstanceOf[js.Any])
    
    inline def setKeyUndefined: Self = StObject.set(x, "key", js.undefined)
    
    inline def setMaxInstances(value: Double): Self = StObject.set(x, "maxInstances", value.asInstanceOf[js.Any])
    
    inline def setMaxInstancesPerCapability(value: Double): Self = StObject.set(x, "maxInstancesPerCapability", value.asInstanceOf[js.Any])
    
    inline def setMaxInstancesPerCapabilityUndefined: Self = StObject.set(x, "maxInstancesPerCapability", js.undefined)
    
    inline def setMaxInstancesUndefined: Self = StObject.set(x, "maxInstances", js.undefined)
    
    inline def setOutputDir(value: String): Self = StObject.set(x, "outputDir", value.asInstanceOf[js.Any])
    
    inline def setOutputDirUndefined: Self = StObject.set(x, "outputDir", js.undefined)
    
    inline def setRegion(value: String): Self = StObject.set(x, "region", value.asInstanceOf[js.Any])
    
    inline def setRegionUndefined: Self = StObject.set(x, "region", js.undefined)
    
    inline def setReporterSyncInterval(value: Double): Self = StObject.set(x, "reporterSyncInterval", value.asInstanceOf[js.Any])
    
    inline def setReporterSyncIntervalUndefined: Self = StObject.set(x, "reporterSyncInterval", js.undefined)
    
    inline def setReporterSyncTimeout(value: Double): Self = StObject.set(x, "reporterSyncTimeout", value.asInstanceOf[js.Any])
    
    inline def setReporterSyncTimeoutUndefined: Self = StObject.set(x, "reporterSyncTimeout", js.undefined)
    
    inline def setReporters(value: js.Array[String | js.Object]): Self = StObject.set(x, "reporters", value.asInstanceOf[js.Any])
    
    inline def setReportersUndefined: Self = StObject.set(x, "reporters", js.undefined)
    
    inline def setReportersVarargs(value: (String | js.Object)*): Self = StObject.set(x, "reporters", js.Array(value :_*))
    
    inline def setRunner(value: String): Self = StObject.set(x, "runner", value.asInstanceOf[js.Any])
    
    inline def setRunnerUndefined: Self = StObject.set(x, "runner", js.undefined)
    
    inline def setServices(value: js.Array[ServiceEntry]): Self = StObject.set(x, "services", value.asInstanceOf[js.Any])
    
    inline def setServicesUndefined: Self = StObject.set(x, "services", js.undefined)
    
    inline def setServicesVarargs(value: ServiceEntry*): Self = StObject.set(x, "services", js.Array(value :_*))
    
    inline def setSpecFileRetries(value: Double): Self = StObject.set(x, "specFileRetries", value.asInstanceOf[js.Any])
    
    inline def setSpecFileRetriesDelay(value: Double): Self = StObject.set(x, "specFileRetriesDelay", value.asInstanceOf[js.Any])
    
    inline def setSpecFileRetriesDelayUndefined: Self = StObject.set(x, "specFileRetriesDelay", js.undefined)
    
    inline def setSpecFileRetriesUndefined: Self = StObject.set(x, "specFileRetries", js.undefined)
    
    inline def setSpecs(value: js.Array[String]): Self = StObject.set(x, "specs", value.asInstanceOf[js.Any])
    
    inline def setSpecsUndefined: Self = StObject.set(x, "specs", js.undefined)
    
    inline def setSpecsVarargs(value: String*): Self = StObject.set(x, "specs", js.Array(value :_*))
    
    inline def setSuites(value: js.Object): Self = StObject.set(x, "suites", value.asInstanceOf[js.Any])
    
    inline def setSuitesUndefined: Self = StObject.set(x, "suites", js.undefined)
    
    inline def setUser(value: String): Self = StObject.set(x, "user", value.asInstanceOf[js.Any])
    
    inline def setUserUndefined: Self = StObject.set(x, "user", js.undefined)
    
    inline def setWaitforInterval(value: Double): Self = StObject.set(x, "waitforInterval", value.asInstanceOf[js.Any])
    
    inline def setWaitforIntervalUndefined: Self = StObject.set(x, "waitforInterval", js.undefined)
    
    inline def setWaitforTimeout(value: Double): Self = StObject.set(x, "waitforTimeout", value.asInstanceOf[js.Any])
    
    inline def setWaitforTimeoutUndefined: Self = StObject.set(x, "waitforTimeout", js.undefined)
  }
}
