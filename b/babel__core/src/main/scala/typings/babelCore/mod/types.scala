package typings.babelCore.mod

import typings.babelCore.babelCoreBooleans.`false`
import typings.babelCore.babelCoreBooleans.`true`
import typings.babelCore.babelCoreStrings.Ampersand
import typings.babelCore.babelCoreStrings.AmpersandAmpersand
import typings.babelCore.babelCoreStrings.Asterisk
import typings.babelCore.babelCoreStrings.AsteriskAsterisk
import typings.babelCore.babelCoreStrings.BlockStatement
import typings.babelCore.babelCoreStrings.ClassBody
import typings.babelCore.babelCoreStrings.CommonJS
import typings.babelCore.babelCoreStrings.ES
import typings.babelCore.babelCoreStrings.EqualssignEqualssign
import typings.babelCore.babelCoreStrings.EqualssignEqualssignEqualssign
import typings.babelCore.babelCoreStrings.Exclamationmark
import typings.babelCore.babelCoreStrings.ExclamationmarkEqualssign
import typings.babelCore.babelCoreStrings.ExclamationmarkEqualssignEqualssign
import typings.babelCore.babelCoreStrings.Greaterthansign
import typings.babelCore.babelCoreStrings.GreaterthansignEqualssign
import typings.babelCore.babelCoreStrings.GreaterthansignGreaterthansign
import typings.babelCore.babelCoreStrings.GreaterthansignGreaterthansignGreaterthansign
import typings.babelCore.babelCoreStrings.Identifier
import typings.babelCore.babelCoreStrings.Lessthansign
import typings.babelCore.babelCoreStrings.LessthansignEqualssign
import typings.babelCore.babelCoreStrings.LessthansignLessthansign
import typings.babelCore.babelCoreStrings.Percentsign
import typings.babelCore.babelCoreStrings.Plussign
import typings.babelCore.babelCoreStrings.PlussignPlussign
import typings.babelCore.babelCoreStrings.QuestionmarkQuestionmark
import typings.babelCore.babelCoreStrings.Slash
import typings.babelCore.babelCoreStrings.StringLiteral
import typings.babelCore.babelCoreStrings.Tilde
import typings.babelCore.babelCoreStrings.Verticalline
import typings.babelCore.babelCoreStrings.VerticallineVerticalline
import typings.babelCore.babelCoreStrings.`--`
import typings.babelCore.babelCoreStrings.`-_`
import typings.babelCore.babelCoreStrings.`object`
import typings.babelCore.babelCoreStrings.`throw`
import typings.babelCore.babelCoreStrings.`var`
import typings.babelCore.babelCoreStrings.boolean
import typings.babelCore.babelCoreStrings.const
import typings.babelCore.babelCoreStrings.constructor
import typings.babelCore.babelCoreStrings.delete
import typings.babelCore.babelCoreStrings.function
import typings.babelCore.babelCoreStrings.get
import typings.babelCore.babelCoreStrings.in
import typings.babelCore.babelCoreStrings.instanceof
import typings.babelCore.babelCoreStrings.let
import typings.babelCore.babelCoreStrings.method
import typings.babelCore.babelCoreStrings.minus
import typings.babelCore.babelCoreStrings.module
import typings.babelCore.babelCoreStrings.number
import typings.babelCore.babelCoreStrings.plus
import typings.babelCore.babelCoreStrings.script
import typings.babelCore.babelCoreStrings.set
import typings.babelCore.babelCoreStrings.string
import typings.babelCore.babelCoreStrings.symbol
import typings.babelCore.babelCoreStrings.typeof
import typings.babelCore.babelCoreStrings.undefined
import typings.babelCore.babelCoreStrings.void
import typings.babelTypes.anon.ChildrenReadonlyArray
import typings.babelTypes.anon.Computed
import typings.babelTypes.anon.Cooked
import typings.babelTypes.anon.PickMemberExpressionobjecObject
import typings.babelTypes.anon.PreserveComments
import typings.babelTypes.anon.Push
import typings.babelTypes.anon.ToString
import typings.babelTypes.anon.Type
import typings.babelTypes.anon.`0`
import typings.babelTypes.mod.AnyTypeAnnotation_
import typings.babelTypes.mod.ArgumentPlaceholder_
import typings.babelTypes.mod.ArrayExpression_
import typings.babelTypes.mod.ArrayPattern_
import typings.babelTypes.mod.ArrayTypeAnnotation_
import typings.babelTypes.mod.ArrowFunctionExpression_
import typings.babelTypes.mod.AssignmentExpression_
import typings.babelTypes.mod.AssignmentPattern_
import typings.babelTypes.mod.AwaitExpression_
import typings.babelTypes.mod.BigIntLiteral_
import typings.babelTypes.mod.BinaryExpression_
import typings.babelTypes.mod.BindExpression_
import typings.babelTypes.mod.BlockStatement_
import typings.babelTypes.mod.BooleanLiteralTypeAnnotation_
import typings.babelTypes.mod.BooleanLiteral_
import typings.babelTypes.mod.BooleanTypeAnnotation_
import typings.babelTypes.mod.BreakStatement_
import typings.babelTypes.mod.CallExpression_
import typings.babelTypes.mod.CatchClause_
import typings.babelTypes.mod.Class
import typings.babelTypes.mod.ClassBody_
import typings.babelTypes.mod.ClassDeclaration_
import typings.babelTypes.mod.ClassExpression_
import typings.babelTypes.mod.ClassImplements_
import typings.babelTypes.mod.ClassMethod_
import typings.babelTypes.mod.ClassPrivateMethod_
import typings.babelTypes.mod.ClassPrivateProperty_
import typings.babelTypes.mod.ClassProperty_
import typings.babelTypes.mod.Comment
import typings.babelTypes.mod.CommentBlock
import typings.babelTypes.mod.CommentLine
import typings.babelTypes.mod.CommentTypeShorthand
import typings.babelTypes.mod.ConditionalExpression_
import typings.babelTypes.mod.ContinueStatement_
import typings.babelTypes.mod.DebuggerStatement_
import typings.babelTypes.mod.DecimalLiteral_
import typings.babelTypes.mod.Declaration
import typings.babelTypes.mod.DeclareClass_
import typings.babelTypes.mod.DeclareExportAllDeclaration_
import typings.babelTypes.mod.DeclareExportDeclaration_
import typings.babelTypes.mod.DeclareFunction_
import typings.babelTypes.mod.DeclareInterface_
import typings.babelTypes.mod.DeclareModuleExports_
import typings.babelTypes.mod.DeclareModule_
import typings.babelTypes.mod.DeclareOpaqueType_
import typings.babelTypes.mod.DeclareTypeAlias_
import typings.babelTypes.mod.DeclareVariable_
import typings.babelTypes.mod.DeclaredPredicate_
import typings.babelTypes.mod.Decorator_
import typings.babelTypes.mod.DirectiveLiteral_
import typings.babelTypes.mod.Directive_
import typings.babelTypes.mod.DoExpression_
import typings.babelTypes.mod.DoWhileStatement_
import typings.babelTypes.mod.EmptyStatement_
import typings.babelTypes.mod.EmptyTypeAnnotation_
import typings.babelTypes.mod.EnumBooleanBody_
import typings.babelTypes.mod.EnumBooleanMember_
import typings.babelTypes.mod.EnumDeclaration_
import typings.babelTypes.mod.EnumDefaultedMember_
import typings.babelTypes.mod.EnumNumberBody_
import typings.babelTypes.mod.EnumNumberMember_
import typings.babelTypes.mod.EnumStringBody_
import typings.babelTypes.mod.EnumStringMember_
import typings.babelTypes.mod.EnumSymbolBody_
import typings.babelTypes.mod.ExistsTypeAnnotation_
import typings.babelTypes.mod.ExportAllDeclaration_
import typings.babelTypes.mod.ExportDefaultDeclaration_
import typings.babelTypes.mod.ExportDefaultSpecifier_
import typings.babelTypes.mod.ExportNamedDeclaration_
import typings.babelTypes.mod.ExportNamespaceSpecifier_
import typings.babelTypes.mod.ExportSpecifier_
import typings.babelTypes.mod.Expression
import typings.babelTypes.mod.ExpressionStatement_
import typings.babelTypes.mod.File_
import typings.babelTypes.mod.Flow
import typings.babelTypes.mod.FlowType
import typings.babelTypes.mod.ForInStatement_
import typings.babelTypes.mod.ForOfStatement_
import typings.babelTypes.mod.ForStatement_
import typings.babelTypes.mod.Function
import typings.babelTypes.mod.FunctionDeclaration_
import typings.babelTypes.mod.FunctionExpression_
import typings.babelTypes.mod.FunctionTypeAnnotation_
import typings.babelTypes.mod.FunctionTypeParam_
import typings.babelTypes.mod.GenericTypeAnnotation_
import typings.babelTypes.mod.Identifier_
import typings.babelTypes.mod.IfStatement_
import typings.babelTypes.mod.ImportAttribute_
import typings.babelTypes.mod.ImportDeclaration_
import typings.babelTypes.mod.ImportDefaultSpecifier_
import typings.babelTypes.mod.ImportNamespaceSpecifier_
import typings.babelTypes.mod.ImportSpecifier_
import typings.babelTypes.mod.Import_
import typings.babelTypes.mod.InferredPredicate_
import typings.babelTypes.mod.InterfaceDeclaration_
import typings.babelTypes.mod.InterfaceExtends_
import typings.babelTypes.mod.InterfaceTypeAnnotation_
import typings.babelTypes.mod.InterpreterDirective_
import typings.babelTypes.mod.IntersectionTypeAnnotation_
import typings.babelTypes.mod.JSXAttribute_
import typings.babelTypes.mod.JSXClosingElement_
import typings.babelTypes.mod.JSXClosingFragment_
import typings.babelTypes.mod.JSXElement_
import typings.babelTypes.mod.JSXEmptyExpression_
import typings.babelTypes.mod.JSXExpressionContainer_
import typings.babelTypes.mod.JSXFragment_
import typings.babelTypes.mod.JSXIdentifier_
import typings.babelTypes.mod.JSXMemberExpression_
import typings.babelTypes.mod.JSXNamespacedName_
import typings.babelTypes.mod.JSXOpeningElement_
import typings.babelTypes.mod.JSXOpeningFragment_
import typings.babelTypes.mod.JSXSpreadAttribute_
import typings.babelTypes.mod.JSXSpreadChild_
import typings.babelTypes.mod.JSXText_
import typings.babelTypes.mod.LVal
import typings.babelTypes.mod.LabeledStatement_
import typings.babelTypes.mod.LogicalExpression_
import typings.babelTypes.mod.MemberExpression_
import typings.babelTypes.mod.MetaProperty_
import typings.babelTypes.mod.Method
import typings.babelTypes.mod.MixedTypeAnnotation_
import typings.babelTypes.mod.ModuleSpecifier
import typings.babelTypes.mod.NewExpression_
import typings.babelTypes.mod.Noop_
import typings.babelTypes.mod.NullLiteralTypeAnnotation_
import typings.babelTypes.mod.NullLiteral_
import typings.babelTypes.mod.NullableTypeAnnotation_
import typings.babelTypes.mod.NumberLiteralTypeAnnotation_
import typings.babelTypes.mod.NumberTypeAnnotation_
import typings.babelTypes.mod.NumericLiteral_
import typings.babelTypes.mod.ObjectExpression_
import typings.babelTypes.mod.ObjectMethod_
import typings.babelTypes.mod.ObjectPattern_
import typings.babelTypes.mod.ObjectProperty_
import typings.babelTypes.mod.ObjectTypeAnnotation_
import typings.babelTypes.mod.ObjectTypeCallProperty_
import typings.babelTypes.mod.ObjectTypeIndexer_
import typings.babelTypes.mod.ObjectTypeInternalSlot_
import typings.babelTypes.mod.ObjectTypeProperty_
import typings.babelTypes.mod.ObjectTypeSpreadProperty_
import typings.babelTypes.mod.OpaqueType_
import typings.babelTypes.mod.OptionalCallExpression_
import typings.babelTypes.mod.OptionalMemberExpression_
import typings.babelTypes.mod.ParenthesizedExpression_
import typings.babelTypes.mod.Pattern
import typings.babelTypes.mod.PatternLike
import typings.babelTypes.mod.PipelineBareFunction_
import typings.babelTypes.mod.PipelinePrimaryTopicReference_
import typings.babelTypes.mod.PipelineTopicExpression_
import typings.babelTypes.mod.Placeholder_
import typings.babelTypes.mod.PrivateName_
import typings.babelTypes.mod.Program_
import typings.babelTypes.mod.Property
import typings.babelTypes.mod.QualifiedTypeIdentifier_
import typings.babelTypes.mod.RecordExpression_
import typings.babelTypes.mod.RegExpLiteral_
import typings.babelTypes.mod.RestElement_
import typings.babelTypes.mod.ReturnStatement_
import typings.babelTypes.mod.SequenceExpression_
import typings.babelTypes.mod.SpreadElement_
import typings.babelTypes.mod.Statement
import typings.babelTypes.mod.StaticBlock_
import typings.babelTypes.mod.StringLiteralTypeAnnotation_
import typings.babelTypes.mod.StringLiteral_
import typings.babelTypes.mod.StringTypeAnnotation_
import typings.babelTypes.mod.Super_
import typings.babelTypes.mod.SwitchCase_
import typings.babelTypes.mod.SwitchStatement_
import typings.babelTypes.mod.SymbolTypeAnnotation_
import typings.babelTypes.mod.TSAnyKeyword_
import typings.babelTypes.mod.TSArrayType_
import typings.babelTypes.mod.TSAsExpression_
import typings.babelTypes.mod.TSBigIntKeyword_
import typings.babelTypes.mod.TSBooleanKeyword_
import typings.babelTypes.mod.TSCallSignatureDeclaration_
import typings.babelTypes.mod.TSConditionalType_
import typings.babelTypes.mod.TSConstructSignatureDeclaration_
import typings.babelTypes.mod.TSConstructorType_
import typings.babelTypes.mod.TSDeclareFunction_
import typings.babelTypes.mod.TSDeclareMethod_
import typings.babelTypes.mod.TSEntityName
import typings.babelTypes.mod.TSEnumDeclaration_
import typings.babelTypes.mod.TSEnumMember_
import typings.babelTypes.mod.TSExportAssignment_
import typings.babelTypes.mod.TSExpressionWithTypeArguments_
import typings.babelTypes.mod.TSExternalModuleReference_
import typings.babelTypes.mod.TSFunctionType_
import typings.babelTypes.mod.TSImportEqualsDeclaration_
import typings.babelTypes.mod.TSImportType_
import typings.babelTypes.mod.TSIndexSignature_
import typings.babelTypes.mod.TSIndexedAccessType_
import typings.babelTypes.mod.TSInferType_
import typings.babelTypes.mod.TSInterfaceBody_
import typings.babelTypes.mod.TSInterfaceDeclaration_
import typings.babelTypes.mod.TSIntersectionType_
import typings.babelTypes.mod.TSIntrinsicKeyword_
import typings.babelTypes.mod.TSLiteralType_
import typings.babelTypes.mod.TSMappedType_
import typings.babelTypes.mod.TSMethodSignature_
import typings.babelTypes.mod.TSModuleBlock_
import typings.babelTypes.mod.TSModuleDeclaration_
import typings.babelTypes.mod.TSNamedTupleMember_
import typings.babelTypes.mod.TSNamespaceExportDeclaration_
import typings.babelTypes.mod.TSNeverKeyword_
import typings.babelTypes.mod.TSNonNullExpression_
import typings.babelTypes.mod.TSNullKeyword_
import typings.babelTypes.mod.TSNumberKeyword_
import typings.babelTypes.mod.TSObjectKeyword_
import typings.babelTypes.mod.TSOptionalType_
import typings.babelTypes.mod.TSParameterProperty_
import typings.babelTypes.mod.TSParenthesizedType_
import typings.babelTypes.mod.TSPropertySignature_
import typings.babelTypes.mod.TSQualifiedName_
import typings.babelTypes.mod.TSRestType_
import typings.babelTypes.mod.TSStringKeyword_
import typings.babelTypes.mod.TSSymbolKeyword_
import typings.babelTypes.mod.TSThisType_
import typings.babelTypes.mod.TSTupleType_
import typings.babelTypes.mod.TSType
import typings.babelTypes.mod.TSTypeAliasDeclaration_
import typings.babelTypes.mod.TSTypeAnnotation_
import typings.babelTypes.mod.TSTypeAssertion_
import typings.babelTypes.mod.TSTypeElement
import typings.babelTypes.mod.TSTypeLiteral_
import typings.babelTypes.mod.TSTypeOperator_
import typings.babelTypes.mod.TSTypeParameterDeclaration_
import typings.babelTypes.mod.TSTypeParameterInstantiation_
import typings.babelTypes.mod.TSTypeParameter_
import typings.babelTypes.mod.TSTypePredicate_
import typings.babelTypes.mod.TSTypeQuery_
import typings.babelTypes.mod.TSTypeReference_
import typings.babelTypes.mod.TSUndefinedKeyword_
import typings.babelTypes.mod.TSUnionType_
import typings.babelTypes.mod.TSUnknownKeyword_
import typings.babelTypes.mod.TSVoidKeyword_
import typings.babelTypes.mod.TaggedTemplateExpression_
import typings.babelTypes.mod.TemplateElement_
import typings.babelTypes.mod.TemplateLiteral_
import typings.babelTypes.mod.ThisExpression_
import typings.babelTypes.mod.ThisTypeAnnotation_
import typings.babelTypes.mod.ThrowStatement_
import typings.babelTypes.mod.TraversalHandler
import typings.babelTypes.mod.TraversalHandlers
import typings.babelTypes.mod.TryStatement_
import typings.babelTypes.mod.TupleExpression_
import typings.babelTypes.mod.TupleTypeAnnotation_
import typings.babelTypes.mod.TypeAlias_
import typings.babelTypes.mod.TypeAnnotation_
import typings.babelTypes.mod.TypeCastExpression_
import typings.babelTypes.mod.TypeParameterDeclaration_
import typings.babelTypes.mod.TypeParameterInstantiation_
import typings.babelTypes.mod.TypeParameter_
import typings.babelTypes.mod.TypeofTypeAnnotation_
import typings.babelTypes.mod.UnaryExpression_
import typings.babelTypes.mod.UnionTypeAnnotation_
import typings.babelTypes.mod.UpdateExpression_
import typings.babelTypes.mod.V8IntrinsicIdentifier_
import typings.babelTypes.mod.VariableDeclaration_
import typings.babelTypes.mod.VariableDeclarator_
import typings.babelTypes.mod.Variance_
import typings.babelTypes.mod.VoidTypeAnnotation_
import typings.babelTypes.mod.WhileStatement_
import typings.babelTypes.mod.WithStatement_
import typings.babelTypes.mod.YieldExpression_
import typings.std.Extract
import typings.std.Partial
import typings.std.Record
import typings.std.RegExp
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object types {
  
  @JSImport("@babel/core", "types")
  @js.native
  val ^ : js.Any = js.native
  
  @scala.inline
  def addComment[T /* <: typings.babelTypes.mod.Node */](node: T, `type`: CommentTypeShorthand, content: String): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addComment")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], content.asInstanceOf[js.Any])).asInstanceOf[T]
  @scala.inline
  def addComment[T /* <: typings.babelTypes.mod.Node */](node: T, `type`: CommentTypeShorthand, content: String, line: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addComment")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], content.asInstanceOf[js.Any], line.asInstanceOf[js.Any])).asInstanceOf[T]
  
  @scala.inline
  def addComments[T /* <: typings.babelTypes.mod.Node */](node: T, `type`: CommentTypeShorthand, comments: js.Array[Comment]): T = (^.asInstanceOf[js.Dynamic].applyDynamic("addComments")(node.asInstanceOf[js.Any], `type`.asInstanceOf[js.Any], comments.asInstanceOf[js.Any])).asInstanceOf[T]
  
  @scala.inline
  def anyTypeAnnotation(): AnyTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("anyTypeAnnotation")().asInstanceOf[AnyTypeAnnotation_]
  
  @scala.inline
  def appendToMemberExpression[T /* <: PickMemberExpressionobjecObject */](member: T, append: Expression): T = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any])).asInstanceOf[T]
  @scala.inline
  def appendToMemberExpression[T /* <: PickMemberExpressionobjecObject */](member: T, append: Expression, computed: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[T]
  @scala.inline
  def appendToMemberExpression[T /* <: PickMemberExpressionobjecObject */](member: T, append: Identifier_): T = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any])).asInstanceOf[T]
  @scala.inline
  def appendToMemberExpression[T /* <: PickMemberExpressionobjecObject */](member: T, append: Identifier_, computed: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[T]
  @scala.inline
  def appendToMemberExpression[T /* <: PickMemberExpressionobjecObject */](member: T, append: PrivateName_): T = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any])).asInstanceOf[T]
  @scala.inline
  def appendToMemberExpression[T /* <: PickMemberExpressionobjecObject */](member: T, append: PrivateName_, computed: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("appendToMemberExpression")(member.asInstanceOf[js.Any], append.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[T]
  
  @scala.inline
  def argumentPlaceholder(): ArgumentPlaceholder_ = ^.asInstanceOf[js.Dynamic].applyDynamic("argumentPlaceholder")().asInstanceOf[ArgumentPlaceholder_]
  
  @scala.inline
  def arrayExpression(): ArrayExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayExpression")().asInstanceOf[ArrayExpression_]
  @scala.inline
  def arrayExpression(elements: js.Array[Null | Expression | SpreadElement_]): ArrayExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayExpression")(elements.asInstanceOf[js.Any]).asInstanceOf[ArrayExpression_]
  
  @scala.inline
  def arrayPattern(elements: js.Array[Null | PatternLike]): ArrayPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayPattern")(elements.asInstanceOf[js.Any]).asInstanceOf[ArrayPattern_]
  
  @scala.inline
  def arrayTypeAnnotation(elementType: FlowType): ArrayTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("arrayTypeAnnotation")(elementType.asInstanceOf[js.Any]).asInstanceOf[ArrayTypeAnnotation_]
  
  @scala.inline
  def arrowFunctionExpression(
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
  @scala.inline
  def arrowFunctionExpression(
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    async: Boolean
  ): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
  @scala.inline
  def arrowFunctionExpression(params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_], body: Expression): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
  @scala.inline
  def arrowFunctionExpression(
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: Expression,
    async: Boolean
  ): ArrowFunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("arrowFunctionExpression")(params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ArrowFunctionExpression_]
  
  @scala.inline
  def assertAnyTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertAnyTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertAnyTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertAnyTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertAnyTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertArgumentPlaceholder(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")().asInstanceOf[Unit]
  @scala.inline
  def assertArgumentPlaceholder(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertArgumentPlaceholder(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArgumentPlaceholder(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArgumentPlaceholder(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertArrayExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertArrayExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertArrayExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArrayExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArrayExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertArrayPattern(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")().asInstanceOf[Unit]
  @scala.inline
  def assertArrayPattern(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertArrayPattern(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArrayPattern(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArrayPattern(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertArrayTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertArrayTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertArrayTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArrayTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArrayTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertArrowFunctionExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertArrowFunctionExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertArrowFunctionExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArrowFunctionExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertArrowFunctionExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertAssignmentExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertAssignmentExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertAssignmentExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertAssignmentExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertAssignmentExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertAssignmentPattern(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")().asInstanceOf[Unit]
  @scala.inline
  def assertAssignmentPattern(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertAssignmentPattern(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertAssignmentPattern(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertAssignmentPattern(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertAwaitExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertAwaitExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertAwaitExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertAwaitExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertAwaitExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBigIntLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertBigIntLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBigIntLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBigIntLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBigIntLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBinary(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")().asInstanceOf[Unit]
  @scala.inline
  def assertBinary(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBinary(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBinary(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBinary(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBinaryExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertBinaryExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBinaryExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBinaryExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBinaryExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBindExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertBindExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBindExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBindExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBindExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBlock(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")().asInstanceOf[Unit]
  @scala.inline
  def assertBlock(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBlock(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBlock(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBlock(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBlockParent(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")().asInstanceOf[Unit]
  @scala.inline
  def assertBlockParent(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBlockParent(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBlockParent(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBlockParent(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBlockStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertBlockStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBlockStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBlockStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBlockStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBooleanLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertBooleanLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBooleanLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBooleanLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBooleanLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBooleanLiteralTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertBooleanLiteralTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBooleanLiteralTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBooleanLiteralTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBooleanLiteralTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBooleanTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertBooleanTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBooleanTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBooleanTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBooleanTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertBreakStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertBreakStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertBreakStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBreakStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertBreakStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertCallExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertCallExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertCallExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertCallExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertCallExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertCatchClause(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")().asInstanceOf[Unit]
  @scala.inline
  def assertCatchClause(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertCatchClause(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertCatchClause(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertCatchClause(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertClass(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")().asInstanceOf[Unit]
  @scala.inline
  def assertClass(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertClass(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClass(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClass(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertClassBody(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")().asInstanceOf[Unit]
  @scala.inline
  def assertClassBody(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertClassBody(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassBody(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassBody(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertClassDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertClassDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertClassDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertClassExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertClassExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertClassExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertClassImplements(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")().asInstanceOf[Unit]
  @scala.inline
  def assertClassImplements(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertClassImplements(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassImplements(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassImplements(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertClassMethod(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")().asInstanceOf[Unit]
  @scala.inline
  def assertClassMethod(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertClassMethod(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassMethod(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassMethod(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertClassPrivateMethod(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")().asInstanceOf[Unit]
  @scala.inline
  def assertClassPrivateMethod(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertClassPrivateMethod(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassPrivateMethod(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassPrivateMethod(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertClassPrivateProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertClassPrivateProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertClassPrivateProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassPrivateProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassPrivateProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertClassProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertClassProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertClassProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertClassProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertCompletionStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertCompletionStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertCompletionStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertCompletionStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertCompletionStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertConditional(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")().asInstanceOf[Unit]
  @scala.inline
  def assertConditional(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertConditional(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertConditional(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertConditional(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertConditionalExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertConditionalExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertConditionalExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertConditionalExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertConditionalExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertContinueStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertContinueStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertContinueStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertContinueStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertContinueStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDebuggerStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertDebuggerStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDebuggerStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDebuggerStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDebuggerStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDecimalLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertDecimalLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDecimalLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDecimalLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDecimalLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareClass(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareClass(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareClass(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareClass(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareClass(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareExportAllDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareExportAllDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareExportAllDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareExportAllDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareExportAllDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareExportDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareExportDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareExportDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareExportDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareExportDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareFunction(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareFunction(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareFunction(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareFunction(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareFunction(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareInterface(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareInterface(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareInterface(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareInterface(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareInterface(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareModule(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareModule(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareModule(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareModule(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareModule(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareModuleExports(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareModuleExports(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareModuleExports(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareModuleExports(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareModuleExports(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareOpaqueType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareOpaqueType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareOpaqueType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareOpaqueType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareOpaqueType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareTypeAlias(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareTypeAlias(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareTypeAlias(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareTypeAlias(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareTypeAlias(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclareVariable(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclareVariable(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareVariable(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareVariable(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclareVariable(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDeclaredPredicate(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")().asInstanceOf[Unit]
  @scala.inline
  def assertDeclaredPredicate(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDeclaredPredicate(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclaredPredicate(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDeclaredPredicate(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDecorator(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")().asInstanceOf[Unit]
  @scala.inline
  def assertDecorator(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDecorator(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDecorator(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDecorator(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDirective(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")().asInstanceOf[Unit]
  @scala.inline
  def assertDirective(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDirective(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDirective(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDirective(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDirectiveLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertDirectiveLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDirectiveLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDirectiveLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDirectiveLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDoExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertDoExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDoExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDoExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDoExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertDoWhileStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertDoWhileStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertDoWhileStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDoWhileStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertDoWhileStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEmptyStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertEmptyStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEmptyStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEmptyStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEmptyStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEmptyTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertEmptyTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEmptyTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEmptyTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEmptyTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumBody(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumBody(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumBody(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumBody(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumBody(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumBooleanBody(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumBooleanBody(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumBooleanBody(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumBooleanBody(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumBooleanBody(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumBooleanMember(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumBooleanMember(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumBooleanMember(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumBooleanMember(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumBooleanMember(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumDefaultedMember(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumDefaultedMember(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumDefaultedMember(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumDefaultedMember(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumDefaultedMember(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumMember(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumMember(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumMember(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumMember(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumMember(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumNumberBody(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumNumberBody(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumNumberBody(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumNumberBody(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumNumberBody(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumNumberMember(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumNumberMember(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumNumberMember(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumNumberMember(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumNumberMember(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumStringBody(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumStringBody(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumStringBody(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumStringBody(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumStringBody(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumStringMember(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumStringMember(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumStringMember(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumStringMember(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumStringMember(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertEnumSymbolBody(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")().asInstanceOf[Unit]
  @scala.inline
  def assertEnumSymbolBody(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertEnumSymbolBody(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumSymbolBody(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertEnumSymbolBody(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExistsTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertExistsTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExistsTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExistsTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExistsTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExportAllDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertExportAllDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExportAllDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportAllDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportAllDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExportDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertExportDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExportDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExportDefaultDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertExportDefaultDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExportDefaultDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportDefaultDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportDefaultDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExportDefaultSpecifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")().asInstanceOf[Unit]
  @scala.inline
  def assertExportDefaultSpecifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExportDefaultSpecifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportDefaultSpecifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportDefaultSpecifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExportNamedDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertExportNamedDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExportNamedDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportNamedDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportNamedDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExportNamespaceSpecifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")().asInstanceOf[Unit]
  @scala.inline
  def assertExportNamespaceSpecifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExportNamespaceSpecifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportNamespaceSpecifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportNamespaceSpecifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExportSpecifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")().asInstanceOf[Unit]
  @scala.inline
  def assertExportSpecifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExportSpecifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportSpecifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExportSpecifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExpressionStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertExpressionStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExpressionStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExpressionStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExpressionStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertExpressionWrapper(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")().asInstanceOf[Unit]
  @scala.inline
  def assertExpressionWrapper(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertExpressionWrapper(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExpressionWrapper(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertExpressionWrapper(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFile(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")().asInstanceOf[Unit]
  @scala.inline
  def assertFile(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFile(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFile(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFile(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFlow(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")().asInstanceOf[Unit]
  @scala.inline
  def assertFlow(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFlow(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlow(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlow(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFlowBaseAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertFlowBaseAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFlowBaseAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlowBaseAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlowBaseAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFlowDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertFlowDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFlowDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlowDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlowDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFlowPredicate(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")().asInstanceOf[Unit]
  @scala.inline
  def assertFlowPredicate(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFlowPredicate(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlowPredicate(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlowPredicate(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFlowType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")().asInstanceOf[Unit]
  @scala.inline
  def assertFlowType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFlowType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlowType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFlowType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFor(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")().asInstanceOf[Unit]
  @scala.inline
  def assertFor(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFor(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFor(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFor(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertForInStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertForInStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertForInStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertForInStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertForInStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertForOfStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertForOfStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertForOfStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertForOfStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertForOfStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertForStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertForStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertForStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertForStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertForStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertForXStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertForXStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertForXStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertForXStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertForXStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFunction(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")().asInstanceOf[Unit]
  @scala.inline
  def assertFunction(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFunction(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunction(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunction(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFunctionDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertFunctionDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFunctionExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertFunctionExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFunctionParent(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")().asInstanceOf[Unit]
  @scala.inline
  def assertFunctionParent(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionParent(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionParent(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionParent(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFunctionTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertFunctionTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertFunctionTypeParam(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")().asInstanceOf[Unit]
  @scala.inline
  def assertFunctionTypeParam(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionTypeParam(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionTypeParam(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertFunctionTypeParam(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertGenericTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertGenericTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertGenericTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertGenericTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertGenericTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertIdentifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")().asInstanceOf[Unit]
  @scala.inline
  def assertIdentifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertIdentifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertIdentifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertIdentifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertIfStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertIfStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertIfStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertIfStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertIfStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertImmutable(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")().asInstanceOf[Unit]
  @scala.inline
  def assertImmutable(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertImmutable(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImmutable(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImmutable(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertImport(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")().asInstanceOf[Unit]
  @scala.inline
  def assertImport(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertImport(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImport(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImport(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertImportAttribute(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")().asInstanceOf[Unit]
  @scala.inline
  def assertImportAttribute(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertImportAttribute(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportAttribute(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportAttribute(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertImportDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertImportDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertImportDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertImportDefaultSpecifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")().asInstanceOf[Unit]
  @scala.inline
  def assertImportDefaultSpecifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertImportDefaultSpecifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportDefaultSpecifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportDefaultSpecifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertImportNamespaceSpecifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")().asInstanceOf[Unit]
  @scala.inline
  def assertImportNamespaceSpecifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertImportNamespaceSpecifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportNamespaceSpecifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportNamespaceSpecifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertImportSpecifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")().asInstanceOf[Unit]
  @scala.inline
  def assertImportSpecifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertImportSpecifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportSpecifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertImportSpecifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertInferredPredicate(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")().asInstanceOf[Unit]
  @scala.inline
  def assertInferredPredicate(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertInferredPredicate(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInferredPredicate(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInferredPredicate(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertInterfaceDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertInterfaceExtends(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")().asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceExtends(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceExtends(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceExtends(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceExtends(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertInterfaceTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInterfaceTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertInterpreterDirective(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")().asInstanceOf[Unit]
  @scala.inline
  def assertInterpreterDirective(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertInterpreterDirective(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInterpreterDirective(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertInterpreterDirective(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertIntersectionTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertIntersectionTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertIntersectionTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertIntersectionTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertIntersectionTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSX(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")().asInstanceOf[Unit]
  @scala.inline
  def assertJSX(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSX(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSX(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSX(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXAttribute(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXAttribute(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXAttribute(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXAttribute(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXAttribute(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXClosingElement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXClosingElement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXClosingElement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXClosingElement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXClosingElement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXClosingFragment(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXClosingFragment(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXClosingFragment(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXClosingFragment(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXClosingFragment(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXElement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXElement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXElement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXElement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXElement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXEmptyExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXEmptyExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXEmptyExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXEmptyExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXEmptyExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXExpressionContainer(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXExpressionContainer(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXExpressionContainer(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXExpressionContainer(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXExpressionContainer(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXFragment(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXFragment(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXFragment(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXFragment(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXFragment(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXIdentifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXIdentifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXIdentifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXIdentifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXIdentifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXMemberExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXMemberExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXMemberExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXMemberExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXMemberExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXNamespacedName(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXNamespacedName(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXNamespacedName(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXNamespacedName(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXNamespacedName(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXOpeningElement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXOpeningElement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXOpeningElement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXOpeningElement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXOpeningElement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXOpeningFragment(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXOpeningFragment(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXOpeningFragment(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXOpeningFragment(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXOpeningFragment(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXSpreadAttribute(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXSpreadAttribute(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXSpreadAttribute(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXSpreadAttribute(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXSpreadAttribute(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXSpreadChild(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXSpreadChild(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXSpreadChild(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXSpreadChild(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXSpreadChild(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertJSXText(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")().asInstanceOf[Unit]
  @scala.inline
  def assertJSXText(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertJSXText(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXText(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertJSXText(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertLVal(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")().asInstanceOf[Unit]
  @scala.inline
  def assertLVal(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertLVal(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLVal(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLVal(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertLabeledStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertLabeledStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertLabeledStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLabeledStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLabeledStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertLogicalExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertLogicalExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertLogicalExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLogicalExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLogicalExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertLoop(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")().asInstanceOf[Unit]
  @scala.inline
  def assertLoop(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertLoop(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLoop(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertLoop(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertMemberExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertMemberExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertMemberExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertMemberExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertMemberExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertMetaProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertMetaProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertMetaProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertMetaProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertMetaProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertMethod(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")().asInstanceOf[Unit]
  @scala.inline
  def assertMethod(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertMethod(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertMethod(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertMethod(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertMixedTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertMixedTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertMixedTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertMixedTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertMixedTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertModuleDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertModuleDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertModuleDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertModuleDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertModuleDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertModuleSpecifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")().asInstanceOf[Unit]
  @scala.inline
  def assertModuleSpecifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertModuleSpecifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertModuleSpecifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertModuleSpecifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertNewExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertNewExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertNewExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNewExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNewExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertNode(obj: js.Any): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNode")(obj.asInstanceOf[js.Any]).asInstanceOf[Unit]
  
  @scala.inline
  def assertNoop(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")().asInstanceOf[Unit]
  @scala.inline
  def assertNoop(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertNoop(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNoop(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNoop(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertNullLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertNullLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertNullLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNullLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNullLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertNullLiteralTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertNullLiteralTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertNullLiteralTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNullLiteralTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNullLiteralTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertNullableTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertNullableTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertNullableTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNullableTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNullableTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertNumberLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertNumberLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertNumberLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNumberLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNumberLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertNumberLiteralTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertNumberLiteralTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertNumberLiteralTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNumberLiteralTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNumberLiteralTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertNumberTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertNumberTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertNumberTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNumberTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNumberTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertNumericLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertNumericLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertNumericLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNumericLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertNumericLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectMember(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectMember(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectMember(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectMember(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectMember(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectMethod(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectMethod(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectMethod(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectMethod(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectMethod(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectPattern(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectPattern(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectPattern(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectPattern(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectPattern(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectTypeCallProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeCallProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeCallProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeCallProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeCallProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectTypeIndexer(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeIndexer(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeIndexer(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeIndexer(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeIndexer(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectTypeInternalSlot(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeInternalSlot(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeInternalSlot(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeInternalSlot(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeInternalSlot(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectTypeProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertObjectTypeSpreadProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeSpreadProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeSpreadProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeSpreadProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertObjectTypeSpreadProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertOpaqueType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")().asInstanceOf[Unit]
  @scala.inline
  def assertOpaqueType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertOpaqueType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertOpaqueType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertOpaqueType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertOptionalCallExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertOptionalCallExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertOptionalCallExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertOptionalCallExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertOptionalCallExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertOptionalMemberExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertOptionalMemberExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertOptionalMemberExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertOptionalMemberExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertOptionalMemberExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertParenthesizedExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertParenthesizedExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertParenthesizedExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertParenthesizedExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertParenthesizedExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertPattern(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")().asInstanceOf[Unit]
  @scala.inline
  def assertPattern(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertPattern(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPattern(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPattern(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertPatternLike(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")().asInstanceOf[Unit]
  @scala.inline
  def assertPatternLike(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertPatternLike(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPatternLike(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPatternLike(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertPipelineBareFunction(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")().asInstanceOf[Unit]
  @scala.inline
  def assertPipelineBareFunction(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertPipelineBareFunction(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPipelineBareFunction(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPipelineBareFunction(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertPipelinePrimaryTopicReference(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")().asInstanceOf[Unit]
  @scala.inline
  def assertPipelinePrimaryTopicReference(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertPipelinePrimaryTopicReference(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPipelinePrimaryTopicReference(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPipelinePrimaryTopicReference(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertPipelineTopicExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertPipelineTopicExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertPipelineTopicExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPipelineTopicExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPipelineTopicExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertPlaceholder(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")().asInstanceOf[Unit]
  @scala.inline
  def assertPlaceholder(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertPlaceholder(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPlaceholder(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPlaceholder(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertPrivate(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")().asInstanceOf[Unit]
  @scala.inline
  def assertPrivate(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertPrivate(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPrivate(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPrivate(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertPrivateName(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")().asInstanceOf[Unit]
  @scala.inline
  def assertPrivateName(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertPrivateName(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPrivateName(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPrivateName(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertProgram(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")().asInstanceOf[Unit]
  @scala.inline
  def assertProgram(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertProgram(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertProgram(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertProgram(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertPureish(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")().asInstanceOf[Unit]
  @scala.inline
  def assertPureish(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertPureish(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPureish(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertPureish(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertQualifiedTypeIdentifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")().asInstanceOf[Unit]
  @scala.inline
  def assertQualifiedTypeIdentifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertQualifiedTypeIdentifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertQualifiedTypeIdentifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertQualifiedTypeIdentifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertRecordExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertRecordExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertRecordExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRecordExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRecordExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertRegExpLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertRegExpLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertRegExpLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRegExpLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRegExpLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertRegexLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertRegexLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertRegexLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRegexLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRegexLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertRestElement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")().asInstanceOf[Unit]
  @scala.inline
  def assertRestElement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertRestElement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRestElement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRestElement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertRestProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertRestProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertRestProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRestProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertRestProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertReturnStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertReturnStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertReturnStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertReturnStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertReturnStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertScopable(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")().asInstanceOf[Unit]
  @scala.inline
  def assertScopable(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertScopable(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertScopable(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertScopable(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertSequenceExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertSequenceExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertSequenceExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSequenceExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSequenceExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertSpreadElement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")().asInstanceOf[Unit]
  @scala.inline
  def assertSpreadElement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertSpreadElement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSpreadElement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSpreadElement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertSpreadProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertSpreadProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertSpreadProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSpreadProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSpreadProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertStaticBlock(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")().asInstanceOf[Unit]
  @scala.inline
  def assertStaticBlock(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertStaticBlock(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStaticBlock(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStaticBlock(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertStringLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertStringLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertStringLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStringLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStringLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertStringLiteralTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertStringLiteralTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertStringLiteralTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStringLiteralTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStringLiteralTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertStringTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertStringTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertStringTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStringTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertStringTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertSuper(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")().asInstanceOf[Unit]
  @scala.inline
  def assertSuper(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertSuper(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSuper(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSuper(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertSwitchCase(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")().asInstanceOf[Unit]
  @scala.inline
  def assertSwitchCase(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertSwitchCase(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSwitchCase(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSwitchCase(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertSwitchStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertSwitchStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertSwitchStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSwitchStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSwitchStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertSymbolTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertSymbolTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertSymbolTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSymbolTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertSymbolTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSAnyKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSAnyKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSAnyKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSAnyKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSAnyKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSArrayType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSArrayType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSArrayType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSArrayType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSArrayType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSAsExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertTSAsExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSAsExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSAsExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSAsExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSBaseType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSBaseType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSBaseType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSBaseType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSBaseType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSBigIntKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSBigIntKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSBigIntKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSBigIntKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSBigIntKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSBooleanKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSBooleanKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSBooleanKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSBooleanKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSBooleanKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSCallSignatureDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTSCallSignatureDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSCallSignatureDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSCallSignatureDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSCallSignatureDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSConditionalType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSConditionalType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSConditionalType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSConditionalType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSConditionalType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSConstructSignatureDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTSConstructSignatureDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSConstructSignatureDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSConstructSignatureDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSConstructSignatureDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSConstructorType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSConstructorType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSConstructorType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSConstructorType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSConstructorType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSDeclareFunction(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")().asInstanceOf[Unit]
  @scala.inline
  def assertTSDeclareFunction(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSDeclareFunction(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSDeclareFunction(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSDeclareFunction(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSDeclareMethod(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")().asInstanceOf[Unit]
  @scala.inline
  def assertTSDeclareMethod(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSDeclareMethod(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSDeclareMethod(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSDeclareMethod(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSEntityName(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")().asInstanceOf[Unit]
  @scala.inline
  def assertTSEntityName(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSEntityName(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSEntityName(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSEntityName(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSEnumDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTSEnumDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSEnumDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSEnumDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSEnumDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSEnumMember(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")().asInstanceOf[Unit]
  @scala.inline
  def assertTSEnumMember(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSEnumMember(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSEnumMember(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSEnumMember(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSExportAssignment(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")().asInstanceOf[Unit]
  @scala.inline
  def assertTSExportAssignment(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSExportAssignment(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSExportAssignment(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSExportAssignment(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSExpressionWithTypeArguments(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")().asInstanceOf[Unit]
  @scala.inline
  def assertTSExpressionWithTypeArguments(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSExpressionWithTypeArguments(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSExpressionWithTypeArguments(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSExpressionWithTypeArguments(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSExternalModuleReference(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")().asInstanceOf[Unit]
  @scala.inline
  def assertTSExternalModuleReference(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSExternalModuleReference(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSExternalModuleReference(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSExternalModuleReference(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSFunctionType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSFunctionType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSFunctionType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSFunctionType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSFunctionType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSImportEqualsDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTSImportEqualsDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSImportEqualsDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSImportEqualsDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSImportEqualsDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSImportType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSImportType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSImportType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSImportType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSImportType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSIndexSignature(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")().asInstanceOf[Unit]
  @scala.inline
  def assertTSIndexSignature(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSIndexSignature(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSIndexSignature(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSIndexSignature(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSIndexedAccessType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSIndexedAccessType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSIndexedAccessType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSIndexedAccessType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSIndexedAccessType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSInferType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSInferType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSInferType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSInferType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSInferType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSInterfaceBody(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")().asInstanceOf[Unit]
  @scala.inline
  def assertTSInterfaceBody(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSInterfaceBody(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSInterfaceBody(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSInterfaceBody(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSInterfaceDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTSInterfaceDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSInterfaceDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSInterfaceDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSInterfaceDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSIntersectionType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSIntersectionType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSIntersectionType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSIntersectionType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSIntersectionType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSIntrinsicKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSIntrinsicKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSIntrinsicKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSIntrinsicKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSIntrinsicKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSLiteralType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSLiteralType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSLiteralType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSLiteralType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSLiteralType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSMappedType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSMappedType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSMappedType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSMappedType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSMappedType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSMethodSignature(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")().asInstanceOf[Unit]
  @scala.inline
  def assertTSMethodSignature(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSMethodSignature(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSMethodSignature(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSMethodSignature(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSModuleBlock(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")().asInstanceOf[Unit]
  @scala.inline
  def assertTSModuleBlock(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSModuleBlock(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSModuleBlock(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSModuleBlock(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSModuleDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTSModuleDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSModuleDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSModuleDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSModuleDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSNamedTupleMember(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")().asInstanceOf[Unit]
  @scala.inline
  def assertTSNamedTupleMember(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSNamedTupleMember(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNamedTupleMember(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNamedTupleMember(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSNamespaceExportDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTSNamespaceExportDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSNamespaceExportDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNamespaceExportDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNamespaceExportDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSNeverKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSNeverKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSNeverKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNeverKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNeverKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSNonNullExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertTSNonNullExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSNonNullExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNonNullExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNonNullExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSNullKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSNullKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSNullKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNullKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNullKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSNumberKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSNumberKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSNumberKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNumberKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSNumberKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSObjectKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSObjectKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSObjectKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSObjectKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSObjectKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSOptionalType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSOptionalType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSOptionalType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSOptionalType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSOptionalType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSParameterProperty(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")().asInstanceOf[Unit]
  @scala.inline
  def assertTSParameterProperty(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSParameterProperty(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSParameterProperty(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSParameterProperty(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSParenthesizedType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSParenthesizedType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSParenthesizedType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSParenthesizedType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSParenthesizedType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSPropertySignature(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")().asInstanceOf[Unit]
  @scala.inline
  def assertTSPropertySignature(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSPropertySignature(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSPropertySignature(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSPropertySignature(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSQualifiedName(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")().asInstanceOf[Unit]
  @scala.inline
  def assertTSQualifiedName(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSQualifiedName(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSQualifiedName(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSQualifiedName(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSRestType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSRestType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSRestType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSRestType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSRestType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSStringKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSStringKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSStringKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSStringKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSStringKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSSymbolKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSSymbolKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSSymbolKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSSymbolKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSSymbolKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSThisType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSThisType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSThisType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSThisType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSThisType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTupleType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTupleType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTupleType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTupleType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTupleType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeAliasDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAliasDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAliasDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAliasDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAliasDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeAssertion(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAssertion(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAssertion(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAssertion(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeAssertion(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeElement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeElement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeElement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeElement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeElement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeOperator(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeOperator(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeOperator(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeOperator(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeOperator(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeParameter(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameter(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameter(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameter(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameter(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeParameterDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameterDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameterDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameterDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameterDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeParameterInstantiation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameterInstantiation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameterInstantiation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameterInstantiation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeParameterInstantiation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypePredicate(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypePredicate(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypePredicate(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypePredicate(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypePredicate(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeQuery(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeQuery(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeQuery(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeQuery(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeQuery(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSTypeReference(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")().asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeReference(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeReference(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeReference(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSTypeReference(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSUndefinedKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSUndefinedKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSUndefinedKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSUndefinedKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSUndefinedKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSUnionType(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")().asInstanceOf[Unit]
  @scala.inline
  def assertTSUnionType(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSUnionType(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSUnionType(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSUnionType(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSUnknownKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSUnknownKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSUnknownKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSUnknownKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSUnknownKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTSVoidKeyword(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")().asInstanceOf[Unit]
  @scala.inline
  def assertTSVoidKeyword(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTSVoidKeyword(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSVoidKeyword(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTSVoidKeyword(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTaggedTemplateExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertTaggedTemplateExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTaggedTemplateExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTaggedTemplateExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTaggedTemplateExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTemplateElement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")().asInstanceOf[Unit]
  @scala.inline
  def assertTemplateElement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTemplateElement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTemplateElement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTemplateElement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTemplateLiteral(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")().asInstanceOf[Unit]
  @scala.inline
  def assertTemplateLiteral(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTemplateLiteral(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTemplateLiteral(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTemplateLiteral(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTerminatorless(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")().asInstanceOf[Unit]
  @scala.inline
  def assertTerminatorless(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTerminatorless(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTerminatorless(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTerminatorless(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertThisExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertThisExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertThisExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertThisExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertThisExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertThisTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertThisTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertThisTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertThisTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertThisTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertThrowStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertThrowStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertThrowStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertThrowStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertThrowStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTryStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertTryStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTryStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTryStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTryStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTupleExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertTupleExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTupleExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTupleExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTupleExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTupleTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertTupleTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTupleTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTupleTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTupleTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTypeAlias(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")().asInstanceOf[Unit]
  @scala.inline
  def assertTypeAlias(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTypeAlias(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeAlias(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeAlias(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTypeCastExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertTypeCastExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTypeCastExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeCastExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeCastExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTypeParameter(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")().asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameter(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameter(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameter(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameter(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTypeParameterDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameterDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameterDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameterDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameterDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTypeParameterInstantiation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")().asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameterInstantiation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameterInstantiation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameterInstantiation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeParameterInstantiation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertTypeofTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertTypeofTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertTypeofTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeofTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertTypeofTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertUnaryExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertUnaryExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertUnaryExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUnaryExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUnaryExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertUnaryLike(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")().asInstanceOf[Unit]
  @scala.inline
  def assertUnaryLike(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertUnaryLike(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUnaryLike(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUnaryLike(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertUnionTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertUnionTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertUnionTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUnionTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUnionTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertUpdateExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertUpdateExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertUpdateExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUpdateExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUpdateExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertUserWhitespacable(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")().asInstanceOf[Unit]
  @scala.inline
  def assertUserWhitespacable(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertUserWhitespacable(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUserWhitespacable(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertUserWhitespacable(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertV8IntrinsicIdentifier(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")().asInstanceOf[Unit]
  @scala.inline
  def assertV8IntrinsicIdentifier(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertV8IntrinsicIdentifier(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertV8IntrinsicIdentifier(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertV8IntrinsicIdentifier(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertVariableDeclaration(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")().asInstanceOf[Unit]
  @scala.inline
  def assertVariableDeclaration(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertVariableDeclaration(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertVariableDeclaration(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertVariableDeclaration(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertVariableDeclarator(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")().asInstanceOf[Unit]
  @scala.inline
  def assertVariableDeclarator(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertVariableDeclarator(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertVariableDeclarator(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertVariableDeclarator(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertVariance(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")().asInstanceOf[Unit]
  @scala.inline
  def assertVariance(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertVariance(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertVariance(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertVariance(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertVoidTypeAnnotation(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")().asInstanceOf[Unit]
  @scala.inline
  def assertVoidTypeAnnotation(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertVoidTypeAnnotation(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertVoidTypeAnnotation(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertVoidTypeAnnotation(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertWhile(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")().asInstanceOf[Unit]
  @scala.inline
  def assertWhile(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertWhile(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertWhile(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertWhile(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertWhileStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertWhileStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertWhileStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertWhileStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertWhileStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertWithStatement(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")().asInstanceOf[Unit]
  @scala.inline
  def assertWithStatement(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertWithStatement(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertWithStatement(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertWithStatement(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assertYieldExpression(): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")().asInstanceOf[Unit]
  @scala.inline
  def assertYieldExpression(node: js.Object): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def assertYieldExpression(node: js.Object, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertYieldExpression(node: Null, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def assertYieldExpression(node: Unit, opts: js.Object): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("assertYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def assignmentExpression(operator: String, left: LVal, right: Expression): AssignmentExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentExpression_]
  
  @scala.inline
  def assignmentPattern(left: ArrayPattern_, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
  @scala.inline
  def assignmentPattern(left: Identifier_, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
  @scala.inline
  def assignmentPattern(left: MemberExpression_, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
  @scala.inline
  def assignmentPattern(left: ObjectPattern_, right: Expression): AssignmentPattern_ = (^.asInstanceOf[js.Dynamic].applyDynamic("assignmentPattern")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[AssignmentPattern_]
  
  @scala.inline
  def awaitExpression(argument: Expression): AwaitExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("awaitExpression")(argument.asInstanceOf[js.Any]).asInstanceOf[AwaitExpression_]
  
  @scala.inline
  def bigIntLiteral(value: String): BigIntLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("bigIntLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[BigIntLiteral_]
  
  @scala.inline
  def binaryExpression(operator: Ampersand, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Ampersand, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: AsteriskAsterisk, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: AsteriskAsterisk, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Asterisk, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Asterisk, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: EqualssignEqualssignEqualssign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: EqualssignEqualssignEqualssign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: EqualssignEqualssign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: EqualssignEqualssign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: ExclamationmarkEqualssignEqualssign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: ExclamationmarkEqualssignEqualssign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: ExclamationmarkEqualssign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: ExclamationmarkEqualssign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: GreaterthansignEqualssign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: GreaterthansignEqualssign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: GreaterthansignGreaterthansignGreaterthansign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: GreaterthansignGreaterthansignGreaterthansign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: GreaterthansignGreaterthansign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: GreaterthansignGreaterthansign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Greaterthansign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Greaterthansign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: LessthansignEqualssign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: LessthansignEqualssign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: LessthansignLessthansign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: LessthansignLessthansign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Lessthansign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Lessthansign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Percentsign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Percentsign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Plussign, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Plussign, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Slash, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Slash, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Verticalline, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: Verticalline, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: typings.babelCore.babelCoreStrings.^, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: typings.babelCore.babelCoreStrings.^, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: `-_`, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression(operator: `-_`, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  
  @scala.inline
  def binaryExpression_in(operator: in, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression_in(operator: in, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  
  @scala.inline
  def binaryExpression_instanceof(operator: instanceof, left: Expression, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  @scala.inline
  def binaryExpression_instanceof(operator: instanceof, left: PrivateName_, right: Expression): BinaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("binaryExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[BinaryExpression_]
  
  @scala.inline
  def bindExpression(`object`: Expression, callee: Expression): BindExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("bindExpression")(`object`.asInstanceOf[js.Any], callee.asInstanceOf[js.Any])).asInstanceOf[BindExpression_]
  
  @scala.inline
  def blockStatement(body: js.Array[Statement]): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("blockStatement")(body.asInstanceOf[js.Any]).asInstanceOf[BlockStatement_]
  @scala.inline
  def blockStatement(body: js.Array[Statement], directives: js.Array[Directive_]): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("blockStatement")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]
  
  @scala.inline
  def booleanLiteral(value: Boolean): BooleanLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[BooleanLiteral_]
  
  @scala.inline
  def booleanLiteralTypeAnnotation(value: Boolean): BooleanLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanLiteralTypeAnnotation")(value.asInstanceOf[js.Any]).asInstanceOf[BooleanLiteralTypeAnnotation_]
  
  @scala.inline
  def booleanTypeAnnotation(): BooleanTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("booleanTypeAnnotation")().asInstanceOf[BooleanTypeAnnotation_]
  
  @scala.inline
  def breakStatement(): BreakStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("breakStatement")().asInstanceOf[BreakStatement_]
  @scala.inline
  def breakStatement(label: Identifier_): BreakStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("breakStatement")(label.asInstanceOf[js.Any]).asInstanceOf[BreakStatement_]
  
  @scala.inline
  def buildChildren(node: ChildrenReadonlyArray): js.Array[
    JSXText_ | JSXExpressionContainer_ | JSXSpreadChild_ | JSXElement_ | JSXFragment_
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("buildChildren")(node.asInstanceOf[js.Any]).asInstanceOf[js.Array[
    JSXText_ | JSXExpressionContainer_ | JSXSpreadChild_ | JSXElement_ | JSXFragment_
  ]]
  
  @scala.inline
  def buildMatchMemberExpression(`match`: String): js.Function1[
    /* node */ js.UndefOr[typings.babelTypes.mod.Node | Null], 
    /* is @babel/types.@babel/types.MemberExpression */ Boolean
  ] = ^.asInstanceOf[js.Dynamic].applyDynamic("buildMatchMemberExpression")(`match`.asInstanceOf[js.Any]).asInstanceOf[js.Function1[
    /* node */ js.UndefOr[typings.babelTypes.mod.Node | Null], 
    /* is @babel/types.@babel/types.MemberExpression */ Boolean
  ]]
  @scala.inline
  def buildMatchMemberExpression(`match`: String, allowPartial: Boolean): js.Function1[
    /* node */ js.UndefOr[typings.babelTypes.mod.Node | Null], 
    /* is @babel/types.@babel/types.MemberExpression */ Boolean
  ] = (^.asInstanceOf[js.Dynamic].applyDynamic("buildMatchMemberExpression")(`match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[js.Function1[
    /* node */ js.UndefOr[typings.babelTypes.mod.Node | Null], 
    /* is @babel/types.@babel/types.MemberExpression */ Boolean
  ]]
  
  @scala.inline
  def callExpression(
    callee: Expression,
    _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName_ | ArgumentPlaceholder_]
  ): CallExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("callExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[CallExpression_]
  @scala.inline
  def callExpression(
    callee: V8IntrinsicIdentifier_,
    _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName_ | ArgumentPlaceholder_]
  ): CallExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("callExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[CallExpression_]
  
  @scala.inline
  def catchClause(param: Null, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
  @scala.inline
  def catchClause(param: Unit, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
  @scala.inline
  def catchClause(param: ArrayPattern_, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
  @scala.inline
  def catchClause(param: Identifier_, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
  @scala.inline
  def catchClause(param: ObjectPattern_, body: BlockStatement_): CatchClause_ = (^.asInstanceOf[js.Dynamic].applyDynamic("catchClause")(param.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[CatchClause_]
  
  @scala.inline
  def classBody(
    body: js.Array[
      ClassMethod_ | ClassPrivateMethod_ | ClassProperty_ | ClassPrivateProperty_ | TSDeclareMethod_ | TSIndexSignature_
    ]
  ): ClassBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classBody")(body.asInstanceOf[js.Any]).asInstanceOf[ClassBody_]
  
  @scala.inline
  def classDeclaration(id: Identifier_, superClass: Null, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
  @scala.inline
  def classDeclaration(id: Identifier_, superClass: Null, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
  @scala.inline
  def classDeclaration(id: Identifier_, superClass: Unit, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
  @scala.inline
  def classDeclaration(id: Identifier_, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
  @scala.inline
  def classDeclaration(id: Identifier_, superClass: Expression, body: ClassBody_): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
  @scala.inline
  def classDeclaration(id: Identifier_, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classDeclaration")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
  
  @scala.inline
  def classExpression(id: Null, superClass: Null, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Null, superClass: Null, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Null, superClass: Unit, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Null, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Null, superClass: Expression, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Null, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Unit, superClass: Null, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Unit, superClass: Null, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Unit, superClass: Unit, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Unit, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Unit, superClass: Expression, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Unit, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Identifier_, superClass: Null, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Identifier_, superClass: Null, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Identifier_, superClass: Unit, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Identifier_, superClass: Unit, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Identifier_, superClass: Expression, body: ClassBody_): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  @scala.inline
  def classExpression(id: Identifier_, superClass: Expression, body: ClassBody_, decorators: js.Array[Decorator_]): ClassExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classExpression")(id.asInstanceOf[js.Any], superClass.asInstanceOf[js.Any], body.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ClassExpression_]
  
  @scala.inline
  def classImplements(id: Identifier_): ClassImplements_ = ^.asInstanceOf[js.Dynamic].applyDynamic("classImplements")(id.asInstanceOf[js.Any]).asInstanceOf[ClassImplements_]
  @scala.inline
  def classImplements(id: Identifier_, typeParameters: TypeParameterInstantiation_): ClassImplements_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classImplements")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[ClassImplements_]
  
  @scala.inline
  def classMethod(
    kind: js.UndefOr[get | set | method | constructor],
    key: Identifier_ | StringLiteral_ | NumericLiteral_ | Expression,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    computed: js.UndefOr[Boolean],
    _static: js.UndefOr[Boolean],
    generator: js.UndefOr[Boolean],
    async: js.UndefOr[Boolean]
  ): ClassMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], _static.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ClassMethod_]
  
  @scala.inline
  def classPrivateMethod(
    kind: Unit,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  @scala.inline
  def classPrivateMethod(
    kind: Unit,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    _static: Boolean
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  
  @scala.inline
  def classPrivateMethod_constructor(
    kind: constructor,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  @scala.inline
  def classPrivateMethod_constructor(
    kind: constructor,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    _static: Boolean
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  
  @scala.inline
  def classPrivateMethod_get(
    kind: get,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  @scala.inline
  def classPrivateMethod_get(
    kind: get,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    _static: Boolean
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  
  @scala.inline
  def classPrivateMethod_method(
    kind: method,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  @scala.inline
  def classPrivateMethod_method(
    kind: method,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    _static: Boolean
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  
  @scala.inline
  def classPrivateMethod_set(
    kind: set,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  @scala.inline
  def classPrivateMethod_set(
    kind: set,
    key: PrivateName_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    _static: Boolean
  ): ClassPrivateMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateMethod_]
  
  @scala.inline
  def classPrivateProperty(key: PrivateName_, value: Null, decorators: js.Array[Decorator_], _static: js.Any): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
  @scala.inline
  def classPrivateProperty(key: PrivateName_, value: Null, decorators: Null, _static: js.Any): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
  @scala.inline
  def classPrivateProperty(key: PrivateName_, value: Null, decorators: Unit, _static: js.Any): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
  @scala.inline
  def classPrivateProperty(key: PrivateName_, value: Unit, decorators: js.Array[Decorator_], _static: js.Any): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
  @scala.inline
  def classPrivateProperty(key: PrivateName_, value: Unit, decorators: Null, _static: js.Any): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
  @scala.inline
  def classPrivateProperty(key: PrivateName_, value: Unit, decorators: Unit, _static: js.Any): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
  @scala.inline
  def classPrivateProperty(key: PrivateName_, value: Expression, decorators: js.Array[Decorator_], _static: js.Any): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
  @scala.inline
  def classPrivateProperty(key: PrivateName_, value: Expression, decorators: Null, _static: js.Any): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
  @scala.inline
  def classPrivateProperty(key: PrivateName_, value: Expression, decorators: Unit, _static: js.Any): ClassPrivateProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classPrivateProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassPrivateProperty_]
  
  @scala.inline
  def classProperty(
    key: Identifier_ | StringLiteral_ | NumericLiteral_ | Expression,
    value: js.UndefOr[Expression | Null],
    typeAnnotation: js.UndefOr[TypeAnnotation_ | TSTypeAnnotation_ | Noop_ | Null],
    decorators: js.UndefOr[js.Array[Decorator_] | Null],
    computed: js.UndefOr[Boolean],
    _static: js.UndefOr[Boolean]
  ): ClassProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("classProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], _static.asInstanceOf[js.Any])).asInstanceOf[ClassProperty_]
  
  @scala.inline
  def cloneDeep[T /* <: typings.babelTypes.mod.Node */](n: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("cloneDeep")(n.asInstanceOf[js.Any]).asInstanceOf[T]
  
  @scala.inline
  def cloneDeepWithoutLoc[T /* <: typings.babelTypes.mod.Node */](n: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("cloneDeepWithoutLoc")(n.asInstanceOf[js.Any]).asInstanceOf[T]
  
  @scala.inline
  def cloneNode[T /* <: typings.babelTypes.mod.Node */](n: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("cloneNode")(n.asInstanceOf[js.Any]).asInstanceOf[T]
  @scala.inline
  def cloneNode[T /* <: typings.babelTypes.mod.Node */](n: T, deep: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("cloneNode")(n.asInstanceOf[js.Any], deep.asInstanceOf[js.Any])).asInstanceOf[T]
  @scala.inline
  def cloneNode[T /* <: typings.babelTypes.mod.Node */](n: T, deep: Boolean, withoutLoc: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("cloneNode")(n.asInstanceOf[js.Any], deep.asInstanceOf[js.Any], withoutLoc.asInstanceOf[js.Any])).asInstanceOf[T]
  @scala.inline
  def cloneNode[T /* <: typings.babelTypes.mod.Node */](n: T, deep: Unit, withoutLoc: Boolean): T = (^.asInstanceOf[js.Dynamic].applyDynamic("cloneNode")(n.asInstanceOf[js.Any], deep.asInstanceOf[js.Any], withoutLoc.asInstanceOf[js.Any])).asInstanceOf[T]
  
  @scala.inline
  def cloneWithoutLoc[T /* <: typings.babelTypes.mod.Node */](n: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("cloneWithoutLoc")(n.asInstanceOf[js.Any]).asInstanceOf[T]
  
  @scala.inline
  def clone_[T /* <: typings.babelTypes.mod.Node */](n: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("clone")(n.asInstanceOf[js.Any]).asInstanceOf[T]
  
  @scala.inline
  def conditionalExpression(test: Expression, consequent: Expression, alternate: Expression): ConditionalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("conditionalExpression")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[ConditionalExpression_]
  
  @scala.inline
  def continueStatement(): ContinueStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("continueStatement")().asInstanceOf[ContinueStatement_]
  @scala.inline
  def continueStatement(label: Identifier_): ContinueStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("continueStatement")(label.asInstanceOf[js.Any]).asInstanceOf[ContinueStatement_]
  
  @scala.inline
  def createFlowUnionType(types: js.Array[FlowType]): UnionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createFlowUnionType")(types.asInstanceOf[js.Any]).asInstanceOf[UnionTypeAnnotation_]
  
  @scala.inline
  def createFlowUnionType_T_FlowType_T[T /* <: FlowType */](types: js.Array[T]): T = ^.asInstanceOf[js.Dynamic].applyDynamic("createFlowUnionType")(types.asInstanceOf[js.Any]).asInstanceOf[T]
  
  @scala.inline
  def createTypeAnnotationBasedOnTypeof_boolean(`type`: boolean): StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_]
  
  @scala.inline
  def createTypeAnnotationBasedOnTypeof_function(`type`: function): StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_]
  
  @scala.inline
  def createTypeAnnotationBasedOnTypeof_number(`type`: number): StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_]
  
  @scala.inline
  def createTypeAnnotationBasedOnTypeof_object(`type`: `object`): StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_]
  
  @scala.inline
  def createTypeAnnotationBasedOnTypeof_string(`type`: string): StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_]
  
  @scala.inline
  def createTypeAnnotationBasedOnTypeof_symbol(`type`: symbol): StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_]
  
  @scala.inline
  def createTypeAnnotationBasedOnTypeof_undefined(`type`: undefined): StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createTypeAnnotationBasedOnTypeof")(`type`.asInstanceOf[js.Any]).asInstanceOf[StringTypeAnnotation_ | VoidTypeAnnotation_ | NumberTypeAnnotation_ | BooleanTypeAnnotation_ | GenericTypeAnnotation_]
  
  @scala.inline
  def createUnionTypeAnnotation(types: js.Array[FlowType]): UnionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("createUnionTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[UnionTypeAnnotation_]
  
  @scala.inline
  def createUnionTypeAnnotation_T_FlowType_T[T /* <: FlowType */](types: js.Array[T]): T = ^.asInstanceOf[js.Dynamic].applyDynamic("createUnionTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[T]
  
  @scala.inline
  def debuggerStatement(): DebuggerStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("debuggerStatement")().asInstanceOf[DebuggerStatement_]
  
  @scala.inline
  def decimalLiteral(value: String): DecimalLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("decimalLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[DecimalLiteral_]
  
  @scala.inline
  def declareClass(
    id: Identifier_,
    typeParameters: Null,
    _extends: js.Array[InterfaceExtends_],
    body: ObjectTypeAnnotation_
  ): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
  @scala.inline
  def declareClass(id: Identifier_, typeParameters: Null, _extends: Null, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
  @scala.inline
  def declareClass(id: Identifier_, typeParameters: Null, _extends: Unit, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
  @scala.inline
  def declareClass(
    id: Identifier_,
    typeParameters: Unit,
    _extends: js.Array[InterfaceExtends_],
    body: ObjectTypeAnnotation_
  ): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
  @scala.inline
  def declareClass(id: Identifier_, typeParameters: Unit, _extends: Null, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
  @scala.inline
  def declareClass(id: Identifier_, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
  @scala.inline
  def declareClass(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    _extends: js.Array[InterfaceExtends_],
    body: ObjectTypeAnnotation_
  ): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
  @scala.inline
  def declareClass(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    _extends: Null,
    body: ObjectTypeAnnotation_
  ): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
  @scala.inline
  def declareClass(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    _extends: Unit,
    body: ObjectTypeAnnotation_
  ): DeclareClass_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareClass")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareClass_]
  
  @scala.inline
  def declareExportAllDeclaration(source: StringLiteral_): DeclareExportAllDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareExportAllDeclaration")(source.asInstanceOf[js.Any]).asInstanceOf[DeclareExportAllDeclaration_]
  
  @scala.inline
  def declareExportDeclaration(): DeclareExportDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")().asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Null, specifiers: js.Array[ExportSpecifier_ | ExportNamespaceSpecifier_]): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(
    declaration: Null,
    specifiers: js.Array[ExportSpecifier_ | ExportNamespaceSpecifier_],
    source: StringLiteral_
  ): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Null, specifiers: Null, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Null, specifiers: Unit, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Unit, specifiers: js.Array[ExportSpecifier_ | ExportNamespaceSpecifier_]): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(
    declaration: Unit,
    specifiers: js.Array[ExportSpecifier_ | ExportNamespaceSpecifier_],
    source: StringLiteral_
  ): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Unit, specifiers: Null, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Unit, specifiers: Unit, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Flow): DeclareExportDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Flow, specifiers: js.Array[ExportSpecifier_ | ExportNamespaceSpecifier_]): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(
    declaration: Flow,
    specifiers: js.Array[ExportSpecifier_ | ExportNamespaceSpecifier_],
    source: StringLiteral_
  ): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Flow, specifiers: Null, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  @scala.inline
  def declareExportDeclaration(declaration: Flow, specifiers: Unit, source: StringLiteral_): DeclareExportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareExportDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[DeclareExportDeclaration_]
  
  @scala.inline
  def declareFunction(id: Identifier_): DeclareFunction_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareFunction")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareFunction_]
  
  @scala.inline
  def declareInterface(
    id: Identifier_,
    typeParameters: Null,
    _extends: js.Array[InterfaceExtends_],
    body: ObjectTypeAnnotation_
  ): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
  @scala.inline
  def declareInterface(id: Identifier_, typeParameters: Null, _extends: Null, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
  @scala.inline
  def declareInterface(id: Identifier_, typeParameters: Null, _extends: Unit, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
  @scala.inline
  def declareInterface(
    id: Identifier_,
    typeParameters: Unit,
    _extends: js.Array[InterfaceExtends_],
    body: ObjectTypeAnnotation_
  ): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
  @scala.inline
  def declareInterface(id: Identifier_, typeParameters: Unit, _extends: Null, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
  @scala.inline
  def declareInterface(id: Identifier_, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
  @scala.inline
  def declareInterface(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    _extends: js.Array[InterfaceExtends_],
    body: ObjectTypeAnnotation_
  ): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
  @scala.inline
  def declareInterface(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    _extends: Null,
    body: ObjectTypeAnnotation_
  ): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
  @scala.inline
  def declareInterface(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    _extends: Unit,
    body: ObjectTypeAnnotation_
  ): DeclareInterface_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareInterface")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareInterface_]
  
  @scala.inline
  def declareModule(id: Identifier_, body: BlockStatement_): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
  @scala.inline
  def declareModule(id: StringLiteral_, body: BlockStatement_): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
  
  @scala.inline
  def declareModuleExports(typeAnnotation: TypeAnnotation_): DeclareModuleExports_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareModuleExports")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[DeclareModuleExports_]
  
  @scala.inline
  def declareModule_CommonJS(id: Identifier_, body: BlockStatement_, kind: CommonJS): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any], kind.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
  @scala.inline
  def declareModule_CommonJS(id: StringLiteral_, body: BlockStatement_, kind: CommonJS): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any], kind.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
  
  @scala.inline
  def declareModule_ES(id: Identifier_, body: BlockStatement_, kind: ES): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any], kind.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
  @scala.inline
  def declareModule_ES(id: StringLiteral_, body: BlockStatement_, kind: ES): DeclareModule_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareModule")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any], kind.asInstanceOf[js.Any])).asInstanceOf[DeclareModule_]
  
  @scala.inline
  def declareOpaqueType(id: Identifier_): DeclareOpaqueType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareOpaqueType_]
  @scala.inline
  def declareOpaqueType(id: Identifier_, typeParameters: Null, supertype: FlowType): DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any])).asInstanceOf[DeclareOpaqueType_]
  @scala.inline
  def declareOpaqueType(id: Identifier_, typeParameters: Unit, supertype: FlowType): DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any])).asInstanceOf[DeclareOpaqueType_]
  @scala.inline
  def declareOpaqueType(id: Identifier_, typeParameters: TypeParameterDeclaration_): DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[DeclareOpaqueType_]
  @scala.inline
  def declareOpaqueType(id: Identifier_, typeParameters: TypeParameterDeclaration_, supertype: FlowType): DeclareOpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareOpaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any])).asInstanceOf[DeclareOpaqueType_]
  
  @scala.inline
  def declareTypeAlias(id: Identifier_, typeParameters: Null, right: FlowType): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
  @scala.inline
  def declareTypeAlias(id: Identifier_, typeParameters: Unit, right: FlowType): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
  @scala.inline
  def declareTypeAlias(id: Identifier_, typeParameters: TypeParameterDeclaration_, right: FlowType): DeclareTypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("declareTypeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[DeclareTypeAlias_]
  
  @scala.inline
  def declareVariable(id: Identifier_): DeclareVariable_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declareVariable")(id.asInstanceOf[js.Any]).asInstanceOf[DeclareVariable_]
  
  @scala.inline
  def declaredPredicate(value: Flow): DeclaredPredicate_ = ^.asInstanceOf[js.Dynamic].applyDynamic("declaredPredicate")(value.asInstanceOf[js.Any]).asInstanceOf[DeclaredPredicate_]
  
  @scala.inline
  def decorator(expression: Expression): Decorator_ = ^.asInstanceOf[js.Dynamic].applyDynamic("decorator")(expression.asInstanceOf[js.Any]).asInstanceOf[Decorator_]
  
  @scala.inline
  def directive(value: DirectiveLiteral_): Directive_ = ^.asInstanceOf[js.Dynamic].applyDynamic("directive")(value.asInstanceOf[js.Any]).asInstanceOf[Directive_]
  
  @scala.inline
  def directiveLiteral(value: String): DirectiveLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("directiveLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[DirectiveLiteral_]
  
  @scala.inline
  def doExpression(body: BlockStatement_): DoExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("doExpression")(body.asInstanceOf[js.Any]).asInstanceOf[DoExpression_]
  
  @scala.inline
  def doWhileStatement(test: Expression, body: Statement): DoWhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("doWhileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[DoWhileStatement_]
  
  @scala.inline
  def emptyStatement(): EmptyStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("emptyStatement")().asInstanceOf[EmptyStatement_]
  
  @scala.inline
  def emptyTypeAnnotation(): EmptyTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("emptyTypeAnnotation")().asInstanceOf[EmptyTypeAnnotation_]
  
  @scala.inline
  def ensureBlock(node: Extract[typings.babelTypes.mod.Node, `0`]): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("ensureBlock")(node.asInstanceOf[js.Any]).asInstanceOf[BlockStatement_]
  @scala.inline
  def ensureBlock[K /* <: /* keyof std.Extract<@babel/types.@babel/types.Node, @babel/types.anon.0> */ String */](
    node: Extract[typings.babelTypes.mod.Node, Record[K, BlockStatement_ | Statement | Expression]],
    key: K
  ): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ensureBlock")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]
  
  @scala.inline
  def enumBooleanBody(members: js.Array[EnumBooleanMember_]): EnumBooleanBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumBooleanBody")(members.asInstanceOf[js.Any]).asInstanceOf[EnumBooleanBody_]
  
  @scala.inline
  def enumBooleanMember(id: Identifier_): EnumBooleanMember_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumBooleanMember")(id.asInstanceOf[js.Any]).asInstanceOf[EnumBooleanMember_]
  
  @scala.inline
  def enumDeclaration(id: Identifier_, body: EnumBooleanBody_): EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration_]
  @scala.inline
  def enumDeclaration(id: Identifier_, body: EnumNumberBody_): EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration_]
  @scala.inline
  def enumDeclaration(id: Identifier_, body: EnumStringBody_): EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration_]
  @scala.inline
  def enumDeclaration(id: Identifier_, body: EnumSymbolBody_): EnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[EnumDeclaration_]
  
  @scala.inline
  def enumDefaultedMember(id: Identifier_): EnumDefaultedMember_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumDefaultedMember")(id.asInstanceOf[js.Any]).asInstanceOf[EnumDefaultedMember_]
  
  @scala.inline
  def enumNumberBody(members: js.Array[EnumNumberMember_]): EnumNumberBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumNumberBody")(members.asInstanceOf[js.Any]).asInstanceOf[EnumNumberBody_]
  
  @scala.inline
  def enumNumberMember(id: Identifier_, init: NumericLiteral_): EnumNumberMember_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumNumberMember")(id.asInstanceOf[js.Any], init.asInstanceOf[js.Any])).asInstanceOf[EnumNumberMember_]
  
  @scala.inline
  def enumStringBody(members: js.Array[EnumStringMember_ | EnumDefaultedMember_]): EnumStringBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumStringBody")(members.asInstanceOf[js.Any]).asInstanceOf[EnumStringBody_]
  
  @scala.inline
  def enumStringMember(id: Identifier_, init: StringLiteral_): EnumStringMember_ = (^.asInstanceOf[js.Dynamic].applyDynamic("enumStringMember")(id.asInstanceOf[js.Any], init.asInstanceOf[js.Any])).asInstanceOf[EnumStringMember_]
  
  @scala.inline
  def enumSymbolBody(members: js.Array[EnumDefaultedMember_]): EnumSymbolBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("enumSymbolBody")(members.asInstanceOf[js.Any]).asInstanceOf[EnumSymbolBody_]
  
  @scala.inline
  def existsTypeAnnotation(): ExistsTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("existsTypeAnnotation")().asInstanceOf[ExistsTypeAnnotation_]
  
  @scala.inline
  def exportAllDeclaration(source: StringLiteral_): ExportAllDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportAllDeclaration")(source.asInstanceOf[js.Any]).asInstanceOf[ExportAllDeclaration_]
  
  @scala.inline
  def exportDefaultDeclaration(declaration: ClassDeclaration_): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
  @scala.inline
  def exportDefaultDeclaration(declaration: Expression): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
  @scala.inline
  def exportDefaultDeclaration(declaration: FunctionDeclaration_): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
  @scala.inline
  def exportDefaultDeclaration(declaration: TSDeclareFunction_): ExportDefaultDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultDeclaration_]
  
  @scala.inline
  def exportDefaultSpecifier(exported: Identifier_): ExportDefaultSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportDefaultSpecifier")(exported.asInstanceOf[js.Any]).asInstanceOf[ExportDefaultSpecifier_]
  
  @scala.inline
  def exportNamedDeclaration(): ExportNamedDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")().asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(
    declaration: Null,
    specifiers: js.Array[ExportSpecifier_ | ExportDefaultSpecifier_ | ExportNamespaceSpecifier_]
  ): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(
    declaration: Null,
    specifiers: js.Array[ExportSpecifier_ | ExportDefaultSpecifier_ | ExportNamespaceSpecifier_],
    source: StringLiteral_
  ): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(declaration: Null, specifiers: Unit, source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(
    declaration: Unit,
    specifiers: js.Array[ExportSpecifier_ | ExportDefaultSpecifier_ | ExportNamespaceSpecifier_]
  ): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(
    declaration: Unit,
    specifiers: js.Array[ExportSpecifier_ | ExportDefaultSpecifier_ | ExportNamespaceSpecifier_],
    source: StringLiteral_
  ): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(declaration: Unit, specifiers: Unit, source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(declaration: Declaration): ExportNamedDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any]).asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(
    declaration: Declaration,
    specifiers: js.Array[ExportSpecifier_ | ExportDefaultSpecifier_ | ExportNamespaceSpecifier_]
  ): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(
    declaration: Declaration,
    specifiers: js.Array[ExportSpecifier_ | ExportDefaultSpecifier_ | ExportNamespaceSpecifier_],
    source: StringLiteral_
  ): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
  @scala.inline
  def exportNamedDeclaration(declaration: Declaration, specifiers: Unit, source: StringLiteral_): ExportNamedDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportNamedDeclaration")(declaration.asInstanceOf[js.Any], specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ExportNamedDeclaration_]
  
  @scala.inline
  def exportNamespaceSpecifier(exported: Identifier_): ExportNamespaceSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("exportNamespaceSpecifier")(exported.asInstanceOf[js.Any]).asInstanceOf[ExportNamespaceSpecifier_]
  
  @scala.inline
  def exportSpecifier(local: Identifier_, exported: Identifier_): ExportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportSpecifier")(local.asInstanceOf[js.Any], exported.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier_]
  @scala.inline
  def exportSpecifier(local: Identifier_, exported: StringLiteral_): ExportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("exportSpecifier")(local.asInstanceOf[js.Any], exported.asInstanceOf[js.Any])).asInstanceOf[ExportSpecifier_]
  
  @scala.inline
  def expressionStatement(expression: Expression): ExpressionStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("expressionStatement")(expression.asInstanceOf[js.Any]).asInstanceOf[ExpressionStatement_]
  
  @scala.inline
  def file(program: Program_): File_ = ^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any]).asInstanceOf[File_]
  @scala.inline
  def file(program: Program_, comments: js.Array[CommentBlock | CommentLine]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any])).asInstanceOf[File_]
  @scala.inline
  def file(program: Program_, comments: js.Array[CommentBlock | CommentLine], tokens: js.Array[js.Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]
  @scala.inline
  def file(program: Program_, comments: Null, tokens: js.Array[js.Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]
  @scala.inline
  def file(program: Program_, comments: Unit, tokens: js.Array[js.Any]): File_ = (^.asInstanceOf[js.Dynamic].applyDynamic("file")(program.asInstanceOf[js.Any], comments.asInstanceOf[js.Any], tokens.asInstanceOf[js.Any])).asInstanceOf[File_]
  
  @scala.inline
  def forInStatement(left: LVal, right: Expression, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
  @scala.inline
  def forInStatement(left: VariableDeclaration_, right: Expression, body: Statement): ForInStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forInStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForInStatement_]
  
  @scala.inline
  def forOfStatement(left: LVal, right: Expression, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
  @scala.inline
  def forOfStatement(left: LVal, right: Expression, body: Statement, _await: Boolean): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _await.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
  @scala.inline
  def forOfStatement(left: VariableDeclaration_, right: Expression, body: Statement): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
  @scala.inline
  def forOfStatement(left: VariableDeclaration_, right: Expression, body: Statement, _await: Boolean): ForOfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forOfStatement")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any], body.asInstanceOf[js.Any], _await.asInstanceOf[js.Any])).asInstanceOf[ForOfStatement_]
  
  @scala.inline
  def forStatement(init: Null, test: Null, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Null, test: Null, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Null, test: Null, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Null, test: Unit, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Null, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Null, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Null, test: Expression, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Null, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Null, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Unit, test: Null, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Unit, test: Null, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Unit, test: Null, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Unit, test: Unit, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Unit, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Unit, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Unit, test: Expression, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Unit, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Unit, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Expression, test: Null, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Expression, test: Null, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Expression, test: Null, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Expression, test: Unit, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Expression, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Expression, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Expression, test: Expression, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Expression, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: Expression, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: VariableDeclaration_, test: Null, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: VariableDeclaration_, test: Null, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: VariableDeclaration_, test: Null, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: VariableDeclaration_, test: Unit, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: VariableDeclaration_, test: Unit, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: VariableDeclaration_, test: Unit, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: VariableDeclaration_, test: Expression, update: Null, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: VariableDeclaration_, test: Expression, update: Unit, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  @scala.inline
  def forStatement(init: VariableDeclaration_, test: Expression, update: Expression, body: Statement): ForStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("forStatement")(init.asInstanceOf[js.Any], test.asInstanceOf[js.Any], update.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[ForStatement_]
  
  @scala.inline
  def functionDeclaration(
    id: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean,
    async: Boolean
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Unit,
    async: Boolean
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean,
    async: Boolean
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Unit,
    async: Boolean
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Identifier_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Identifier_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Identifier_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean,
    async: Boolean
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def functionDeclaration(
    id: Identifier_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Unit,
    async: Boolean
  ): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionDeclaration")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  
  @scala.inline
  def functionExpression(
    id: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean,
    async: Boolean
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Unit,
    async: Boolean
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean,
    async: Boolean
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Unit,
    async: Boolean
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Identifier_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Identifier_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Identifier_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Boolean,
    async: Boolean
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  @scala.inline
  def functionExpression(
    id: Identifier_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    generator: Unit,
    async: Boolean
  ): FunctionExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionExpression")(id.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[FunctionExpression_]
  
  @scala.inline
  def functionTypeAnnotation(typeParameters: Null, params: js.Array[FunctionTypeParam_], rest: Null, returnType: FlowType): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
  @scala.inline
  def functionTypeAnnotation(typeParameters: Null, params: js.Array[FunctionTypeParam_], rest: Unit, returnType: FlowType): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
  @scala.inline
  def functionTypeAnnotation(
    typeParameters: Null,
    params: js.Array[FunctionTypeParam_],
    rest: FunctionTypeParam_,
    returnType: FlowType
  ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
  @scala.inline
  def functionTypeAnnotation(typeParameters: Unit, params: js.Array[FunctionTypeParam_], rest: Null, returnType: FlowType): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
  @scala.inline
  def functionTypeAnnotation(typeParameters: Unit, params: js.Array[FunctionTypeParam_], rest: Unit, returnType: FlowType): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
  @scala.inline
  def functionTypeAnnotation(
    typeParameters: Unit,
    params: js.Array[FunctionTypeParam_],
    rest: FunctionTypeParam_,
    returnType: FlowType
  ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
  @scala.inline
  def functionTypeAnnotation(
    typeParameters: TypeParameterDeclaration_,
    params: js.Array[FunctionTypeParam_],
    rest: Null,
    returnType: FlowType
  ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
  @scala.inline
  def functionTypeAnnotation(
    typeParameters: TypeParameterDeclaration_,
    params: js.Array[FunctionTypeParam_],
    rest: Unit,
    returnType: FlowType
  ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
  @scala.inline
  def functionTypeAnnotation(
    typeParameters: TypeParameterDeclaration_,
    params: js.Array[FunctionTypeParam_],
    rest: FunctionTypeParam_,
    returnType: FlowType
  ): FunctionTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeAnnotation")(typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], rest.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeAnnotation_]
  
  @scala.inline
  def functionTypeParam(name: Null, typeAnnotation: FlowType): FunctionTypeParam_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")(name.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeParam_]
  @scala.inline
  def functionTypeParam(name: Unit, typeAnnotation: FlowType): FunctionTypeParam_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")(name.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeParam_]
  @scala.inline
  def functionTypeParam(name: Identifier_, typeAnnotation: FlowType): FunctionTypeParam_ = (^.asInstanceOf[js.Dynamic].applyDynamic("functionTypeParam")(name.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[FunctionTypeParam_]
  
  @scala.inline
  def genericTypeAnnotation(id: Identifier_): GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any]).asInstanceOf[GenericTypeAnnotation_]
  @scala.inline
  def genericTypeAnnotation(id: Identifier_, typeParameters: TypeParameterInstantiation_): GenericTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[GenericTypeAnnotation_]
  @scala.inline
  def genericTypeAnnotation(id: QualifiedTypeIdentifier_): GenericTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any]).asInstanceOf[GenericTypeAnnotation_]
  @scala.inline
  def genericTypeAnnotation(id: QualifiedTypeIdentifier_, typeParameters: TypeParameterInstantiation_): GenericTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("genericTypeAnnotation")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[GenericTypeAnnotation_]
  
  @scala.inline
  def getBindingIdentifiers(node: typings.babelTypes.mod.Node): Record[String, Identifier_] = ^.asInstanceOf[js.Dynamic].applyDynamic("getBindingIdentifiers")(node.asInstanceOf[js.Any]).asInstanceOf[Record[String, Identifier_]]
  @scala.inline
  def getBindingIdentifiers(node: typings.babelTypes.mod.Node, duplicates: Boolean): Record[String, Identifier_ | js.Array[Identifier_]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any])).asInstanceOf[Record[String, Identifier_ | js.Array[Identifier_]]]
  @scala.inline
  def getBindingIdentifiers(node: typings.babelTypes.mod.Node, duplicates: Boolean, outerOnly: Boolean): Record[String, Identifier_ | js.Array[Identifier_]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any], outerOnly.asInstanceOf[js.Any])).asInstanceOf[Record[String, Identifier_ | js.Array[Identifier_]]]
  @scala.inline
  def getBindingIdentifiers(node: typings.babelTypes.mod.Node, duplicates: Unit, outerOnly: Boolean): Record[String, Identifier_] = (^.asInstanceOf[js.Dynamic].applyDynamic("getBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any], outerOnly.asInstanceOf[js.Any])).asInstanceOf[Record[String, Identifier_]]
  
  @scala.inline
  def getBindingIdentifiers_false(node: typings.babelTypes.mod.Node, duplicates: `false`): Record[String, Identifier_] = (^.asInstanceOf[js.Dynamic].applyDynamic("getBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any])).asInstanceOf[Record[String, Identifier_]]
  @scala.inline
  def getBindingIdentifiers_false(node: typings.babelTypes.mod.Node, duplicates: `false`, outerOnly: Boolean): Record[String, Identifier_] = (^.asInstanceOf[js.Dynamic].applyDynamic("getBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any], outerOnly.asInstanceOf[js.Any])).asInstanceOf[Record[String, Identifier_]]
  
  @scala.inline
  def getBindingIdentifiers_true(node: typings.babelTypes.mod.Node, duplicates: `true`): Record[String, js.Array[Identifier_]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any])).asInstanceOf[Record[String, js.Array[Identifier_]]]
  @scala.inline
  def getBindingIdentifiers_true(node: typings.babelTypes.mod.Node, duplicates: `true`, outerOnly: Boolean): Record[String, js.Array[Identifier_]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any], outerOnly.asInstanceOf[js.Any])).asInstanceOf[Record[String, js.Array[Identifier_]]]
  
  @scala.inline
  def getOuterBindingIdentifiers(node: typings.babelTypes.mod.Node): Record[String, Identifier_] = ^.asInstanceOf[js.Dynamic].applyDynamic("getOuterBindingIdentifiers")(node.asInstanceOf[js.Any]).asInstanceOf[Record[String, Identifier_]]
  @scala.inline
  def getOuterBindingIdentifiers(node: typings.babelTypes.mod.Node, duplicates: Boolean): Record[String, Identifier_ | js.Array[Identifier_]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getOuterBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any])).asInstanceOf[Record[String, Identifier_ | js.Array[Identifier_]]]
  
  @scala.inline
  def getOuterBindingIdentifiers_false(node: typings.babelTypes.mod.Node, duplicates: `false`): Record[String, Identifier_] = (^.asInstanceOf[js.Dynamic].applyDynamic("getOuterBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any])).asInstanceOf[Record[String, Identifier_]]
  
  @scala.inline
  def getOuterBindingIdentifiers_true(node: typings.babelTypes.mod.Node, duplicates: `true`): Record[String, js.Array[Identifier_]] = (^.asInstanceOf[js.Dynamic].applyDynamic("getOuterBindingIdentifiers")(node.asInstanceOf[js.Any], duplicates.asInstanceOf[js.Any])).asInstanceOf[Record[String, js.Array[Identifier_]]]
  
  @scala.inline
  def identifier(name: String): Identifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("identifier")(name.asInstanceOf[js.Any]).asInstanceOf[Identifier_]
  
  @scala.inline
  def ifStatement(test: Expression, consequent: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
  @scala.inline
  def ifStatement(test: Expression, consequent: Statement, alternate: Statement): IfStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("ifStatement")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any], alternate.asInstanceOf[js.Any])).asInstanceOf[IfStatement_]
  
  @scala.inline
  def `import`(): Import_ = ^.asInstanceOf[js.Dynamic].applyDynamic("import")().asInstanceOf[Import_]
  
  @scala.inline
  def importAttribute(key: Identifier_, value: StringLiteral_): ImportAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importAttribute")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ImportAttribute_]
  @scala.inline
  def importAttribute(key: StringLiteral_, value: StringLiteral_): ImportAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importAttribute")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ImportAttribute_]
  
  @scala.inline
  def importDeclaration(
    specifiers: js.Array[ImportSpecifier_ | ImportDefaultSpecifier_ | ImportNamespaceSpecifier_],
    source: StringLiteral_
  ): ImportDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importDeclaration")(specifiers.asInstanceOf[js.Any], source.asInstanceOf[js.Any])).asInstanceOf[ImportDeclaration_]
  
  @scala.inline
  def importDefaultSpecifier(local: Identifier_): ImportDefaultSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importDefaultSpecifier")(local.asInstanceOf[js.Any]).asInstanceOf[ImportDefaultSpecifier_]
  
  @scala.inline
  def importNamespaceSpecifier(local: Identifier_): ImportNamespaceSpecifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("importNamespaceSpecifier")(local.asInstanceOf[js.Any]).asInstanceOf[ImportNamespaceSpecifier_]
  
  @scala.inline
  def importSpecifier(local: Identifier_, imported: Identifier_): ImportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importSpecifier")(local.asInstanceOf[js.Any], imported.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier_]
  @scala.inline
  def importSpecifier(local: Identifier_, imported: StringLiteral_): ImportSpecifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("importSpecifier")(local.asInstanceOf[js.Any], imported.asInstanceOf[js.Any])).asInstanceOf[ImportSpecifier_]
  
  @scala.inline
  def inferredPredicate(): InferredPredicate_ = ^.asInstanceOf[js.Dynamic].applyDynamic("inferredPredicate")().asInstanceOf[InferredPredicate_]
  
  @scala.inline
  def inheritInnerComments(node: typings.babelTypes.mod.Node, parent: typings.babelTypes.mod.Node): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("inheritInnerComments")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def inheritLeadingComments(node: typings.babelTypes.mod.Node, parent: typings.babelTypes.mod.Node): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("inheritLeadingComments")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def inheritTrailingComments(node: typings.babelTypes.mod.Node, parent: typings.babelTypes.mod.Node): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("inheritTrailingComments")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def inherits[T /* <: js.UndefOr[typings.babelTypes.mod.Node | Null] */](child: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("inherits")(child.asInstanceOf[js.Any]).asInstanceOf[T]
  @scala.inline
  def inherits[T /* <: js.UndefOr[typings.babelTypes.mod.Node | Null] */](child: T, parent: typings.babelTypes.mod.Node): T = (^.asInstanceOf[js.Dynamic].applyDynamic("inherits")(child.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[T]
  
  @scala.inline
  def inheritsComments[T /* <: typings.babelTypes.mod.Node */](node: T, parent: typings.babelTypes.mod.Node): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("inheritsComments")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def interfaceDeclaration(
    id: Identifier_,
    typeParameters: Null,
    _extends: js.Array[InterfaceExtends_],
    body: ObjectTypeAnnotation_
  ): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
  @scala.inline
  def interfaceDeclaration(id: Identifier_, typeParameters: Null, _extends: Null, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
  @scala.inline
  def interfaceDeclaration(id: Identifier_, typeParameters: Null, _extends: Unit, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
  @scala.inline
  def interfaceDeclaration(
    id: Identifier_,
    typeParameters: Unit,
    _extends: js.Array[InterfaceExtends_],
    body: ObjectTypeAnnotation_
  ): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
  @scala.inline
  def interfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: Null, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
  @scala.inline
  def interfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: Unit, body: ObjectTypeAnnotation_): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
  @scala.inline
  def interfaceDeclaration(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    _extends: js.Array[InterfaceExtends_],
    body: ObjectTypeAnnotation_
  ): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
  @scala.inline
  def interfaceDeclaration(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    _extends: Null,
    body: ObjectTypeAnnotation_
  ): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
  @scala.inline
  def interfaceDeclaration(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    _extends: Unit,
    body: ObjectTypeAnnotation_
  ): InterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceDeclaration_]
  
  @scala.inline
  def interfaceExtends(id: Identifier_): InterfaceExtends_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any]).asInstanceOf[InterfaceExtends_]
  @scala.inline
  def interfaceExtends(id: Identifier_, typeParameters: TypeParameterInstantiation_): InterfaceExtends_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[InterfaceExtends_]
  @scala.inline
  def interfaceExtends(id: QualifiedTypeIdentifier_): InterfaceExtends_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any]).asInstanceOf[InterfaceExtends_]
  @scala.inline
  def interfaceExtends(id: QualifiedTypeIdentifier_, typeParameters: TypeParameterInstantiation_): InterfaceExtends_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceExtends")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[InterfaceExtends_]
  
  @scala.inline
  def interfaceTypeAnnotation(_extends: js.Array[InterfaceExtends_], body: ObjectTypeAnnotation_): InterfaceTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceTypeAnnotation")(_extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceTypeAnnotation_]
  @scala.inline
  def interfaceTypeAnnotation(_extends: Null, body: ObjectTypeAnnotation_): InterfaceTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceTypeAnnotation")(_extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceTypeAnnotation_]
  @scala.inline
  def interfaceTypeAnnotation(_extends: Unit, body: ObjectTypeAnnotation_): InterfaceTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("interfaceTypeAnnotation")(_extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[InterfaceTypeAnnotation_]
  
  @scala.inline
  def interpreterDirective(value: String): InterpreterDirective_ = ^.asInstanceOf[js.Dynamic].applyDynamic("interpreterDirective")(value.asInstanceOf[js.Any]).asInstanceOf[InterpreterDirective_]
  
  @scala.inline
  def intersectionTypeAnnotation(types: js.Array[FlowType]): IntersectionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("intersectionTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[IntersectionTypeAnnotation_]
  
  @scala.inline
  def is(`type`: String): /* is @babel/types.@babel/types.Node */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Node */ Boolean]
  @scala.inline
  def is(`type`: String, n: Null, required: Partial[typings.babelTypes.mod.Node]): /* is @babel/types.@babel/types.Node */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Node */ Boolean]
  @scala.inline
  def is(`type`: String, n: Unit, required: Partial[typings.babelTypes.mod.Node]): /* is @babel/types.@babel/types.Node */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Node */ Boolean]
  @scala.inline
  def is(`type`: String, n: typings.babelTypes.mod.Node): /* is @babel/types.@babel/types.Node */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Node */ Boolean]
  @scala.inline
  def is(`type`: String, n: typings.babelTypes.mod.Node, required: Partial[typings.babelTypes.mod.Node]): /* is @babel/types.@babel/types.Node */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Node */ Boolean]
  @scala.inline
  def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 242 */ js.Any */](`type`: T): /* is std.Extract<@babel/types.@babel/types.Node, @babel/types.anon.Type<T>> */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any]).asInstanceOf[/* is std.Extract<@babel/types.@babel/types.Node, @babel/types.anon.Type<T>> */ Boolean]
  @scala.inline
  def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 242 */ js.Any */](`type`: T, n: typings.babelTypes.mod.Node): /* is std.Extract<@babel/types.@babel/types.Node, @babel/types.anon.Type<T>> */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any])).asInstanceOf[/* is std.Extract<@babel/types.@babel/types.Node, @babel/types.anon.Type<T>> */ Boolean]
  @scala.inline
  def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 242 */ js.Any */, P /* <: Extract[typings.babelTypes.mod.Node, Type[T]] */](`type`: T, n: Null, required: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
  @scala.inline
  def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 242 */ js.Any */, P /* <: Extract[typings.babelTypes.mod.Node, Type[T]] */](`type`: T, n: Unit, required: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
  @scala.inline
  def is[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 242 */ js.Any */, P /* <: Extract[typings.babelTypes.mod.Node, Type[T]] */](`type`: T, n: typings.babelTypes.mod.Node, required: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
  
  @scala.inline
  def isAnyTypeAnnotation(): /* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean]
  @scala.inline
  def isAnyTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean]
  @scala.inline
  def isAnyTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean]
  @scala.inline
  def isAnyTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean]
  @scala.inline
  def isAnyTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAnyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AnyTypeAnnotation */ Boolean]
  
  @scala.inline
  def isArgumentPlaceholder(): /* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")().asInstanceOf[/* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean]
  @scala.inline
  def isArgumentPlaceholder(node: js.Object): /* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean]
  @scala.inline
  def isArgumentPlaceholder(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean]
  @scala.inline
  def isArgumentPlaceholder(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean]
  @scala.inline
  def isArgumentPlaceholder(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArgumentPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArgumentPlaceholder */ Boolean]
  
  @scala.inline
  def isArrayExpression(): /* is @babel/types.@babel/types.ArrayExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")().asInstanceOf[/* is @babel/types.@babel/types.ArrayExpression */ Boolean]
  @scala.inline
  def isArrayExpression(node: js.Object): /* is @babel/types.@babel/types.ArrayExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ArrayExpression */ Boolean]
  @scala.inline
  def isArrayExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ArrayExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrayExpression */ Boolean]
  @scala.inline
  def isArrayExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ArrayExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrayExpression */ Boolean]
  @scala.inline
  def isArrayExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ArrayExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrayExpression */ Boolean]
  
  @scala.inline
  def isArrayPattern(): /* is @babel/types.@babel/types.ArrayPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")().asInstanceOf[/* is @babel/types.@babel/types.ArrayPattern */ Boolean]
  @scala.inline
  def isArrayPattern(node: js.Object): /* is @babel/types.@babel/types.ArrayPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ArrayPattern */ Boolean]
  @scala.inline
  def isArrayPattern(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ArrayPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrayPattern */ Boolean]
  @scala.inline
  def isArrayPattern(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ArrayPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrayPattern */ Boolean]
  @scala.inline
  def isArrayPattern(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ArrayPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrayPattern */ Boolean]
  
  @scala.inline
  def isArrayTypeAnnotation(): /* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean]
  @scala.inline
  def isArrayTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean]
  @scala.inline
  def isArrayTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean]
  @scala.inline
  def isArrayTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean]
  @scala.inline
  def isArrayTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrayTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrayTypeAnnotation */ Boolean]
  
  @scala.inline
  def isArrowFunctionExpression(): /* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")().asInstanceOf[/* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean]
  @scala.inline
  def isArrowFunctionExpression(node: js.Object): /* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean]
  @scala.inline
  def isArrowFunctionExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean]
  @scala.inline
  def isArrowFunctionExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean]
  @scala.inline
  def isArrowFunctionExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isArrowFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ArrowFunctionExpression */ Boolean]
  
  @scala.inline
  def isAssignmentExpression(): /* is @babel/types.@babel/types.AssignmentExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")().asInstanceOf[/* is @babel/types.@babel/types.AssignmentExpression */ Boolean]
  @scala.inline
  def isAssignmentExpression(node: js.Object): /* is @babel/types.@babel/types.AssignmentExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.AssignmentExpression */ Boolean]
  @scala.inline
  def isAssignmentExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.AssignmentExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AssignmentExpression */ Boolean]
  @scala.inline
  def isAssignmentExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.AssignmentExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AssignmentExpression */ Boolean]
  @scala.inline
  def isAssignmentExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.AssignmentExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AssignmentExpression */ Boolean]
  
  @scala.inline
  def isAssignmentPattern(): /* is @babel/types.@babel/types.AssignmentPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")().asInstanceOf[/* is @babel/types.@babel/types.AssignmentPattern */ Boolean]
  @scala.inline
  def isAssignmentPattern(node: js.Object): /* is @babel/types.@babel/types.AssignmentPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.AssignmentPattern */ Boolean]
  @scala.inline
  def isAssignmentPattern(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.AssignmentPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AssignmentPattern */ Boolean]
  @scala.inline
  def isAssignmentPattern(node: Null, opts: js.Object): /* is @babel/types.@babel/types.AssignmentPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AssignmentPattern */ Boolean]
  @scala.inline
  def isAssignmentPattern(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.AssignmentPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAssignmentPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AssignmentPattern */ Boolean]
  
  @scala.inline
  def isAwaitExpression(): /* is @babel/types.@babel/types.AwaitExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")().asInstanceOf[/* is @babel/types.@babel/types.AwaitExpression */ Boolean]
  @scala.inline
  def isAwaitExpression(node: js.Object): /* is @babel/types.@babel/types.AwaitExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.AwaitExpression */ Boolean]
  @scala.inline
  def isAwaitExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.AwaitExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AwaitExpression */ Boolean]
  @scala.inline
  def isAwaitExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.AwaitExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AwaitExpression */ Boolean]
  @scala.inline
  def isAwaitExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.AwaitExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isAwaitExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.AwaitExpression */ Boolean]
  
  @scala.inline
  def isBigIntLiteral(): /* is @babel/types.@babel/types.BigIntLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")().asInstanceOf[/* is @babel/types.@babel/types.BigIntLiteral */ Boolean]
  @scala.inline
  def isBigIntLiteral(node: js.Object): /* is @babel/types.@babel/types.BigIntLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.BigIntLiteral */ Boolean]
  @scala.inline
  def isBigIntLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.BigIntLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BigIntLiteral */ Boolean]
  @scala.inline
  def isBigIntLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.BigIntLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BigIntLiteral */ Boolean]
  @scala.inline
  def isBigIntLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.BigIntLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBigIntLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BigIntLiteral */ Boolean]
  
  @scala.inline
  def isBinary(): /* is @babel/types.@babel/types.Binary */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")().asInstanceOf[/* is @babel/types.@babel/types.Binary */ Boolean]
  @scala.inline
  def isBinary(node: js.Object): /* is @babel/types.@babel/types.Binary */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Binary */ Boolean]
  @scala.inline
  def isBinary(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Binary */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Binary */ Boolean]
  @scala.inline
  def isBinary(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Binary */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Binary */ Boolean]
  @scala.inline
  def isBinary(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Binary */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinary")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Binary */ Boolean]
  
  @scala.inline
  def isBinaryExpression(): /* is @babel/types.@babel/types.BinaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")().asInstanceOf[/* is @babel/types.@babel/types.BinaryExpression */ Boolean]
  @scala.inline
  def isBinaryExpression(node: js.Object): /* is @babel/types.@babel/types.BinaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.BinaryExpression */ Boolean]
  @scala.inline
  def isBinaryExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.BinaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BinaryExpression */ Boolean]
  @scala.inline
  def isBinaryExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.BinaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BinaryExpression */ Boolean]
  @scala.inline
  def isBinaryExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.BinaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BinaryExpression */ Boolean]
  
  @scala.inline
  def isBindExpression(): /* is @babel/types.@babel/types.BindExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")().asInstanceOf[/* is @babel/types.@babel/types.BindExpression */ Boolean]
  @scala.inline
  def isBindExpression(node: js.Object): /* is @babel/types.@babel/types.BindExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.BindExpression */ Boolean]
  @scala.inline
  def isBindExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.BindExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BindExpression */ Boolean]
  @scala.inline
  def isBindExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.BindExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BindExpression */ Boolean]
  @scala.inline
  def isBindExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.BindExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBindExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BindExpression */ Boolean]
  
  @scala.inline
  def isBinding(node: typings.babelTypes.mod.Node, parent: typings.babelTypes.mod.Node): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinding")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  @scala.inline
  def isBinding(
    node: typings.babelTypes.mod.Node,
    parent: typings.babelTypes.mod.Node,
    grandparent: typings.babelTypes.mod.Node
  ): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBinding")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any], grandparent.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  
  @scala.inline
  def isBlock(): /* is @babel/types.@babel/types.Block */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")().asInstanceOf[/* is @babel/types.@babel/types.Block */ Boolean]
  @scala.inline
  def isBlock(node: js.Object): /* is @babel/types.@babel/types.Block */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Block */ Boolean]
  @scala.inline
  def isBlock(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Block */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Block */ Boolean]
  @scala.inline
  def isBlock(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Block */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Block */ Boolean]
  @scala.inline
  def isBlock(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Block */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Block */ Boolean]
  
  @scala.inline
  def isBlockParent(): /* is @babel/types.@babel/types.BlockParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")().asInstanceOf[/* is @babel/types.@babel/types.BlockParent */ Boolean]
  @scala.inline
  def isBlockParent(node: js.Object): /* is @babel/types.@babel/types.BlockParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.BlockParent */ Boolean]
  @scala.inline
  def isBlockParent(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.BlockParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BlockParent */ Boolean]
  @scala.inline
  def isBlockParent(node: Null, opts: js.Object): /* is @babel/types.@babel/types.BlockParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BlockParent */ Boolean]
  @scala.inline
  def isBlockParent(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.BlockParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BlockParent */ Boolean]
  
  @scala.inline
  def isBlockScoped(node: typings.babelTypes.mod.Node): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockScoped")(node.asInstanceOf[js.Any]).asInstanceOf[Boolean]
  
  @scala.inline
  def isBlockStatement(): /* is @babel/types.@babel/types.BlockStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")().asInstanceOf[/* is @babel/types.@babel/types.BlockStatement */ Boolean]
  @scala.inline
  def isBlockStatement(node: js.Object): /* is @babel/types.@babel/types.BlockStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.BlockStatement */ Boolean]
  @scala.inline
  def isBlockStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.BlockStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BlockStatement */ Boolean]
  @scala.inline
  def isBlockStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.BlockStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BlockStatement */ Boolean]
  @scala.inline
  def isBlockStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.BlockStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBlockStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BlockStatement */ Boolean]
  
  @scala.inline
  def isBooleanLiteral(): /* is @babel/types.@babel/types.BooleanLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")().asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteral */ Boolean]
  @scala.inline
  def isBooleanLiteral(node: js.Object): /* is @babel/types.@babel/types.BooleanLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteral */ Boolean]
  @scala.inline
  def isBooleanLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.BooleanLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteral */ Boolean]
  @scala.inline
  def isBooleanLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.BooleanLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteral */ Boolean]
  @scala.inline
  def isBooleanLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.BooleanLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteral */ Boolean]
  
  @scala.inline
  def isBooleanLiteralTypeAnnotation(): /* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isBooleanLiteralTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isBooleanLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isBooleanLiteralTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isBooleanLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BooleanLiteralTypeAnnotation */ Boolean]
  
  @scala.inline
  def isBooleanTypeAnnotation(): /* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean]
  @scala.inline
  def isBooleanTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean]
  @scala.inline
  def isBooleanTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean]
  @scala.inline
  def isBooleanTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean]
  @scala.inline
  def isBooleanTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBooleanTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BooleanTypeAnnotation */ Boolean]
  
  @scala.inline
  def isBreakStatement(): /* is @babel/types.@babel/types.BreakStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")().asInstanceOf[/* is @babel/types.@babel/types.BreakStatement */ Boolean]
  @scala.inline
  def isBreakStatement(node: js.Object): /* is @babel/types.@babel/types.BreakStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.BreakStatement */ Boolean]
  @scala.inline
  def isBreakStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.BreakStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BreakStatement */ Boolean]
  @scala.inline
  def isBreakStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.BreakStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BreakStatement */ Boolean]
  @scala.inline
  def isBreakStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.BreakStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isBreakStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.BreakStatement */ Boolean]
  
  @scala.inline
  def isCallExpression(): /* is @babel/types.@babel/types.CallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")().asInstanceOf[/* is @babel/types.@babel/types.CallExpression */ Boolean]
  @scala.inline
  def isCallExpression(node: js.Object): /* is @babel/types.@babel/types.CallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.CallExpression */ Boolean]
  @scala.inline
  def isCallExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.CallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.CallExpression */ Boolean]
  @scala.inline
  def isCallExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.CallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.CallExpression */ Boolean]
  @scala.inline
  def isCallExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.CallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.CallExpression */ Boolean]
  
  @scala.inline
  def isCatchClause(): /* is @babel/types.@babel/types.CatchClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")().asInstanceOf[/* is @babel/types.@babel/types.CatchClause */ Boolean]
  @scala.inline
  def isCatchClause(node: js.Object): /* is @babel/types.@babel/types.CatchClause */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.CatchClause */ Boolean]
  @scala.inline
  def isCatchClause(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.CatchClause */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.CatchClause */ Boolean]
  @scala.inline
  def isCatchClause(node: Null, opts: js.Object): /* is @babel/types.@babel/types.CatchClause */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.CatchClause */ Boolean]
  @scala.inline
  def isCatchClause(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.CatchClause */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCatchClause")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.CatchClause */ Boolean]
  
  @scala.inline
  def isClass(): /* is @babel/types.@babel/types.Class */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClass")().asInstanceOf[/* is @babel/types.@babel/types.Class */ Boolean]
  @scala.inline
  def isClass(node: js.Object): /* is @babel/types.@babel/types.Class */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Class */ Boolean]
  @scala.inline
  def isClass(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Class */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Class */ Boolean]
  @scala.inline
  def isClass(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Class */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Class */ Boolean]
  @scala.inline
  def isClass(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Class */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Class */ Boolean]
  
  @scala.inline
  def isClassBody(): /* is @babel/types.@babel/types.ClassBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")().asInstanceOf[/* is @babel/types.@babel/types.ClassBody */ Boolean]
  @scala.inline
  def isClassBody(node: js.Object): /* is @babel/types.@babel/types.ClassBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ClassBody */ Boolean]
  @scala.inline
  def isClassBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ClassBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassBody */ Boolean]
  @scala.inline
  def isClassBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ClassBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassBody */ Boolean]
  @scala.inline
  def isClassBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ClassBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassBody */ Boolean]
  
  @scala.inline
  def isClassDeclaration(): /* is @babel/types.@babel/types.ClassDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.ClassDeclaration */ Boolean]
  @scala.inline
  def isClassDeclaration(node: js.Object): /* is @babel/types.@babel/types.ClassDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ClassDeclaration */ Boolean]
  @scala.inline
  def isClassDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ClassDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassDeclaration */ Boolean]
  @scala.inline
  def isClassDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ClassDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassDeclaration */ Boolean]
  @scala.inline
  def isClassDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ClassDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassDeclaration */ Boolean]
  
  @scala.inline
  def isClassExpression(): /* is @babel/types.@babel/types.ClassExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")().asInstanceOf[/* is @babel/types.@babel/types.ClassExpression */ Boolean]
  @scala.inline
  def isClassExpression(node: js.Object): /* is @babel/types.@babel/types.ClassExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ClassExpression */ Boolean]
  @scala.inline
  def isClassExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ClassExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassExpression */ Boolean]
  @scala.inline
  def isClassExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ClassExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassExpression */ Boolean]
  @scala.inline
  def isClassExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ClassExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassExpression */ Boolean]
  
  @scala.inline
  def isClassImplements(): /* is @babel/types.@babel/types.ClassImplements */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")().asInstanceOf[/* is @babel/types.@babel/types.ClassImplements */ Boolean]
  @scala.inline
  def isClassImplements(node: js.Object): /* is @babel/types.@babel/types.ClassImplements */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ClassImplements */ Boolean]
  @scala.inline
  def isClassImplements(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ClassImplements */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassImplements */ Boolean]
  @scala.inline
  def isClassImplements(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ClassImplements */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassImplements */ Boolean]
  @scala.inline
  def isClassImplements(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ClassImplements */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassImplements")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassImplements */ Boolean]
  
  @scala.inline
  def isClassMethod(): /* is @babel/types.@babel/types.ClassMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")().asInstanceOf[/* is @babel/types.@babel/types.ClassMethod */ Boolean]
  @scala.inline
  def isClassMethod(node: js.Object): /* is @babel/types.@babel/types.ClassMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ClassMethod */ Boolean]
  @scala.inline
  def isClassMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ClassMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassMethod */ Boolean]
  @scala.inline
  def isClassMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ClassMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassMethod */ Boolean]
  @scala.inline
  def isClassMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ClassMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassMethod */ Boolean]
  
  @scala.inline
  def isClassPrivateMethod(): /* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")().asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean]
  @scala.inline
  def isClassPrivateMethod(node: js.Object): /* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean]
  @scala.inline
  def isClassPrivateMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean]
  @scala.inline
  def isClassPrivateMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean]
  @scala.inline
  def isClassPrivateMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateMethod */ Boolean]
  
  @scala.inline
  def isClassPrivateProperty(): /* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")().asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean]
  @scala.inline
  def isClassPrivateProperty(node: js.Object): /* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean]
  @scala.inline
  def isClassPrivateProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean]
  @scala.inline
  def isClassPrivateProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean]
  @scala.inline
  def isClassPrivateProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassPrivateProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassPrivateProperty */ Boolean]
  
  @scala.inline
  def isClassProperty(): /* is @babel/types.@babel/types.ClassProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")().asInstanceOf[/* is @babel/types.@babel/types.ClassProperty */ Boolean]
  @scala.inline
  def isClassProperty(node: js.Object): /* is @babel/types.@babel/types.ClassProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ClassProperty */ Boolean]
  @scala.inline
  def isClassProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ClassProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassProperty */ Boolean]
  @scala.inline
  def isClassProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ClassProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassProperty */ Boolean]
  @scala.inline
  def isClassProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ClassProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isClassProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ClassProperty */ Boolean]
  
  @scala.inline
  def isCompletionStatement(): /* is @babel/types.@babel/types.CompletionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")().asInstanceOf[/* is @babel/types.@babel/types.CompletionStatement */ Boolean]
  @scala.inline
  def isCompletionStatement(node: js.Object): /* is @babel/types.@babel/types.CompletionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.CompletionStatement */ Boolean]
  @scala.inline
  def isCompletionStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.CompletionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.CompletionStatement */ Boolean]
  @scala.inline
  def isCompletionStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.CompletionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.CompletionStatement */ Boolean]
  @scala.inline
  def isCompletionStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.CompletionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isCompletionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.CompletionStatement */ Boolean]
  
  @scala.inline
  def isConditional(): /* is @babel/types.@babel/types.Conditional */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")().asInstanceOf[/* is @babel/types.@babel/types.Conditional */ Boolean]
  @scala.inline
  def isConditional(node: js.Object): /* is @babel/types.@babel/types.Conditional */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Conditional */ Boolean]
  @scala.inline
  def isConditional(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Conditional */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Conditional */ Boolean]
  @scala.inline
  def isConditional(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Conditional */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Conditional */ Boolean]
  @scala.inline
  def isConditional(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Conditional */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditional")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Conditional */ Boolean]
  
  @scala.inline
  def isConditionalExpression(): /* is @babel/types.@babel/types.ConditionalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")().asInstanceOf[/* is @babel/types.@babel/types.ConditionalExpression */ Boolean]
  @scala.inline
  def isConditionalExpression(node: js.Object): /* is @babel/types.@babel/types.ConditionalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ConditionalExpression */ Boolean]
  @scala.inline
  def isConditionalExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ConditionalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ConditionalExpression */ Boolean]
  @scala.inline
  def isConditionalExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ConditionalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ConditionalExpression */ Boolean]
  @scala.inline
  def isConditionalExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ConditionalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isConditionalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ConditionalExpression */ Boolean]
  
  @scala.inline
  def isContinueStatement(): /* is @babel/types.@babel/types.ContinueStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")().asInstanceOf[/* is @babel/types.@babel/types.ContinueStatement */ Boolean]
  @scala.inline
  def isContinueStatement(node: js.Object): /* is @babel/types.@babel/types.ContinueStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ContinueStatement */ Boolean]
  @scala.inline
  def isContinueStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ContinueStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ContinueStatement */ Boolean]
  @scala.inline
  def isContinueStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ContinueStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ContinueStatement */ Boolean]
  @scala.inline
  def isContinueStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ContinueStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isContinueStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ContinueStatement */ Boolean]
  
  @scala.inline
  def isDebuggerStatement(): /* is @babel/types.@babel/types.DebuggerStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")().asInstanceOf[/* is @babel/types.@babel/types.DebuggerStatement */ Boolean]
  @scala.inline
  def isDebuggerStatement(node: js.Object): /* is @babel/types.@babel/types.DebuggerStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DebuggerStatement */ Boolean]
  @scala.inline
  def isDebuggerStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DebuggerStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DebuggerStatement */ Boolean]
  @scala.inline
  def isDebuggerStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DebuggerStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DebuggerStatement */ Boolean]
  @scala.inline
  def isDebuggerStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DebuggerStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDebuggerStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DebuggerStatement */ Boolean]
  
  @scala.inline
  def isDecimalLiteral(): /* is @babel/types.@babel/types.DecimalLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")().asInstanceOf[/* is @babel/types.@babel/types.DecimalLiteral */ Boolean]
  @scala.inline
  def isDecimalLiteral(node: js.Object): /* is @babel/types.@babel/types.DecimalLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DecimalLiteral */ Boolean]
  @scala.inline
  def isDecimalLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DecimalLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DecimalLiteral */ Boolean]
  @scala.inline
  def isDecimalLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DecimalLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DecimalLiteral */ Boolean]
  @scala.inline
  def isDecimalLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DecimalLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecimalLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DecimalLiteral */ Boolean]
  
  @scala.inline
  def isDeclaration(): /* is @babel/types.@babel/types.Declaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.Declaration */ Boolean]
  @scala.inline
  def isDeclaration(node: js.Object): /* is @babel/types.@babel/types.Declaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Declaration */ Boolean]
  @scala.inline
  def isDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Declaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Declaration */ Boolean]
  @scala.inline
  def isDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Declaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Declaration */ Boolean]
  @scala.inline
  def isDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Declaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Declaration */ Boolean]
  
  @scala.inline
  def isDeclareClass(): /* is @babel/types.@babel/types.DeclareClass */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")().asInstanceOf[/* is @babel/types.@babel/types.DeclareClass */ Boolean]
  @scala.inline
  def isDeclareClass(node: js.Object): /* is @babel/types.@babel/types.DeclareClass */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareClass */ Boolean]
  @scala.inline
  def isDeclareClass(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareClass */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareClass */ Boolean]
  @scala.inline
  def isDeclareClass(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareClass */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareClass */ Boolean]
  @scala.inline
  def isDeclareClass(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareClass */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareClass")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareClass */ Boolean]
  
  @scala.inline
  def isDeclareExportAllDeclaration(): /* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean]
  @scala.inline
  def isDeclareExportAllDeclaration(node: js.Object): /* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean]
  @scala.inline
  def isDeclareExportAllDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean]
  @scala.inline
  def isDeclareExportAllDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean]
  @scala.inline
  def isDeclareExportAllDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareExportAllDeclaration */ Boolean]
  
  @scala.inline
  def isDeclareExportDeclaration(): /* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean]
  @scala.inline
  def isDeclareExportDeclaration(node: js.Object): /* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean]
  @scala.inline
  def isDeclareExportDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean]
  @scala.inline
  def isDeclareExportDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean]
  @scala.inline
  def isDeclareExportDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareExportDeclaration */ Boolean]
  
  @scala.inline
  def isDeclareFunction(): /* is @babel/types.@babel/types.DeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")().asInstanceOf[/* is @babel/types.@babel/types.DeclareFunction */ Boolean]
  @scala.inline
  def isDeclareFunction(node: js.Object): /* is @babel/types.@babel/types.DeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareFunction */ Boolean]
  @scala.inline
  def isDeclareFunction(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareFunction */ Boolean]
  @scala.inline
  def isDeclareFunction(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareFunction */ Boolean]
  @scala.inline
  def isDeclareFunction(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareFunction */ Boolean]
  
  @scala.inline
  def isDeclareInterface(): /* is @babel/types.@babel/types.DeclareInterface */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")().asInstanceOf[/* is @babel/types.@babel/types.DeclareInterface */ Boolean]
  @scala.inline
  def isDeclareInterface(node: js.Object): /* is @babel/types.@babel/types.DeclareInterface */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareInterface */ Boolean]
  @scala.inline
  def isDeclareInterface(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareInterface */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareInterface */ Boolean]
  @scala.inline
  def isDeclareInterface(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareInterface */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareInterface */ Boolean]
  @scala.inline
  def isDeclareInterface(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareInterface */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareInterface")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareInterface */ Boolean]
  
  @scala.inline
  def isDeclareModule(): /* is @babel/types.@babel/types.DeclareModule */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")().asInstanceOf[/* is @babel/types.@babel/types.DeclareModule */ Boolean]
  @scala.inline
  def isDeclareModule(node: js.Object): /* is @babel/types.@babel/types.DeclareModule */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareModule */ Boolean]
  @scala.inline
  def isDeclareModule(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareModule */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareModule */ Boolean]
  @scala.inline
  def isDeclareModule(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareModule */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareModule */ Boolean]
  @scala.inline
  def isDeclareModule(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareModule */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModule")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareModule */ Boolean]
  
  @scala.inline
  def isDeclareModuleExports(): /* is @babel/types.@babel/types.DeclareModuleExports */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")().asInstanceOf[/* is @babel/types.@babel/types.DeclareModuleExports */ Boolean]
  @scala.inline
  def isDeclareModuleExports(node: js.Object): /* is @babel/types.@babel/types.DeclareModuleExports */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareModuleExports */ Boolean]
  @scala.inline
  def isDeclareModuleExports(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareModuleExports */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareModuleExports */ Boolean]
  @scala.inline
  def isDeclareModuleExports(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareModuleExports */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareModuleExports */ Boolean]
  @scala.inline
  def isDeclareModuleExports(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareModuleExports */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareModuleExports")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareModuleExports */ Boolean]
  
  @scala.inline
  def isDeclareOpaqueType(): /* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")().asInstanceOf[/* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean]
  @scala.inline
  def isDeclareOpaqueType(node: js.Object): /* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean]
  @scala.inline
  def isDeclareOpaqueType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean]
  @scala.inline
  def isDeclareOpaqueType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean]
  @scala.inline
  def isDeclareOpaqueType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareOpaqueType */ Boolean]
  
  @scala.inline
  def isDeclareTypeAlias(): /* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")().asInstanceOf[/* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean]
  @scala.inline
  def isDeclareTypeAlias(node: js.Object): /* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean]
  @scala.inline
  def isDeclareTypeAlias(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean]
  @scala.inline
  def isDeclareTypeAlias(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean]
  @scala.inline
  def isDeclareTypeAlias(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareTypeAlias */ Boolean]
  
  @scala.inline
  def isDeclareVariable(): /* is @babel/types.@babel/types.DeclareVariable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")().asInstanceOf[/* is @babel/types.@babel/types.DeclareVariable */ Boolean]
  @scala.inline
  def isDeclareVariable(node: js.Object): /* is @babel/types.@babel/types.DeclareVariable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclareVariable */ Boolean]
  @scala.inline
  def isDeclareVariable(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclareVariable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareVariable */ Boolean]
  @scala.inline
  def isDeclareVariable(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclareVariable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareVariable */ Boolean]
  @scala.inline
  def isDeclareVariable(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclareVariable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclareVariable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclareVariable */ Boolean]
  
  @scala.inline
  def isDeclaredPredicate(): /* is @babel/types.@babel/types.DeclaredPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")().asInstanceOf[/* is @babel/types.@babel/types.DeclaredPredicate */ Boolean]
  @scala.inline
  def isDeclaredPredicate(node: js.Object): /* is @babel/types.@babel/types.DeclaredPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DeclaredPredicate */ Boolean]
  @scala.inline
  def isDeclaredPredicate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DeclaredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclaredPredicate */ Boolean]
  @scala.inline
  def isDeclaredPredicate(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DeclaredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclaredPredicate */ Boolean]
  @scala.inline
  def isDeclaredPredicate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DeclaredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDeclaredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DeclaredPredicate */ Boolean]
  
  @scala.inline
  def isDecorator(): /* is @babel/types.@babel/types.Decorator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")().asInstanceOf[/* is @babel/types.@babel/types.Decorator */ Boolean]
  @scala.inline
  def isDecorator(node: js.Object): /* is @babel/types.@babel/types.Decorator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Decorator */ Boolean]
  @scala.inline
  def isDecorator(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Decorator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Decorator */ Boolean]
  @scala.inline
  def isDecorator(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Decorator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Decorator */ Boolean]
  @scala.inline
  def isDecorator(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Decorator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDecorator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Decorator */ Boolean]
  
  @scala.inline
  def isDirective(): /* is @babel/types.@babel/types.Directive */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")().asInstanceOf[/* is @babel/types.@babel/types.Directive */ Boolean]
  @scala.inline
  def isDirective(node: js.Object): /* is @babel/types.@babel/types.Directive */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Directive */ Boolean]
  @scala.inline
  def isDirective(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Directive */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Directive */ Boolean]
  @scala.inline
  def isDirective(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Directive */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Directive */ Boolean]
  @scala.inline
  def isDirective(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Directive */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Directive */ Boolean]
  
  @scala.inline
  def isDirectiveLiteral(): /* is @babel/types.@babel/types.DirectiveLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")().asInstanceOf[/* is @babel/types.@babel/types.DirectiveLiteral */ Boolean]
  @scala.inline
  def isDirectiveLiteral(node: js.Object): /* is @babel/types.@babel/types.DirectiveLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DirectiveLiteral */ Boolean]
  @scala.inline
  def isDirectiveLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DirectiveLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DirectiveLiteral */ Boolean]
  @scala.inline
  def isDirectiveLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DirectiveLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DirectiveLiteral */ Boolean]
  @scala.inline
  def isDirectiveLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DirectiveLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDirectiveLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DirectiveLiteral */ Boolean]
  
  @scala.inline
  def isDoExpression(): /* is @babel/types.@babel/types.DoExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")().asInstanceOf[/* is @babel/types.@babel/types.DoExpression */ Boolean]
  @scala.inline
  def isDoExpression(node: js.Object): /* is @babel/types.@babel/types.DoExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DoExpression */ Boolean]
  @scala.inline
  def isDoExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DoExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DoExpression */ Boolean]
  @scala.inline
  def isDoExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DoExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DoExpression */ Boolean]
  @scala.inline
  def isDoExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DoExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DoExpression */ Boolean]
  
  @scala.inline
  def isDoWhileStatement(): /* is @babel/types.@babel/types.DoWhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")().asInstanceOf[/* is @babel/types.@babel/types.DoWhileStatement */ Boolean]
  @scala.inline
  def isDoWhileStatement(node: js.Object): /* is @babel/types.@babel/types.DoWhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.DoWhileStatement */ Boolean]
  @scala.inline
  def isDoWhileStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.DoWhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DoWhileStatement */ Boolean]
  @scala.inline
  def isDoWhileStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.DoWhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DoWhileStatement */ Boolean]
  @scala.inline
  def isDoWhileStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.DoWhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isDoWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.DoWhileStatement */ Boolean]
  
  @scala.inline
  def isEmptyStatement(): /* is @babel/types.@babel/types.EmptyStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")().asInstanceOf[/* is @babel/types.@babel/types.EmptyStatement */ Boolean]
  @scala.inline
  def isEmptyStatement(node: js.Object): /* is @babel/types.@babel/types.EmptyStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EmptyStatement */ Boolean]
  @scala.inline
  def isEmptyStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EmptyStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EmptyStatement */ Boolean]
  @scala.inline
  def isEmptyStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EmptyStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EmptyStatement */ Boolean]
  @scala.inline
  def isEmptyStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EmptyStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EmptyStatement */ Boolean]
  
  @scala.inline
  def isEmptyTypeAnnotation(): /* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean]
  @scala.inline
  def isEmptyTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean]
  @scala.inline
  def isEmptyTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean]
  @scala.inline
  def isEmptyTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean]
  @scala.inline
  def isEmptyTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEmptyTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EmptyTypeAnnotation */ Boolean]
  
  @scala.inline
  def isEnumBody(): /* is @babel/types.@babel/types.EnumBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")().asInstanceOf[/* is @babel/types.@babel/types.EnumBody */ Boolean]
  @scala.inline
  def isEnumBody(node: js.Object): /* is @babel/types.@babel/types.EnumBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumBody */ Boolean]
  @scala.inline
  def isEnumBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumBody */ Boolean]
  @scala.inline
  def isEnumBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumBody */ Boolean]
  @scala.inline
  def isEnumBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumBody */ Boolean]
  
  @scala.inline
  def isEnumBooleanBody(): /* is @babel/types.@babel/types.EnumBooleanBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")().asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanBody */ Boolean]
  @scala.inline
  def isEnumBooleanBody(node: js.Object): /* is @babel/types.@babel/types.EnumBooleanBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanBody */ Boolean]
  @scala.inline
  def isEnumBooleanBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumBooleanBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanBody */ Boolean]
  @scala.inline
  def isEnumBooleanBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumBooleanBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanBody */ Boolean]
  @scala.inline
  def isEnumBooleanBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumBooleanBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanBody */ Boolean]
  
  @scala.inline
  def isEnumBooleanMember(): /* is @babel/types.@babel/types.EnumBooleanMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")().asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanMember */ Boolean]
  @scala.inline
  def isEnumBooleanMember(node: js.Object): /* is @babel/types.@babel/types.EnumBooleanMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanMember */ Boolean]
  @scala.inline
  def isEnumBooleanMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumBooleanMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanMember */ Boolean]
  @scala.inline
  def isEnumBooleanMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumBooleanMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanMember */ Boolean]
  @scala.inline
  def isEnumBooleanMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumBooleanMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumBooleanMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumBooleanMember */ Boolean]
  
  @scala.inline
  def isEnumDeclaration(): /* is @babel/types.@babel/types.EnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.EnumDeclaration */ Boolean]
  @scala.inline
  def isEnumDeclaration(node: js.Object): /* is @babel/types.@babel/types.EnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumDeclaration */ Boolean]
  @scala.inline
  def isEnumDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumDeclaration */ Boolean]
  @scala.inline
  def isEnumDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumDeclaration */ Boolean]
  @scala.inline
  def isEnumDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumDeclaration */ Boolean]
  
  @scala.inline
  def isEnumDefaultedMember(): /* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")().asInstanceOf[/* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean]
  @scala.inline
  def isEnumDefaultedMember(node: js.Object): /* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean]
  @scala.inline
  def isEnumDefaultedMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean]
  @scala.inline
  def isEnumDefaultedMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean]
  @scala.inline
  def isEnumDefaultedMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumDefaultedMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumDefaultedMember */ Boolean]
  
  @scala.inline
  def isEnumMember(): /* is @babel/types.@babel/types.EnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")().asInstanceOf[/* is @babel/types.@babel/types.EnumMember */ Boolean]
  @scala.inline
  def isEnumMember(node: js.Object): /* is @babel/types.@babel/types.EnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumMember */ Boolean]
  @scala.inline
  def isEnumMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumMember */ Boolean]
  @scala.inline
  def isEnumMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumMember */ Boolean]
  @scala.inline
  def isEnumMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumMember */ Boolean]
  
  @scala.inline
  def isEnumNumberBody(): /* is @babel/types.@babel/types.EnumNumberBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")().asInstanceOf[/* is @babel/types.@babel/types.EnumNumberBody */ Boolean]
  @scala.inline
  def isEnumNumberBody(node: js.Object): /* is @babel/types.@babel/types.EnumNumberBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumNumberBody */ Boolean]
  @scala.inline
  def isEnumNumberBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumNumberBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumNumberBody */ Boolean]
  @scala.inline
  def isEnumNumberBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumNumberBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumNumberBody */ Boolean]
  @scala.inline
  def isEnumNumberBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumNumberBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumNumberBody */ Boolean]
  
  @scala.inline
  def isEnumNumberMember(): /* is @babel/types.@babel/types.EnumNumberMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")().asInstanceOf[/* is @babel/types.@babel/types.EnumNumberMember */ Boolean]
  @scala.inline
  def isEnumNumberMember(node: js.Object): /* is @babel/types.@babel/types.EnumNumberMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumNumberMember */ Boolean]
  @scala.inline
  def isEnumNumberMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumNumberMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumNumberMember */ Boolean]
  @scala.inline
  def isEnumNumberMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumNumberMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumNumberMember */ Boolean]
  @scala.inline
  def isEnumNumberMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumNumberMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumNumberMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumNumberMember */ Boolean]
  
  @scala.inline
  def isEnumStringBody(): /* is @babel/types.@babel/types.EnumStringBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")().asInstanceOf[/* is @babel/types.@babel/types.EnumStringBody */ Boolean]
  @scala.inline
  def isEnumStringBody(node: js.Object): /* is @babel/types.@babel/types.EnumStringBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumStringBody */ Boolean]
  @scala.inline
  def isEnumStringBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumStringBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumStringBody */ Boolean]
  @scala.inline
  def isEnumStringBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumStringBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumStringBody */ Boolean]
  @scala.inline
  def isEnumStringBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumStringBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumStringBody */ Boolean]
  
  @scala.inline
  def isEnumStringMember(): /* is @babel/types.@babel/types.EnumStringMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")().asInstanceOf[/* is @babel/types.@babel/types.EnumStringMember */ Boolean]
  @scala.inline
  def isEnumStringMember(node: js.Object): /* is @babel/types.@babel/types.EnumStringMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumStringMember */ Boolean]
  @scala.inline
  def isEnumStringMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumStringMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumStringMember */ Boolean]
  @scala.inline
  def isEnumStringMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumStringMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumStringMember */ Boolean]
  @scala.inline
  def isEnumStringMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumStringMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumStringMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumStringMember */ Boolean]
  
  @scala.inline
  def isEnumSymbolBody(): /* is @babel/types.@babel/types.EnumSymbolBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")().asInstanceOf[/* is @babel/types.@babel/types.EnumSymbolBody */ Boolean]
  @scala.inline
  def isEnumSymbolBody(node: js.Object): /* is @babel/types.@babel/types.EnumSymbolBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.EnumSymbolBody */ Boolean]
  @scala.inline
  def isEnumSymbolBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.EnumSymbolBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumSymbolBody */ Boolean]
  @scala.inline
  def isEnumSymbolBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types.EnumSymbolBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumSymbolBody */ Boolean]
  @scala.inline
  def isEnumSymbolBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.EnumSymbolBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isEnumSymbolBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.EnumSymbolBody */ Boolean]
  
  @scala.inline
  def isExistsTypeAnnotation(): /* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean]
  @scala.inline
  def isExistsTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean]
  @scala.inline
  def isExistsTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean]
  @scala.inline
  def isExistsTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean]
  @scala.inline
  def isExistsTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExistsTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExistsTypeAnnotation */ Boolean]
  
  @scala.inline
  def isExportAllDeclaration(): /* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean]
  @scala.inline
  def isExportAllDeclaration(node: js.Object): /* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean]
  @scala.inline
  def isExportAllDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean]
  @scala.inline
  def isExportAllDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean]
  @scala.inline
  def isExportAllDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportAllDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportAllDeclaration */ Boolean]
  
  @scala.inline
  def isExportDeclaration(): /* is @babel/types.@babel/types.ExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.ExportDeclaration */ Boolean]
  @scala.inline
  def isExportDeclaration(node: js.Object): /* is @babel/types.@babel/types.ExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExportDeclaration */ Boolean]
  @scala.inline
  def isExportDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportDeclaration */ Boolean]
  @scala.inline
  def isExportDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportDeclaration */ Boolean]
  @scala.inline
  def isExportDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportDeclaration */ Boolean]
  
  @scala.inline
  def isExportDefaultDeclaration(): /* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean]
  @scala.inline
  def isExportDefaultDeclaration(node: js.Object): /* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean]
  @scala.inline
  def isExportDefaultDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean]
  @scala.inline
  def isExportDefaultDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean]
  @scala.inline
  def isExportDefaultDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultDeclaration */ Boolean]
  
  @scala.inline
  def isExportDefaultSpecifier(): /* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")().asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean]
  @scala.inline
  def isExportDefaultSpecifier(node: js.Object): /* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean]
  @scala.inline
  def isExportDefaultSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean]
  @scala.inline
  def isExportDefaultSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean]
  @scala.inline
  def isExportDefaultSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportDefaultSpecifier */ Boolean]
  
  @scala.inline
  def isExportNamedDeclaration(): /* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean]
  @scala.inline
  def isExportNamedDeclaration(node: js.Object): /* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean]
  @scala.inline
  def isExportNamedDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean]
  @scala.inline
  def isExportNamedDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean]
  @scala.inline
  def isExportNamedDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamedDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportNamedDeclaration */ Boolean]
  
  @scala.inline
  def isExportNamespaceSpecifier(): /* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")().asInstanceOf[/* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean]
  @scala.inline
  def isExportNamespaceSpecifier(node: js.Object): /* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean]
  @scala.inline
  def isExportNamespaceSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean]
  @scala.inline
  def isExportNamespaceSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean]
  @scala.inline
  def isExportNamespaceSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportNamespaceSpecifier */ Boolean]
  
  @scala.inline
  def isExportSpecifier(): /* is @babel/types.@babel/types.ExportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")().asInstanceOf[/* is @babel/types.@babel/types.ExportSpecifier */ Boolean]
  @scala.inline
  def isExportSpecifier(node: js.Object): /* is @babel/types.@babel/types.ExportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExportSpecifier */ Boolean]
  @scala.inline
  def isExportSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportSpecifier */ Boolean]
  @scala.inline
  def isExportSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportSpecifier */ Boolean]
  @scala.inline
  def isExportSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExportSpecifier */ Boolean]
  
  @scala.inline
  def isExpression(): /* is @babel/types.@babel/types.Expression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")().asInstanceOf[/* is @babel/types.@babel/types.Expression */ Boolean]
  @scala.inline
  def isExpression(node: js.Object): /* is @babel/types.@babel/types.Expression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Expression */ Boolean]
  @scala.inline
  def isExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Expression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Expression */ Boolean]
  @scala.inline
  def isExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Expression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Expression */ Boolean]
  @scala.inline
  def isExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Expression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Expression */ Boolean]
  
  @scala.inline
  def isExpressionStatement(): /* is @babel/types.@babel/types.ExpressionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")().asInstanceOf[/* is @babel/types.@babel/types.ExpressionStatement */ Boolean]
  @scala.inline
  def isExpressionStatement(node: js.Object): /* is @babel/types.@babel/types.ExpressionStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExpressionStatement */ Boolean]
  @scala.inline
  def isExpressionStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExpressionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExpressionStatement */ Boolean]
  @scala.inline
  def isExpressionStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExpressionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExpressionStatement */ Boolean]
  @scala.inline
  def isExpressionStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExpressionStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExpressionStatement */ Boolean]
  
  @scala.inline
  def isExpressionWrapper(): /* is @babel/types.@babel/types.ExpressionWrapper */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")().asInstanceOf[/* is @babel/types.@babel/types.ExpressionWrapper */ Boolean]
  @scala.inline
  def isExpressionWrapper(node: js.Object): /* is @babel/types.@babel/types.ExpressionWrapper */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ExpressionWrapper */ Boolean]
  @scala.inline
  def isExpressionWrapper(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ExpressionWrapper */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExpressionWrapper */ Boolean]
  @scala.inline
  def isExpressionWrapper(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ExpressionWrapper */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExpressionWrapper */ Boolean]
  @scala.inline
  def isExpressionWrapper(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ExpressionWrapper */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isExpressionWrapper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ExpressionWrapper */ Boolean]
  
  @scala.inline
  def isFile(): /* is @babel/types.@babel/types.File */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFile")().asInstanceOf[/* is @babel/types.@babel/types.File */ Boolean]
  @scala.inline
  def isFile(node: js.Object): /* is @babel/types.@babel/types.File */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.File */ Boolean]
  @scala.inline
  def isFile(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.File */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.File */ Boolean]
  @scala.inline
  def isFile(node: Null, opts: js.Object): /* is @babel/types.@babel/types.File */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.File */ Boolean]
  @scala.inline
  def isFile(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.File */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.File */ Boolean]
  
  @scala.inline
  def isFlow(): /* is @babel/types.@babel/types.Flow */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")().asInstanceOf[/* is @babel/types.@babel/types.Flow */ Boolean]
  @scala.inline
  def isFlow(node: js.Object): /* is @babel/types.@babel/types.Flow */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Flow */ Boolean]
  @scala.inline
  def isFlow(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Flow */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Flow */ Boolean]
  @scala.inline
  def isFlow(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Flow */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Flow */ Boolean]
  @scala.inline
  def isFlow(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Flow */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlow")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Flow */ Boolean]
  
  @scala.inline
  def isFlowBaseAnnotation(): /* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean]
  @scala.inline
  def isFlowBaseAnnotation(node: js.Object): /* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean]
  @scala.inline
  def isFlowBaseAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean]
  @scala.inline
  def isFlowBaseAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean]
  @scala.inline
  def isFlowBaseAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowBaseAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowBaseAnnotation */ Boolean]
  
  @scala.inline
  def isFlowDeclaration(): /* is @babel/types.@babel/types.FlowDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.FlowDeclaration */ Boolean]
  @scala.inline
  def isFlowDeclaration(node: js.Object): /* is @babel/types.@babel/types.FlowDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.FlowDeclaration */ Boolean]
  @scala.inline
  def isFlowDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.FlowDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowDeclaration */ Boolean]
  @scala.inline
  def isFlowDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.FlowDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowDeclaration */ Boolean]
  @scala.inline
  def isFlowDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.FlowDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowDeclaration */ Boolean]
  
  @scala.inline
  def isFlowPredicate(): /* is @babel/types.@babel/types.FlowPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")().asInstanceOf[/* is @babel/types.@babel/types.FlowPredicate */ Boolean]
  @scala.inline
  def isFlowPredicate(node: js.Object): /* is @babel/types.@babel/types.FlowPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.FlowPredicate */ Boolean]
  @scala.inline
  def isFlowPredicate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.FlowPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowPredicate */ Boolean]
  @scala.inline
  def isFlowPredicate(node: Null, opts: js.Object): /* is @babel/types.@babel/types.FlowPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowPredicate */ Boolean]
  @scala.inline
  def isFlowPredicate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.FlowPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowPredicate */ Boolean]
  
  @scala.inline
  def isFlowType(): /* is @babel/types.@babel/types.FlowType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")().asInstanceOf[/* is @babel/types.@babel/types.FlowType */ Boolean]
  @scala.inline
  def isFlowType(node: js.Object): /* is @babel/types.@babel/types.FlowType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.FlowType */ Boolean]
  @scala.inline
  def isFlowType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.FlowType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowType */ Boolean]
  @scala.inline
  def isFlowType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.FlowType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowType */ Boolean]
  @scala.inline
  def isFlowType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.FlowType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFlowType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FlowType */ Boolean]
  
  @scala.inline
  def isFor(): /* is @babel/types.@babel/types.For */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFor")().asInstanceOf[/* is @babel/types.@babel/types.For */ Boolean]
  @scala.inline
  def isFor(node: js.Object): /* is @babel/types.@babel/types.For */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.For */ Boolean]
  @scala.inline
  def isFor(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.For */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.For */ Boolean]
  @scala.inline
  def isFor(node: Null, opts: js.Object): /* is @babel/types.@babel/types.For */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.For */ Boolean]
  @scala.inline
  def isFor(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.For */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFor")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.For */ Boolean]
  
  @scala.inline
  def isForInStatement(): /* is @babel/types.@babel/types.ForInStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")().asInstanceOf[/* is @babel/types.@babel/types.ForInStatement */ Boolean]
  @scala.inline
  def isForInStatement(node: js.Object): /* is @babel/types.@babel/types.ForInStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ForInStatement */ Boolean]
  @scala.inline
  def isForInStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ForInStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForInStatement */ Boolean]
  @scala.inline
  def isForInStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ForInStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForInStatement */ Boolean]
  @scala.inline
  def isForInStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ForInStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForInStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForInStatement */ Boolean]
  
  @scala.inline
  def isForOfStatement(): /* is @babel/types.@babel/types.ForOfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")().asInstanceOf[/* is @babel/types.@babel/types.ForOfStatement */ Boolean]
  @scala.inline
  def isForOfStatement(node: js.Object): /* is @babel/types.@babel/types.ForOfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ForOfStatement */ Boolean]
  @scala.inline
  def isForOfStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ForOfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForOfStatement */ Boolean]
  @scala.inline
  def isForOfStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ForOfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForOfStatement */ Boolean]
  @scala.inline
  def isForOfStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ForOfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForOfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForOfStatement */ Boolean]
  
  @scala.inline
  def isForStatement(): /* is @babel/types.@babel/types.ForStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")().asInstanceOf[/* is @babel/types.@babel/types.ForStatement */ Boolean]
  @scala.inline
  def isForStatement(node: js.Object): /* is @babel/types.@babel/types.ForStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ForStatement */ Boolean]
  @scala.inline
  def isForStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ForStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForStatement */ Boolean]
  @scala.inline
  def isForStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ForStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForStatement */ Boolean]
  @scala.inline
  def isForStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ForStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForStatement */ Boolean]
  
  @scala.inline
  def isForXStatement(): /* is @babel/types.@babel/types.ForXStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")().asInstanceOf[/* is @babel/types.@babel/types.ForXStatement */ Boolean]
  @scala.inline
  def isForXStatement(node: js.Object): /* is @babel/types.@babel/types.ForXStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ForXStatement */ Boolean]
  @scala.inline
  def isForXStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ForXStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForXStatement */ Boolean]
  @scala.inline
  def isForXStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ForXStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForXStatement */ Boolean]
  @scala.inline
  def isForXStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ForXStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isForXStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ForXStatement */ Boolean]
  
  @scala.inline
  def isFunction(): /* is @babel/types.@babel/types.Function */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")().asInstanceOf[/* is @babel/types.@babel/types.Function */ Boolean]
  @scala.inline
  def isFunction(node: js.Object): /* is @babel/types.@babel/types.Function */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Function */ Boolean]
  @scala.inline
  def isFunction(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Function */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Function */ Boolean]
  @scala.inline
  def isFunction(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Function */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Function */ Boolean]
  @scala.inline
  def isFunction(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Function */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Function */ Boolean]
  
  @scala.inline
  def isFunctionDeclaration(): /* is @babel/types.@babel/types.FunctionDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.FunctionDeclaration */ Boolean]
  @scala.inline
  def isFunctionDeclaration(node: js.Object): /* is @babel/types.@babel/types.FunctionDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.FunctionDeclaration */ Boolean]
  @scala.inline
  def isFunctionDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.FunctionDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionDeclaration */ Boolean]
  @scala.inline
  def isFunctionDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.FunctionDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionDeclaration */ Boolean]
  @scala.inline
  def isFunctionDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.FunctionDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionDeclaration */ Boolean]
  
  @scala.inline
  def isFunctionExpression(): /* is @babel/types.@babel/types.FunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")().asInstanceOf[/* is @babel/types.@babel/types.FunctionExpression */ Boolean]
  @scala.inline
  def isFunctionExpression(node: js.Object): /* is @babel/types.@babel/types.FunctionExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.FunctionExpression */ Boolean]
  @scala.inline
  def isFunctionExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.FunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionExpression */ Boolean]
  @scala.inline
  def isFunctionExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.FunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionExpression */ Boolean]
  @scala.inline
  def isFunctionExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.FunctionExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionExpression */ Boolean]
  
  @scala.inline
  def isFunctionParent(): /* is @babel/types.@babel/types.FunctionParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")().asInstanceOf[/* is @babel/types.@babel/types.FunctionParent */ Boolean]
  @scala.inline
  def isFunctionParent(node: js.Object): /* is @babel/types.@babel/types.FunctionParent */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.FunctionParent */ Boolean]
  @scala.inline
  def isFunctionParent(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.FunctionParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionParent */ Boolean]
  @scala.inline
  def isFunctionParent(node: Null, opts: js.Object): /* is @babel/types.@babel/types.FunctionParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionParent */ Boolean]
  @scala.inline
  def isFunctionParent(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.FunctionParent */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionParent")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionParent */ Boolean]
  
  @scala.inline
  def isFunctionTypeAnnotation(): /* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean]
  @scala.inline
  def isFunctionTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean]
  @scala.inline
  def isFunctionTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean]
  @scala.inline
  def isFunctionTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean]
  @scala.inline
  def isFunctionTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeAnnotation */ Boolean]
  
  @scala.inline
  def isFunctionTypeParam(): /* is @babel/types.@babel/types.FunctionTypeParam */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")().asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeParam */ Boolean]
  @scala.inline
  def isFunctionTypeParam(node: js.Object): /* is @babel/types.@babel/types.FunctionTypeParam */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeParam */ Boolean]
  @scala.inline
  def isFunctionTypeParam(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.FunctionTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeParam */ Boolean]
  @scala.inline
  def isFunctionTypeParam(node: Null, opts: js.Object): /* is @babel/types.@babel/types.FunctionTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeParam */ Boolean]
  @scala.inline
  def isFunctionTypeParam(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.FunctionTypeParam */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isFunctionTypeParam")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.FunctionTypeParam */ Boolean]
  
  @scala.inline
  def isGenericTypeAnnotation(): /* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean]
  @scala.inline
  def isGenericTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean]
  @scala.inline
  def isGenericTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean]
  @scala.inline
  def isGenericTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean]
  @scala.inline
  def isGenericTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isGenericTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.GenericTypeAnnotation */ Boolean]
  
  @scala.inline
  def isIdentifier(): /* is @babel/types.@babel/types.Identifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")().asInstanceOf[/* is @babel/types.@babel/types.Identifier */ Boolean]
  @scala.inline
  def isIdentifier(node: js.Object): /* is @babel/types.@babel/types.Identifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Identifier */ Boolean]
  @scala.inline
  def isIdentifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Identifier */ Boolean]
  @scala.inline
  def isIdentifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Identifier */ Boolean]
  @scala.inline
  def isIdentifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Identifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Identifier */ Boolean]
  
  @scala.inline
  def isIfStatement(): /* is @babel/types.@babel/types.IfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")().asInstanceOf[/* is @babel/types.@babel/types.IfStatement */ Boolean]
  @scala.inline
  def isIfStatement(node: js.Object): /* is @babel/types.@babel/types.IfStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.IfStatement */ Boolean]
  @scala.inline
  def isIfStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.IfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.IfStatement */ Boolean]
  @scala.inline
  def isIfStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.IfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.IfStatement */ Boolean]
  @scala.inline
  def isIfStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.IfStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIfStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.IfStatement */ Boolean]
  
  @scala.inline
  def isImmutable(): /* is @babel/types.@babel/types.Immutable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")().asInstanceOf[/* is @babel/types.@babel/types.Immutable */ Boolean]
  @scala.inline
  def isImmutable(node: js.Object): /* is @babel/types.@babel/types.Immutable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Immutable */ Boolean]
  @scala.inline
  def isImmutable(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Immutable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Immutable */ Boolean]
  @scala.inline
  def isImmutable(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Immutable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Immutable */ Boolean]
  @scala.inline
  def isImmutable(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Immutable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Immutable */ Boolean]
  @scala.inline
  def isImmutable(node: typings.babelTypes.mod.Node): /* is @babel/types.@babel/types.Immutable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImmutable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Immutable */ Boolean]
  
  @scala.inline
  def isImport(): /* is @babel/types.@babel/types.Import */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImport")().asInstanceOf[/* is @babel/types.@babel/types.Import */ Boolean]
  @scala.inline
  def isImport(node: js.Object): /* is @babel/types.@babel/types.Import */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImport")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Import */ Boolean]
  @scala.inline
  def isImport(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Import */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Import */ Boolean]
  @scala.inline
  def isImport(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Import */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Import */ Boolean]
  @scala.inline
  def isImport(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Import */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImport")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Import */ Boolean]
  
  @scala.inline
  def isImportAttribute(): /* is @babel/types.@babel/types.ImportAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")().asInstanceOf[/* is @babel/types.@babel/types.ImportAttribute */ Boolean]
  @scala.inline
  def isImportAttribute(node: js.Object): /* is @babel/types.@babel/types.ImportAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ImportAttribute */ Boolean]
  @scala.inline
  def isImportAttribute(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ImportAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportAttribute */ Boolean]
  @scala.inline
  def isImportAttribute(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ImportAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportAttribute */ Boolean]
  @scala.inline
  def isImportAttribute(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ImportAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportAttribute */ Boolean]
  
  @scala.inline
  def isImportDeclaration(): /* is @babel/types.@babel/types.ImportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.ImportDeclaration */ Boolean]
  @scala.inline
  def isImportDeclaration(node: js.Object): /* is @babel/types.@babel/types.ImportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ImportDeclaration */ Boolean]
  @scala.inline
  def isImportDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ImportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportDeclaration */ Boolean]
  @scala.inline
  def isImportDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ImportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportDeclaration */ Boolean]
  @scala.inline
  def isImportDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ImportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportDeclaration */ Boolean]
  
  @scala.inline
  def isImportDefaultSpecifier(): /* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")().asInstanceOf[/* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean]
  @scala.inline
  def isImportDefaultSpecifier(node: js.Object): /* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean]
  @scala.inline
  def isImportDefaultSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean]
  @scala.inline
  def isImportDefaultSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean]
  @scala.inline
  def isImportDefaultSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportDefaultSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportDefaultSpecifier */ Boolean]
  
  @scala.inline
  def isImportNamespaceSpecifier(): /* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")().asInstanceOf[/* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean]
  @scala.inline
  def isImportNamespaceSpecifier(node: js.Object): /* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean]
  @scala.inline
  def isImportNamespaceSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean]
  @scala.inline
  def isImportNamespaceSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean]
  @scala.inline
  def isImportNamespaceSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportNamespaceSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportNamespaceSpecifier */ Boolean]
  
  @scala.inline
  def isImportSpecifier(): /* is @babel/types.@babel/types.ImportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")().asInstanceOf[/* is @babel/types.@babel/types.ImportSpecifier */ Boolean]
  @scala.inline
  def isImportSpecifier(node: js.Object): /* is @babel/types.@babel/types.ImportSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ImportSpecifier */ Boolean]
  @scala.inline
  def isImportSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ImportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportSpecifier */ Boolean]
  @scala.inline
  def isImportSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ImportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportSpecifier */ Boolean]
  @scala.inline
  def isImportSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ImportSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isImportSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ImportSpecifier */ Boolean]
  
  @scala.inline
  def isInferredPredicate(): /* is @babel/types.@babel/types.InferredPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")().asInstanceOf[/* is @babel/types.@babel/types.InferredPredicate */ Boolean]
  @scala.inline
  def isInferredPredicate(node: js.Object): /* is @babel/types.@babel/types.InferredPredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.InferredPredicate */ Boolean]
  @scala.inline
  def isInferredPredicate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.InferredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InferredPredicate */ Boolean]
  @scala.inline
  def isInferredPredicate(node: Null, opts: js.Object): /* is @babel/types.@babel/types.InferredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InferredPredicate */ Boolean]
  @scala.inline
  def isInferredPredicate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.InferredPredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInferredPredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InferredPredicate */ Boolean]
  
  @scala.inline
  def isInterfaceDeclaration(): /* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean]
  @scala.inline
  def isInterfaceDeclaration(node: js.Object): /* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean]
  @scala.inline
  def isInterfaceDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean]
  @scala.inline
  def isInterfaceDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean]
  @scala.inline
  def isInterfaceDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterfaceDeclaration */ Boolean]
  
  @scala.inline
  def isInterfaceExtends(): /* is @babel/types.@babel/types.InterfaceExtends */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")().asInstanceOf[/* is @babel/types.@babel/types.InterfaceExtends */ Boolean]
  @scala.inline
  def isInterfaceExtends(node: js.Object): /* is @babel/types.@babel/types.InterfaceExtends */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.InterfaceExtends */ Boolean]
  @scala.inline
  def isInterfaceExtends(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.InterfaceExtends */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterfaceExtends */ Boolean]
  @scala.inline
  def isInterfaceExtends(node: Null, opts: js.Object): /* is @babel/types.@babel/types.InterfaceExtends */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterfaceExtends */ Boolean]
  @scala.inline
  def isInterfaceExtends(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.InterfaceExtends */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceExtends")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterfaceExtends */ Boolean]
  
  @scala.inline
  def isInterfaceTypeAnnotation(): /* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean]
  @scala.inline
  def isInterfaceTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean]
  @scala.inline
  def isInterfaceTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean]
  @scala.inline
  def isInterfaceTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean]
  @scala.inline
  def isInterfaceTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterfaceTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterfaceTypeAnnotation */ Boolean]
  
  @scala.inline
  def isInterpreterDirective(): /* is @babel/types.@babel/types.InterpreterDirective */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")().asInstanceOf[/* is @babel/types.@babel/types.InterpreterDirective */ Boolean]
  @scala.inline
  def isInterpreterDirective(node: js.Object): /* is @babel/types.@babel/types.InterpreterDirective */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.InterpreterDirective */ Boolean]
  @scala.inline
  def isInterpreterDirective(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.InterpreterDirective */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterpreterDirective */ Boolean]
  @scala.inline
  def isInterpreterDirective(node: Null, opts: js.Object): /* is @babel/types.@babel/types.InterpreterDirective */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterpreterDirective */ Boolean]
  @scala.inline
  def isInterpreterDirective(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.InterpreterDirective */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isInterpreterDirective")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.InterpreterDirective */ Boolean]
  
  @scala.inline
  def isIntersectionTypeAnnotation(): /* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean]
  @scala.inline
  def isIntersectionTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean]
  @scala.inline
  def isIntersectionTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean]
  @scala.inline
  def isIntersectionTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean]
  @scala.inline
  def isIntersectionTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isIntersectionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.IntersectionTypeAnnotation */ Boolean]
  
  @scala.inline
  def isJSX(): /* is @babel/types.@babel/types.JSX */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")().asInstanceOf[/* is @babel/types.@babel/types.JSX */ Boolean]
  @scala.inline
  def isJSX(node: js.Object): /* is @babel/types.@babel/types.JSX */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSX */ Boolean]
  @scala.inline
  def isJSX(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSX */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSX */ Boolean]
  @scala.inline
  def isJSX(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSX */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSX */ Boolean]
  @scala.inline
  def isJSX(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSX */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSX")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSX */ Boolean]
  
  @scala.inline
  def isJSXAttribute(): /* is @babel/types.@babel/types.JSXAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")().asInstanceOf[/* is @babel/types.@babel/types.JSXAttribute */ Boolean]
  @scala.inline
  def isJSXAttribute(node: js.Object): /* is @babel/types.@babel/types.JSXAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXAttribute */ Boolean]
  @scala.inline
  def isJSXAttribute(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXAttribute */ Boolean]
  @scala.inline
  def isJSXAttribute(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXAttribute */ Boolean]
  @scala.inline
  def isJSXAttribute(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXAttribute */ Boolean]
  
  @scala.inline
  def isJSXClosingElement(): /* is @babel/types.@babel/types.JSXClosingElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")().asInstanceOf[/* is @babel/types.@babel/types.JSXClosingElement */ Boolean]
  @scala.inline
  def isJSXClosingElement(node: js.Object): /* is @babel/types.@babel/types.JSXClosingElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXClosingElement */ Boolean]
  @scala.inline
  def isJSXClosingElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXClosingElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXClosingElement */ Boolean]
  @scala.inline
  def isJSXClosingElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXClosingElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXClosingElement */ Boolean]
  @scala.inline
  def isJSXClosingElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXClosingElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXClosingElement */ Boolean]
  
  @scala.inline
  def isJSXClosingFragment(): /* is @babel/types.@babel/types.JSXClosingFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")().asInstanceOf[/* is @babel/types.@babel/types.JSXClosingFragment */ Boolean]
  @scala.inline
  def isJSXClosingFragment(node: js.Object): /* is @babel/types.@babel/types.JSXClosingFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXClosingFragment */ Boolean]
  @scala.inline
  def isJSXClosingFragment(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXClosingFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXClosingFragment */ Boolean]
  @scala.inline
  def isJSXClosingFragment(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXClosingFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXClosingFragment */ Boolean]
  @scala.inline
  def isJSXClosingFragment(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXClosingFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXClosingFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXClosingFragment */ Boolean]
  
  @scala.inline
  def isJSXElement(): /* is @babel/types.@babel/types.JSXElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")().asInstanceOf[/* is @babel/types.@babel/types.JSXElement */ Boolean]
  @scala.inline
  def isJSXElement(node: js.Object): /* is @babel/types.@babel/types.JSXElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXElement */ Boolean]
  @scala.inline
  def isJSXElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXElement */ Boolean]
  @scala.inline
  def isJSXElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXElement */ Boolean]
  @scala.inline
  def isJSXElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXElement */ Boolean]
  
  @scala.inline
  def isJSXEmptyExpression(): /* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")().asInstanceOf[/* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean]
  @scala.inline
  def isJSXEmptyExpression(node: js.Object): /* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean]
  @scala.inline
  def isJSXEmptyExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean]
  @scala.inline
  def isJSXEmptyExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean]
  @scala.inline
  def isJSXEmptyExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXEmptyExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXEmptyExpression */ Boolean]
  
  @scala.inline
  def isJSXExpressionContainer(): /* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")().asInstanceOf[/* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean]
  @scala.inline
  def isJSXExpressionContainer(node: js.Object): /* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean]
  @scala.inline
  def isJSXExpressionContainer(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean]
  @scala.inline
  def isJSXExpressionContainer(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean]
  @scala.inline
  def isJSXExpressionContainer(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXExpressionContainer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXExpressionContainer */ Boolean]
  
  @scala.inline
  def isJSXFragment(): /* is @babel/types.@babel/types.JSXFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")().asInstanceOf[/* is @babel/types.@babel/types.JSXFragment */ Boolean]
  @scala.inline
  def isJSXFragment(node: js.Object): /* is @babel/types.@babel/types.JSXFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXFragment */ Boolean]
  @scala.inline
  def isJSXFragment(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXFragment */ Boolean]
  @scala.inline
  def isJSXFragment(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXFragment */ Boolean]
  @scala.inline
  def isJSXFragment(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXFragment */ Boolean]
  
  @scala.inline
  def isJSXIdentifier(): /* is @babel/types.@babel/types.JSXIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")().asInstanceOf[/* is @babel/types.@babel/types.JSXIdentifier */ Boolean]
  @scala.inline
  def isJSXIdentifier(node: js.Object): /* is @babel/types.@babel/types.JSXIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXIdentifier */ Boolean]
  @scala.inline
  def isJSXIdentifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXIdentifier */ Boolean]
  @scala.inline
  def isJSXIdentifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXIdentifier */ Boolean]
  @scala.inline
  def isJSXIdentifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXIdentifier */ Boolean]
  
  @scala.inline
  def isJSXMemberExpression(): /* is @babel/types.@babel/types.JSXMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")().asInstanceOf[/* is @babel/types.@babel/types.JSXMemberExpression */ Boolean]
  @scala.inline
  def isJSXMemberExpression(node: js.Object): /* is @babel/types.@babel/types.JSXMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXMemberExpression */ Boolean]
  @scala.inline
  def isJSXMemberExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXMemberExpression */ Boolean]
  @scala.inline
  def isJSXMemberExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXMemberExpression */ Boolean]
  @scala.inline
  def isJSXMemberExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXMemberExpression */ Boolean]
  
  @scala.inline
  def isJSXNamespacedName(): /* is @babel/types.@babel/types.JSXNamespacedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")().asInstanceOf[/* is @babel/types.@babel/types.JSXNamespacedName */ Boolean]
  @scala.inline
  def isJSXNamespacedName(node: js.Object): /* is @babel/types.@babel/types.JSXNamespacedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXNamespacedName */ Boolean]
  @scala.inline
  def isJSXNamespacedName(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXNamespacedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXNamespacedName */ Boolean]
  @scala.inline
  def isJSXNamespacedName(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXNamespacedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXNamespacedName */ Boolean]
  @scala.inline
  def isJSXNamespacedName(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXNamespacedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXNamespacedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXNamespacedName */ Boolean]
  
  @scala.inline
  def isJSXOpeningElement(): /* is @babel/types.@babel/types.JSXOpeningElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")().asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningElement */ Boolean]
  @scala.inline
  def isJSXOpeningElement(node: js.Object): /* is @babel/types.@babel/types.JSXOpeningElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningElement */ Boolean]
  @scala.inline
  def isJSXOpeningElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXOpeningElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningElement */ Boolean]
  @scala.inline
  def isJSXOpeningElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXOpeningElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningElement */ Boolean]
  @scala.inline
  def isJSXOpeningElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXOpeningElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningElement */ Boolean]
  
  @scala.inline
  def isJSXOpeningFragment(): /* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")().asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean]
  @scala.inline
  def isJSXOpeningFragment(node: js.Object): /* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean]
  @scala.inline
  def isJSXOpeningFragment(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean]
  @scala.inline
  def isJSXOpeningFragment(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean]
  @scala.inline
  def isJSXOpeningFragment(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXOpeningFragment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXOpeningFragment */ Boolean]
  
  @scala.inline
  def isJSXSpreadAttribute(): /* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")().asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean]
  @scala.inline
  def isJSXSpreadAttribute(node: js.Object): /* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean]
  @scala.inline
  def isJSXSpreadAttribute(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean]
  @scala.inline
  def isJSXSpreadAttribute(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean]
  @scala.inline
  def isJSXSpreadAttribute(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadAttribute")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadAttribute */ Boolean]
  
  @scala.inline
  def isJSXSpreadChild(): /* is @babel/types.@babel/types.JSXSpreadChild */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")().asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadChild */ Boolean]
  @scala.inline
  def isJSXSpreadChild(node: js.Object): /* is @babel/types.@babel/types.JSXSpreadChild */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadChild */ Boolean]
  @scala.inline
  def isJSXSpreadChild(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXSpreadChild */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadChild */ Boolean]
  @scala.inline
  def isJSXSpreadChild(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXSpreadChild */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadChild */ Boolean]
  @scala.inline
  def isJSXSpreadChild(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXSpreadChild */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXSpreadChild")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXSpreadChild */ Boolean]
  
  @scala.inline
  def isJSXText(): /* is @babel/types.@babel/types.JSXText */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")().asInstanceOf[/* is @babel/types.@babel/types.JSXText */ Boolean]
  @scala.inline
  def isJSXText(node: js.Object): /* is @babel/types.@babel/types.JSXText */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.JSXText */ Boolean]
  @scala.inline
  def isJSXText(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.JSXText */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXText */ Boolean]
  @scala.inline
  def isJSXText(node: Null, opts: js.Object): /* is @babel/types.@babel/types.JSXText */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXText */ Boolean]
  @scala.inline
  def isJSXText(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.JSXText */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isJSXText")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.JSXText */ Boolean]
  
  @scala.inline
  def isLVal(): /* is @babel/types.@babel/types.LVal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")().asInstanceOf[/* is @babel/types.@babel/types.LVal */ Boolean]
  @scala.inline
  def isLVal(node: js.Object): /* is @babel/types.@babel/types.LVal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.LVal */ Boolean]
  @scala.inline
  def isLVal(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.LVal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.LVal */ Boolean]
  @scala.inline
  def isLVal(node: Null, opts: js.Object): /* is @babel/types.@babel/types.LVal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.LVal */ Boolean]
  @scala.inline
  def isLVal(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.LVal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLVal")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.LVal */ Boolean]
  
  @scala.inline
  def isLabeledStatement(): /* is @babel/types.@babel/types.LabeledStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")().asInstanceOf[/* is @babel/types.@babel/types.LabeledStatement */ Boolean]
  @scala.inline
  def isLabeledStatement(node: js.Object): /* is @babel/types.@babel/types.LabeledStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.LabeledStatement */ Boolean]
  @scala.inline
  def isLabeledStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.LabeledStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.LabeledStatement */ Boolean]
  @scala.inline
  def isLabeledStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.LabeledStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.LabeledStatement */ Boolean]
  @scala.inline
  def isLabeledStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.LabeledStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLabeledStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.LabeledStatement */ Boolean]
  
  @scala.inline
  def isLet(node: typings.babelTypes.mod.Node): /* is @babel/types.@babel/types.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLet")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclaration */ Boolean]
  
  @scala.inline
  def isLiteral(): /* is @babel/types.@babel/types.Literal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")().asInstanceOf[/* is @babel/types.@babel/types.Literal */ Boolean]
  @scala.inline
  def isLiteral(node: js.Object): /* is @babel/types.@babel/types.Literal */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Literal */ Boolean]
  @scala.inline
  def isLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Literal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Literal */ Boolean]
  @scala.inline
  def isLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Literal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Literal */ Boolean]
  @scala.inline
  def isLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Literal */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Literal */ Boolean]
  
  @scala.inline
  def isLogicalExpression(): /* is @babel/types.@babel/types.LogicalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")().asInstanceOf[/* is @babel/types.@babel/types.LogicalExpression */ Boolean]
  @scala.inline
  def isLogicalExpression(node: js.Object): /* is @babel/types.@babel/types.LogicalExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.LogicalExpression */ Boolean]
  @scala.inline
  def isLogicalExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.LogicalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.LogicalExpression */ Boolean]
  @scala.inline
  def isLogicalExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.LogicalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.LogicalExpression */ Boolean]
  @scala.inline
  def isLogicalExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.LogicalExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLogicalExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.LogicalExpression */ Boolean]
  
  @scala.inline
  def isLoop(): /* is @babel/types.@babel/types.Loop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")().asInstanceOf[/* is @babel/types.@babel/types.Loop */ Boolean]
  @scala.inline
  def isLoop(node: js.Object): /* is @babel/types.@babel/types.Loop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Loop */ Boolean]
  @scala.inline
  def isLoop(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Loop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Loop */ Boolean]
  @scala.inline
  def isLoop(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Loop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Loop */ Boolean]
  @scala.inline
  def isLoop(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Loop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isLoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Loop */ Boolean]
  
  @scala.inline
  def isMemberExpression(): /* is @babel/types.@babel/types.MemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")().asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def isMemberExpression(node: js.Object): /* is @babel/types.@babel/types.MemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def isMemberExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def isMemberExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def isMemberExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  
  @scala.inline
  def isMetaProperty(): /* is @babel/types.@babel/types.MetaProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")().asInstanceOf[/* is @babel/types.@babel/types.MetaProperty */ Boolean]
  @scala.inline
  def isMetaProperty(node: js.Object): /* is @babel/types.@babel/types.MetaProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.MetaProperty */ Boolean]
  @scala.inline
  def isMetaProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.MetaProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MetaProperty */ Boolean]
  @scala.inline
  def isMetaProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.MetaProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MetaProperty */ Boolean]
  @scala.inline
  def isMetaProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.MetaProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMetaProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MetaProperty */ Boolean]
  
  @scala.inline
  def isMethod(): /* is @babel/types.@babel/types.Method */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")().asInstanceOf[/* is @babel/types.@babel/types.Method */ Boolean]
  @scala.inline
  def isMethod(node: js.Object): /* is @babel/types.@babel/types.Method */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Method */ Boolean]
  @scala.inline
  def isMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Method */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Method */ Boolean]
  @scala.inline
  def isMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Method */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Method */ Boolean]
  @scala.inline
  def isMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Method */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Method */ Boolean]
  
  @scala.inline
  def isMixedTypeAnnotation(): /* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean]
  @scala.inline
  def isMixedTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean]
  @scala.inline
  def isMixedTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean]
  @scala.inline
  def isMixedTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean]
  @scala.inline
  def isMixedTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isMixedTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MixedTypeAnnotation */ Boolean]
  
  @scala.inline
  def isModuleDeclaration(): /* is @babel/types.@babel/types.ModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.ModuleDeclaration */ Boolean]
  @scala.inline
  def isModuleDeclaration(node: js.Object): /* is @babel/types.@babel/types.ModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ModuleDeclaration */ Boolean]
  @scala.inline
  def isModuleDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ModuleDeclaration */ Boolean]
  @scala.inline
  def isModuleDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ModuleDeclaration */ Boolean]
  @scala.inline
  def isModuleDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ModuleDeclaration */ Boolean]
  
  @scala.inline
  def isModuleSpecifier(): /* is @babel/types.@babel/types.ModuleSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")().asInstanceOf[/* is @babel/types.@babel/types.ModuleSpecifier */ Boolean]
  @scala.inline
  def isModuleSpecifier(node: js.Object): /* is @babel/types.@babel/types.ModuleSpecifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ModuleSpecifier */ Boolean]
  @scala.inline
  def isModuleSpecifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ModuleSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ModuleSpecifier */ Boolean]
  @scala.inline
  def isModuleSpecifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ModuleSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ModuleSpecifier */ Boolean]
  @scala.inline
  def isModuleSpecifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ModuleSpecifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isModuleSpecifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ModuleSpecifier */ Boolean]
  
  @scala.inline
  def isNewExpression(): /* is @babel/types.@babel/types.NewExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")().asInstanceOf[/* is @babel/types.@babel/types.NewExpression */ Boolean]
  @scala.inline
  def isNewExpression(node: js.Object): /* is @babel/types.@babel/types.NewExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.NewExpression */ Boolean]
  @scala.inline
  def isNewExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.NewExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NewExpression */ Boolean]
  @scala.inline
  def isNewExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.NewExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NewExpression */ Boolean]
  @scala.inline
  def isNewExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.NewExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNewExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NewExpression */ Boolean]
  
  @scala.inline
  def isNode(): /* is @babel/types.@babel/types.Node */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNode")().asInstanceOf[/* is @babel/types.@babel/types.Node */ Boolean]
  @scala.inline
  def isNode(node: js.Object): /* is @babel/types.@babel/types.Node */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNode")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Node */ Boolean]
  
  @scala.inline
  def isNodesEquivalent(a: js.Any, b: js.Any): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNodesEquivalent")(a.asInstanceOf[js.Any], b.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  @scala.inline
  def isNodesEquivalent[T /* <: Partial[typings.babelTypes.mod.Node] */](a: T, b: js.Any): /* is T */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNodesEquivalent")(a.asInstanceOf[js.Any], b.asInstanceOf[js.Any])).asInstanceOf[/* is T */ Boolean]
  
  @scala.inline
  def isNoop(): /* is @babel/types.@babel/types.Noop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")().asInstanceOf[/* is @babel/types.@babel/types.Noop */ Boolean]
  @scala.inline
  def isNoop(node: js.Object): /* is @babel/types.@babel/types.Noop */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Noop */ Boolean]
  @scala.inline
  def isNoop(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Noop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Noop */ Boolean]
  @scala.inline
  def isNoop(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Noop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Noop */ Boolean]
  @scala.inline
  def isNoop(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Noop */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNoop")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Noop */ Boolean]
  
  @scala.inline
  def isNullLiteral(): /* is @babel/types.@babel/types.NullLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")().asInstanceOf[/* is @babel/types.@babel/types.NullLiteral */ Boolean]
  @scala.inline
  def isNullLiteral(node: js.Object): /* is @babel/types.@babel/types.NullLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.NullLiteral */ Boolean]
  @scala.inline
  def isNullLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.NullLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NullLiteral */ Boolean]
  @scala.inline
  def isNullLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.NullLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NullLiteral */ Boolean]
  @scala.inline
  def isNullLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.NullLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NullLiteral */ Boolean]
  
  @scala.inline
  def isNullLiteralTypeAnnotation(): /* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isNullLiteralTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isNullLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isNullLiteralTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isNullLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NullLiteralTypeAnnotation */ Boolean]
  
  @scala.inline
  def isNullableTypeAnnotation(): /* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean]
  @scala.inline
  def isNullableTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean]
  @scala.inline
  def isNullableTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean]
  @scala.inline
  def isNullableTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean]
  @scala.inline
  def isNullableTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNullableTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NullableTypeAnnotation */ Boolean]
  
  @scala.inline
  def isNumberLiteral(): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")().asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  @scala.inline
  def isNumberLiteral(node: js.Object): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  @scala.inline
  def isNumberLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  @scala.inline
  def isNumberLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  @scala.inline
  def isNumberLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  
  @scala.inline
  def isNumberLiteralTypeAnnotation(): /* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isNumberLiteralTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isNumberLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isNumberLiteralTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isNumberLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumberLiteralTypeAnnotation */ Boolean]
  
  @scala.inline
  def isNumberTypeAnnotation(): /* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean]
  @scala.inline
  def isNumberTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean]
  @scala.inline
  def isNumberTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean]
  @scala.inline
  def isNumberTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean]
  @scala.inline
  def isNumberTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumberTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumberTypeAnnotation */ Boolean]
  
  @scala.inline
  def isNumericLiteral(): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")().asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  @scala.inline
  def isNumericLiteral(node: js.Object): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  @scala.inline
  def isNumericLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  @scala.inline
  def isNumericLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  @scala.inline
  def isNumericLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.NumericLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isNumericLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.NumericLiteral */ Boolean]
  
  @scala.inline
  def isObjectExpression(): /* is @babel/types.@babel/types.ObjectExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")().asInstanceOf[/* is @babel/types.@babel/types.ObjectExpression */ Boolean]
  @scala.inline
  def isObjectExpression(node: js.Object): /* is @babel/types.@babel/types.ObjectExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectExpression */ Boolean]
  @scala.inline
  def isObjectExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectExpression */ Boolean]
  @scala.inline
  def isObjectExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectExpression */ Boolean]
  @scala.inline
  def isObjectExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectExpression */ Boolean]
  
  @scala.inline
  def isObjectMember(): /* is @babel/types.@babel/types.ObjectMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")().asInstanceOf[/* is @babel/types.@babel/types.ObjectMember */ Boolean]
  @scala.inline
  def isObjectMember(node: js.Object): /* is @babel/types.@babel/types.ObjectMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectMember */ Boolean]
  @scala.inline
  def isObjectMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectMember */ Boolean]
  @scala.inline
  def isObjectMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectMember */ Boolean]
  @scala.inline
  def isObjectMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectMember */ Boolean]
  
  @scala.inline
  def isObjectMethod(): /* is @babel/types.@babel/types.ObjectMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")().asInstanceOf[/* is @babel/types.@babel/types.ObjectMethod */ Boolean]
  @scala.inline
  def isObjectMethod(node: js.Object): /* is @babel/types.@babel/types.ObjectMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectMethod */ Boolean]
  @scala.inline
  def isObjectMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectMethod */ Boolean]
  @scala.inline
  def isObjectMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectMethod */ Boolean]
  @scala.inline
  def isObjectMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectMethod */ Boolean]
  
  @scala.inline
  def isObjectPattern(): /* is @babel/types.@babel/types.ObjectPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")().asInstanceOf[/* is @babel/types.@babel/types.ObjectPattern */ Boolean]
  @scala.inline
  def isObjectPattern(node: js.Object): /* is @babel/types.@babel/types.ObjectPattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectPattern */ Boolean]
  @scala.inline
  def isObjectPattern(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectPattern */ Boolean]
  @scala.inline
  def isObjectPattern(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectPattern */ Boolean]
  @scala.inline
  def isObjectPattern(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectPattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectPattern */ Boolean]
  
  @scala.inline
  def isObjectProperty(): /* is @babel/types.@babel/types.ObjectProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")().asInstanceOf[/* is @babel/types.@babel/types.ObjectProperty */ Boolean]
  @scala.inline
  def isObjectProperty(node: js.Object): /* is @babel/types.@babel/types.ObjectProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectProperty */ Boolean]
  @scala.inline
  def isObjectProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectProperty */ Boolean]
  @scala.inline
  def isObjectProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectProperty */ Boolean]
  @scala.inline
  def isObjectProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectProperty */ Boolean]
  
  @scala.inline
  def isObjectTypeAnnotation(): /* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean]
  @scala.inline
  def isObjectTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean]
  @scala.inline
  def isObjectTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean]
  @scala.inline
  def isObjectTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean]
  @scala.inline
  def isObjectTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeAnnotation */ Boolean]
  
  @scala.inline
  def isObjectTypeCallProperty(): /* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")().asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean]
  @scala.inline
  def isObjectTypeCallProperty(node: js.Object): /* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean]
  @scala.inline
  def isObjectTypeCallProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean]
  @scala.inline
  def isObjectTypeCallProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean]
  @scala.inline
  def isObjectTypeCallProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeCallProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeCallProperty */ Boolean]
  
  @scala.inline
  def isObjectTypeIndexer(): /* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")().asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean]
  @scala.inline
  def isObjectTypeIndexer(node: js.Object): /* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean]
  @scala.inline
  def isObjectTypeIndexer(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean]
  @scala.inline
  def isObjectTypeIndexer(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean]
  @scala.inline
  def isObjectTypeIndexer(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeIndexer")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeIndexer */ Boolean]
  
  @scala.inline
  def isObjectTypeInternalSlot(): /* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")().asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean]
  @scala.inline
  def isObjectTypeInternalSlot(node: js.Object): /* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean]
  @scala.inline
  def isObjectTypeInternalSlot(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean]
  @scala.inline
  def isObjectTypeInternalSlot(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean]
  @scala.inline
  def isObjectTypeInternalSlot(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeInternalSlot")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeInternalSlot */ Boolean]
  
  @scala.inline
  def isObjectTypeProperty(): /* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")().asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean]
  @scala.inline
  def isObjectTypeProperty(node: js.Object): /* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean]
  @scala.inline
  def isObjectTypeProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean]
  @scala.inline
  def isObjectTypeProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean]
  @scala.inline
  def isObjectTypeProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeProperty */ Boolean]
  
  @scala.inline
  def isObjectTypeSpreadProperty(): /* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")().asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean]
  @scala.inline
  def isObjectTypeSpreadProperty(node: js.Object): /* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean]
  @scala.inline
  def isObjectTypeSpreadProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean]
  @scala.inline
  def isObjectTypeSpreadProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean]
  @scala.inline
  def isObjectTypeSpreadProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isObjectTypeSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ObjectTypeSpreadProperty */ Boolean]
  
  @scala.inline
  def isOpaqueType(): /* is @babel/types.@babel/types.OpaqueType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")().asInstanceOf[/* is @babel/types.@babel/types.OpaqueType */ Boolean]
  @scala.inline
  def isOpaqueType(node: js.Object): /* is @babel/types.@babel/types.OpaqueType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.OpaqueType */ Boolean]
  @scala.inline
  def isOpaqueType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.OpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.OpaqueType */ Boolean]
  @scala.inline
  def isOpaqueType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.OpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.OpaqueType */ Boolean]
  @scala.inline
  def isOpaqueType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.OpaqueType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOpaqueType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.OpaqueType */ Boolean]
  
  @scala.inline
  def isOptionalCallExpression(): /* is @babel/types.@babel/types.OptionalCallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")().asInstanceOf[/* is @babel/types.@babel/types.OptionalCallExpression */ Boolean]
  @scala.inline
  def isOptionalCallExpression(node: js.Object): /* is @babel/types.@babel/types.OptionalCallExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.OptionalCallExpression */ Boolean]
  @scala.inline
  def isOptionalCallExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.OptionalCallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.OptionalCallExpression */ Boolean]
  @scala.inline
  def isOptionalCallExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.OptionalCallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.OptionalCallExpression */ Boolean]
  @scala.inline
  def isOptionalCallExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.OptionalCallExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalCallExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.OptionalCallExpression */ Boolean]
  
  @scala.inline
  def isOptionalMemberExpression(): /* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")().asInstanceOf[/* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean]
  @scala.inline
  def isOptionalMemberExpression(node: js.Object): /* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean]
  @scala.inline
  def isOptionalMemberExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean]
  @scala.inline
  def isOptionalMemberExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean]
  @scala.inline
  def isOptionalMemberExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isOptionalMemberExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.OptionalMemberExpression */ Boolean]
  
  @scala.inline
  def isParenthesizedExpression(): /* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")().asInstanceOf[/* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean]
  @scala.inline
  def isParenthesizedExpression(node: js.Object): /* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean]
  @scala.inline
  def isParenthesizedExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean]
  @scala.inline
  def isParenthesizedExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean]
  @scala.inline
  def isParenthesizedExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isParenthesizedExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ParenthesizedExpression */ Boolean]
  
  @scala.inline
  def isPattern(): /* is @babel/types.@babel/types.Pattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")().asInstanceOf[/* is @babel/types.@babel/types.Pattern */ Boolean]
  @scala.inline
  def isPattern(node: js.Object): /* is @babel/types.@babel/types.Pattern */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Pattern */ Boolean]
  @scala.inline
  def isPattern(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Pattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Pattern */ Boolean]
  @scala.inline
  def isPattern(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Pattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Pattern */ Boolean]
  @scala.inline
  def isPattern(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Pattern */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPattern")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Pattern */ Boolean]
  
  @scala.inline
  def isPatternLike(): /* is @babel/types.@babel/types.PatternLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")().asInstanceOf[/* is @babel/types.@babel/types.PatternLike */ Boolean]
  @scala.inline
  def isPatternLike(node: js.Object): /* is @babel/types.@babel/types.PatternLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.PatternLike */ Boolean]
  @scala.inline
  def isPatternLike(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.PatternLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PatternLike */ Boolean]
  @scala.inline
  def isPatternLike(node: Null, opts: js.Object): /* is @babel/types.@babel/types.PatternLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PatternLike */ Boolean]
  @scala.inline
  def isPatternLike(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.PatternLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPatternLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PatternLike */ Boolean]
  
  @scala.inline
  def isPipelineBareFunction(): /* is @babel/types.@babel/types.PipelineBareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")().asInstanceOf[/* is @babel/types.@babel/types.PipelineBareFunction */ Boolean]
  @scala.inline
  def isPipelineBareFunction(node: js.Object): /* is @babel/types.@babel/types.PipelineBareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.PipelineBareFunction */ Boolean]
  @scala.inline
  def isPipelineBareFunction(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.PipelineBareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PipelineBareFunction */ Boolean]
  @scala.inline
  def isPipelineBareFunction(node: Null, opts: js.Object): /* is @babel/types.@babel/types.PipelineBareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PipelineBareFunction */ Boolean]
  @scala.inline
  def isPipelineBareFunction(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.PipelineBareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineBareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PipelineBareFunction */ Boolean]
  
  @scala.inline
  def isPipelinePrimaryTopicReference(): /* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")().asInstanceOf[/* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean]
  @scala.inline
  def isPipelinePrimaryTopicReference(node: js.Object): /* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean]
  @scala.inline
  def isPipelinePrimaryTopicReference(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean]
  @scala.inline
  def isPipelinePrimaryTopicReference(node: Null, opts: js.Object): /* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean]
  @scala.inline
  def isPipelinePrimaryTopicReference(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelinePrimaryTopicReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PipelinePrimaryTopicReference */ Boolean]
  
  @scala.inline
  def isPipelineTopicExpression(): /* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")().asInstanceOf[/* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean]
  @scala.inline
  def isPipelineTopicExpression(node: js.Object): /* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean]
  @scala.inline
  def isPipelineTopicExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean]
  @scala.inline
  def isPipelineTopicExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean]
  @scala.inline
  def isPipelineTopicExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPipelineTopicExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PipelineTopicExpression */ Boolean]
  
  @scala.inline
  def isPlaceholder(): /* is @babel/types.@babel/types.Placeholder */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")().asInstanceOf[/* is @babel/types.@babel/types.Placeholder */ Boolean]
  @scala.inline
  def isPlaceholder(node: js.Object): /* is @babel/types.@babel/types.Placeholder */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Placeholder */ Boolean]
  @scala.inline
  def isPlaceholder(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Placeholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Placeholder */ Boolean]
  @scala.inline
  def isPlaceholder(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Placeholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Placeholder */ Boolean]
  @scala.inline
  def isPlaceholder(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Placeholder */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholder")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Placeholder */ Boolean]
  
  @scala.inline
  def isPlaceholderType(
    placeholderType: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 242 */ js.Any,
    targetType: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 242 */ js.Any
  ): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPlaceholderType")(placeholderType.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  
  @scala.inline
  def isPrivate(): /* is @babel/types.@babel/types.Private */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")().asInstanceOf[/* is @babel/types.@babel/types.Private */ Boolean]
  @scala.inline
  def isPrivate(node: js.Object): /* is @babel/types.@babel/types.Private */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Private */ Boolean]
  @scala.inline
  def isPrivate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Private */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Private */ Boolean]
  @scala.inline
  def isPrivate(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Private */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Private */ Boolean]
  @scala.inline
  def isPrivate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Private */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Private */ Boolean]
  
  @scala.inline
  def isPrivateName(): /* is @babel/types.@babel/types.PrivateName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")().asInstanceOf[/* is @babel/types.@babel/types.PrivateName */ Boolean]
  @scala.inline
  def isPrivateName(node: js.Object): /* is @babel/types.@babel/types.PrivateName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.PrivateName */ Boolean]
  @scala.inline
  def isPrivateName(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.PrivateName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PrivateName */ Boolean]
  @scala.inline
  def isPrivateName(node: Null, opts: js.Object): /* is @babel/types.@babel/types.PrivateName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PrivateName */ Boolean]
  @scala.inline
  def isPrivateName(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.PrivateName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPrivateName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.PrivateName */ Boolean]
  
  @scala.inline
  def isProgram(): /* is @babel/types.@babel/types.Program */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")().asInstanceOf[/* is @babel/types.@babel/types.Program */ Boolean]
  @scala.inline
  def isProgram(node: js.Object): /* is @babel/types.@babel/types.Program */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Program */ Boolean]
  @scala.inline
  def isProgram(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Program */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Program */ Boolean]
  @scala.inline
  def isProgram(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Program */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Program */ Boolean]
  @scala.inline
  def isProgram(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Program */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProgram")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Program */ Boolean]
  
  @scala.inline
  def isProperty(): /* is @babel/types.@babel/types.Property */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")().asInstanceOf[/* is @babel/types.@babel/types.Property */ Boolean]
  @scala.inline
  def isProperty(node: js.Object): /* is @babel/types.@babel/types.Property */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Property */ Boolean]
  @scala.inline
  def isProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Property */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Property */ Boolean]
  @scala.inline
  def isProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Property */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Property */ Boolean]
  @scala.inline
  def isProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Property */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Property */ Boolean]
  
  @scala.inline
  def isPureish(): /* is @babel/types.@babel/types.Pureish */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")().asInstanceOf[/* is @babel/types.@babel/types.Pureish */ Boolean]
  @scala.inline
  def isPureish(node: js.Object): /* is @babel/types.@babel/types.Pureish */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Pureish */ Boolean]
  @scala.inline
  def isPureish(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Pureish */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Pureish */ Boolean]
  @scala.inline
  def isPureish(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Pureish */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Pureish */ Boolean]
  @scala.inline
  def isPureish(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Pureish */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isPureish")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Pureish */ Boolean]
  
  @scala.inline
  def isQualifiedTypeIdentifier(): /* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")().asInstanceOf[/* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean]
  @scala.inline
  def isQualifiedTypeIdentifier(node: js.Object): /* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean]
  @scala.inline
  def isQualifiedTypeIdentifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean]
  @scala.inline
  def isQualifiedTypeIdentifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean]
  @scala.inline
  def isQualifiedTypeIdentifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isQualifiedTypeIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.QualifiedTypeIdentifier */ Boolean]
  
  @scala.inline
  def isRecordExpression(): /* is @babel/types.@babel/types.RecordExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")().asInstanceOf[/* is @babel/types.@babel/types.RecordExpression */ Boolean]
  @scala.inline
  def isRecordExpression(node: js.Object): /* is @babel/types.@babel/types.RecordExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.RecordExpression */ Boolean]
  @scala.inline
  def isRecordExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.RecordExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RecordExpression */ Boolean]
  @scala.inline
  def isRecordExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.RecordExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RecordExpression */ Boolean]
  @scala.inline
  def isRecordExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.RecordExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRecordExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RecordExpression */ Boolean]
  
  @scala.inline
  def isReferenced(node: typings.babelTypes.mod.Node, parent: typings.babelTypes.mod.Node): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferenced")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  @scala.inline
  def isReferenced(
    node: typings.babelTypes.mod.Node,
    parent: typings.babelTypes.mod.Node,
    grandparent: typings.babelTypes.mod.Node
  ): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReferenced")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any], grandparent.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  
  @scala.inline
  def isRegExpLiteral(): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")().asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  @scala.inline
  def isRegExpLiteral(node: js.Object): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  @scala.inline
  def isRegExpLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  @scala.inline
  def isRegExpLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  @scala.inline
  def isRegExpLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegExpLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  
  @scala.inline
  def isRegexLiteral(): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")().asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  @scala.inline
  def isRegexLiteral(node: js.Object): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  @scala.inline
  def isRegexLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  @scala.inline
  def isRegexLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  @scala.inline
  def isRegexLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.RegExpLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRegexLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RegExpLiteral */ Boolean]
  
  @scala.inline
  def isRestElement(): /* is @babel/types.@babel/types.RestElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")().asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  @scala.inline
  def isRestElement(node: js.Object): /* is @babel/types.@babel/types.RestElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  @scala.inline
  def isRestElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  @scala.inline
  def isRestElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  @scala.inline
  def isRestElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  
  @scala.inline
  def isRestProperty(): /* is @babel/types.@babel/types.RestElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")().asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  @scala.inline
  def isRestProperty(node: js.Object): /* is @babel/types.@babel/types.RestElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  @scala.inline
  def isRestProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  @scala.inline
  def isRestProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  @scala.inline
  def isRestProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.RestElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isRestProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.RestElement */ Boolean]
  
  @scala.inline
  def isReturnStatement(): /* is @babel/types.@babel/types.ReturnStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")().asInstanceOf[/* is @babel/types.@babel/types.ReturnStatement */ Boolean]
  @scala.inline
  def isReturnStatement(node: js.Object): /* is @babel/types.@babel/types.ReturnStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ReturnStatement */ Boolean]
  @scala.inline
  def isReturnStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ReturnStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ReturnStatement */ Boolean]
  @scala.inline
  def isReturnStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ReturnStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ReturnStatement */ Boolean]
  @scala.inline
  def isReturnStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ReturnStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isReturnStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ReturnStatement */ Boolean]
  
  @scala.inline
  def isScopable(): /* is @babel/types.@babel/types.Scopable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")().asInstanceOf[/* is @babel/types.@babel/types.Scopable */ Boolean]
  @scala.inline
  def isScopable(node: js.Object): /* is @babel/types.@babel/types.Scopable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Scopable */ Boolean]
  @scala.inline
  def isScopable(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Scopable */ Boolean]
  @scala.inline
  def isScopable(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Scopable */ Boolean]
  @scala.inline
  def isScopable(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScopable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Scopable */ Boolean]
  
  @scala.inline
  def isScope(node: typings.babelTypes.mod.Node, parent: typings.babelTypes.mod.Node): /* is @babel/types.@babel/types.Scopable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isScope")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Scopable */ Boolean]
  
  @scala.inline
  def isSequenceExpression(): /* is @babel/types.@babel/types.SequenceExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")().asInstanceOf[/* is @babel/types.@babel/types.SequenceExpression */ Boolean]
  @scala.inline
  def isSequenceExpression(node: js.Object): /* is @babel/types.@babel/types.SequenceExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.SequenceExpression */ Boolean]
  @scala.inline
  def isSequenceExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.SequenceExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SequenceExpression */ Boolean]
  @scala.inline
  def isSequenceExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.SequenceExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SequenceExpression */ Boolean]
  @scala.inline
  def isSequenceExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.SequenceExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSequenceExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SequenceExpression */ Boolean]
  
  @scala.inline
  def isSpecifierDefault(specifier: ModuleSpecifier): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpecifierDefault")(specifier.asInstanceOf[js.Any]).asInstanceOf[Boolean]
  
  @scala.inline
  def isSpreadElement(): /* is @babel/types.@babel/types.SpreadElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")().asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  @scala.inline
  def isSpreadElement(node: js.Object): /* is @babel/types.@babel/types.SpreadElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  @scala.inline
  def isSpreadElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  @scala.inline
  def isSpreadElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  @scala.inline
  def isSpreadElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  
  @scala.inline
  def isSpreadProperty(): /* is @babel/types.@babel/types.SpreadElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")().asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  @scala.inline
  def isSpreadProperty(node: js.Object): /* is @babel/types.@babel/types.SpreadElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  @scala.inline
  def isSpreadProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  @scala.inline
  def isSpreadProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  @scala.inline
  def isSpreadProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.SpreadElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSpreadProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SpreadElement */ Boolean]
  
  @scala.inline
  def isStatement(): /* is @babel/types.@babel/types.Statement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")().asInstanceOf[/* is @babel/types.@babel/types.Statement */ Boolean]
  @scala.inline
  def isStatement(node: js.Object): /* is @babel/types.@babel/types.Statement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Statement */ Boolean]
  @scala.inline
  def isStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Statement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Statement */ Boolean]
  @scala.inline
  def isStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Statement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Statement */ Boolean]
  @scala.inline
  def isStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Statement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Statement */ Boolean]
  
  @scala.inline
  def isStaticBlock(): /* is @babel/types.@babel/types.StaticBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")().asInstanceOf[/* is @babel/types.@babel/types.StaticBlock */ Boolean]
  @scala.inline
  def isStaticBlock(node: js.Object): /* is @babel/types.@babel/types.StaticBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.StaticBlock */ Boolean]
  @scala.inline
  def isStaticBlock(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.StaticBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StaticBlock */ Boolean]
  @scala.inline
  def isStaticBlock(node: Null, opts: js.Object): /* is @babel/types.@babel/types.StaticBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StaticBlock */ Boolean]
  @scala.inline
  def isStaticBlock(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.StaticBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStaticBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StaticBlock */ Boolean]
  
  @scala.inline
  def isStringLiteral(): /* is @babel/types.@babel/types.StringLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")().asInstanceOf[/* is @babel/types.@babel/types.StringLiteral */ Boolean]
  @scala.inline
  def isStringLiteral(node: js.Object): /* is @babel/types.@babel/types.StringLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.StringLiteral */ Boolean]
  @scala.inline
  def isStringLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.StringLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StringLiteral */ Boolean]
  @scala.inline
  def isStringLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.StringLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StringLiteral */ Boolean]
  @scala.inline
  def isStringLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.StringLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StringLiteral */ Boolean]
  
  @scala.inline
  def isStringLiteralTypeAnnotation(): /* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isStringLiteralTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isStringLiteralTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isStringLiteralTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean]
  @scala.inline
  def isStringLiteralTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringLiteralTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StringLiteralTypeAnnotation */ Boolean]
  
  @scala.inline
  def isStringTypeAnnotation(): /* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean]
  @scala.inline
  def isStringTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean]
  @scala.inline
  def isStringTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean]
  @scala.inline
  def isStringTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean]
  @scala.inline
  def isStringTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isStringTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.StringTypeAnnotation */ Boolean]
  
  @scala.inline
  def isSuper(): /* is @babel/types.@babel/types.Super */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")().asInstanceOf[/* is @babel/types.@babel/types.Super */ Boolean]
  @scala.inline
  def isSuper(node: js.Object): /* is @babel/types.@babel/types.Super */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Super */ Boolean]
  @scala.inline
  def isSuper(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Super */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Super */ Boolean]
  @scala.inline
  def isSuper(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Super */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Super */ Boolean]
  @scala.inline
  def isSuper(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Super */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSuper")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Super */ Boolean]
  
  @scala.inline
  def isSwitchCase(): /* is @babel/types.@babel/types.SwitchCase */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")().asInstanceOf[/* is @babel/types.@babel/types.SwitchCase */ Boolean]
  @scala.inline
  def isSwitchCase(node: js.Object): /* is @babel/types.@babel/types.SwitchCase */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.SwitchCase */ Boolean]
  @scala.inline
  def isSwitchCase(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.SwitchCase */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SwitchCase */ Boolean]
  @scala.inline
  def isSwitchCase(node: Null, opts: js.Object): /* is @babel/types.@babel/types.SwitchCase */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SwitchCase */ Boolean]
  @scala.inline
  def isSwitchCase(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.SwitchCase */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchCase")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SwitchCase */ Boolean]
  
  @scala.inline
  def isSwitchStatement(): /* is @babel/types.@babel/types.SwitchStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")().asInstanceOf[/* is @babel/types.@babel/types.SwitchStatement */ Boolean]
  @scala.inline
  def isSwitchStatement(node: js.Object): /* is @babel/types.@babel/types.SwitchStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.SwitchStatement */ Boolean]
  @scala.inline
  def isSwitchStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.SwitchStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SwitchStatement */ Boolean]
  @scala.inline
  def isSwitchStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.SwitchStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SwitchStatement */ Boolean]
  @scala.inline
  def isSwitchStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.SwitchStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSwitchStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SwitchStatement */ Boolean]
  
  @scala.inline
  def isSymbolTypeAnnotation(): /* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean]
  @scala.inline
  def isSymbolTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean]
  @scala.inline
  def isSymbolTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean]
  @scala.inline
  def isSymbolTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean]
  @scala.inline
  def isSymbolTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isSymbolTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.SymbolTypeAnnotation */ Boolean]
  
  @scala.inline
  def isTSAnyKeyword(): /* is @babel/types.@babel/types.TSAnyKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSAnyKeyword */ Boolean]
  @scala.inline
  def isTSAnyKeyword(node: js.Object): /* is @babel/types.@babel/types.TSAnyKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSAnyKeyword */ Boolean]
  @scala.inline
  def isTSAnyKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSAnyKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSAnyKeyword */ Boolean]
  @scala.inline
  def isTSAnyKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSAnyKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSAnyKeyword */ Boolean]
  @scala.inline
  def isTSAnyKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSAnyKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAnyKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSAnyKeyword */ Boolean]
  
  @scala.inline
  def isTSArrayType(): /* is @babel/types.@babel/types.TSArrayType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")().asInstanceOf[/* is @babel/types.@babel/types.TSArrayType */ Boolean]
  @scala.inline
  def isTSArrayType(node: js.Object): /* is @babel/types.@babel/types.TSArrayType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSArrayType */ Boolean]
  @scala.inline
  def isTSArrayType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSArrayType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSArrayType */ Boolean]
  @scala.inline
  def isTSArrayType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSArrayType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSArrayType */ Boolean]
  @scala.inline
  def isTSArrayType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSArrayType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSArrayType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSArrayType */ Boolean]
  
  @scala.inline
  def isTSAsExpression(): /* is @babel/types.@babel/types.TSAsExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")().asInstanceOf[/* is @babel/types.@babel/types.TSAsExpression */ Boolean]
  @scala.inline
  def isTSAsExpression(node: js.Object): /* is @babel/types.@babel/types.TSAsExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSAsExpression */ Boolean]
  @scala.inline
  def isTSAsExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSAsExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSAsExpression */ Boolean]
  @scala.inline
  def isTSAsExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSAsExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSAsExpression */ Boolean]
  @scala.inline
  def isTSAsExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSAsExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSAsExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSAsExpression */ Boolean]
  
  @scala.inline
  def isTSBaseType(): /* is @babel/types.@babel/types.TSBaseType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")().asInstanceOf[/* is @babel/types.@babel/types.TSBaseType */ Boolean]
  @scala.inline
  def isTSBaseType(node: js.Object): /* is @babel/types.@babel/types.TSBaseType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSBaseType */ Boolean]
  @scala.inline
  def isTSBaseType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSBaseType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSBaseType */ Boolean]
  @scala.inline
  def isTSBaseType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSBaseType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSBaseType */ Boolean]
  @scala.inline
  def isTSBaseType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSBaseType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBaseType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSBaseType */ Boolean]
  
  @scala.inline
  def isTSBigIntKeyword(): /* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean]
  @scala.inline
  def isTSBigIntKeyword(node: js.Object): /* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean]
  @scala.inline
  def isTSBigIntKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean]
  @scala.inline
  def isTSBigIntKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean]
  @scala.inline
  def isTSBigIntKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBigIntKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSBigIntKeyword */ Boolean]
  
  @scala.inline
  def isTSBooleanKeyword(): /* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean]
  @scala.inline
  def isTSBooleanKeyword(node: js.Object): /* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean]
  @scala.inline
  def isTSBooleanKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean]
  @scala.inline
  def isTSBooleanKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean]
  @scala.inline
  def isTSBooleanKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSBooleanKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSBooleanKeyword */ Boolean]
  
  @scala.inline
  def isTSCallSignatureDeclaration(): /* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean]
  @scala.inline
  def isTSCallSignatureDeclaration(node: js.Object): /* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean]
  @scala.inline
  def isTSCallSignatureDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean]
  @scala.inline
  def isTSCallSignatureDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean]
  @scala.inline
  def isTSCallSignatureDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSCallSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSCallSignatureDeclaration */ Boolean]
  
  @scala.inline
  def isTSConditionalType(): /* is @babel/types.@babel/types.TSConditionalType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")().asInstanceOf[/* is @babel/types.@babel/types.TSConditionalType */ Boolean]
  @scala.inline
  def isTSConditionalType(node: js.Object): /* is @babel/types.@babel/types.TSConditionalType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSConditionalType */ Boolean]
  @scala.inline
  def isTSConditionalType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSConditionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSConditionalType */ Boolean]
  @scala.inline
  def isTSConditionalType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSConditionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSConditionalType */ Boolean]
  @scala.inline
  def isTSConditionalType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSConditionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConditionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSConditionalType */ Boolean]
  
  @scala.inline
  def isTSConstructSignatureDeclaration(): /* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean]
  @scala.inline
  def isTSConstructSignatureDeclaration(node: js.Object): /* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean]
  @scala.inline
  def isTSConstructSignatureDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean]
  @scala.inline
  def isTSConstructSignatureDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean]
  @scala.inline
  def isTSConstructSignatureDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructSignatureDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSConstructSignatureDeclaration */ Boolean]
  
  @scala.inline
  def isTSConstructorType(): /* is @babel/types.@babel/types.TSConstructorType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")().asInstanceOf[/* is @babel/types.@babel/types.TSConstructorType */ Boolean]
  @scala.inline
  def isTSConstructorType(node: js.Object): /* is @babel/types.@babel/types.TSConstructorType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSConstructorType */ Boolean]
  @scala.inline
  def isTSConstructorType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSConstructorType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSConstructorType */ Boolean]
  @scala.inline
  def isTSConstructorType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSConstructorType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSConstructorType */ Boolean]
  @scala.inline
  def isTSConstructorType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSConstructorType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSConstructorType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSConstructorType */ Boolean]
  
  @scala.inline
  def isTSDeclareFunction(): /* is @babel/types.@babel/types.TSDeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")().asInstanceOf[/* is @babel/types.@babel/types.TSDeclareFunction */ Boolean]
  @scala.inline
  def isTSDeclareFunction(node: js.Object): /* is @babel/types.@babel/types.TSDeclareFunction */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSDeclareFunction */ Boolean]
  @scala.inline
  def isTSDeclareFunction(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSDeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSDeclareFunction */ Boolean]
  @scala.inline
  def isTSDeclareFunction(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSDeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSDeclareFunction */ Boolean]
  @scala.inline
  def isTSDeclareFunction(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSDeclareFunction */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareFunction")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSDeclareFunction */ Boolean]
  
  @scala.inline
  def isTSDeclareMethod(): /* is @babel/types.@babel/types.TSDeclareMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")().asInstanceOf[/* is @babel/types.@babel/types.TSDeclareMethod */ Boolean]
  @scala.inline
  def isTSDeclareMethod(node: js.Object): /* is @babel/types.@babel/types.TSDeclareMethod */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSDeclareMethod */ Boolean]
  @scala.inline
  def isTSDeclareMethod(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSDeclareMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSDeclareMethod */ Boolean]
  @scala.inline
  def isTSDeclareMethod(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSDeclareMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSDeclareMethod */ Boolean]
  @scala.inline
  def isTSDeclareMethod(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSDeclareMethod */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSDeclareMethod")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSDeclareMethod */ Boolean]
  
  @scala.inline
  def isTSEntityName(): /* is @babel/types.@babel/types.TSEntityName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")().asInstanceOf[/* is @babel/types.@babel/types.TSEntityName */ Boolean]
  @scala.inline
  def isTSEntityName(node: js.Object): /* is @babel/types.@babel/types.TSEntityName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSEntityName */ Boolean]
  @scala.inline
  def isTSEntityName(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSEntityName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSEntityName */ Boolean]
  @scala.inline
  def isTSEntityName(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSEntityName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSEntityName */ Boolean]
  @scala.inline
  def isTSEntityName(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSEntityName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEntityName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSEntityName */ Boolean]
  
  @scala.inline
  def isTSEnumDeclaration(): /* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean]
  @scala.inline
  def isTSEnumDeclaration(node: js.Object): /* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean]
  @scala.inline
  def isTSEnumDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean]
  @scala.inline
  def isTSEnumDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean]
  @scala.inline
  def isTSEnumDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSEnumDeclaration */ Boolean]
  
  @scala.inline
  def isTSEnumMember(): /* is @babel/types.@babel/types.TSEnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")().asInstanceOf[/* is @babel/types.@babel/types.TSEnumMember */ Boolean]
  @scala.inline
  def isTSEnumMember(node: js.Object): /* is @babel/types.@babel/types.TSEnumMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSEnumMember */ Boolean]
  @scala.inline
  def isTSEnumMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSEnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSEnumMember */ Boolean]
  @scala.inline
  def isTSEnumMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSEnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSEnumMember */ Boolean]
  @scala.inline
  def isTSEnumMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSEnumMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSEnumMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSEnumMember */ Boolean]
  
  @scala.inline
  def isTSExportAssignment(): /* is @babel/types.@babel/types.TSExportAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")().asInstanceOf[/* is @babel/types.@babel/types.TSExportAssignment */ Boolean]
  @scala.inline
  def isTSExportAssignment(node: js.Object): /* is @babel/types.@babel/types.TSExportAssignment */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSExportAssignment */ Boolean]
  @scala.inline
  def isTSExportAssignment(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSExportAssignment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSExportAssignment */ Boolean]
  @scala.inline
  def isTSExportAssignment(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSExportAssignment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSExportAssignment */ Boolean]
  @scala.inline
  def isTSExportAssignment(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSExportAssignment */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExportAssignment")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSExportAssignment */ Boolean]
  
  @scala.inline
  def isTSExpressionWithTypeArguments(): /* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")().asInstanceOf[/* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean]
  @scala.inline
  def isTSExpressionWithTypeArguments(node: js.Object): /* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean]
  @scala.inline
  def isTSExpressionWithTypeArguments(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean]
  @scala.inline
  def isTSExpressionWithTypeArguments(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean]
  @scala.inline
  def isTSExpressionWithTypeArguments(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExpressionWithTypeArguments")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSExpressionWithTypeArguments */ Boolean]
  
  @scala.inline
  def isTSExternalModuleReference(): /* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")().asInstanceOf[/* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean]
  @scala.inline
  def isTSExternalModuleReference(node: js.Object): /* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean]
  @scala.inline
  def isTSExternalModuleReference(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean]
  @scala.inline
  def isTSExternalModuleReference(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean]
  @scala.inline
  def isTSExternalModuleReference(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSExternalModuleReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSExternalModuleReference */ Boolean]
  
  @scala.inline
  def isTSFunctionType(): /* is @babel/types.@babel/types.TSFunctionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")().asInstanceOf[/* is @babel/types.@babel/types.TSFunctionType */ Boolean]
  @scala.inline
  def isTSFunctionType(node: js.Object): /* is @babel/types.@babel/types.TSFunctionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSFunctionType */ Boolean]
  @scala.inline
  def isTSFunctionType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSFunctionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSFunctionType */ Boolean]
  @scala.inline
  def isTSFunctionType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSFunctionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSFunctionType */ Boolean]
  @scala.inline
  def isTSFunctionType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSFunctionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSFunctionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSFunctionType */ Boolean]
  
  @scala.inline
  def isTSImportEqualsDeclaration(): /* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean]
  @scala.inline
  def isTSImportEqualsDeclaration(node: js.Object): /* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean]
  @scala.inline
  def isTSImportEqualsDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean]
  @scala.inline
  def isTSImportEqualsDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean]
  @scala.inline
  def isTSImportEqualsDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportEqualsDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSImportEqualsDeclaration */ Boolean]
  
  @scala.inline
  def isTSImportType(): /* is @babel/types.@babel/types.TSImportType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")().asInstanceOf[/* is @babel/types.@babel/types.TSImportType */ Boolean]
  @scala.inline
  def isTSImportType(node: js.Object): /* is @babel/types.@babel/types.TSImportType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSImportType */ Boolean]
  @scala.inline
  def isTSImportType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSImportType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSImportType */ Boolean]
  @scala.inline
  def isTSImportType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSImportType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSImportType */ Boolean]
  @scala.inline
  def isTSImportType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSImportType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSImportType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSImportType */ Boolean]
  
  @scala.inline
  def isTSIndexSignature(): /* is @babel/types.@babel/types.TSIndexSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")().asInstanceOf[/* is @babel/types.@babel/types.TSIndexSignature */ Boolean]
  @scala.inline
  def isTSIndexSignature(node: js.Object): /* is @babel/types.@babel/types.TSIndexSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSIndexSignature */ Boolean]
  @scala.inline
  def isTSIndexSignature(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSIndexSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIndexSignature */ Boolean]
  @scala.inline
  def isTSIndexSignature(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSIndexSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIndexSignature */ Boolean]
  @scala.inline
  def isTSIndexSignature(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSIndexSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIndexSignature */ Boolean]
  
  @scala.inline
  def isTSIndexedAccessType(): /* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")().asInstanceOf[/* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean]
  @scala.inline
  def isTSIndexedAccessType(node: js.Object): /* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean]
  @scala.inline
  def isTSIndexedAccessType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean]
  @scala.inline
  def isTSIndexedAccessType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean]
  @scala.inline
  def isTSIndexedAccessType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIndexedAccessType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIndexedAccessType */ Boolean]
  
  @scala.inline
  def isTSInferType(): /* is @babel/types.@babel/types.TSInferType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")().asInstanceOf[/* is @babel/types.@babel/types.TSInferType */ Boolean]
  @scala.inline
  def isTSInferType(node: js.Object): /* is @babel/types.@babel/types.TSInferType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSInferType */ Boolean]
  @scala.inline
  def isTSInferType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSInferType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSInferType */ Boolean]
  @scala.inline
  def isTSInferType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSInferType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSInferType */ Boolean]
  @scala.inline
  def isTSInferType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSInferType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInferType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSInferType */ Boolean]
  
  @scala.inline
  def isTSInterfaceBody(): /* is @babel/types.@babel/types.TSInterfaceBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")().asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceBody */ Boolean]
  @scala.inline
  def isTSInterfaceBody(node: js.Object): /* is @babel/types.@babel/types.TSInterfaceBody */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceBody */ Boolean]
  @scala.inline
  def isTSInterfaceBody(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSInterfaceBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceBody */ Boolean]
  @scala.inline
  def isTSInterfaceBody(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSInterfaceBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceBody */ Boolean]
  @scala.inline
  def isTSInterfaceBody(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSInterfaceBody */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceBody")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceBody */ Boolean]
  
  @scala.inline
  def isTSInterfaceDeclaration(): /* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean]
  @scala.inline
  def isTSInterfaceDeclaration(node: js.Object): /* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean]
  @scala.inline
  def isTSInterfaceDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean]
  @scala.inline
  def isTSInterfaceDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean]
  @scala.inline
  def isTSInterfaceDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSInterfaceDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSInterfaceDeclaration */ Boolean]
  
  @scala.inline
  def isTSIntersectionType(): /* is @babel/types.@babel/types.TSIntersectionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")().asInstanceOf[/* is @babel/types.@babel/types.TSIntersectionType */ Boolean]
  @scala.inline
  def isTSIntersectionType(node: js.Object): /* is @babel/types.@babel/types.TSIntersectionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSIntersectionType */ Boolean]
  @scala.inline
  def isTSIntersectionType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSIntersectionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIntersectionType */ Boolean]
  @scala.inline
  def isTSIntersectionType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSIntersectionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIntersectionType */ Boolean]
  @scala.inline
  def isTSIntersectionType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSIntersectionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntersectionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIntersectionType */ Boolean]
  
  @scala.inline
  def isTSIntrinsicKeyword(): /* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean]
  @scala.inline
  def isTSIntrinsicKeyword(node: js.Object): /* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean]
  @scala.inline
  def isTSIntrinsicKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean]
  @scala.inline
  def isTSIntrinsicKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean]
  @scala.inline
  def isTSIntrinsicKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSIntrinsicKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSIntrinsicKeyword */ Boolean]
  
  @scala.inline
  def isTSLiteralType(): /* is @babel/types.@babel/types.TSLiteralType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")().asInstanceOf[/* is @babel/types.@babel/types.TSLiteralType */ Boolean]
  @scala.inline
  def isTSLiteralType(node: js.Object): /* is @babel/types.@babel/types.TSLiteralType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSLiteralType */ Boolean]
  @scala.inline
  def isTSLiteralType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSLiteralType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSLiteralType */ Boolean]
  @scala.inline
  def isTSLiteralType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSLiteralType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSLiteralType */ Boolean]
  @scala.inline
  def isTSLiteralType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSLiteralType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSLiteralType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSLiteralType */ Boolean]
  
  @scala.inline
  def isTSMappedType(): /* is @babel/types.@babel/types.TSMappedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")().asInstanceOf[/* is @babel/types.@babel/types.TSMappedType */ Boolean]
  @scala.inline
  def isTSMappedType(node: js.Object): /* is @babel/types.@babel/types.TSMappedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSMappedType */ Boolean]
  @scala.inline
  def isTSMappedType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSMappedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSMappedType */ Boolean]
  @scala.inline
  def isTSMappedType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSMappedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSMappedType */ Boolean]
  @scala.inline
  def isTSMappedType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSMappedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMappedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSMappedType */ Boolean]
  
  @scala.inline
  def isTSMethodSignature(): /* is @babel/types.@babel/types.TSMethodSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")().asInstanceOf[/* is @babel/types.@babel/types.TSMethodSignature */ Boolean]
  @scala.inline
  def isTSMethodSignature(node: js.Object): /* is @babel/types.@babel/types.TSMethodSignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSMethodSignature */ Boolean]
  @scala.inline
  def isTSMethodSignature(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSMethodSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSMethodSignature */ Boolean]
  @scala.inline
  def isTSMethodSignature(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSMethodSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSMethodSignature */ Boolean]
  @scala.inline
  def isTSMethodSignature(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSMethodSignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSMethodSignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSMethodSignature */ Boolean]
  
  @scala.inline
  def isTSModuleBlock(): /* is @babel/types.@babel/types.TSModuleBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")().asInstanceOf[/* is @babel/types.@babel/types.TSModuleBlock */ Boolean]
  @scala.inline
  def isTSModuleBlock(node: js.Object): /* is @babel/types.@babel/types.TSModuleBlock */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSModuleBlock */ Boolean]
  @scala.inline
  def isTSModuleBlock(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSModuleBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSModuleBlock */ Boolean]
  @scala.inline
  def isTSModuleBlock(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSModuleBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSModuleBlock */ Boolean]
  @scala.inline
  def isTSModuleBlock(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSModuleBlock */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleBlock")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSModuleBlock */ Boolean]
  
  @scala.inline
  def isTSModuleDeclaration(): /* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean]
  @scala.inline
  def isTSModuleDeclaration(node: js.Object): /* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean]
  @scala.inline
  def isTSModuleDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean]
  @scala.inline
  def isTSModuleDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean]
  @scala.inline
  def isTSModuleDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSModuleDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSModuleDeclaration */ Boolean]
  
  @scala.inline
  def isTSNamedTupleMember(): /* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")().asInstanceOf[/* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean]
  @scala.inline
  def isTSNamedTupleMember(node: js.Object): /* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean]
  @scala.inline
  def isTSNamedTupleMember(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean]
  @scala.inline
  def isTSNamedTupleMember(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean]
  @scala.inline
  def isTSNamedTupleMember(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamedTupleMember")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNamedTupleMember */ Boolean]
  
  @scala.inline
  def isTSNamespaceExportDeclaration(): /* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean]
  @scala.inline
  def isTSNamespaceExportDeclaration(node: js.Object): /* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean]
  @scala.inline
  def isTSNamespaceExportDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean]
  @scala.inline
  def isTSNamespaceExportDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean]
  @scala.inline
  def isTSNamespaceExportDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNamespaceExportDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNamespaceExportDeclaration */ Boolean]
  
  @scala.inline
  def isTSNeverKeyword(): /* is @babel/types.@babel/types.TSNeverKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSNeverKeyword */ Boolean]
  @scala.inline
  def isTSNeverKeyword(node: js.Object): /* is @babel/types.@babel/types.TSNeverKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSNeverKeyword */ Boolean]
  @scala.inline
  def isTSNeverKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSNeverKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNeverKeyword */ Boolean]
  @scala.inline
  def isTSNeverKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSNeverKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNeverKeyword */ Boolean]
  @scala.inline
  def isTSNeverKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSNeverKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNeverKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNeverKeyword */ Boolean]
  
  @scala.inline
  def isTSNonNullExpression(): /* is @babel/types.@babel/types.TSNonNullExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")().asInstanceOf[/* is @babel/types.@babel/types.TSNonNullExpression */ Boolean]
  @scala.inline
  def isTSNonNullExpression(node: js.Object): /* is @babel/types.@babel/types.TSNonNullExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSNonNullExpression */ Boolean]
  @scala.inline
  def isTSNonNullExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSNonNullExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNonNullExpression */ Boolean]
  @scala.inline
  def isTSNonNullExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSNonNullExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNonNullExpression */ Boolean]
  @scala.inline
  def isTSNonNullExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSNonNullExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNonNullExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNonNullExpression */ Boolean]
  
  @scala.inline
  def isTSNullKeyword(): /* is @babel/types.@babel/types.TSNullKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSNullKeyword */ Boolean]
  @scala.inline
  def isTSNullKeyword(node: js.Object): /* is @babel/types.@babel/types.TSNullKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSNullKeyword */ Boolean]
  @scala.inline
  def isTSNullKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSNullKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNullKeyword */ Boolean]
  @scala.inline
  def isTSNullKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSNullKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNullKeyword */ Boolean]
  @scala.inline
  def isTSNullKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSNullKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNullKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNullKeyword */ Boolean]
  
  @scala.inline
  def isTSNumberKeyword(): /* is @babel/types.@babel/types.TSNumberKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSNumberKeyword */ Boolean]
  @scala.inline
  def isTSNumberKeyword(node: js.Object): /* is @babel/types.@babel/types.TSNumberKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSNumberKeyword */ Boolean]
  @scala.inline
  def isTSNumberKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSNumberKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNumberKeyword */ Boolean]
  @scala.inline
  def isTSNumberKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSNumberKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNumberKeyword */ Boolean]
  @scala.inline
  def isTSNumberKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSNumberKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSNumberKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSNumberKeyword */ Boolean]
  
  @scala.inline
  def isTSObjectKeyword(): /* is @babel/types.@babel/types.TSObjectKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSObjectKeyword */ Boolean]
  @scala.inline
  def isTSObjectKeyword(node: js.Object): /* is @babel/types.@babel/types.TSObjectKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSObjectKeyword */ Boolean]
  @scala.inline
  def isTSObjectKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSObjectKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSObjectKeyword */ Boolean]
  @scala.inline
  def isTSObjectKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSObjectKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSObjectKeyword */ Boolean]
  @scala.inline
  def isTSObjectKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSObjectKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSObjectKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSObjectKeyword */ Boolean]
  
  @scala.inline
  def isTSOptionalType(): /* is @babel/types.@babel/types.TSOptionalType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")().asInstanceOf[/* is @babel/types.@babel/types.TSOptionalType */ Boolean]
  @scala.inline
  def isTSOptionalType(node: js.Object): /* is @babel/types.@babel/types.TSOptionalType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSOptionalType */ Boolean]
  @scala.inline
  def isTSOptionalType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSOptionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSOptionalType */ Boolean]
  @scala.inline
  def isTSOptionalType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSOptionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSOptionalType */ Boolean]
  @scala.inline
  def isTSOptionalType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSOptionalType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSOptionalType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSOptionalType */ Boolean]
  
  @scala.inline
  def isTSParameterProperty(): /* is @babel/types.@babel/types.TSParameterProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")().asInstanceOf[/* is @babel/types.@babel/types.TSParameterProperty */ Boolean]
  @scala.inline
  def isTSParameterProperty(node: js.Object): /* is @babel/types.@babel/types.TSParameterProperty */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSParameterProperty */ Boolean]
  @scala.inline
  def isTSParameterProperty(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSParameterProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSParameterProperty */ Boolean]
  @scala.inline
  def isTSParameterProperty(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSParameterProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSParameterProperty */ Boolean]
  @scala.inline
  def isTSParameterProperty(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSParameterProperty */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParameterProperty")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSParameterProperty */ Boolean]
  
  @scala.inline
  def isTSParenthesizedType(): /* is @babel/types.@babel/types.TSParenthesizedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")().asInstanceOf[/* is @babel/types.@babel/types.TSParenthesizedType */ Boolean]
  @scala.inline
  def isTSParenthesizedType(node: js.Object): /* is @babel/types.@babel/types.TSParenthesizedType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSParenthesizedType */ Boolean]
  @scala.inline
  def isTSParenthesizedType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSParenthesizedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSParenthesizedType */ Boolean]
  @scala.inline
  def isTSParenthesizedType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSParenthesizedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSParenthesizedType */ Boolean]
  @scala.inline
  def isTSParenthesizedType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSParenthesizedType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSParenthesizedType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSParenthesizedType */ Boolean]
  
  @scala.inline
  def isTSPropertySignature(): /* is @babel/types.@babel/types.TSPropertySignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")().asInstanceOf[/* is @babel/types.@babel/types.TSPropertySignature */ Boolean]
  @scala.inline
  def isTSPropertySignature(node: js.Object): /* is @babel/types.@babel/types.TSPropertySignature */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSPropertySignature */ Boolean]
  @scala.inline
  def isTSPropertySignature(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSPropertySignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSPropertySignature */ Boolean]
  @scala.inline
  def isTSPropertySignature(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSPropertySignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSPropertySignature */ Boolean]
  @scala.inline
  def isTSPropertySignature(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSPropertySignature */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSPropertySignature")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSPropertySignature */ Boolean]
  
  @scala.inline
  def isTSQualifiedName(): /* is @babel/types.@babel/types.TSQualifiedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")().asInstanceOf[/* is @babel/types.@babel/types.TSQualifiedName */ Boolean]
  @scala.inline
  def isTSQualifiedName(node: js.Object): /* is @babel/types.@babel/types.TSQualifiedName */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSQualifiedName */ Boolean]
  @scala.inline
  def isTSQualifiedName(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSQualifiedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSQualifiedName */ Boolean]
  @scala.inline
  def isTSQualifiedName(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSQualifiedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSQualifiedName */ Boolean]
  @scala.inline
  def isTSQualifiedName(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSQualifiedName */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSQualifiedName")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSQualifiedName */ Boolean]
  
  @scala.inline
  def isTSRestType(): /* is @babel/types.@babel/types.TSRestType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")().asInstanceOf[/* is @babel/types.@babel/types.TSRestType */ Boolean]
  @scala.inline
  def isTSRestType(node: js.Object): /* is @babel/types.@babel/types.TSRestType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSRestType */ Boolean]
  @scala.inline
  def isTSRestType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSRestType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSRestType */ Boolean]
  @scala.inline
  def isTSRestType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSRestType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSRestType */ Boolean]
  @scala.inline
  def isTSRestType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSRestType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSRestType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSRestType */ Boolean]
  
  @scala.inline
  def isTSStringKeyword(): /* is @babel/types.@babel/types.TSStringKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSStringKeyword */ Boolean]
  @scala.inline
  def isTSStringKeyword(node: js.Object): /* is @babel/types.@babel/types.TSStringKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSStringKeyword */ Boolean]
  @scala.inline
  def isTSStringKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSStringKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSStringKeyword */ Boolean]
  @scala.inline
  def isTSStringKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSStringKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSStringKeyword */ Boolean]
  @scala.inline
  def isTSStringKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSStringKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSStringKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSStringKeyword */ Boolean]
  
  @scala.inline
  def isTSSymbolKeyword(): /* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean]
  @scala.inline
  def isTSSymbolKeyword(node: js.Object): /* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean]
  @scala.inline
  def isTSSymbolKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean]
  @scala.inline
  def isTSSymbolKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean]
  @scala.inline
  def isTSSymbolKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSSymbolKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSSymbolKeyword */ Boolean]
  
  @scala.inline
  def isTSThisType(): /* is @babel/types.@babel/types.TSThisType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")().asInstanceOf[/* is @babel/types.@babel/types.TSThisType */ Boolean]
  @scala.inline
  def isTSThisType(node: js.Object): /* is @babel/types.@babel/types.TSThisType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSThisType */ Boolean]
  @scala.inline
  def isTSThisType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSThisType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSThisType */ Boolean]
  @scala.inline
  def isTSThisType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSThisType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSThisType */ Boolean]
  @scala.inline
  def isTSThisType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSThisType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSThisType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSThisType */ Boolean]
  
  @scala.inline
  def isTSTupleType(): /* is @babel/types.@babel/types.TSTupleType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")().asInstanceOf[/* is @babel/types.@babel/types.TSTupleType */ Boolean]
  @scala.inline
  def isTSTupleType(node: js.Object): /* is @babel/types.@babel/types.TSTupleType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTupleType */ Boolean]
  @scala.inline
  def isTSTupleType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTupleType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTupleType */ Boolean]
  @scala.inline
  def isTSTupleType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTupleType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTupleType */ Boolean]
  @scala.inline
  def isTSTupleType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTupleType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTupleType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTupleType */ Boolean]
  
  @scala.inline
  def isTSType(): /* is @babel/types.@babel/types.TSType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")().asInstanceOf[/* is @babel/types.@babel/types.TSType */ Boolean]
  @scala.inline
  def isTSType(node: js.Object): /* is @babel/types.@babel/types.TSType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSType */ Boolean]
  @scala.inline
  def isTSType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSType */ Boolean]
  @scala.inline
  def isTSType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSType */ Boolean]
  @scala.inline
  def isTSType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSType */ Boolean]
  
  @scala.inline
  def isTSTypeAliasDeclaration(): /* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean]
  @scala.inline
  def isTSTypeAliasDeclaration(node: js.Object): /* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean]
  @scala.inline
  def isTSTypeAliasDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean]
  @scala.inline
  def isTSTypeAliasDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean]
  @scala.inline
  def isTSTypeAliasDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAliasDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAliasDeclaration */ Boolean]
  
  @scala.inline
  def isTSTypeAnnotation(): /* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean]
  @scala.inline
  def isTSTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean]
  @scala.inline
  def isTSTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean]
  @scala.inline
  def isTSTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean]
  @scala.inline
  def isTSTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAnnotation */ Boolean]
  
  @scala.inline
  def isTSTypeAssertion(): /* is @babel/types.@babel/types.TSTypeAssertion */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeAssertion */ Boolean]
  @scala.inline
  def isTSTypeAssertion(node: js.Object): /* is @babel/types.@babel/types.TSTypeAssertion */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAssertion */ Boolean]
  @scala.inline
  def isTSTypeAssertion(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeAssertion */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAssertion */ Boolean]
  @scala.inline
  def isTSTypeAssertion(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeAssertion */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAssertion */ Boolean]
  @scala.inline
  def isTSTypeAssertion(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeAssertion */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeAssertion")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeAssertion */ Boolean]
  
  @scala.inline
  def isTSTypeElement(): /* is @babel/types.@babel/types.TSTypeElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeElement */ Boolean]
  @scala.inline
  def isTSTypeElement(node: js.Object): /* is @babel/types.@babel/types.TSTypeElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeElement */ Boolean]
  @scala.inline
  def isTSTypeElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeElement */ Boolean]
  @scala.inline
  def isTSTypeElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeElement */ Boolean]
  @scala.inline
  def isTSTypeElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeElement */ Boolean]
  
  @scala.inline
  def isTSTypeLiteral(): /* is @babel/types.@babel/types.TSTypeLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeLiteral */ Boolean]
  @scala.inline
  def isTSTypeLiteral(node: js.Object): /* is @babel/types.@babel/types.TSTypeLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeLiteral */ Boolean]
  @scala.inline
  def isTSTypeLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeLiteral */ Boolean]
  @scala.inline
  def isTSTypeLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeLiteral */ Boolean]
  @scala.inline
  def isTSTypeLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeLiteral */ Boolean]
  
  @scala.inline
  def isTSTypeOperator(): /* is @babel/types.@babel/types.TSTypeOperator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeOperator */ Boolean]
  @scala.inline
  def isTSTypeOperator(node: js.Object): /* is @babel/types.@babel/types.TSTypeOperator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeOperator */ Boolean]
  @scala.inline
  def isTSTypeOperator(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeOperator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeOperator */ Boolean]
  @scala.inline
  def isTSTypeOperator(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeOperator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeOperator */ Boolean]
  @scala.inline
  def isTSTypeOperator(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeOperator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeOperator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeOperator */ Boolean]
  
  @scala.inline
  def isTSTypeParameter(): /* is @babel/types.@babel/types.TSTypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameter */ Boolean]
  @scala.inline
  def isTSTypeParameter(node: js.Object): /* is @babel/types.@babel/types.TSTypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameter */ Boolean]
  @scala.inline
  def isTSTypeParameter(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameter */ Boolean]
  @scala.inline
  def isTSTypeParameter(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameter */ Boolean]
  @scala.inline
  def isTSTypeParameter(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameter */ Boolean]
  
  @scala.inline
  def isTSTypeParameterDeclaration(): /* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean]
  @scala.inline
  def isTSTypeParameterDeclaration(node: js.Object): /* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean]
  @scala.inline
  def isTSTypeParameterDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean]
  @scala.inline
  def isTSTypeParameterDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean]
  @scala.inline
  def isTSTypeParameterDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterDeclaration */ Boolean]
  
  @scala.inline
  def isTSTypeParameterInstantiation(): /* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean]
  @scala.inline
  def isTSTypeParameterInstantiation(node: js.Object): /* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean]
  @scala.inline
  def isTSTypeParameterInstantiation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean]
  @scala.inline
  def isTSTypeParameterInstantiation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean]
  @scala.inline
  def isTSTypeParameterInstantiation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeParameterInstantiation */ Boolean]
  
  @scala.inline
  def isTSTypePredicate(): /* is @babel/types.@babel/types.TSTypePredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")().asInstanceOf[/* is @babel/types.@babel/types.TSTypePredicate */ Boolean]
  @scala.inline
  def isTSTypePredicate(node: js.Object): /* is @babel/types.@babel/types.TSTypePredicate */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypePredicate */ Boolean]
  @scala.inline
  def isTSTypePredicate(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypePredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypePredicate */ Boolean]
  @scala.inline
  def isTSTypePredicate(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypePredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypePredicate */ Boolean]
  @scala.inline
  def isTSTypePredicate(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypePredicate */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypePredicate")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypePredicate */ Boolean]
  
  @scala.inline
  def isTSTypeQuery(): /* is @babel/types.@babel/types.TSTypeQuery */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeQuery */ Boolean]
  @scala.inline
  def isTSTypeQuery(node: js.Object): /* is @babel/types.@babel/types.TSTypeQuery */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeQuery */ Boolean]
  @scala.inline
  def isTSTypeQuery(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeQuery */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeQuery */ Boolean]
  @scala.inline
  def isTSTypeQuery(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeQuery */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeQuery */ Boolean]
  @scala.inline
  def isTSTypeQuery(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeQuery */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeQuery")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeQuery */ Boolean]
  
  @scala.inline
  def isTSTypeReference(): /* is @babel/types.@babel/types.TSTypeReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")().asInstanceOf[/* is @babel/types.@babel/types.TSTypeReference */ Boolean]
  @scala.inline
  def isTSTypeReference(node: js.Object): /* is @babel/types.@babel/types.TSTypeReference */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSTypeReference */ Boolean]
  @scala.inline
  def isTSTypeReference(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSTypeReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeReference */ Boolean]
  @scala.inline
  def isTSTypeReference(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSTypeReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeReference */ Boolean]
  @scala.inline
  def isTSTypeReference(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSTypeReference */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSTypeReference")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSTypeReference */ Boolean]
  
  @scala.inline
  def isTSUndefinedKeyword(): /* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean]
  @scala.inline
  def isTSUndefinedKeyword(node: js.Object): /* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean]
  @scala.inline
  def isTSUndefinedKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean]
  @scala.inline
  def isTSUndefinedKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean]
  @scala.inline
  def isTSUndefinedKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUndefinedKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSUndefinedKeyword */ Boolean]
  
  @scala.inline
  def isTSUnionType(): /* is @babel/types.@babel/types.TSUnionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")().asInstanceOf[/* is @babel/types.@babel/types.TSUnionType */ Boolean]
  @scala.inline
  def isTSUnionType(node: js.Object): /* is @babel/types.@babel/types.TSUnionType */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSUnionType */ Boolean]
  @scala.inline
  def isTSUnionType(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSUnionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSUnionType */ Boolean]
  @scala.inline
  def isTSUnionType(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSUnionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSUnionType */ Boolean]
  @scala.inline
  def isTSUnionType(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSUnionType */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnionType")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSUnionType */ Boolean]
  
  @scala.inline
  def isTSUnknownKeyword(): /* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean]
  @scala.inline
  def isTSUnknownKeyword(node: js.Object): /* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean]
  @scala.inline
  def isTSUnknownKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean]
  @scala.inline
  def isTSUnknownKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean]
  @scala.inline
  def isTSUnknownKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSUnknownKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSUnknownKeyword */ Boolean]
  
  @scala.inline
  def isTSVoidKeyword(): /* is @babel/types.@babel/types.TSVoidKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")().asInstanceOf[/* is @babel/types.@babel/types.TSVoidKeyword */ Boolean]
  @scala.inline
  def isTSVoidKeyword(node: js.Object): /* is @babel/types.@babel/types.TSVoidKeyword */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TSVoidKeyword */ Boolean]
  @scala.inline
  def isTSVoidKeyword(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TSVoidKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSVoidKeyword */ Boolean]
  @scala.inline
  def isTSVoidKeyword(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TSVoidKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSVoidKeyword */ Boolean]
  @scala.inline
  def isTSVoidKeyword(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TSVoidKeyword */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTSVoidKeyword")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TSVoidKeyword */ Boolean]
  
  @scala.inline
  def isTaggedTemplateExpression(): /* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")().asInstanceOf[/* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean]
  @scala.inline
  def isTaggedTemplateExpression(node: js.Object): /* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean]
  @scala.inline
  def isTaggedTemplateExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean]
  @scala.inline
  def isTaggedTemplateExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean]
  @scala.inline
  def isTaggedTemplateExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTaggedTemplateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TaggedTemplateExpression */ Boolean]
  
  @scala.inline
  def isTemplateElement(): /* is @babel/types.@babel/types.TemplateElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")().asInstanceOf[/* is @babel/types.@babel/types.TemplateElement */ Boolean]
  @scala.inline
  def isTemplateElement(node: js.Object): /* is @babel/types.@babel/types.TemplateElement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TemplateElement */ Boolean]
  @scala.inline
  def isTemplateElement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TemplateElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TemplateElement */ Boolean]
  @scala.inline
  def isTemplateElement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TemplateElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TemplateElement */ Boolean]
  @scala.inline
  def isTemplateElement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TemplateElement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateElement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TemplateElement */ Boolean]
  
  @scala.inline
  def isTemplateLiteral(): /* is @babel/types.@babel/types.TemplateLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")().asInstanceOf[/* is @babel/types.@babel/types.TemplateLiteral */ Boolean]
  @scala.inline
  def isTemplateLiteral(node: js.Object): /* is @babel/types.@babel/types.TemplateLiteral */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TemplateLiteral */ Boolean]
  @scala.inline
  def isTemplateLiteral(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TemplateLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TemplateLiteral */ Boolean]
  @scala.inline
  def isTemplateLiteral(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TemplateLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TemplateLiteral */ Boolean]
  @scala.inline
  def isTemplateLiteral(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TemplateLiteral */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTemplateLiteral")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TemplateLiteral */ Boolean]
  
  @scala.inline
  def isTerminatorless(): /* is @babel/types.@babel/types.Terminatorless */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")().asInstanceOf[/* is @babel/types.@babel/types.Terminatorless */ Boolean]
  @scala.inline
  def isTerminatorless(node: js.Object): /* is @babel/types.@babel/types.Terminatorless */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Terminatorless */ Boolean]
  @scala.inline
  def isTerminatorless(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Terminatorless */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Terminatorless */ Boolean]
  @scala.inline
  def isTerminatorless(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Terminatorless */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Terminatorless */ Boolean]
  @scala.inline
  def isTerminatorless(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Terminatorless */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTerminatorless")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Terminatorless */ Boolean]
  
  @scala.inline
  def isThisExpression(): /* is @babel/types.@babel/types.ThisExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")().asInstanceOf[/* is @babel/types.@babel/types.ThisExpression */ Boolean]
  @scala.inline
  def isThisExpression(node: js.Object): /* is @babel/types.@babel/types.ThisExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ThisExpression */ Boolean]
  @scala.inline
  def isThisExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ThisExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ThisExpression */ Boolean]
  @scala.inline
  def isThisExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ThisExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ThisExpression */ Boolean]
  @scala.inline
  def isThisExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ThisExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ThisExpression */ Boolean]
  
  @scala.inline
  def isThisTypeAnnotation(): /* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean]
  @scala.inline
  def isThisTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean]
  @scala.inline
  def isThisTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean]
  @scala.inline
  def isThisTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean]
  @scala.inline
  def isThisTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThisTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ThisTypeAnnotation */ Boolean]
  
  @scala.inline
  def isThrowStatement(): /* is @babel/types.@babel/types.ThrowStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")().asInstanceOf[/* is @babel/types.@babel/types.ThrowStatement */ Boolean]
  @scala.inline
  def isThrowStatement(node: js.Object): /* is @babel/types.@babel/types.ThrowStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.ThrowStatement */ Boolean]
  @scala.inline
  def isThrowStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.ThrowStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ThrowStatement */ Boolean]
  @scala.inline
  def isThrowStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.ThrowStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ThrowStatement */ Boolean]
  @scala.inline
  def isThrowStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.ThrowStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isThrowStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.ThrowStatement */ Boolean]
  
  @scala.inline
  def isTryStatement(): /* is @babel/types.@babel/types.TryStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")().asInstanceOf[/* is @babel/types.@babel/types.TryStatement */ Boolean]
  @scala.inline
  def isTryStatement(node: js.Object): /* is @babel/types.@babel/types.TryStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TryStatement */ Boolean]
  @scala.inline
  def isTryStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TryStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TryStatement */ Boolean]
  @scala.inline
  def isTryStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TryStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TryStatement */ Boolean]
  @scala.inline
  def isTryStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TryStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTryStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TryStatement */ Boolean]
  
  @scala.inline
  def isTupleExpression(): /* is @babel/types.@babel/types.TupleExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")().asInstanceOf[/* is @babel/types.@babel/types.TupleExpression */ Boolean]
  @scala.inline
  def isTupleExpression(node: js.Object): /* is @babel/types.@babel/types.TupleExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TupleExpression */ Boolean]
  @scala.inline
  def isTupleExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TupleExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TupleExpression */ Boolean]
  @scala.inline
  def isTupleExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TupleExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TupleExpression */ Boolean]
  @scala.inline
  def isTupleExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TupleExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TupleExpression */ Boolean]
  
  @scala.inline
  def isTupleTypeAnnotation(): /* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean]
  @scala.inline
  def isTupleTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean]
  @scala.inline
  def isTupleTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean]
  @scala.inline
  def isTupleTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean]
  @scala.inline
  def isTupleTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTupleTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TupleTypeAnnotation */ Boolean]
  
  @scala.inline
  def isType(nodetype: String, targetType: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isType")(nodetype.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  @scala.inline
  def isType(nodetype: Null, targetType: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isType")(nodetype.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  @scala.inline
  def isType(nodetype: Unit, targetType: String): Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isType")(nodetype.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[Boolean]
  @scala.inline
  def isType[T /* <: /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 242 */ js.Any */](nodetype: String, targetType: T): /* is T */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isType")(nodetype.asInstanceOf[js.Any], targetType.asInstanceOf[js.Any])).asInstanceOf[/* is T */ Boolean]
  
  @scala.inline
  def isTypeAlias(): /* is @babel/types.@babel/types.TypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")().asInstanceOf[/* is @babel/types.@babel/types.TypeAlias */ Boolean]
  @scala.inline
  def isTypeAlias(node: js.Object): /* is @babel/types.@babel/types.TypeAlias */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TypeAlias */ Boolean]
  @scala.inline
  def isTypeAlias(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeAlias */ Boolean]
  @scala.inline
  def isTypeAlias(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeAlias */ Boolean]
  @scala.inline
  def isTypeAlias(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TypeAlias */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAlias")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeAlias */ Boolean]
  
  @scala.inline
  def isTypeAnnotation(): /* is @babel/types.@babel/types.TypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.TypeAnnotation */ Boolean]
  @scala.inline
  def isTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.TypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TypeAnnotation */ Boolean]
  @scala.inline
  def isTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeAnnotation */ Boolean]
  @scala.inline
  def isTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeAnnotation */ Boolean]
  @scala.inline
  def isTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeAnnotation */ Boolean]
  
  @scala.inline
  def isTypeCastExpression(): /* is @babel/types.@babel/types.TypeCastExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")().asInstanceOf[/* is @babel/types.@babel/types.TypeCastExpression */ Boolean]
  @scala.inline
  def isTypeCastExpression(node: js.Object): /* is @babel/types.@babel/types.TypeCastExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TypeCastExpression */ Boolean]
  @scala.inline
  def isTypeCastExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TypeCastExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeCastExpression */ Boolean]
  @scala.inline
  def isTypeCastExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TypeCastExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeCastExpression */ Boolean]
  @scala.inline
  def isTypeCastExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TypeCastExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeCastExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeCastExpression */ Boolean]
  
  @scala.inline
  def isTypeParameter(): /* is @babel/types.@babel/types.TypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")().asInstanceOf[/* is @babel/types.@babel/types.TypeParameter */ Boolean]
  @scala.inline
  def isTypeParameter(node: js.Object): /* is @babel/types.@babel/types.TypeParameter */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TypeParameter */ Boolean]
  @scala.inline
  def isTypeParameter(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeParameter */ Boolean]
  @scala.inline
  def isTypeParameter(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeParameter */ Boolean]
  @scala.inline
  def isTypeParameter(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TypeParameter */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameter")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeParameter */ Boolean]
  
  @scala.inline
  def isTypeParameterDeclaration(): /* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean]
  @scala.inline
  def isTypeParameterDeclaration(node: js.Object): /* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean]
  @scala.inline
  def isTypeParameterDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean]
  @scala.inline
  def isTypeParameterDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean]
  @scala.inline
  def isTypeParameterDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeParameterDeclaration */ Boolean]
  
  @scala.inline
  def isTypeParameterInstantiation(): /* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")().asInstanceOf[/* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean]
  @scala.inline
  def isTypeParameterInstantiation(node: js.Object): /* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean]
  @scala.inline
  def isTypeParameterInstantiation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean]
  @scala.inline
  def isTypeParameterInstantiation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean]
  @scala.inline
  def isTypeParameterInstantiation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeParameterInstantiation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeParameterInstantiation */ Boolean]
  
  @scala.inline
  def isTypeofTypeAnnotation(): /* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean]
  @scala.inline
  def isTypeofTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean]
  @scala.inline
  def isTypeofTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean]
  @scala.inline
  def isTypeofTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean]
  @scala.inline
  def isTypeofTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isTypeofTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.TypeofTypeAnnotation */ Boolean]
  
  @scala.inline
  def isUnaryExpression(): /* is @babel/types.@babel/types.UnaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")().asInstanceOf[/* is @babel/types.@babel/types.UnaryExpression */ Boolean]
  @scala.inline
  def isUnaryExpression(node: js.Object): /* is @babel/types.@babel/types.UnaryExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.UnaryExpression */ Boolean]
  @scala.inline
  def isUnaryExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.UnaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UnaryExpression */ Boolean]
  @scala.inline
  def isUnaryExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.UnaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UnaryExpression */ Boolean]
  @scala.inline
  def isUnaryExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.UnaryExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UnaryExpression */ Boolean]
  
  @scala.inline
  def isUnaryLike(): /* is @babel/types.@babel/types.UnaryLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")().asInstanceOf[/* is @babel/types.@babel/types.UnaryLike */ Boolean]
  @scala.inline
  def isUnaryLike(node: js.Object): /* is @babel/types.@babel/types.UnaryLike */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.UnaryLike */ Boolean]
  @scala.inline
  def isUnaryLike(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.UnaryLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UnaryLike */ Boolean]
  @scala.inline
  def isUnaryLike(node: Null, opts: js.Object): /* is @babel/types.@babel/types.UnaryLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UnaryLike */ Boolean]
  @scala.inline
  def isUnaryLike(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.UnaryLike */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnaryLike")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UnaryLike */ Boolean]
  
  @scala.inline
  def isUnionTypeAnnotation(): /* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean]
  @scala.inline
  def isUnionTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean]
  @scala.inline
  def isUnionTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean]
  @scala.inline
  def isUnionTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean]
  @scala.inline
  def isUnionTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUnionTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UnionTypeAnnotation */ Boolean]
  
  @scala.inline
  def isUpdateExpression(): /* is @babel/types.@babel/types.UpdateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")().asInstanceOf[/* is @babel/types.@babel/types.UpdateExpression */ Boolean]
  @scala.inline
  def isUpdateExpression(node: js.Object): /* is @babel/types.@babel/types.UpdateExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.UpdateExpression */ Boolean]
  @scala.inline
  def isUpdateExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.UpdateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UpdateExpression */ Boolean]
  @scala.inline
  def isUpdateExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.UpdateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UpdateExpression */ Boolean]
  @scala.inline
  def isUpdateExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.UpdateExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUpdateExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UpdateExpression */ Boolean]
  
  @scala.inline
  def isUserWhitespacable(): /* is @babel/types.@babel/types.UserWhitespacable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")().asInstanceOf[/* is @babel/types.@babel/types.UserWhitespacable */ Boolean]
  @scala.inline
  def isUserWhitespacable(node: js.Object): /* is @babel/types.@babel/types.UserWhitespacable */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.UserWhitespacable */ Boolean]
  @scala.inline
  def isUserWhitespacable(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.UserWhitespacable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UserWhitespacable */ Boolean]
  @scala.inline
  def isUserWhitespacable(node: Null, opts: js.Object): /* is @babel/types.@babel/types.UserWhitespacable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UserWhitespacable */ Boolean]
  @scala.inline
  def isUserWhitespacable(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.UserWhitespacable */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isUserWhitespacable")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.UserWhitespacable */ Boolean]
  
  @scala.inline
  def isV8IntrinsicIdentifier(): /* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")().asInstanceOf[/* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean]
  @scala.inline
  def isV8IntrinsicIdentifier(node: js.Object): /* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean]
  @scala.inline
  def isV8IntrinsicIdentifier(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean]
  @scala.inline
  def isV8IntrinsicIdentifier(node: Null, opts: js.Object): /* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean]
  @scala.inline
  def isV8IntrinsicIdentifier(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isV8IntrinsicIdentifier")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.V8IntrinsicIdentifier */ Boolean]
  
  @scala.inline
  def isValidES3Identifier(name: String): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isValidES3Identifier")(name.asInstanceOf[js.Any]).asInstanceOf[Boolean]
  
  @scala.inline
  def isValidIdentifier(name: String): Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isValidIdentifier")(name.asInstanceOf[js.Any]).asInstanceOf[Boolean]
  
  @scala.inline
  def isVar(node: typings.babelTypes.mod.Node): /* is @babel/types.@babel/types.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVar")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclaration */ Boolean]
  
  @scala.inline
  def isVariableDeclaration(): /* is @babel/types.@babel/types.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")().asInstanceOf[/* is @babel/types.@babel/types.VariableDeclaration */ Boolean]
  @scala.inline
  def isVariableDeclaration(node: js.Object): /* is @babel/types.@babel/types.VariableDeclaration */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclaration */ Boolean]
  @scala.inline
  def isVariableDeclaration(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclaration */ Boolean]
  @scala.inline
  def isVariableDeclaration(node: Null, opts: js.Object): /* is @babel/types.@babel/types.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclaration */ Boolean]
  @scala.inline
  def isVariableDeclaration(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.VariableDeclaration */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclaration")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclaration */ Boolean]
  
  @scala.inline
  def isVariableDeclarator(): /* is @babel/types.@babel/types.VariableDeclarator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")().asInstanceOf[/* is @babel/types.@babel/types.VariableDeclarator */ Boolean]
  @scala.inline
  def isVariableDeclarator(node: js.Object): /* is @babel/types.@babel/types.VariableDeclarator */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclarator */ Boolean]
  @scala.inline
  def isVariableDeclarator(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.VariableDeclarator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclarator */ Boolean]
  @scala.inline
  def isVariableDeclarator(node: Null, opts: js.Object): /* is @babel/types.@babel/types.VariableDeclarator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclarator */ Boolean]
  @scala.inline
  def isVariableDeclarator(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.VariableDeclarator */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariableDeclarator")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.VariableDeclarator */ Boolean]
  
  @scala.inline
  def isVariance(): /* is @babel/types.@babel/types.Variance */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")().asInstanceOf[/* is @babel/types.@babel/types.Variance */ Boolean]
  @scala.inline
  def isVariance(node: js.Object): /* is @babel/types.@babel/types.Variance */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.Variance */ Boolean]
  @scala.inline
  def isVariance(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.Variance */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Variance */ Boolean]
  @scala.inline
  def isVariance(node: Null, opts: js.Object): /* is @babel/types.@babel/types.Variance */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Variance */ Boolean]
  @scala.inline
  def isVariance(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.Variance */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVariance")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.Variance */ Boolean]
  
  @scala.inline
  def isVoidTypeAnnotation(): /* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")().asInstanceOf[/* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean]
  @scala.inline
  def isVoidTypeAnnotation(node: js.Object): /* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean]
  @scala.inline
  def isVoidTypeAnnotation(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean]
  @scala.inline
  def isVoidTypeAnnotation(node: Null, opts: js.Object): /* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean]
  @scala.inline
  def isVoidTypeAnnotation(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isVoidTypeAnnotation")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.VoidTypeAnnotation */ Boolean]
  
  @scala.inline
  def isWhile(): /* is @babel/types.@babel/types.While */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")().asInstanceOf[/* is @babel/types.@babel/types.While */ Boolean]
  @scala.inline
  def isWhile(node: js.Object): /* is @babel/types.@babel/types.While */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.While */ Boolean]
  @scala.inline
  def isWhile(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.While */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.While */ Boolean]
  @scala.inline
  def isWhile(node: Null, opts: js.Object): /* is @babel/types.@babel/types.While */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.While */ Boolean]
  @scala.inline
  def isWhile(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.While */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhile")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.While */ Boolean]
  
  @scala.inline
  def isWhileStatement(): /* is @babel/types.@babel/types.WhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")().asInstanceOf[/* is @babel/types.@babel/types.WhileStatement */ Boolean]
  @scala.inline
  def isWhileStatement(node: js.Object): /* is @babel/types.@babel/types.WhileStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.WhileStatement */ Boolean]
  @scala.inline
  def isWhileStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.WhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.WhileStatement */ Boolean]
  @scala.inline
  def isWhileStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.WhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.WhileStatement */ Boolean]
  @scala.inline
  def isWhileStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.WhileStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWhileStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.WhileStatement */ Boolean]
  
  @scala.inline
  def isWithStatement(): /* is @babel/types.@babel/types.WithStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")().asInstanceOf[/* is @babel/types.@babel/types.WithStatement */ Boolean]
  @scala.inline
  def isWithStatement(node: js.Object): /* is @babel/types.@babel/types.WithStatement */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.WithStatement */ Boolean]
  @scala.inline
  def isWithStatement(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.WithStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.WithStatement */ Boolean]
  @scala.inline
  def isWithStatement(node: Null, opts: js.Object): /* is @babel/types.@babel/types.WithStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.WithStatement */ Boolean]
  @scala.inline
  def isWithStatement(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.WithStatement */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isWithStatement")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.WithStatement */ Boolean]
  
  @scala.inline
  def isYieldExpression(): /* is @babel/types.@babel/types.YieldExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")().asInstanceOf[/* is @babel/types.@babel/types.YieldExpression */ Boolean]
  @scala.inline
  def isYieldExpression(node: js.Object): /* is @babel/types.@babel/types.YieldExpression */ Boolean = ^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any]).asInstanceOf[/* is @babel/types.@babel/types.YieldExpression */ Boolean]
  @scala.inline
  def isYieldExpression(node: js.Object, opts: js.Object): /* is @babel/types.@babel/types.YieldExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.YieldExpression */ Boolean]
  @scala.inline
  def isYieldExpression(node: Null, opts: js.Object): /* is @babel/types.@babel/types.YieldExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.YieldExpression */ Boolean]
  @scala.inline
  def isYieldExpression(node: Unit, opts: js.Object): /* is @babel/types.@babel/types.YieldExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("isYieldExpression")(node.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.YieldExpression */ Boolean]
  
  @scala.inline
  def is_P_Node[P /* <: typings.babelTypes.mod.Node */](`type`: String, n: Null, required: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
  @scala.inline
  def is_P_Node[P /* <: typings.babelTypes.mod.Node */](`type`: String, n: Unit, required: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
  @scala.inline
  def is_P_Node[P /* <: typings.babelTypes.mod.Node */](`type`: String, n: typings.babelTypes.mod.Node, required: Partial[P]): /* is P */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("is")(`type`.asInstanceOf[js.Any], n.asInstanceOf[js.Any], required.asInstanceOf[js.Any])).asInstanceOf[/* is P */ Boolean]
  
  @scala.inline
  def jsxAttribute(name: JSXIdentifier_): JSXAttribute_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any]).asInstanceOf[JSXAttribute_]
  @scala.inline
  def jsxAttribute(name: JSXIdentifier_, value: JSXElement_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
  @scala.inline
  def jsxAttribute(name: JSXIdentifier_, value: JSXExpressionContainer_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
  @scala.inline
  def jsxAttribute(name: JSXIdentifier_, value: JSXFragment_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
  @scala.inline
  def jsxAttribute(name: JSXIdentifier_, value: StringLiteral_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
  @scala.inline
  def jsxAttribute(name: JSXNamespacedName_): JSXAttribute_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any]).asInstanceOf[JSXAttribute_]
  @scala.inline
  def jsxAttribute(name: JSXNamespacedName_, value: JSXElement_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
  @scala.inline
  def jsxAttribute(name: JSXNamespacedName_, value: JSXExpressionContainer_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
  @scala.inline
  def jsxAttribute(name: JSXNamespacedName_, value: JSXFragment_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
  @scala.inline
  def jsxAttribute(name: JSXNamespacedName_, value: StringLiteral_): JSXAttribute_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxAttribute")(name.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[JSXAttribute_]
  
  @scala.inline
  def jsxClosingElement(name: JSXIdentifier_): JSXClosingElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement_]
  @scala.inline
  def jsxClosingElement(name: JSXMemberExpression_): JSXClosingElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement_]
  @scala.inline
  def jsxClosingElement(name: JSXNamespacedName_): JSXClosingElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxClosingElement")(name.asInstanceOf[js.Any]).asInstanceOf[JSXClosingElement_]
  
  @scala.inline
  def jsxClosingFragment(): JSXClosingFragment_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxClosingFragment")().asInstanceOf[JSXClosingFragment_]
  
  @scala.inline
  def jsxElement(
    openingElement: JSXOpeningElement_,
    closingElement: Null,
    children: js.Array[
      JSXText_ | JSXExpressionContainer_ | JSXSpreadChild_ | JSXElement_ | JSXFragment_
    ]
  ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
  @scala.inline
  def jsxElement(
    openingElement: JSXOpeningElement_,
    closingElement: Null,
    children: js.Array[
      JSXText_ | JSXExpressionContainer_ | JSXSpreadChild_ | JSXElement_ | JSXFragment_
    ],
    selfClosing: Boolean
  ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
  @scala.inline
  def jsxElement(
    openingElement: JSXOpeningElement_,
    closingElement: Unit,
    children: js.Array[
      JSXText_ | JSXExpressionContainer_ | JSXSpreadChild_ | JSXElement_ | JSXFragment_
    ]
  ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
  @scala.inline
  def jsxElement(
    openingElement: JSXOpeningElement_,
    closingElement: Unit,
    children: js.Array[
      JSXText_ | JSXExpressionContainer_ | JSXSpreadChild_ | JSXElement_ | JSXFragment_
    ],
    selfClosing: Boolean
  ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
  @scala.inline
  def jsxElement(
    openingElement: JSXOpeningElement_,
    closingElement: JSXClosingElement_,
    children: js.Array[
      JSXText_ | JSXExpressionContainer_ | JSXSpreadChild_ | JSXElement_ | JSXFragment_
    ]
  ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
  @scala.inline
  def jsxElement(
    openingElement: JSXOpeningElement_,
    closingElement: JSXClosingElement_,
    children: js.Array[
      JSXText_ | JSXExpressionContainer_ | JSXSpreadChild_ | JSXElement_ | JSXFragment_
    ],
    selfClosing: Boolean
  ): JSXElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxElement")(openingElement.asInstanceOf[js.Any], closingElement.asInstanceOf[js.Any], children.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXElement_]
  
  @scala.inline
  def jsxEmptyExpression(): JSXEmptyExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxEmptyExpression")().asInstanceOf[JSXEmptyExpression_]
  
  @scala.inline
  def jsxExpressionContainer(expression: Expression): JSXExpressionContainer_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxExpressionContainer")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXExpressionContainer_]
  @scala.inline
  def jsxExpressionContainer(expression: JSXEmptyExpression_): JSXExpressionContainer_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxExpressionContainer")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXExpressionContainer_]
  
  @scala.inline
  def jsxFragment(
    openingFragment: JSXOpeningFragment_,
    closingFragment: JSXClosingFragment_,
    children: js.Array[
      JSXText_ | JSXExpressionContainer_ | JSXSpreadChild_ | JSXElement_ | JSXFragment_
    ]
  ): JSXFragment_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxFragment")(openingFragment.asInstanceOf[js.Any], closingFragment.asInstanceOf[js.Any], children.asInstanceOf[js.Any])).asInstanceOf[JSXFragment_]
  
  @scala.inline
  def jsxIdentifier(name: String): JSXIdentifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxIdentifier")(name.asInstanceOf[js.Any]).asInstanceOf[JSXIdentifier_]
  
  @scala.inline
  def jsxMemberExpression(`object`: JSXIdentifier_, property: JSXIdentifier_): JSXMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[JSXMemberExpression_]
  @scala.inline
  def jsxMemberExpression(`object`: JSXMemberExpression_, property: JSXIdentifier_): JSXMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[JSXMemberExpression_]
  
  @scala.inline
  def jsxNamespacedName(namespace: JSXIdentifier_, name: JSXIdentifier_): JSXNamespacedName_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxNamespacedName")(namespace.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[JSXNamespacedName_]
  
  @scala.inline
  def jsxOpeningElement(name: JSXIdentifier_, attributes: js.Array[JSXAttribute_ | JSXSpreadAttribute_]): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
  @scala.inline
  def jsxOpeningElement(
    name: JSXIdentifier_,
    attributes: js.Array[JSXAttribute_ | JSXSpreadAttribute_],
    selfClosing: Boolean
  ): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
  @scala.inline
  def jsxOpeningElement(name: JSXMemberExpression_, attributes: js.Array[JSXAttribute_ | JSXSpreadAttribute_]): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
  @scala.inline
  def jsxOpeningElement(
    name: JSXMemberExpression_,
    attributes: js.Array[JSXAttribute_ | JSXSpreadAttribute_],
    selfClosing: Boolean
  ): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
  @scala.inline
  def jsxOpeningElement(name: JSXNamespacedName_, attributes: js.Array[JSXAttribute_ | JSXSpreadAttribute_]): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
  @scala.inline
  def jsxOpeningElement(
    name: JSXNamespacedName_,
    attributes: js.Array[JSXAttribute_ | JSXSpreadAttribute_],
    selfClosing: Boolean
  ): JSXOpeningElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningElement")(name.asInstanceOf[js.Any], attributes.asInstanceOf[js.Any], selfClosing.asInstanceOf[js.Any])).asInstanceOf[JSXOpeningElement_]
  
  @scala.inline
  def jsxOpeningFragment(): JSXOpeningFragment_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxOpeningFragment")().asInstanceOf[JSXOpeningFragment_]
  
  @scala.inline
  def jsxSpreadAttribute(argument: Expression): JSXSpreadAttribute_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxSpreadAttribute")(argument.asInstanceOf[js.Any]).asInstanceOf[JSXSpreadAttribute_]
  
  @scala.inline
  def jsxSpreadChild(expression: Expression): JSXSpreadChild_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxSpreadChild")(expression.asInstanceOf[js.Any]).asInstanceOf[JSXSpreadChild_]
  
  @scala.inline
  def jsxText(value: String): JSXText_ = ^.asInstanceOf[js.Dynamic].applyDynamic("jsxText")(value.asInstanceOf[js.Any]).asInstanceOf[JSXText_]
  
  @scala.inline
  def labeledStatement(label: Identifier_, body: Statement): LabeledStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("labeledStatement")(label.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[LabeledStatement_]
  
  @scala.inline
  def logicalExpression(operator: AmpersandAmpersand, left: Expression, right: Expression): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]
  @scala.inline
  def logicalExpression(operator: QuestionmarkQuestionmark, left: Expression, right: Expression): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]
  @scala.inline
  def logicalExpression(operator: VerticallineVerticalline, left: Expression, right: Expression): LogicalExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("logicalExpression")(operator.asInstanceOf[js.Any], left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[LogicalExpression_]
  
  @scala.inline
  def matchesPattern(node: Null, `match`: String): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: Null, `match`: String, allowPartial: Boolean): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: Null, `match`: js.Array[String]): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: Null, `match`: js.Array[String], allowPartial: Boolean): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: Unit, `match`: String): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: Unit, `match`: String, allowPartial: Boolean): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: Unit, `match`: js.Array[String]): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: Unit, `match`: js.Array[String], allowPartial: Boolean): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: typings.babelTypes.mod.Node, `match`: String): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: typings.babelTypes.mod.Node, `match`: String, allowPartial: Boolean): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: typings.babelTypes.mod.Node, `match`: js.Array[String]): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  @scala.inline
  def matchesPattern(node: typings.babelTypes.mod.Node, `match`: js.Array[String], allowPartial: Boolean): /* is @babel/types.@babel/types.MemberExpression */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("matchesPattern")(node.asInstanceOf[js.Any], `match`.asInstanceOf[js.Any], allowPartial.asInstanceOf[js.Any])).asInstanceOf[/* is @babel/types.@babel/types.MemberExpression */ Boolean]
  
  @scala.inline
  def memberExpression(`object`: Expression, property: Expression): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression(`object`: Expression, property: Expression, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression(`object`: Expression, property: Identifier_): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression(`object`: Expression, property: Identifier_, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression(`object`: Expression, property: PrivateName_): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression(`object`: Expression, property: PrivateName_, computed: Boolean): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  
  @scala.inline
  def memberExpression_false(`object`: Expression, property: Expression, computed: Boolean, optional: `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_false(`object`: Expression, property: Expression, computed: Unit, optional: `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_false(`object`: Expression, property: Identifier_, computed: Boolean, optional: `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_false(`object`: Expression, property: Identifier_, computed: Unit, optional: `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_false(`object`: Expression, property: PrivateName_, computed: Boolean, optional: `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_false(`object`: Expression, property: PrivateName_, computed: Unit, optional: `false`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  
  @scala.inline
  def memberExpression_true(`object`: Expression, property: Expression, computed: Boolean, optional: `true`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_true(`object`: Expression, property: Expression, computed: Unit, optional: `true`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_true(`object`: Expression, property: Identifier_, computed: Boolean, optional: `true`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_true(`object`: Expression, property: Identifier_, computed: Unit, optional: `true`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_true(`object`: Expression, property: PrivateName_, computed: Boolean, optional: `true`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  @scala.inline
  def memberExpression_true(`object`: Expression, property: PrivateName_, computed: Unit, optional: `true`): MemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("memberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[MemberExpression_]
  
  @scala.inline
  def metaProperty(meta: Identifier_, property: Identifier_): MetaProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("metaProperty")(meta.asInstanceOf[js.Any], property.asInstanceOf[js.Any])).asInstanceOf[MetaProperty_]
  
  @scala.inline
  def mixedTypeAnnotation(): MixedTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("mixedTypeAnnotation")().asInstanceOf[MixedTypeAnnotation_]
  
  @scala.inline
  def newExpression(
    callee: Expression,
    _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName_ | ArgumentPlaceholder_]
  ): NewExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression_]
  @scala.inline
  def newExpression(
    callee: V8IntrinsicIdentifier_,
    _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName_ | ArgumentPlaceholder_]
  ): NewExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("newExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any])).asInstanceOf[NewExpression_]
  
  @scala.inline
  def noop(): Noop_ = ^.asInstanceOf[js.Dynamic].applyDynamic("noop")().asInstanceOf[Noop_]
  
  @scala.inline
  def nullLiteral(): NullLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullLiteral")().asInstanceOf[NullLiteral_]
  
  @scala.inline
  def nullLiteralTypeAnnotation(): NullLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullLiteralTypeAnnotation")().asInstanceOf[NullLiteralTypeAnnotation_]
  
  @scala.inline
  def nullableTypeAnnotation(typeAnnotation: FlowType): NullableTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("nullableTypeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[NullableTypeAnnotation_]
  
  @scala.inline
  def numberLiteralTypeAnnotation(value: Double): NumberLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numberLiteralTypeAnnotation")(value.asInstanceOf[js.Any]).asInstanceOf[NumberLiteralTypeAnnotation_]
  
  @scala.inline
  def numberTypeAnnotation(): NumberTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numberTypeAnnotation")().asInstanceOf[NumberTypeAnnotation_]
  
  @scala.inline
  def numericLiteral(value: Double): NumericLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("numericLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral_]
  
  @scala.inline
  def objectExpression(properties: js.Array[ObjectMethod_ | ObjectProperty_ | SpreadElement_]): ObjectExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectExpression")(properties.asInstanceOf[js.Any]).asInstanceOf[ObjectExpression_]
  
  @scala.inline
  def objectMethod(
    kind: js.UndefOr[method | get | set],
    key: Expression | Identifier_ | StringLiteral_ | NumericLiteral_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    body: BlockStatement_,
    computed: js.UndefOr[Boolean],
    generator: js.UndefOr[Boolean],
    async: js.UndefOr[Boolean]
  ): ObjectMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectMethod")(kind.asInstanceOf[js.Any], key.asInstanceOf[js.Any], params.asInstanceOf[js.Any], body.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], generator.asInstanceOf[js.Any], async.asInstanceOf[js.Any])).asInstanceOf[ObjectMethod_]
  
  @scala.inline
  def objectPattern(properties: js.Array[RestElement_ | ObjectProperty_]): ObjectPattern_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectPattern")(properties.asInstanceOf[js.Any]).asInstanceOf[ObjectPattern_]
  
  @scala.inline
  def objectProperty(
    key: Expression | Identifier_ | StringLiteral_ | NumericLiteral_,
    value: Expression | PatternLike,
    computed: js.UndefOr[Boolean],
    shorthand: js.UndefOr[Boolean],
    decorators: js.UndefOr[js.Array[Decorator_] | Null]
  ): ObjectProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], shorthand.asInstanceOf[js.Any], decorators.asInstanceOf[js.Any])).asInstanceOf[ObjectProperty_]
  
  @scala.inline
  def objectTypeAnnotation(
    properties: js.Array[ObjectTypeProperty_ | ObjectTypeSpreadProperty_],
    indexers: js.UndefOr[js.Array[ObjectTypeIndexer_] | Null],
    callProperties: js.UndefOr[js.Array[ObjectTypeCallProperty_] | Null],
    internalSlots: js.UndefOr[js.Array[ObjectTypeInternalSlot_] | Null],
    exact: js.UndefOr[Boolean]
  ): ObjectTypeAnnotation_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeAnnotation")(properties.asInstanceOf[js.Any], indexers.asInstanceOf[js.Any], callProperties.asInstanceOf[js.Any], internalSlots.asInstanceOf[js.Any], exact.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeAnnotation_]
  
  @scala.inline
  def objectTypeCallProperty(value: FlowType): ObjectTypeCallProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeCallProperty")(value.asInstanceOf[js.Any]).asInstanceOf[ObjectTypeCallProperty_]
  
  @scala.inline
  def objectTypeIndexer(id: Null, key: FlowType, value: FlowType): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
  @scala.inline
  def objectTypeIndexer(id: Null, key: FlowType, value: FlowType, variance: Variance_): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
  @scala.inline
  def objectTypeIndexer(id: Unit, key: FlowType, value: FlowType): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
  @scala.inline
  def objectTypeIndexer(id: Unit, key: FlowType, value: FlowType, variance: Variance_): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
  @scala.inline
  def objectTypeIndexer(id: Identifier_, key: FlowType, value: FlowType): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
  @scala.inline
  def objectTypeIndexer(id: Identifier_, key: FlowType, value: FlowType, variance: Variance_): ObjectTypeIndexer_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeIndexer")(id.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeIndexer_]
  
  @scala.inline
  def objectTypeInternalSlot(id: Identifier_, value: FlowType, optional: Boolean, _static: Boolean, method: Boolean): ObjectTypeInternalSlot_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeInternalSlot")(id.asInstanceOf[js.Any], value.asInstanceOf[js.Any], optional.asInstanceOf[js.Any], _static.asInstanceOf[js.Any], method.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeInternalSlot_]
  
  @scala.inline
  def objectTypeProperty(key: Identifier_, value: FlowType): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]
  @scala.inline
  def objectTypeProperty(key: Identifier_, value: FlowType, variance: Variance_): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]
  @scala.inline
  def objectTypeProperty(key: StringLiteral_, value: FlowType): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]
  @scala.inline
  def objectTypeProperty(key: StringLiteral_, value: FlowType, variance: Variance_): ObjectTypeProperty_ = (^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeProperty")(key.asInstanceOf[js.Any], value.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[ObjectTypeProperty_]
  
  @scala.inline
  def objectTypeSpreadProperty(argument: FlowType): ObjectTypeSpreadProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("objectTypeSpreadProperty")(argument.asInstanceOf[js.Any]).asInstanceOf[ObjectTypeSpreadProperty_]
  
  @scala.inline
  def opaqueType(id: Identifier_, typeParameters: Null, supertype: Null, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
  @scala.inline
  def opaqueType(id: Identifier_, typeParameters: Null, supertype: Unit, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
  @scala.inline
  def opaqueType(id: Identifier_, typeParameters: Null, supertype: FlowType, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
  @scala.inline
  def opaqueType(id: Identifier_, typeParameters: Unit, supertype: Null, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
  @scala.inline
  def opaqueType(id: Identifier_, typeParameters: Unit, supertype: Unit, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
  @scala.inline
  def opaqueType(id: Identifier_, typeParameters: Unit, supertype: FlowType, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
  @scala.inline
  def opaqueType(id: Identifier_, typeParameters: TypeParameterDeclaration_, supertype: Null, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
  @scala.inline
  def opaqueType(id: Identifier_, typeParameters: TypeParameterDeclaration_, supertype: Unit, impltype: FlowType): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
  @scala.inline
  def opaqueType(
    id: Identifier_,
    typeParameters: TypeParameterDeclaration_,
    supertype: FlowType,
    impltype: FlowType
  ): OpaqueType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("opaqueType")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], supertype.asInstanceOf[js.Any], impltype.asInstanceOf[js.Any])).asInstanceOf[OpaqueType_]
  
  @scala.inline
  def optionalCallExpression(
    callee: Expression,
    _arguments: js.Array[Expression | SpreadElement_ | JSXNamespacedName_],
    optional: Boolean
  ): OptionalCallExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalCallExpression")(callee.asInstanceOf[js.Any], _arguments.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalCallExpression_]
  
  @scala.inline
  def optionalMemberExpression(`object`: Expression, property: Expression, computed: Boolean, optional: Boolean): OptionalMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalMemberExpression_]
  @scala.inline
  def optionalMemberExpression(`object`: Expression, property: Expression, computed: Unit, optional: Boolean): OptionalMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalMemberExpression_]
  @scala.inline
  def optionalMemberExpression(`object`: Expression, property: Identifier_, computed: Boolean, optional: Boolean): OptionalMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalMemberExpression_]
  @scala.inline
  def optionalMemberExpression(`object`: Expression, property: Identifier_, computed: Unit, optional: Boolean): OptionalMemberExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("optionalMemberExpression")(`object`.asInstanceOf[js.Any], property.asInstanceOf[js.Any], computed.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[OptionalMemberExpression_]
  
  @scala.inline
  def parenthesizedExpression(expression: Expression): ParenthesizedExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("parenthesizedExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[ParenthesizedExpression_]
  
  @scala.inline
  def pipelineBareFunction(callee: Expression): PipelineBareFunction_ = ^.asInstanceOf[js.Dynamic].applyDynamic("pipelineBareFunction")(callee.asInstanceOf[js.Any]).asInstanceOf[PipelineBareFunction_]
  
  @scala.inline
  def pipelinePrimaryTopicReference(): PipelinePrimaryTopicReference_ = ^.asInstanceOf[js.Dynamic].applyDynamic("pipelinePrimaryTopicReference")().asInstanceOf[PipelinePrimaryTopicReference_]
  
  @scala.inline
  def pipelineTopicExpression(expression: Expression): PipelineTopicExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("pipelineTopicExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[PipelineTopicExpression_]
  
  @scala.inline
  def placeholder_BlockStatement(expectedNode: BlockStatement, name: Identifier_): Placeholder_ = (^.asInstanceOf[js.Dynamic].applyDynamic("placeholder")(expectedNode.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[Placeholder_]
  
  @scala.inline
  def placeholder_ClassBody(expectedNode: ClassBody, name: Identifier_): Placeholder_ = (^.asInstanceOf[js.Dynamic].applyDynamic("placeholder")(expectedNode.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[Placeholder_]
  
  @scala.inline
  def placeholder_Declaration(expectedNode: typings.babelCore.babelCoreStrings.Declaration, name: Identifier_): Placeholder_ = (^.asInstanceOf[js.Dynamic].applyDynamic("placeholder")(expectedNode.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[Placeholder_]
  
  @scala.inline
  def placeholder_Expression(expectedNode: typings.babelCore.babelCoreStrings.Expression, name: Identifier_): Placeholder_ = (^.asInstanceOf[js.Dynamic].applyDynamic("placeholder")(expectedNode.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[Placeholder_]
  
  @scala.inline
  def placeholder_Identifier(expectedNode: Identifier, name: Identifier_): Placeholder_ = (^.asInstanceOf[js.Dynamic].applyDynamic("placeholder")(expectedNode.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[Placeholder_]
  
  @scala.inline
  def placeholder_Pattern(expectedNode: typings.babelCore.babelCoreStrings.Pattern, name: Identifier_): Placeholder_ = (^.asInstanceOf[js.Dynamic].applyDynamic("placeholder")(expectedNode.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[Placeholder_]
  
  @scala.inline
  def placeholder_Statement(expectedNode: typings.babelCore.babelCoreStrings.Statement, name: Identifier_): Placeholder_ = (^.asInstanceOf[js.Dynamic].applyDynamic("placeholder")(expectedNode.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[Placeholder_]
  
  @scala.inline
  def placeholder_StringLiteral(expectedNode: StringLiteral, name: Identifier_): Placeholder_ = (^.asInstanceOf[js.Dynamic].applyDynamic("placeholder")(expectedNode.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[Placeholder_]
  
  @scala.inline
  def prependToMemberExpression[T /* <: PickMemberExpressionobjecObject */](member: T, prepend: Expression): T = (^.asInstanceOf[js.Dynamic].applyDynamic("prependToMemberExpression")(member.asInstanceOf[js.Any], prepend.asInstanceOf[js.Any])).asInstanceOf[T]
  
  @scala.inline
  def privateName(id: Identifier_): PrivateName_ = ^.asInstanceOf[js.Dynamic].applyDynamic("privateName")(id.asInstanceOf[js.Any]).asInstanceOf[PrivateName_]
  
  @scala.inline
  def program(body: js.Array[Statement]): Program_ = ^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any]).asInstanceOf[Program_]
  @scala.inline
  def program(body: js.Array[Statement], directives: js.Array[Directive_]): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any])).asInstanceOf[Program_]
  @scala.inline
  def program(
    body: js.Array[Statement],
    directives: js.Array[Directive_],
    sourceType: Unit,
    interpreter: InterpreterDirective_
  ): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]
  @scala.inline
  def program(body: js.Array[Statement], directives: Unit, sourceType: Unit, interpreter: InterpreterDirective_): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]
  
  @scala.inline
  def program_module(body: js.Array[Statement], directives: js.Array[Directive_], sourceType: module): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any])).asInstanceOf[Program_]
  @scala.inline
  def program_module(
    body: js.Array[Statement],
    directives: js.Array[Directive_],
    sourceType: module,
    interpreter: InterpreterDirective_
  ): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]
  @scala.inline
  def program_module(body: js.Array[Statement], directives: Unit, sourceType: module): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any])).asInstanceOf[Program_]
  @scala.inline
  def program_module(
    body: js.Array[Statement],
    directives: Unit,
    sourceType: module,
    interpreter: InterpreterDirective_
  ): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]
  
  @scala.inline
  def program_script(body: js.Array[Statement], directives: js.Array[Directive_], sourceType: script): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any])).asInstanceOf[Program_]
  @scala.inline
  def program_script(
    body: js.Array[Statement],
    directives: js.Array[Directive_],
    sourceType: script,
    interpreter: InterpreterDirective_
  ): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]
  @scala.inline
  def program_script(body: js.Array[Statement], directives: Unit, sourceType: script): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any])).asInstanceOf[Program_]
  @scala.inline
  def program_script(
    body: js.Array[Statement],
    directives: Unit,
    sourceType: script,
    interpreter: InterpreterDirective_
  ): Program_ = (^.asInstanceOf[js.Dynamic].applyDynamic("program")(body.asInstanceOf[js.Any], directives.asInstanceOf[js.Any], sourceType.asInstanceOf[js.Any], interpreter.asInstanceOf[js.Any])).asInstanceOf[Program_]
  
  @scala.inline
  def qualifiedTypeIdentifier(id: Identifier_, qualification: Identifier_): QualifiedTypeIdentifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")(id.asInstanceOf[js.Any], qualification.asInstanceOf[js.Any])).asInstanceOf[QualifiedTypeIdentifier_]
  @scala.inline
  def qualifiedTypeIdentifier(id: Identifier_, qualification: QualifiedTypeIdentifier_): QualifiedTypeIdentifier_ = (^.asInstanceOf[js.Dynamic].applyDynamic("qualifiedTypeIdentifier")(id.asInstanceOf[js.Any], qualification.asInstanceOf[js.Any])).asInstanceOf[QualifiedTypeIdentifier_]
  
  @scala.inline
  def recordExpression(properties: js.Array[ObjectProperty_ | SpreadElement_]): RecordExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("recordExpression")(properties.asInstanceOf[js.Any]).asInstanceOf[RecordExpression_]
  
  @scala.inline
  def regExpLiteral(pattern: String): RegExpLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("regExpLiteral")(pattern.asInstanceOf[js.Any]).asInstanceOf[RegExpLiteral_]
  @scala.inline
  def regExpLiteral(pattern: String, flags: String): RegExpLiteral_ = (^.asInstanceOf[js.Dynamic].applyDynamic("regExpLiteral")(pattern.asInstanceOf[js.Any], flags.asInstanceOf[js.Any])).asInstanceOf[RegExpLiteral_]
  
  @scala.inline
  def removeComments[T /* <: typings.babelTypes.mod.Node */](node: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("removeComments")(node.asInstanceOf[js.Any]).asInstanceOf[T]
  
  @scala.inline
  def removeProperties(n: typings.babelTypes.mod.Node): Unit = ^.asInstanceOf[js.Dynamic].applyDynamic("removeProperties")(n.asInstanceOf[js.Any]).asInstanceOf[Unit]
  @scala.inline
  def removeProperties(n: typings.babelTypes.mod.Node, opts: PreserveComments): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("removeProperties")(n.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def removePropertiesDeep[T /* <: typings.babelTypes.mod.Node */](n: T): T = ^.asInstanceOf[js.Dynamic].applyDynamic("removePropertiesDeep")(n.asInstanceOf[js.Any]).asInstanceOf[T]
  @scala.inline
  def removePropertiesDeep[T /* <: typings.babelTypes.mod.Node */](n: T, opts: PreserveComments): T = (^.asInstanceOf[js.Dynamic].applyDynamic("removePropertiesDeep")(n.asInstanceOf[js.Any], opts.asInstanceOf[js.Any])).asInstanceOf[T]
  
  @scala.inline
  def removeTypeDuplicates_false(types: js.Array[js.UndefOr[FlowType | `false` | Null]]): js.Array[FlowType] = ^.asInstanceOf[js.Dynamic].applyDynamic("removeTypeDuplicates")(types.asInstanceOf[js.Any]).asInstanceOf[js.Array[FlowType]]
  
  @scala.inline
  def restElement(argument: LVal): RestElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("restElement")(argument.asInstanceOf[js.Any]).asInstanceOf[RestElement_]
  
  @scala.inline
  def returnStatement(): ReturnStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("returnStatement")().asInstanceOf[ReturnStatement_]
  @scala.inline
  def returnStatement(argument: Expression): ReturnStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("returnStatement")(argument.asInstanceOf[js.Any]).asInstanceOf[ReturnStatement_]
  
  @scala.inline
  def sequenceExpression(expressions: js.Array[Expression]): SequenceExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("sequenceExpression")(expressions.asInstanceOf[js.Any]).asInstanceOf[SequenceExpression_]
  
  @scala.inline
  def shallowEqual[T /* <: js.Object */](actual: js.Object, expected: T): /* is T */ Boolean = (^.asInstanceOf[js.Dynamic].applyDynamic("shallowEqual")(actual.asInstanceOf[js.Any], expected.asInstanceOf[js.Any])).asInstanceOf[/* is T */ Boolean]
  
  @scala.inline
  def spreadElement(argument: Expression): SpreadElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("spreadElement")(argument.asInstanceOf[js.Any]).asInstanceOf[SpreadElement_]
  
  @scala.inline
  def staticBlock(body: js.Array[Statement]): StaticBlock_ = ^.asInstanceOf[js.Dynamic].applyDynamic("staticBlock")(body.asInstanceOf[js.Any]).asInstanceOf[StaticBlock_]
  
  @scala.inline
  def stringLiteral(value: String): StringLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringLiteral")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral_]
  
  @scala.inline
  def stringLiteralTypeAnnotation(value: String): StringLiteralTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringLiteralTypeAnnotation")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteralTypeAnnotation_]
  
  @scala.inline
  def stringTypeAnnotation(): StringTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("stringTypeAnnotation")().asInstanceOf[StringTypeAnnotation_]
  
  @scala.inline
  def `super`(): Super_ = ^.asInstanceOf[js.Dynamic].applyDynamic("super")().asInstanceOf[Super_]
  
  @scala.inline
  def switchCase(test: Null, consequent: js.Array[Statement]): SwitchCase_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[SwitchCase_]
  @scala.inline
  def switchCase(test: Unit, consequent: js.Array[Statement]): SwitchCase_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[SwitchCase_]
  @scala.inline
  def switchCase(test: Expression, consequent: js.Array[Statement]): SwitchCase_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchCase")(test.asInstanceOf[js.Any], consequent.asInstanceOf[js.Any])).asInstanceOf[SwitchCase_]
  
  @scala.inline
  def switchStatement(discriminant: Expression, cases: js.Array[SwitchCase_]): SwitchStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("switchStatement")(discriminant.asInstanceOf[js.Any], cases.asInstanceOf[js.Any])).asInstanceOf[SwitchStatement_]
  
  @scala.inline
  def symbolTypeAnnotation(): SymbolTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("symbolTypeAnnotation")().asInstanceOf[SymbolTypeAnnotation_]
  
  @scala.inline
  def taggedTemplateExpression(tag: Expression, quasi: TemplateLiteral_): TaggedTemplateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("taggedTemplateExpression")(tag.asInstanceOf[js.Any], quasi.asInstanceOf[js.Any])).asInstanceOf[TaggedTemplateExpression_]
  
  @scala.inline
  def templateElement(value: Cooked): TemplateElement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("templateElement")(value.asInstanceOf[js.Any]).asInstanceOf[TemplateElement_]
  @scala.inline
  def templateElement(value: Cooked, tail: Boolean): TemplateElement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("templateElement")(value.asInstanceOf[js.Any], tail.asInstanceOf[js.Any])).asInstanceOf[TemplateElement_]
  
  @scala.inline
  def templateLiteral(quasis: js.Array[TemplateElement_], expressions: js.Array[Expression | TSType]): TemplateLiteral_ = (^.asInstanceOf[js.Dynamic].applyDynamic("templateLiteral")(quasis.asInstanceOf[js.Any], expressions.asInstanceOf[js.Any])).asInstanceOf[TemplateLiteral_]
  
  @scala.inline
  def thisExpression(): ThisExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("thisExpression")().asInstanceOf[ThisExpression_]
  
  @scala.inline
  def thisTypeAnnotation(): ThisTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("thisTypeAnnotation")().asInstanceOf[ThisTypeAnnotation_]
  
  @scala.inline
  def throwStatement(argument: Expression): ThrowStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("throwStatement")(argument.asInstanceOf[js.Any]).asInstanceOf[ThrowStatement_]
  
  @scala.inline
  def toBindingIdentifierName(): String = ^.asInstanceOf[js.Dynamic].applyDynamic("toBindingIdentifierName")().asInstanceOf[String]
  @scala.inline
  def toBindingIdentifierName(name: ToString): String = ^.asInstanceOf[js.Dynamic].applyDynamic("toBindingIdentifierName")(name.asInstanceOf[js.Any]).asInstanceOf[String]
  
  @scala.inline
  def toBlock(node: Expression): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toBlock")(node.asInstanceOf[js.Any]).asInstanceOf[BlockStatement_]
  @scala.inline
  def toBlock(node: Expression, parent: Function): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toBlock")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]
  @scala.inline
  def toBlock(node: Statement): BlockStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toBlock")(node.asInstanceOf[js.Any]).asInstanceOf[BlockStatement_]
  @scala.inline
  def toBlock(node: Statement, parent: Function): BlockStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toBlock")(node.asInstanceOf[js.Any], parent.asInstanceOf[js.Any])).asInstanceOf[BlockStatement_]
  
  @scala.inline
  def toComputedKey[T /* <: Extract[typings.babelTypes.mod.Node, Computed] */](node: T): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]
  @scala.inline
  def toComputedKey[T /* <: Extract[typings.babelTypes.mod.Node, Computed] */](node: T, key: Expression): Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[Expression]
  @scala.inline
  def toComputedKey[T /* <: Extract[typings.babelTypes.mod.Node, Computed] */](node: T, key: Identifier_): Expression = (^.asInstanceOf[js.Dynamic].applyDynamic("toComputedKey")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[Expression]
  
  @scala.inline
  def toExpression(node: Class): ClassExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[ClassExpression_]
  @scala.inline
  def toExpression(node: Expression): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]
  @scala.inline
  def toExpression(node: ExpressionStatement_): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]
  @scala.inline
  def toExpression(node: Function): FunctionExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[FunctionExpression_]
  
  @scala.inline
  def toExpression_Expression(node: Class): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]
  @scala.inline
  def toExpression_Expression(node: Function): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("toExpression")(node.asInstanceOf[js.Any]).asInstanceOf[Expression]
  
  @scala.inline
  def toIdentifier(): String = ^.asInstanceOf[js.Dynamic].applyDynamic("toIdentifier")().asInstanceOf[String]
  @scala.inline
  def toIdentifier(name: ToString): String = ^.asInstanceOf[js.Dynamic].applyDynamic("toIdentifier")(name.asInstanceOf[js.Any]).asInstanceOf[String]
  
  @scala.inline
  def toKeyAlias(node: Method): String = ^.asInstanceOf[js.Dynamic].applyDynamic("toKeyAlias")(node.asInstanceOf[js.Any]).asInstanceOf[String]
  @scala.inline
  def toKeyAlias(node: Method, key: typings.babelTypes.mod.Node): String = (^.asInstanceOf[js.Dynamic].applyDynamic("toKeyAlias")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[String]
  @scala.inline
  def toKeyAlias(node: Property): String = ^.asInstanceOf[js.Dynamic].applyDynamic("toKeyAlias")(node.asInstanceOf[js.Any]).asInstanceOf[String]
  @scala.inline
  def toKeyAlias(node: Property, key: typings.babelTypes.mod.Node): String = (^.asInstanceOf[js.Dynamic].applyDynamic("toKeyAlias")(node.asInstanceOf[js.Any], key.asInstanceOf[js.Any])).asInstanceOf[String]
  
  @scala.inline
  def toSequenceExpression(nodes: js.Array[typings.babelTypes.mod.Node], scope: Push): js.UndefOr[SequenceExpression_] = (^.asInstanceOf[js.Dynamic].applyDynamic("toSequenceExpression")(nodes.asInstanceOf[js.Any], scope.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[SequenceExpression_]]
  
  @scala.inline
  def toStatement(node: AssignmentExpression_): Statement = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Statement]
  @scala.inline
  def toStatement(node: AssignmentExpression_, ignore: Boolean): Statement = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[Statement]
  @scala.inline
  def toStatement(node: Class): Statement = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Statement]
  @scala.inline
  def toStatement(node: Class, ignore: Boolean): Statement = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[Statement]
  @scala.inline
  def toStatement(node: Function): Statement = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Statement]
  @scala.inline
  def toStatement(node: Function, ignore: Boolean): Statement = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[Statement]
  @scala.inline
  def toStatement(node: Statement): Statement = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[Statement]
  @scala.inline
  def toStatement(node: Statement, ignore: Boolean): Statement = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[Statement]
  
  @scala.inline
  def toStatement_ClassDeclaration_(node: Class): ClassDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[ClassDeclaration_]
  @scala.inline
  def toStatement_ClassDeclaration_(node: Class, ignore: Boolean): ClassDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ClassDeclaration_]
  
  @scala.inline
  def toStatement_ExpressionStatement_(node: AssignmentExpression_): ExpressionStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[ExpressionStatement_]
  @scala.inline
  def toStatement_ExpressionStatement_(node: AssignmentExpression_, ignore: Boolean): ExpressionStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[ExpressionStatement_]
  
  @scala.inline
  def toStatement_FunctionDeclaration_(node: Function): FunctionDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any]).asInstanceOf[FunctionDeclaration_]
  @scala.inline
  def toStatement_FunctionDeclaration_(node: Function, ignore: Boolean): FunctionDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[FunctionDeclaration_]
  
  @scala.inline
  def toStatement_true(node: AssignmentExpression_, ignore: `true`): js.UndefOr[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Statement]]
  @scala.inline
  def toStatement_true(node: Class, ignore: `true`): js.UndefOr[ClassDeclaration_] = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[ClassDeclaration_]]
  @scala.inline
  def toStatement_true(node: Function, ignore: `true`): js.UndefOr[FunctionDeclaration_] = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[FunctionDeclaration_]]
  @scala.inline
  def toStatement_true(node: Statement, ignore: `true`): js.UndefOr[Statement] = (^.asInstanceOf[js.Dynamic].applyDynamic("toStatement")(node.asInstanceOf[js.Any], ignore.asInstanceOf[js.Any])).asInstanceOf[js.UndefOr[Statement]]
  
  @scala.inline
  def traverse[T](n: typings.babelTypes.mod.Node, h: TraversalHandler[T]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(n.asInstanceOf[js.Any], h.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def traverse[T](n: typings.babelTypes.mod.Node, h: TraversalHandlers[T]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(n.asInstanceOf[js.Any], h.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def traverse[T](n: typings.babelTypes.mod.Node, h: TraversalHandlers[T], state: T): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(n.asInstanceOf[js.Any], h.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def traverse[T](n: typings.babelTypes.mod.Node, h: TraversalHandler[T], state: T): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverse")(n.asInstanceOf[js.Any], h.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def traverseFast[T](n: typings.babelTypes.mod.Node, h: TraversalHandler[T]): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverseFast")(n.asInstanceOf[js.Any], h.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def traverseFast[T](n: typings.babelTypes.mod.Node, h: TraversalHandler[T], state: T): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("traverseFast")(n.asInstanceOf[js.Any], h.asInstanceOf[js.Any], state.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def tryStatement(block: BlockStatement_): TryStatement_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any]).asInstanceOf[TryStatement_]
  @scala.inline
  def tryStatement(block: BlockStatement_, handler: Null, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
  @scala.inline
  def tryStatement(block: BlockStatement_, handler: Unit, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
  @scala.inline
  def tryStatement(block: BlockStatement_, handler: CatchClause_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
  @scala.inline
  def tryStatement(block: BlockStatement_, handler: CatchClause_, finalizer: BlockStatement_): TryStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tryStatement")(block.asInstanceOf[js.Any], handler.asInstanceOf[js.Any], finalizer.asInstanceOf[js.Any])).asInstanceOf[TryStatement_]
  
  @scala.inline
  def tsAnyKeyword(): TSAnyKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsAnyKeyword")().asInstanceOf[TSAnyKeyword_]
  
  @scala.inline
  def tsArrayType(elementType: TSType): TSArrayType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsArrayType")(elementType.asInstanceOf[js.Any]).asInstanceOf[TSArrayType_]
  
  @scala.inline
  def tsAsExpression(expression: Expression, typeAnnotation: TSType): TSAsExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsAsExpression")(expression.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSAsExpression_]
  
  @scala.inline
  def tsBigIntKeyword(): TSBigIntKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsBigIntKeyword")().asInstanceOf[TSBigIntKeyword_]
  
  @scala.inline
  def tsBooleanKeyword(): TSBooleanKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsBooleanKeyword")().asInstanceOf[TSBooleanKeyword_]
  
  @scala.inline
  def tsCallSignatureDeclaration(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSCallSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration_]
  @scala.inline
  def tsCallSignatureDeclaration(
    typeParameters: Null,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSCallSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration_]
  @scala.inline
  def tsCallSignatureDeclaration(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSCallSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration_]
  @scala.inline
  def tsCallSignatureDeclaration(
    typeParameters: Unit,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSCallSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration_]
  @scala.inline
  def tsCallSignatureDeclaration(typeParameters: TSTypeParameterDeclaration_, parameters: js.Array[Identifier_ | RestElement_]): TSCallSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration_]
  @scala.inline
  def tsCallSignatureDeclaration(
    typeParameters: TSTypeParameterDeclaration_,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSCallSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsCallSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSCallSignatureDeclaration_]
  
  @scala.inline
  def tsConditionalType(checkType: TSType, extendsType: TSType, trueType: TSType, falseType: TSType): TSConditionalType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConditionalType")(checkType.asInstanceOf[js.Any], extendsType.asInstanceOf[js.Any], trueType.asInstanceOf[js.Any], falseType.asInstanceOf[js.Any])).asInstanceOf[TSConditionalType_]
  
  @scala.inline
  def tsConstructSignatureDeclaration(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSConstructSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration_]
  @scala.inline
  def tsConstructSignatureDeclaration(
    typeParameters: Null,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSConstructSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration_]
  @scala.inline
  def tsConstructSignatureDeclaration(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSConstructSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration_]
  @scala.inline
  def tsConstructSignatureDeclaration(
    typeParameters: Unit,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSConstructSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration_]
  @scala.inline
  def tsConstructSignatureDeclaration(typeParameters: TSTypeParameterDeclaration_, parameters: js.Array[Identifier_ | RestElement_]): TSConstructSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration_]
  @scala.inline
  def tsConstructSignatureDeclaration(
    typeParameters: TSTypeParameterDeclaration_,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSConstructSignatureDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructSignatureDeclaration")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructSignatureDeclaration_]
  
  @scala.inline
  def tsConstructorType(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSConstructorType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType_]
  @scala.inline
  def tsConstructorType(
    typeParameters: Null,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSConstructorType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType_]
  @scala.inline
  def tsConstructorType(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSConstructorType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType_]
  @scala.inline
  def tsConstructorType(
    typeParameters: Unit,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSConstructorType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType_]
  @scala.inline
  def tsConstructorType(typeParameters: TSTypeParameterDeclaration_, parameters: js.Array[Identifier_ | RestElement_]): TSConstructorType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType_]
  @scala.inline
  def tsConstructorType(
    typeParameters: TSTypeParameterDeclaration_,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSConstructorType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsConstructorType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSConstructorType_]
  
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: Noop_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: Noop_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: Noop_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: TSTypeParameterDeclaration_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: TSTypeParameterDeclaration_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Null,
    typeParameters: TSTypeParameterDeclaration_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: Noop_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: Noop_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: Noop_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: TSTypeParameterDeclaration_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: TSTypeParameterDeclaration_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Unit,
    typeParameters: TSTypeParameterDeclaration_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: Null,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: Unit,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: Noop_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: Noop_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: Noop_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: TSTypeParameterDeclaration_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_]
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: TSTypeParameterDeclaration_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: Noop_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  @scala.inline
  def tsDeclareFunction(
    id: Identifier_,
    typeParameters: TSTypeParameterDeclaration_,
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: TSTypeAnnotation_
  ): TSDeclareFunction_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareFunction")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareFunction_]
  
  @scala.inline
  def tsDeclareMethod(
    decorators: js.UndefOr[js.Array[Decorator_] | Null],
    key: Identifier_ | StringLiteral_ | NumericLiteral_ | Expression,
    typeParameters: js.UndefOr[TSTypeParameterDeclaration_ | Noop_ | Null],
    params: js.Array[Identifier_ | Pattern | RestElement_ | TSParameterProperty_],
    returnType: js.UndefOr[TSTypeAnnotation_ | Noop_ | Null]
  ): TSDeclareMethod_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsDeclareMethod")(decorators.asInstanceOf[js.Any], key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], params.asInstanceOf[js.Any], returnType.asInstanceOf[js.Any])).asInstanceOf[TSDeclareMethod_]
  
  @scala.inline
  def tsEnumDeclaration(id: Identifier_, members: js.Array[TSEnumMember_]): TSEnumDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumDeclaration")(id.asInstanceOf[js.Any], members.asInstanceOf[js.Any])).asInstanceOf[TSEnumDeclaration_]
  
  @scala.inline
  def tsEnumMember(id: Identifier_): TSEnumMember_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumMember")(id.asInstanceOf[js.Any]).asInstanceOf[TSEnumMember_]
  @scala.inline
  def tsEnumMember(id: Identifier_, initializer: Expression): TSEnumMember_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumMember")(id.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSEnumMember_]
  @scala.inline
  def tsEnumMember(id: StringLiteral_): TSEnumMember_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumMember")(id.asInstanceOf[js.Any]).asInstanceOf[TSEnumMember_]
  @scala.inline
  def tsEnumMember(id: StringLiteral_, initializer: Expression): TSEnumMember_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsEnumMember")(id.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSEnumMember_]
  
  @scala.inline
  def tsExportAssignment(expression: Expression): TSExportAssignment_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsExportAssignment")(expression.asInstanceOf[js.Any]).asInstanceOf[TSExportAssignment_]
  
  @scala.inline
  def tsExpressionWithTypeArguments(expression: TSEntityName): TSExpressionWithTypeArguments_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsExpressionWithTypeArguments")(expression.asInstanceOf[js.Any]).asInstanceOf[TSExpressionWithTypeArguments_]
  @scala.inline
  def tsExpressionWithTypeArguments(expression: TSEntityName, typeParameters: TSTypeParameterInstantiation_): TSExpressionWithTypeArguments_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsExpressionWithTypeArguments")(expression.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSExpressionWithTypeArguments_]
  
  @scala.inline
  def tsExternalModuleReference(expression: StringLiteral_): TSExternalModuleReference_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsExternalModuleReference")(expression.asInstanceOf[js.Any]).asInstanceOf[TSExternalModuleReference_]
  
  @scala.inline
  def tsFunctionType(typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSFunctionType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType_]
  @scala.inline
  def tsFunctionType(
    typeParameters: Null,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSFunctionType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType_]
  @scala.inline
  def tsFunctionType(typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSFunctionType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType_]
  @scala.inline
  def tsFunctionType(
    typeParameters: Unit,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSFunctionType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType_]
  @scala.inline
  def tsFunctionType(typeParameters: TSTypeParameterDeclaration_, parameters: js.Array[Identifier_ | RestElement_]): TSFunctionType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType_]
  @scala.inline
  def tsFunctionType(
    typeParameters: TSTypeParameterDeclaration_,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSFunctionType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsFunctionType")(typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSFunctionType_]
  
  @scala.inline
  def tsImportEqualsDeclaration(id: Identifier_, moduleReference: TSEntityName): TSImportEqualsDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportEqualsDeclaration")(id.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[TSImportEqualsDeclaration_]
  @scala.inline
  def tsImportEqualsDeclaration(id: Identifier_, moduleReference: TSExternalModuleReference_): TSImportEqualsDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportEqualsDeclaration")(id.asInstanceOf[js.Any], moduleReference.asInstanceOf[js.Any])).asInstanceOf[TSImportEqualsDeclaration_]
  
  @scala.inline
  def tsImportType(argument: StringLiteral_): TSImportType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any]).asInstanceOf[TSImportType_]
  @scala.inline
  def tsImportType(argument: StringLiteral_, qualifier: Null, typeParameters: TSTypeParameterInstantiation_): TSImportType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSImportType_]
  @scala.inline
  def tsImportType(argument: StringLiteral_, qualifier: Unit, typeParameters: TSTypeParameterInstantiation_): TSImportType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSImportType_]
  @scala.inline
  def tsImportType(argument: StringLiteral_, qualifier: TSEntityName): TSImportType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any])).asInstanceOf[TSImportType_]
  @scala.inline
  def tsImportType(argument: StringLiteral_, qualifier: TSEntityName, typeParameters: TSTypeParameterInstantiation_): TSImportType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsImportType")(argument.asInstanceOf[js.Any], qualifier.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSImportType_]
  
  @scala.inline
  def tsIndexSignature(parameters: js.Array[Identifier_]): TSIndexSignature_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsIndexSignature")(parameters.asInstanceOf[js.Any]).asInstanceOf[TSIndexSignature_]
  @scala.inline
  def tsIndexSignature(parameters: js.Array[Identifier_], typeAnnotation: TSTypeAnnotation_): TSIndexSignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsIndexSignature")(parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSIndexSignature_]
  
  @scala.inline
  def tsIndexedAccessType(objectType: TSType, indexType: TSType): TSIndexedAccessType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsIndexedAccessType")(objectType.asInstanceOf[js.Any], indexType.asInstanceOf[js.Any])).asInstanceOf[TSIndexedAccessType_]
  
  @scala.inline
  def tsInferType(typeParameter: TSTypeParameter_): TSInferType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsInferType")(typeParameter.asInstanceOf[js.Any]).asInstanceOf[TSInferType_]
  
  @scala.inline
  def tsInterfaceBody(body: js.Array[TSTypeElement]): TSInterfaceBody_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceBody")(body.asInstanceOf[js.Any]).asInstanceOf[TSInterfaceBody_]
  
  @scala.inline
  def tsInterfaceDeclaration(
    id: Identifier_,
    typeParameters: Null,
    _extends: js.Array[TSExpressionWithTypeArguments_],
    body: TSInterfaceBody_
  ): TSInterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration_]
  @scala.inline
  def tsInterfaceDeclaration(id: Identifier_, typeParameters: Null, _extends: Null, body: TSInterfaceBody_): TSInterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration_]
  @scala.inline
  def tsInterfaceDeclaration(id: Identifier_, typeParameters: Null, _extends: Unit, body: TSInterfaceBody_): TSInterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration_]
  @scala.inline
  def tsInterfaceDeclaration(
    id: Identifier_,
    typeParameters: Unit,
    _extends: js.Array[TSExpressionWithTypeArguments_],
    body: TSInterfaceBody_
  ): TSInterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration_]
  @scala.inline
  def tsInterfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: Null, body: TSInterfaceBody_): TSInterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration_]
  @scala.inline
  def tsInterfaceDeclaration(id: Identifier_, typeParameters: Unit, _extends: Unit, body: TSInterfaceBody_): TSInterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration_]
  @scala.inline
  def tsInterfaceDeclaration(
    id: Identifier_,
    typeParameters: TSTypeParameterDeclaration_,
    _extends: js.Array[TSExpressionWithTypeArguments_],
    body: TSInterfaceBody_
  ): TSInterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration_]
  @scala.inline
  def tsInterfaceDeclaration(
    id: Identifier_,
    typeParameters: TSTypeParameterDeclaration_,
    _extends: Null,
    body: TSInterfaceBody_
  ): TSInterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration_]
  @scala.inline
  def tsInterfaceDeclaration(
    id: Identifier_,
    typeParameters: TSTypeParameterDeclaration_,
    _extends: Unit,
    body: TSInterfaceBody_
  ): TSInterfaceDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsInterfaceDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], _extends.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSInterfaceDeclaration_]
  
  @scala.inline
  def tsIntersectionType(types: js.Array[TSType]): TSIntersectionType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsIntersectionType")(types.asInstanceOf[js.Any]).asInstanceOf[TSIntersectionType_]
  
  @scala.inline
  def tsIntrinsicKeyword(): TSIntrinsicKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsIntrinsicKeyword")().asInstanceOf[TSIntrinsicKeyword_]
  
  @scala.inline
  def tsLiteralType(literal: BigIntLiteral_): TSLiteralType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType_]
  @scala.inline
  def tsLiteralType(literal: BooleanLiteral_): TSLiteralType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType_]
  @scala.inline
  def tsLiteralType(literal: NumericLiteral_): TSLiteralType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType_]
  @scala.inline
  def tsLiteralType(literal: StringLiteral_): TSLiteralType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsLiteralType")(literal.asInstanceOf[js.Any]).asInstanceOf[TSLiteralType_]
  
  @scala.inline
  def tsMappedType(typeParameter: TSTypeParameter_): TSMappedType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any]).asInstanceOf[TSMappedType_]
  @scala.inline
  def tsMappedType(typeParameter: TSTypeParameter_, typeAnnotation: Null, nameType: TSType): TSMappedType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any])).asInstanceOf[TSMappedType_]
  @scala.inline
  def tsMappedType(typeParameter: TSTypeParameter_, typeAnnotation: Unit, nameType: TSType): TSMappedType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any])).asInstanceOf[TSMappedType_]
  @scala.inline
  def tsMappedType(typeParameter: TSTypeParameter_, typeAnnotation: TSType): TSMappedType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMappedType_]
  @scala.inline
  def tsMappedType(typeParameter: TSTypeParameter_, typeAnnotation: TSType, nameType: TSType): TSMappedType_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMappedType")(typeParameter.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], nameType.asInstanceOf[js.Any])).asInstanceOf[TSMappedType_]
  
  @scala.inline
  def tsMethodSignature(key: Expression, typeParameters: Null, parameters: js.Array[Identifier_ | RestElement_]): TSMethodSignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature_]
  @scala.inline
  def tsMethodSignature(
    key: Expression,
    typeParameters: Null,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSMethodSignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature_]
  @scala.inline
  def tsMethodSignature(key: Expression, typeParameters: Unit, parameters: js.Array[Identifier_ | RestElement_]): TSMethodSignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature_]
  @scala.inline
  def tsMethodSignature(
    key: Expression,
    typeParameters: Unit,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSMethodSignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature_]
  @scala.inline
  def tsMethodSignature(
    key: Expression,
    typeParameters: TSTypeParameterDeclaration_,
    parameters: js.Array[Identifier_ | RestElement_]
  ): TSMethodSignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature_]
  @scala.inline
  def tsMethodSignature(
    key: Expression,
    typeParameters: TSTypeParameterDeclaration_,
    parameters: js.Array[Identifier_ | RestElement_],
    typeAnnotation: TSTypeAnnotation_
  ): TSMethodSignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsMethodSignature")(key.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], parameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSMethodSignature_]
  
  @scala.inline
  def tsModuleBlock(body: js.Array[Statement]): TSModuleBlock_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleBlock")(body.asInstanceOf[js.Any]).asInstanceOf[TSModuleBlock_]
  
  @scala.inline
  def tsModuleDeclaration(id: Identifier_, body: TSModuleBlock_): TSModuleDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration_]
  @scala.inline
  def tsModuleDeclaration(id: Identifier_, body: TSModuleDeclaration_): TSModuleDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration_]
  @scala.inline
  def tsModuleDeclaration(id: StringLiteral_, body: TSModuleBlock_): TSModuleDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration_]
  @scala.inline
  def tsModuleDeclaration(id: StringLiteral_, body: TSModuleDeclaration_): TSModuleDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsModuleDeclaration")(id.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[TSModuleDeclaration_]
  
  @scala.inline
  def tsNamedTupleMember(label: Identifier_, elementType: TSType): TSNamedTupleMember_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsNamedTupleMember")(label.asInstanceOf[js.Any], elementType.asInstanceOf[js.Any])).asInstanceOf[TSNamedTupleMember_]
  @scala.inline
  def tsNamedTupleMember(label: Identifier_, elementType: TSType, optional: Boolean): TSNamedTupleMember_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsNamedTupleMember")(label.asInstanceOf[js.Any], elementType.asInstanceOf[js.Any], optional.asInstanceOf[js.Any])).asInstanceOf[TSNamedTupleMember_]
  
  @scala.inline
  def tsNamespaceExportDeclaration(id: Identifier_): TSNamespaceExportDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNamespaceExportDeclaration")(id.asInstanceOf[js.Any]).asInstanceOf[TSNamespaceExportDeclaration_]
  
  @scala.inline
  def tsNeverKeyword(): TSNeverKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNeverKeyword")().asInstanceOf[TSNeverKeyword_]
  
  @scala.inline
  def tsNonNullExpression(expression: Expression): TSNonNullExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNonNullExpression")(expression.asInstanceOf[js.Any]).asInstanceOf[TSNonNullExpression_]
  
  @scala.inline
  def tsNullKeyword(): TSNullKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNullKeyword")().asInstanceOf[TSNullKeyword_]
  
  @scala.inline
  def tsNumberKeyword(): TSNumberKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsNumberKeyword")().asInstanceOf[TSNumberKeyword_]
  
  @scala.inline
  def tsObjectKeyword(): TSObjectKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsObjectKeyword")().asInstanceOf[TSObjectKeyword_]
  
  @scala.inline
  def tsOptionalType(typeAnnotation: TSType): TSOptionalType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsOptionalType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSOptionalType_]
  
  @scala.inline
  def tsParameterProperty(parameter: AssignmentPattern_): TSParameterProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsParameterProperty")(parameter.asInstanceOf[js.Any]).asInstanceOf[TSParameterProperty_]
  @scala.inline
  def tsParameterProperty(parameter: Identifier_): TSParameterProperty_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsParameterProperty")(parameter.asInstanceOf[js.Any]).asInstanceOf[TSParameterProperty_]
  
  @scala.inline
  def tsParenthesizedType(typeAnnotation: TSType): TSParenthesizedType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsParenthesizedType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSParenthesizedType_]
  
  @scala.inline
  def tsPropertySignature(key: Expression): TSPropertySignature_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any]).asInstanceOf[TSPropertySignature_]
  @scala.inline
  def tsPropertySignature(key: Expression, typeAnnotation: Null, initializer: Expression): TSPropertySignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature_]
  @scala.inline
  def tsPropertySignature(key: Expression, typeAnnotation: Unit, initializer: Expression): TSPropertySignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature_]
  @scala.inline
  def tsPropertySignature(key: Expression, typeAnnotation: TSTypeAnnotation_): TSPropertySignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature_]
  @scala.inline
  def tsPropertySignature(key: Expression, typeAnnotation: TSTypeAnnotation_, initializer: Expression): TSPropertySignature_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsPropertySignature")(key.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], initializer.asInstanceOf[js.Any])).asInstanceOf[TSPropertySignature_]
  
  @scala.inline
  def tsQualifiedName(left: TSEntityName, right: Identifier_): TSQualifiedName_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsQualifiedName")(left.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TSQualifiedName_]
  
  @scala.inline
  def tsRestType(typeAnnotation: TSType): TSRestType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsRestType")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSRestType_]
  
  @scala.inline
  def tsStringKeyword(): TSStringKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsStringKeyword")().asInstanceOf[TSStringKeyword_]
  
  @scala.inline
  def tsSymbolKeyword(): TSSymbolKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsSymbolKeyword")().asInstanceOf[TSSymbolKeyword_]
  
  @scala.inline
  def tsThisType(): TSThisType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsThisType")().asInstanceOf[TSThisType_]
  
  @scala.inline
  def tsTupleType(elementTypes: js.Array[TSType | TSNamedTupleMember_]): TSTupleType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTupleType")(elementTypes.asInstanceOf[js.Any]).asInstanceOf[TSTupleType_]
  
  @scala.inline
  def tsTypeAliasDeclaration(id: Identifier_, typeParameters: Null, typeAnnotation: TSType): TSTypeAliasDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration_]
  @scala.inline
  def tsTypeAliasDeclaration(id: Identifier_, typeParameters: Unit, typeAnnotation: TSType): TSTypeAliasDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration_]
  @scala.inline
  def tsTypeAliasDeclaration(id: Identifier_, typeParameters: TSTypeParameterDeclaration_, typeAnnotation: TSType): TSTypeAliasDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAliasDeclaration")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypeAliasDeclaration_]
  
  @scala.inline
  def tsTypeAnnotation(typeAnnotation: TSType): TSTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSTypeAnnotation_]
  
  @scala.inline
  def tsTypeAssertion(typeAnnotation: TSType, expression: Expression): TSTypeAssertion_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeAssertion")(typeAnnotation.asInstanceOf[js.Any], expression.asInstanceOf[js.Any])).asInstanceOf[TSTypeAssertion_]
  
  @scala.inline
  def tsTypeLiteral(members: js.Array[TSTypeElement]): TSTypeLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeLiteral")(members.asInstanceOf[js.Any]).asInstanceOf[TSTypeLiteral_]
  
  @scala.inline
  def tsTypeOperator(typeAnnotation: TSType): TSTypeOperator_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeOperator")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TSTypeOperator_]
  
  @scala.inline
  def tsTypeParameter(constraint: Null, _default: Null, name: String): TSTypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter_]
  @scala.inline
  def tsTypeParameter(constraint: Null, _default: Unit, name: String): TSTypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter_]
  @scala.inline
  def tsTypeParameter(constraint: Null, _default: TSType, name: String): TSTypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter_]
  @scala.inline
  def tsTypeParameter(constraint: Unit, _default: Null, name: String): TSTypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter_]
  @scala.inline
  def tsTypeParameter(constraint: Unit, _default: Unit, name: String): TSTypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter_]
  @scala.inline
  def tsTypeParameter(constraint: Unit, _default: TSType, name: String): TSTypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter_]
  @scala.inline
  def tsTypeParameter(constraint: TSType, _default: Null, name: String): TSTypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter_]
  @scala.inline
  def tsTypeParameter(constraint: TSType, _default: Unit, name: String): TSTypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter_]
  @scala.inline
  def tsTypeParameter(constraint: TSType, _default: TSType, name: String): TSTypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameter")(constraint.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], name.asInstanceOf[js.Any])).asInstanceOf[TSTypeParameter_]
  
  @scala.inline
  def tsTypeParameterDeclaration(params: js.Array[TSTypeParameter_]): TSTypeParameterDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameterDeclaration")(params.asInstanceOf[js.Any]).asInstanceOf[TSTypeParameterDeclaration_]
  
  @scala.inline
  def tsTypeParameterInstantiation(params: js.Array[TSType]): TSTypeParameterInstantiation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeParameterInstantiation")(params.asInstanceOf[js.Any]).asInstanceOf[TSTypeParameterInstantiation_]
  
  @scala.inline
  def tsTypePredicate(parameterName: Identifier_): TSTypePredicate_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any]).asInstanceOf[TSTypePredicate_]
  @scala.inline
  def tsTypePredicate(parameterName: Identifier_, typeAnnotation: Null, asserts: Boolean): TSTypePredicate_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate_]
  @scala.inline
  def tsTypePredicate(parameterName: Identifier_, typeAnnotation: Unit, asserts: Boolean): TSTypePredicate_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate_]
  @scala.inline
  def tsTypePredicate(parameterName: Identifier_, typeAnnotation: TSTypeAnnotation_): TSTypePredicate_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate_]
  @scala.inline
  def tsTypePredicate(parameterName: Identifier_, typeAnnotation: TSTypeAnnotation_, asserts: Boolean): TSTypePredicate_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate_]
  @scala.inline
  def tsTypePredicate(parameterName: TSThisType_): TSTypePredicate_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any]).asInstanceOf[TSTypePredicate_]
  @scala.inline
  def tsTypePredicate(parameterName: TSThisType_, typeAnnotation: Null, asserts: Boolean): TSTypePredicate_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate_]
  @scala.inline
  def tsTypePredicate(parameterName: TSThisType_, typeAnnotation: Unit, asserts: Boolean): TSTypePredicate_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate_]
  @scala.inline
  def tsTypePredicate(parameterName: TSThisType_, typeAnnotation: TSTypeAnnotation_): TSTypePredicate_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate_]
  @scala.inline
  def tsTypePredicate(parameterName: TSThisType_, typeAnnotation: TSTypeAnnotation_, asserts: Boolean): TSTypePredicate_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypePredicate")(parameterName.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any], asserts.asInstanceOf[js.Any])).asInstanceOf[TSTypePredicate_]
  
  @scala.inline
  def tsTypeQuery(exprName: TSEntityName): TSTypeQuery_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeQuery")(exprName.asInstanceOf[js.Any]).asInstanceOf[TSTypeQuery_]
  @scala.inline
  def tsTypeQuery(exprName: TSImportType_): TSTypeQuery_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeQuery")(exprName.asInstanceOf[js.Any]).asInstanceOf[TSTypeQuery_]
  
  @scala.inline
  def tsTypeReference(typeName: TSEntityName): TSTypeReference_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeReference")(typeName.asInstanceOf[js.Any]).asInstanceOf[TSTypeReference_]
  @scala.inline
  def tsTypeReference(typeName: TSEntityName, typeParameters: TSTypeParameterInstantiation_): TSTypeReference_ = (^.asInstanceOf[js.Dynamic].applyDynamic("tsTypeReference")(typeName.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any])).asInstanceOf[TSTypeReference_]
  
  @scala.inline
  def tsUndefinedKeyword(): TSUndefinedKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsUndefinedKeyword")().asInstanceOf[TSUndefinedKeyword_]
  
  @scala.inline
  def tsUnionType(types: js.Array[TSType]): TSUnionType_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsUnionType")(types.asInstanceOf[js.Any]).asInstanceOf[TSUnionType_]
  
  @scala.inline
  def tsUnknownKeyword(): TSUnknownKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsUnknownKeyword")().asInstanceOf[TSUnknownKeyword_]
  
  @scala.inline
  def tsVoidKeyword(): TSVoidKeyword_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tsVoidKeyword")().asInstanceOf[TSVoidKeyword_]
  
  @scala.inline
  def tupleExpression(): TupleExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tupleExpression")().asInstanceOf[TupleExpression_]
  @scala.inline
  def tupleExpression(elements: js.Array[Expression | SpreadElement_]): TupleExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tupleExpression")(elements.asInstanceOf[js.Any]).asInstanceOf[TupleExpression_]
  
  @scala.inline
  def tupleTypeAnnotation(types: js.Array[FlowType]): TupleTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("tupleTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[TupleTypeAnnotation_]
  
  @scala.inline
  def typeAlias(id: Identifier_, typeParameters: Null, right: FlowType): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
  @scala.inline
  def typeAlias(id: Identifier_, typeParameters: Unit, right: FlowType): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
  @scala.inline
  def typeAlias(id: Identifier_, typeParameters: TypeParameterDeclaration_, right: FlowType): TypeAlias_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeAlias")(id.asInstanceOf[js.Any], typeParameters.asInstanceOf[js.Any], right.asInstanceOf[js.Any])).asInstanceOf[TypeAlias_]
  
  @scala.inline
  def typeAnnotation(typeAnnotation: FlowType): TypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeAnnotation")(typeAnnotation.asInstanceOf[js.Any]).asInstanceOf[TypeAnnotation_]
  
  @scala.inline
  def typeCastExpression(expression: Expression, typeAnnotation: TypeAnnotation_): TypeCastExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeCastExpression")(expression.asInstanceOf[js.Any], typeAnnotation.asInstanceOf[js.Any])).asInstanceOf[TypeCastExpression_]
  
  @scala.inline
  def typeParameter(): TypeParameter_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")().asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: Null, _default: Null, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: Null, _default: Unit, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: Null, _default: FlowType): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: Null, _default: FlowType, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: Unit, _default: Null, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: Unit, _default: Unit, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: Unit, _default: FlowType): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: Unit, _default: FlowType, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: TypeAnnotation_): TypeParameter_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any]).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: TypeAnnotation_, _default: Null, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: TypeAnnotation_, _default: Unit, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: TypeAnnotation_, _default: FlowType): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  @scala.inline
  def typeParameter(bound: TypeAnnotation_, _default: FlowType, variance: Variance_): TypeParameter_ = (^.asInstanceOf[js.Dynamic].applyDynamic("typeParameter")(bound.asInstanceOf[js.Any], _default.asInstanceOf[js.Any], variance.asInstanceOf[js.Any])).asInstanceOf[TypeParameter_]
  
  @scala.inline
  def typeParameterDeclaration(params: js.Array[TypeParameter_]): TypeParameterDeclaration_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameterDeclaration")(params.asInstanceOf[js.Any]).asInstanceOf[TypeParameterDeclaration_]
  
  @scala.inline
  def typeParameterInstantiation(params: js.Array[FlowType]): TypeParameterInstantiation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeParameterInstantiation")(params.asInstanceOf[js.Any]).asInstanceOf[TypeParameterInstantiation_]
  
  @scala.inline
  def typeofTypeAnnotation(argument: FlowType): TypeofTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("typeofTypeAnnotation")(argument.asInstanceOf[js.Any]).asInstanceOf[TypeofTypeAnnotation_]
  
  @scala.inline
  def unaryExpression(operator: Exclamationmark, argument: Expression): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression(operator: Exclamationmark, argument: Expression, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression(operator: Plussign, argument: Expression): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression(operator: Plussign, argument: Expression, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression(operator: Tilde, argument: Expression): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression(operator: Tilde, argument: Expression, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression(operator: `-_`, argument: Expression): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression(operator: `-_`, argument: Expression, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  
  @scala.inline
  def unaryExpression_delete(operator: delete, argument: Expression): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression_delete(operator: delete, argument: Expression, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  
  @scala.inline
  def unaryExpression_throw(operator: `throw`, argument: Expression): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression_throw(operator: `throw`, argument: Expression, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  
  @scala.inline
  def unaryExpression_typeof(operator: typeof, argument: Expression): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression_typeof(operator: typeof, argument: Expression, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  
  @scala.inline
  def unaryExpression_void(operator: void, argument: Expression): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  @scala.inline
  def unaryExpression_void(operator: void, argument: Expression, prefix: Boolean): UnaryExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("unaryExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UnaryExpression_]
  
  @scala.inline
  def unionTypeAnnotation(types: js.Array[FlowType]): UnionTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("unionTypeAnnotation")(types.asInstanceOf[js.Any]).asInstanceOf[UnionTypeAnnotation_]
  
  @scala.inline
  def updateExpression(operator: PlussignPlussign, argument: Expression): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
  @scala.inline
  def updateExpression(operator: PlussignPlussign, argument: Expression, prefix: Boolean): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
  @scala.inline
  def updateExpression(operator: `--`, argument: Expression): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
  @scala.inline
  def updateExpression(operator: `--`, argument: Expression, prefix: Boolean): UpdateExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("updateExpression")(operator.asInstanceOf[js.Any], argument.asInstanceOf[js.Any], prefix.asInstanceOf[js.Any])).asInstanceOf[UpdateExpression_]
  
  @scala.inline
  def v8IntrinsicIdentifier(name: String): V8IntrinsicIdentifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("v8IntrinsicIdentifier")(name.asInstanceOf[js.Any]).asInstanceOf[V8IntrinsicIdentifier_]
  
  @scala.inline
  def validate(n: typings.babelTypes.mod.Node, key: String, value: js.Any): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("validate")(n.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def validate[T /* <: typings.babelTypes.mod.Node */, K /* <: /* keyof T */ String */](
    n: Null,
    key: K,
    value: /* import warning: importer.ImportType#apply Failed type conversion: T[K] */ js.Any
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("validate")(n.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def validate[T /* <: typings.babelTypes.mod.Node */, K /* <: /* keyof T */ String */](
    n: Unit,
    key: K,
    value: /* import warning: importer.ImportType#apply Failed type conversion: T[K] */ js.Any
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("validate")(n.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[Unit]
  @scala.inline
  def validate[T /* <: typings.babelTypes.mod.Node */, K /* <: /* keyof T */ String */](
    n: typings.babelTypes.mod.Node,
    key: K,
    value: /* import warning: importer.ImportType#apply Failed type conversion: T[K] */ js.Any
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("validate")(n.asInstanceOf[js.Any], key.asInstanceOf[js.Any], value.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @scala.inline
  def valueToNode(): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")().asInstanceOf[Expression]
  @scala.inline
  def valueToNode(value: String): StringLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[StringLiteral_]
  @scala.inline
  def valueToNode(value: js.Array[js.UndefOr[Boolean | Null | String | Double | RegExp | js.Object]]): ArrayExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[ArrayExpression_]
  @scala.inline
  def valueToNode(value: js.Object): ObjectExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[ObjectExpression_]
  @scala.inline
  def valueToNode(value: Boolean): BooleanLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[BooleanLiteral_]
  @scala.inline
  def valueToNode(value: Double): NumericLiteral_ | BinaryExpression_ | UnaryExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[NumericLiteral_ | BinaryExpression_ | UnaryExpression_]
  @scala.inline
  def valueToNode(value: Null): NullLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[NullLiteral_]
  @scala.inline
  def valueToNode(value: Unit): Identifier_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[Identifier_]
  @scala.inline
  def valueToNode(value: RegExp): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[Expression]
  
  @scala.inline
  def valueToNode_Expression(value: String): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[Expression]
  @scala.inline
  def valueToNode_Expression(value: js.Object): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[Expression]
  @scala.inline
  def valueToNode_Expression(value: Boolean): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[Expression]
  @scala.inline
  def valueToNode_Expression(value: Double): Expression = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[Expression]
  
  @scala.inline
  def valueToNode_RegExpLiteral_(value: RegExp): RegExpLiteral_ = ^.asInstanceOf[js.Dynamic].applyDynamic("valueToNode")(value.asInstanceOf[js.Any]).asInstanceOf[RegExpLiteral_]
  
  @scala.inline
  def variableDeclaration_const(kind: const, declarations: js.Array[VariableDeclarator_]): VariableDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclaration")(kind.asInstanceOf[js.Any], declarations.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration_]
  
  @scala.inline
  def variableDeclaration_let(kind: let, declarations: js.Array[VariableDeclarator_]): VariableDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclaration")(kind.asInstanceOf[js.Any], declarations.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration_]
  
  @scala.inline
  def variableDeclaration_var(kind: `var`, declarations: js.Array[VariableDeclarator_]): VariableDeclaration_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclaration")(kind.asInstanceOf[js.Any], declarations.asInstanceOf[js.Any])).asInstanceOf[VariableDeclaration_]
  
  @scala.inline
  def variableDeclarator(id: LVal): VariableDeclarator_ = ^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclarator")(id.asInstanceOf[js.Any]).asInstanceOf[VariableDeclarator_]
  @scala.inline
  def variableDeclarator(id: LVal, init: Expression): VariableDeclarator_ = (^.asInstanceOf[js.Dynamic].applyDynamic("variableDeclarator")(id.asInstanceOf[js.Any], init.asInstanceOf[js.Any])).asInstanceOf[VariableDeclarator_]
  
  @scala.inline
  def variance_minus(kind: minus): Variance_ = ^.asInstanceOf[js.Dynamic].applyDynamic("variance")(kind.asInstanceOf[js.Any]).asInstanceOf[Variance_]
  
  @scala.inline
  def variance_plus(kind: plus): Variance_ = ^.asInstanceOf[js.Dynamic].applyDynamic("variance")(kind.asInstanceOf[js.Any]).asInstanceOf[Variance_]
  
  @scala.inline
  def voidTypeAnnotation(): VoidTypeAnnotation_ = ^.asInstanceOf[js.Dynamic].applyDynamic("voidTypeAnnotation")().asInstanceOf[VoidTypeAnnotation_]
  
  @scala.inline
  def whileStatement(test: Expression, body: Statement): WhileStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("whileStatement")(test.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WhileStatement_]
  
  @scala.inline
  def withStatement(`object`: Expression, body: Statement): WithStatement_ = (^.asInstanceOf[js.Dynamic].applyDynamic("withStatement")(`object`.asInstanceOf[js.Any], body.asInstanceOf[js.Any])).asInstanceOf[WithStatement_]
  
  @scala.inline
  def yieldExpression(): YieldExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")().asInstanceOf[YieldExpression_]
  @scala.inline
  def yieldExpression(argument: Null, delegate: Boolean): YieldExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any], delegate.asInstanceOf[js.Any])).asInstanceOf[YieldExpression_]
  @scala.inline
  def yieldExpression(argument: Unit, delegate: Boolean): YieldExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any], delegate.asInstanceOf[js.Any])).asInstanceOf[YieldExpression_]
  @scala.inline
  def yieldExpression(argument: Expression): YieldExpression_ = ^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any]).asInstanceOf[YieldExpression_]
  @scala.inline
  def yieldExpression(argument: Expression, delegate: Boolean): YieldExpression_ = (^.asInstanceOf[js.Dynamic].applyDynamic("yieldExpression")(argument.asInstanceOf[js.Any], delegate.asInstanceOf[js.Any])).asInstanceOf[YieldExpression_]
}
