package typings.blueprintjsCore

import typings.blueprintjsCore.libEsmHooksHotkeysHotkeyConfigMod.HotkeyConfig
import typings.blueprintjsCore.libEsmHooksHotkeysUseHotkeysMod.UseHotkeysOptions
import typings.react.mod.KeyboardEvent
import typings.react.mod.KeyboardEventHandler
import typings.react.mod.global.JSX.Element
import typings.std.HTMLElement
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object libEsmComponentsHotkeysHotkeysTarget2Mod {
  
  @JSImport("@blueprintjs/core/lib/esm/components/hotkeys/hotkeysTarget2", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  inline def HotkeysTarget2(param0: HotkeysTarget2Props): Element = ^.asInstanceOf[js.Dynamic].applyDynamic("HotkeysTarget2")(param0.asInstanceOf[js.Any]).asInstanceOf[Element]
  
  trait HotkeysTarget2Props extends StObject {
    
    /**
      * Render prop which receives the same callback handlers generated by the `useHotkeys` hook.
      * If your hotkey definitions are all global, you may supply an element instead.
      */
    var children: Element | (js.Function1[/* props */ HotkeysTarget2RenderProps, Element])
    
    /** Hotkey definitions. */
    var hotkeys: js.Array[HotkeyConfig]
    
    /** Hook customization options. */
    var options: js.UndefOr[UseHotkeysOptions] = js.undefined
  }
  object HotkeysTarget2Props {
    
    inline def apply(
      children: Element | (js.Function1[/* props */ HotkeysTarget2RenderProps, Element]),
      hotkeys: js.Array[HotkeyConfig]
    ): HotkeysTarget2Props = {
      val __obj = js.Dynamic.literal(children = children.asInstanceOf[js.Any], hotkeys = hotkeys.asInstanceOf[js.Any])
      __obj.asInstanceOf[HotkeysTarget2Props]
    }
    
    extension [Self <: HotkeysTarget2Props](x: Self) {
      
      inline def setChildren(value: Element | (js.Function1[/* props */ HotkeysTarget2RenderProps, Element])): Self = StObject.set(x, "children", value.asInstanceOf[js.Any])
      
      inline def setChildrenFunction1(value: /* props */ HotkeysTarget2RenderProps => Element): Self = StObject.set(x, "children", js.Any.fromFunction1(value))
      
      inline def setHotkeys(value: js.Array[HotkeyConfig]): Self = StObject.set(x, "hotkeys", value.asInstanceOf[js.Any])
      
      inline def setHotkeysVarargs(value: HotkeyConfig*): Self = StObject.set(x, "hotkeys", js.Array(value*))
      
      inline def setOptions(value: UseHotkeysOptions): Self = StObject.set(x, "options", value.asInstanceOf[js.Any])
      
      inline def setOptionsUndefined: Self = StObject.set(x, "options", js.undefined)
    }
  }
  
  trait HotkeysTarget2RenderProps extends StObject {
    
    var handleKeyDown: KeyboardEventHandler[HTMLElement]
    
    var handleKeyUp: KeyboardEventHandler[HTMLElement]
  }
  object HotkeysTarget2RenderProps {
    
    inline def apply(handleKeyDown: KeyboardEvent[HTMLElement] => Unit, handleKeyUp: KeyboardEvent[HTMLElement] => Unit): HotkeysTarget2RenderProps = {
      val __obj = js.Dynamic.literal(handleKeyDown = js.Any.fromFunction1(handleKeyDown), handleKeyUp = js.Any.fromFunction1(handleKeyUp))
      __obj.asInstanceOf[HotkeysTarget2RenderProps]
    }
    
    extension [Self <: HotkeysTarget2RenderProps](x: Self) {
      
      inline def setHandleKeyDown(value: KeyboardEvent[HTMLElement] => Unit): Self = StObject.set(x, "handleKeyDown", js.Any.fromFunction1(value))
      
      inline def setHandleKeyUp(value: KeyboardEvent[HTMLElement] => Unit): Self = StObject.set(x, "handleKeyUp", js.Any.fromFunction1(value))
    }
  }
}
