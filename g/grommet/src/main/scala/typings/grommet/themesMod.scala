package typings.grommet

import typings.grommet.anon.DeepReadonlyThemeType
import typings.grommet.themesBaseMod.ThemeType
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object themesMod {
  
  @JSImport("grommet/themes", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  /* Inlined grommet.grommet/utils.DeepReadonly<grommet.grommet/themes/base.ThemeType> */
  object base {
    
    @JSImport("grommet/themes", "base.accordion")
    @js.native
    val accordion: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  panel :{  border :grommet.grommet/utils.BorderType | undefined} | undefined,   border :grommet.grommet/utils.BorderType | undefined,   heading :{  level :string | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   heading :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   icons :{  collapse :any | undefined,   expand :any | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  panel :{  border :grommet.grommet/utils.BorderType | undefined} | undefined,   border :grommet.grommet/utils.BorderType | undefined,   heading :{  level :string | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   heading :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   icons :{  collapse :any | undefined,   expand :any | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined> : {  panel :{  border :grommet.grommet/utils.BorderType | undefined} | undefined,   border :grommet.grommet/utils.BorderType | undefined,   heading :{  level :string | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   heading :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   icons :{  collapse :any | undefined,   expand :any | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.anchor")
    @js.native
    val anchor: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Anchor.AnchorExtendedProps>>> | undefined,   fontWeight :number | undefined,   gap :grommet.grommet/utils.GapType | undefined,   hover :{  extend :grommet.grommet/themes/base.ExtendType<grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Anchor.AnchorExtendedProps>>> | undefined,   textDecoration :string | undefined} | undefined,   textDecoration :string | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Anchor.AnchorExtendedProps>>> | undefined,   fontWeight :number | undefined,   gap :grommet.grommet/utils.GapType | undefined,   hover :{  extend :grommet.grommet/themes/base.ExtendType<grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Anchor.AnchorExtendedProps>>> | undefined,   textDecoration :string | undefined} | undefined,   textDecoration :string | undefined} | undefined> : {  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Anchor.AnchorExtendedProps>>> | undefined,   fontWeight :number | undefined,   gap :grommet.grommet/utils.GapType | undefined,   hover :{  extend :grommet.grommet/themes/base.ExtendType<grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Anchor.AnchorExtendedProps>>> | undefined,   textDecoration :string | undefined} | undefined,   textDecoration :string | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.avatar")
    @js.native
    val avatar: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  size :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined, [x: string] : string | undefined} | undefined,   text :{  size :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined, [x: string] : string | undefined} | undefined,   fontWeight :number | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  size :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined, [x: string] : string | undefined} | undefined,   text :{  size :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined, [x: string] : string | undefined} | undefined,   fontWeight :number | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined> : {  size :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined, [x: string] : string | undefined} | undefined,   text :{  size :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined, [x: string] : string | undefined} | undefined,   fontWeight :number | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.box")
    @js.native
    val box: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   responsiveBreakpoint :string | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   responsiveBreakpoint :string | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   responsiveBreakpoint :string | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.button")
    @js.native
    val button: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: grommet.grommet/themes/base.ButtonType | undefined extends object ? grommet.grommet/utils.DeepReadonly<grommet.grommet/themes/base.ButtonType | undefined> : grommet.grommet/themes/base.ButtonType | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.calendar")
    @js.native
    val calendar: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  day :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   small :{  fontSize :string | undefined,   lineHeight :number | undefined,   daySize :string | undefined,   slideDuration :string | undefined} | undefined,   medium :{  fontSize :string | undefined,   lineHeight :number | undefined,   daySize :string | undefined,   slideDuration :string | undefined} | undefined,   large :{  fontSize :string | undefined,   lineHeight :number | undefined,   daySize :string | undefined,   slideDuration :string | undefined} | undefined,   heading :{  level :string | undefined} | undefined,   icons :{  previous :any | undefined,   next :any | undefined,   small :{  previous :any | undefined,   next :any | undefined} | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  day :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   small :{  fontSize :string | undefined,   lineHeight :number | undefined,   daySize :string | undefined,   slideDuration :string | undefined} | undefined,   medium :{  fontSize :string | undefined,   lineHeight :number | undefined,   daySize :string | undefined,   slideDuration :string | undefined} | undefined,   large :{  fontSize :string | undefined,   lineHeight :number | undefined,   daySize :string | undefined,   slideDuration :string | undefined} | undefined,   heading :{  level :string | undefined} | undefined,   icons :{  previous :any | undefined,   next :any | undefined,   small :{  previous :any | undefined,   next :any | undefined} | undefined} | undefined} | undefined> : {  day :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   small :{  fontSize :string | undefined,   lineHeight :number | undefined,   daySize :string | undefined,   slideDuration :string | undefined} | undefined,   medium :{  fontSize :string | undefined,   lineHeight :number | undefined,   daySize :string | undefined,   slideDuration :string | undefined} | undefined,   large :{  fontSize :string | undefined,   lineHeight :number | undefined,   daySize :string | undefined,   slideDuration :string | undefined} | undefined,   heading :{  level :string | undefined} | undefined,   icons :{  previous :any | undefined,   next :any | undefined,   small :{  previous :any | undefined,   next :any | undefined} | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.card")
    @js.native
    val card: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  container :grommet.grommet/components/Box.BoxProps | {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   hover :{  container :{  elevation :grommet.grommet/utils.ElevationType | undefined} | undefined} | undefined,   header :grommet.grommet/components/Box.BoxProps | undefined,   body :grommet.grommet/components/Box.BoxProps | undefined,   footer :grommet.grommet/components/Box.BoxProps | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  container :grommet.grommet/components/Box.BoxProps | {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   hover :{  container :{  elevation :grommet.grommet/utils.ElevationType | undefined} | undefined} | undefined,   header :grommet.grommet/components/Box.BoxProps | undefined,   body :grommet.grommet/components/Box.BoxProps | undefined,   footer :grommet.grommet/components/Box.BoxProps | undefined} | undefined> : {  container :grommet.grommet/components/Box.BoxProps | {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   hover :{  container :{  elevation :grommet.grommet/utils.ElevationType | undefined} | undefined} | undefined,   header :grommet.grommet/components/Box.BoxProps | undefined,   body :grommet.grommet/components/Box.BoxProps | undefined,   footer :grommet.grommet/components/Box.BoxProps | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.carousel")
    @js.native
    val carousel: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  animation :{  duration :number | undefined} | undefined,   disabled :{  icons :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   icons :{  color :grommet.grommet/utils.ColorType | undefined,   current :any | undefined,   next :any | undefined,   previous :any | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  animation :{  duration :number | undefined} | undefined,   disabled :{  icons :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   icons :{  color :grommet.grommet/utils.ColorType | undefined,   current :any | undefined,   next :any | undefined,   previous :any | undefined} | undefined} | undefined> : {  animation :{  duration :number | undefined} | undefined,   disabled :{  icons :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   icons :{  color :grommet.grommet/utils.ColorType | undefined,   current :any | undefined,   next :any | undefined,   previous :any | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.chart")
    @js.native
    val chart: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined> : {  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.checkBox")
    @js.native
    val checkBox: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  border :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined} | undefined,   label :{  align :grommet.grommet/utils.AlignContentType | undefined} | undefined,   check :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   radius :string | undefined,   thickness :string | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   gap :grommet.grommet/utils.GapType | undefined,   hover :{  border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   background :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   icon :{  size :string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   icons :{  checked :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   indeterminate :any | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   size :string | undefined,   toggle :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   radius :string | undefined,   size :string | undefined,   knob :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  border :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined} | undefined,   label :{  align :grommet.grommet/utils.AlignContentType | undefined} | undefined,   check :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   radius :string | undefined,   thickness :string | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   gap :grommet.grommet/utils.GapType | undefined,   hover :{  border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   background :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   icon :{  size :string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   icons :{  checked :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   indeterminate :any | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   size :string | undefined,   toggle :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   radius :string | undefined,   size :string | undefined,   knob :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined} | undefined> : {  border :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined} | undefined,   label :{  align :grommet.grommet/utils.AlignContentType | undefined} | undefined,   check :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   radius :string | undefined,   thickness :string | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   gap :grommet.grommet/utils.GapType | undefined,   hover :{  border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   background :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   icon :{  size :string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   icons :{  checked :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   indeterminate :any | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   size :string | undefined,   toggle :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   radius :string | undefined,   size :string | undefined,   knob :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.checkBoxGroup")
    @js.native
    val checkBoxGroup: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  container :grommet.grommet/components/Box.BoxProps | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  container :grommet.grommet/components/Box.BoxProps | undefined} | undefined> : {  container :grommet.grommet/components/Box.BoxProps | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.clock")
    @js.native
    val clock: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  analog :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   hour :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined,   size :string | undefined,   shape :string | undefined} | undefined,   minute :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined,   size :string | undefined,   shape :string | undefined} | undefined,   second :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined,   size :string | undefined,   shape :string | undefined} | undefined,   size :{  small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined,   huge :string | undefined} | undefined} | undefined,   digital :{  text :{[ key in grommet.grommet/themes/base.DigitalTexts ]: {  size :string | undefined,   height :number | undefined}} | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  analog :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   hour :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined,   size :string | undefined,   shape :string | undefined} | undefined,   minute :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined,   size :string | undefined,   shape :string | undefined} | undefined,   second :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined,   size :string | undefined,   shape :string | undefined} | undefined,   size :{  small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined,   huge :string | undefined} | undefined} | undefined,   digital :{  text :{[ key in grommet.grommet/themes/base.DigitalTexts ]: {  size :string | undefined,   height :number | undefined}} | undefined} | undefined} | undefined> : {  analog :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   hour :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined,   size :string | undefined,   shape :string | undefined} | undefined,   minute :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined,   size :string | undefined,   shape :string | undefined} | undefined,   second :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined,   size :string | undefined,   shape :string | undefined} | undefined,   size :{  small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined,   huge :string | undefined} | undefined} | undefined,   digital :{  text :{[ key in grommet.grommet/themes/base.DigitalTexts ]: {  size :string | undefined,   height :number | undefined}} | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.collapsible")
    @js.native
    val collapsible: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  minSpeed :number | undefined,   baseline :number | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  minSpeed :number | undefined,   baseline :number | undefined} | undefined> : {  minSpeed :number | undefined,   baseline :number | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.dataTable")
    @js.native
    val dataTable: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  body :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   header :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   font :{  weight :string | undefined,   size :string | undefined} | undefined,   gap :grommet.grommet/utils.GapType | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   units :grommet.grommet/components/Text.TextProps | undefined} | undefined,   groupHeader :{  border :{  side :string | undefined,   size :string | undefined} | undefined,   fill :string | undefined,   pad :grommet.grommet/utils.PadType | undefined,   background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   groupEnd :{  border :{  side :string | undefined,   size :string | undefined} | undefined} | undefined,   icons :{  ascending :any | undefined,   contract :any | undefined,   descending :any | undefined,   expand :any | undefined,   sortable :any | undefined} | undefined,   pinned :{  body :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   header :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   footer :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined,   resize :{  border :{  side :string | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   hover :{  border :{  color :grommet.grommet/utils.ColorType | undefined,   side :string,   size :string} | undefined} | undefined} | undefined,   primary :{  weight :string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  body :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   header :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   font :{  weight :string | undefined,   size :string | undefined} | undefined,   gap :grommet.grommet/utils.GapType | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   units :grommet.grommet/components/Text.TextProps | undefined} | undefined,   groupHeader :{  border :{  side :string | undefined,   size :string | undefined} | undefined,   fill :string | undefined,   pad :grommet.grommet/utils.PadType | undefined,   background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   groupEnd :{  border :{  side :string | undefined,   size :string | undefined} | undefined} | undefined,   icons :{  ascending :any | undefined,   contract :any | undefined,   descending :any | undefined,   expand :any | undefined,   sortable :any | undefined} | undefined,   pinned :{  body :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   header :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   footer :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined,   resize :{  border :{  side :string | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   hover :{  border :{  color :grommet.grommet/utils.ColorType | undefined,   side :string,   size :string} | undefined} | undefined} | undefined,   primary :{  weight :string | undefined} | undefined} | undefined> : {  body :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   header :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   font :{  weight :string | undefined,   size :string | undefined} | undefined,   gap :grommet.grommet/utils.GapType | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   units :grommet.grommet/components/Text.TextProps | undefined} | undefined,   groupHeader :{  border :{  side :string | undefined,   size :string | undefined} | undefined,   fill :string | undefined,   pad :grommet.grommet/utils.PadType | undefined,   background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   groupEnd :{  border :{  side :string | undefined,   size :string | undefined} | undefined} | undefined,   icons :{  ascending :any | undefined,   contract :any | undefined,   descending :any | undefined,   expand :any | undefined,   sortable :any | undefined} | undefined,   pinned :{  body :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   header :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   footer :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined,   resize :{  border :{  side :string | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   hover :{  border :{  color :grommet.grommet/utils.ColorType | undefined,   side :string,   size :string} | undefined} | undefined} | undefined,   primary :{  weight :string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.dateInput")
    @js.native
    val dateInput: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  container :{  round :grommet.grommet/utils.RoundType | undefined} | undefined,   icon :{  size :string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  container :{  round :grommet.grommet/utils.RoundType | undefined} | undefined,   icon :{  size :string | undefined} | undefined} | undefined> : {  container :{  round :grommet.grommet/utils.RoundType | undefined} | undefined,   icon :{  size :string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.diagram")
    @js.native
    val diagram: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   line :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   line :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   line :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.drop")
    @js.native
    val drop: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   maxHeight :string | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   maxHeight :string | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   maxHeight :string | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.fileInput")
    @js.native
    val fileInput: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   dragOver :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   icons :{  remove :any | undefined} | undefined,   label :/ * Inlined grommet.grommet/components/Text.TextProps & {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} * /
    {  a11yTitle :grommet.grommet/utils.A11yTitleType | undefined,   alignSelf :grommet.grommet/utils.AlignSelfType | undefined,   as :grommet.grommet/utils.PolymorphicType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   gridArea :grommet.grommet/utils.GridAreaType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   size :'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | string | undefined,   tag :grommet.grommet/utils.PolymorphicType | undefined,   textAlign :grommet.grommet/utils.TextAlignType | undefined,   truncate :boolean | 'tip' | undefined,   weight :'normal' | 'bold' | 'bolder' | 'lighter' | number | undefined,   wordBreak :'normal' | 'break-all' | 'keep-all' | 'break-word' | undefined,   tip :grommet.grommet/components/Tip.TipProps | string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   message :/ * Inlined grommet.grommet/components/Text.TextProps & {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} * /
    {  a11yTitle :grommet.grommet/utils.A11yTitleType | undefined,   alignSelf :grommet.grommet/utils.AlignSelfType | undefined,   as :grommet.grommet/utils.PolymorphicType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   gridArea :grommet.grommet/utils.GridAreaType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   size :'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | string | undefined,   tag :grommet.grommet/utils.PolymorphicType | undefined,   textAlign :grommet.grommet/utils.TextAlignType | undefined,   truncate :boolean | 'tip' | undefined,   weight :'normal' | 'bold' | 'bolder' | 'lighter' | number | undefined,   wordBreak :'normal' | 'break-all' | 'keep-all' | 'break-word' | undefined,   tip :grommet.grommet/components/Tip.TipProps | string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   round :grommet.grommet/utils.RoundType | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   dragOver :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   icons :{  remove :any | undefined} | undefined,   label :/ * Inlined grommet.grommet/components/Text.TextProps & {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} * /
    {  a11yTitle :grommet.grommet/utils.A11yTitleType | undefined,   alignSelf :grommet.grommet/utils.AlignSelfType | undefined,   as :grommet.grommet/utils.PolymorphicType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   gridArea :grommet.grommet/utils.GridAreaType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   size :'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | string | undefined,   tag :grommet.grommet/utils.PolymorphicType | undefined,   textAlign :grommet.grommet/utils.TextAlignType | undefined,   truncate :boolean | 'tip' | undefined,   weight :'normal' | 'bold' | 'bolder' | 'lighter' | number | undefined,   wordBreak :'normal' | 'break-all' | 'keep-all' | 'break-word' | undefined,   tip :grommet.grommet/components/Tip.TipProps | string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   message :/ * Inlined grommet.grommet/components/Text.TextProps & {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} * /
    {  a11yTitle :grommet.grommet/utils.A11yTitleType | undefined,   alignSelf :grommet.grommet/utils.AlignSelfType | undefined,   as :grommet.grommet/utils.PolymorphicType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   gridArea :grommet.grommet/utils.GridAreaType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   size :'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | string | undefined,   tag :grommet.grommet/utils.PolymorphicType | undefined,   textAlign :grommet.grommet/utils.TextAlignType | undefined,   truncate :boolean | 'tip' | undefined,   weight :'normal' | 'bold' | 'bolder' | 'lighter' | number | undefined,   wordBreak :'normal' | 'break-all' | 'keep-all' | 'break-word' | undefined,   tip :grommet.grommet/components/Tip.TipProps | string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   round :grommet.grommet/utils.RoundType | undefined} | undefined> : {  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   dragOver :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   icons :{  remove :any | undefined} | undefined,   label :/ * Inlined grommet.grommet/components/Text.TextProps & {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} * /
    {  a11yTitle :grommet.grommet/utils.A11yTitleType | undefined,   alignSelf :grommet.grommet/utils.AlignSelfType | undefined,   as :grommet.grommet/utils.PolymorphicType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   gridArea :grommet.grommet/utils.GridAreaType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   size :'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | string | undefined,   tag :grommet.grommet/utils.PolymorphicType | undefined,   textAlign :grommet.grommet/utils.TextAlignType | undefined,   truncate :boolean | 'tip' | undefined,   weight :'normal' | 'bold' | 'bolder' | 'lighter' | number | undefined,   wordBreak :'normal' | 'break-all' | 'keep-all' | 'break-word' | undefined,   tip :grommet.grommet/components/Tip.TipProps | string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   message :/ * Inlined grommet.grommet/components/Text.TextProps & {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} * /
    {  a11yTitle :grommet.grommet/utils.A11yTitleType | undefined,   alignSelf :grommet.grommet/utils.AlignSelfType | undefined,   as :grommet.grommet/utils.PolymorphicType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   gridArea :grommet.grommet/utils.GridAreaType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   size :'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl' | string | undefined,   tag :grommet.grommet/utils.PolymorphicType | undefined,   textAlign :grommet.grommet/utils.TextAlignType | undefined,   truncate :boolean | 'tip' | undefined,   weight :'normal' | 'bold' | 'bolder' | 'lighter' | number | undefined,   wordBreak :'normal' | 'break-all' | 'keep-all' | 'break-word' | undefined,   tip :grommet.grommet/components/Tip.TipProps | string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   round :grommet.grommet/utils.RoundType | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.formField")
    @js.native
    val formField: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  border :grommet.grommet/utils.BorderType & {  error :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   content :{  margin :grommet.grommet/utils.MarginType | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   checkBox :{  pad :grommet.grommet/utils.PadType | undefined} | undefined,   disabled :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   label :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   focus :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   error :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType & {  error :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   icon :any | undefined} | undefined,   help :{  color :grommet.grommet/utils.ColorType | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   info :{  color :grommet.grommet/utils.ColorType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   icon :any | undefined} | undefined,   label :grommet.grommet/themes/base.FormFieldLabelType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   round :grommet.grommet/utils.RoundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  border :grommet.grommet/utils.BorderType & {  error :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   content :{  margin :grommet.grommet/utils.MarginType | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   checkBox :{  pad :grommet.grommet/utils.PadType | undefined} | undefined,   disabled :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   label :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   focus :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   error :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType & {  error :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   icon :any | undefined} | undefined,   help :{  color :grommet.grommet/utils.ColorType | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   info :{  color :grommet.grommet/utils.ColorType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   icon :any | undefined} | undefined,   label :grommet.grommet/themes/base.FormFieldLabelType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   round :grommet.grommet/utils.RoundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined> : {  border :grommet.grommet/utils.BorderType & {  error :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   content :{  margin :grommet.grommet/utils.MarginType | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   checkBox :{  pad :grommet.grommet/utils.PadType | undefined} | undefined,   disabled :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   label :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   focus :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   error :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType & {  error :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   icon :any | undefined} | undefined,   help :{  color :grommet.grommet/utils.ColorType | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   info :{  color :grommet.grommet/utils.ColorType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   icon :any | undefined} | undefined,   label :grommet.grommet/themes/base.FormFieldLabelType | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   round :grommet.grommet/utils.RoundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.global")
    @js.native
    val global: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  active :{  background :grommet.grommet/utils.ColorType | {  color :grommet.grommet/utils.ColorType | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   animation :{  duration :string | undefined,   jiggle :{  duration :string | undefined} | undefined} | undefined,   backgrounds :{[x: string] : grommet.grommet/utils.BackgroundType | {  dark :string | undefined,   light :string | undefined}} | undefined,   borderSize :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined,   breakpoints :{  small :{  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined,   medium :{  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined,   large :{  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined, [x: string] : {  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined} | undefined,   deviceBreakpoints :{  phone :string | undefined,   tablet :string | undefined,   computer :string | undefined} | undefined,   colors :grommet.grommet/themes/base.Colors | undefined,   control :{  border :{  width :string | undefined,   radius :string | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   disabled :{  opacity :grommet.grommet/utils.OpacityType} | undefined} | undefined,   debounceDelay :number | undefined,   drop :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  width :string | undefined,   radius :string | undefined} | undefined,   intelligentMargin :boolean | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   shadowSize :string | undefined,   zIndex :string | undefined} | undefined,   edgeSize :{  none :string | undefined,   hair :string | undefined,   xxsmall :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined,   responsiveBreakpoint :string | undefined} | undefined,   elevation :{  light :{  none :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined,   dark :{  none :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined} | undefined,   focus :{  border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   outline :{  color :grommet.grommet/utils.ColorType | undefined,   size :string | undefined} | undefined,   shadow :string | {  color :grommet.grommet/utils.ColorType | undefined,   size :string | undefined} | undefined} | undefined,   font :{  face :string | undefined,   family :string | undefined,   height :string | undefined,   maxWidth :string | undefined,   size :string | undefined,   weight :number | string | undefined,   variant :string | undefined} | undefined,   graph :{  colors :grommet.grommet/utils.GraphColorsType | undefined} | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   input :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   padding :string | {  top :string | undefined,   bottom :string | undefined,   left :string | undefined,   right :string | undefined,   horizontal :string | undefined,   vertical :string | undefined} | undefined,   font :{  height :string | undefined,   size :string | undefined,   weight :number | string | undefined} | undefined,   weight :number | string | undefined} | undefined,   opacity :{  strong :number | undefined,   medium :number | undefined,   weak :number | undefined} | undefined,   selected :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   spacing :string | undefined,   size :{  xxsmall :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined,   xxlarge :string | undefined,   full :string | undefined, [x: string] : string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  active :{  background :grommet.grommet/utils.ColorType | {  color :grommet.grommet/utils.ColorType | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   animation :{  duration :string | undefined,   jiggle :{  duration :string | undefined} | undefined} | undefined,   backgrounds :{[x: string] : grommet.grommet/utils.BackgroundType | {  dark :string | undefined,   light :string | undefined}} | undefined,   borderSize :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined,   breakpoints :{  small :{  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined,   medium :{  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined,   large :{  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined, [x: string] : {  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined} | undefined,   deviceBreakpoints :{  phone :string | undefined,   tablet :string | undefined,   computer :string | undefined} | undefined,   colors :grommet.grommet/themes/base.Colors | undefined,   control :{  border :{  width :string | undefined,   radius :string | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   disabled :{  opacity :grommet.grommet/utils.OpacityType} | undefined} | undefined,   debounceDelay :number | undefined,   drop :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  width :string | undefined,   radius :string | undefined} | undefined,   intelligentMargin :boolean | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   shadowSize :string | undefined,   zIndex :string | undefined} | undefined,   edgeSize :{  none :string | undefined,   hair :string | undefined,   xxsmall :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined,   responsiveBreakpoint :string | undefined} | undefined,   elevation :{  light :{  none :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined,   dark :{  none :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined} | undefined,   focus :{  border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   outline :{  color :grommet.grommet/utils.ColorType | undefined,   size :string | undefined} | undefined,   shadow :string | {  color :grommet.grommet/utils.ColorType | undefined,   size :string | undefined} | undefined} | undefined,   font :{  face :string | undefined,   family :string | undefined,   height :string | undefined,   maxWidth :string | undefined,   size :string | undefined,   weight :number | string | undefined,   variant :string | undefined} | undefined,   graph :{  colors :grommet.grommet/utils.GraphColorsType | undefined} | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   input :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   padding :string | {  top :string | undefined,   bottom :string | undefined,   left :string | undefined,   right :string | undefined,   horizontal :string | undefined,   vertical :string | undefined} | undefined,   font :{  height :string | undefined,   size :string | undefined,   weight :number | string | undefined} | undefined,   weight :number | string | undefined} | undefined,   opacity :{  strong :number | undefined,   medium :number | undefined,   weak :number | undefined} | undefined,   selected :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   spacing :string | undefined,   size :{  xxsmall :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined,   xxlarge :string | undefined,   full :string | undefined, [x: string] : string | undefined} | undefined} | undefined> : {  active :{  background :grommet.grommet/utils.ColorType | {  color :grommet.grommet/utils.ColorType | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   animation :{  duration :string | undefined,   jiggle :{  duration :string | undefined} | undefined} | undefined,   backgrounds :{[x: string] : grommet.grommet/utils.BackgroundType | {  dark :string | undefined,   light :string | undefined}} | undefined,   borderSize :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined,   breakpoints :{  small :{  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined,   medium :{  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined,   large :{  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined, [x: string] : {  value :number | undefined,   borderSize :grommet.grommet/utils.BreakpointBorderSize | undefined,   edgeSize :grommet.grommet/utils.BreakpointEdgeSize | undefined,   size :grommet.grommet/utils.BreakpointSize | undefined} | undefined} | undefined,   deviceBreakpoints :{  phone :string | undefined,   tablet :string | undefined,   computer :string | undefined} | undefined,   colors :grommet.grommet/themes/base.Colors | undefined,   control :{  border :{  width :string | undefined,   radius :string | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   disabled :{  opacity :grommet.grommet/utils.OpacityType} | undefined} | undefined,   debounceDelay :number | undefined,   drop :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  width :string | undefined,   radius :string | undefined} | undefined,   intelligentMargin :boolean | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   shadowSize :string | undefined,   zIndex :string | undefined} | undefined,   edgeSize :{  none :string | undefined,   hair :string | undefined,   xxsmall :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined,   responsiveBreakpoint :string | undefined} | undefined,   elevation :{  light :{  none :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined,   dark :{  none :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined} | undefined,   focus :{  border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   outline :{  color :grommet.grommet/utils.ColorType | undefined,   size :string | undefined} | undefined,   shadow :string | {  color :grommet.grommet/utils.ColorType | undefined,   size :string | undefined} | undefined} | undefined,   font :{  face :string | undefined,   family :string | undefined,   height :string | undefined,   maxWidth :string | undefined,   size :string | undefined,   weight :number | string | undefined,   variant :string | undefined} | undefined,   graph :{  colors :grommet.grommet/utils.GraphColorsType | undefined} | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   input :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   padding :string | {  top :string | undefined,   bottom :string | undefined,   left :string | undefined,   right :string | undefined,   horizontal :string | undefined,   vertical :string | undefined} | undefined,   font :{  height :string | undefined,   size :string | undefined,   weight :number | string | undefined} | undefined,   weight :number | string | undefined} | undefined,   opacity :{  strong :number | undefined,   medium :number | undefined,   weak :number | undefined} | undefined,   selected :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   spacing :string | undefined,   size :{  xxsmall :string | undefined,   xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined,   xxlarge :string | undefined,   full :string | undefined, [x: string] : string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.grommet")
    @js.native
    val grommet: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.header")
    @js.native
    val header: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  sticky :{  zIndex :string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  sticky :{  zIndex :string | undefined} | undefined} | undefined> : {  sticky :{  zIndex :string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.heading")
    @js.native
    val heading: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   font :{} | undefined,   level :{  1 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   2 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   3 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   4 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   5 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   6 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined} | undefined,   responsiveBreakpoint :string | undefined,   weight :number | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   font :{} | undefined,   level :{  1 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   2 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   3 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   4 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   5 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   6 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined} | undefined,   responsiveBreakpoint :string | undefined,   weight :number | undefined} | undefined> : {  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   font :{} | undefined,   level :{  1 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   2 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   3 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   4 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   5 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined,   6 :{  font :{} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined} | undefined,   responsiveBreakpoint :string | undefined,   weight :number | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.icon")
    @js.native
    val icon: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   size :{  small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined, [x: string] : string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   size :{  small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined, [x: string] : string | undefined} | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   size :{  small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined, [x: string] : string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.layer")
    @js.native
    val layer: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  radius :string | undefined,   intelligentRounding :boolean | undefined} | undefined,   container :{  elevation :grommet.grommet/utils.ElevationType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   zIndex :string | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   overlay :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   responsiveBreakpoint :string | undefined,   zIndex :string | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  radius :string | undefined,   intelligentRounding :boolean | undefined} | undefined,   container :{  elevation :grommet.grommet/utils.ElevationType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   zIndex :string | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   overlay :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   responsiveBreakpoint :string | undefined,   zIndex :string | undefined} | undefined> : {  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  radius :string | undefined,   intelligentRounding :boolean | undefined} | undefined,   container :{  elevation :grommet.grommet/utils.ElevationType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   zIndex :string | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   overlay :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   responsiveBreakpoint :string | undefined,   zIndex :string | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.list")
    @js.native
    val list: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  container :grommet.grommet/components/Box.BoxProps | undefined,   item :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   disabled :{  color :grommet.grommet/utils.ColorType | undefined,   cursor :string | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   icons :{  down :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   up :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  container :grommet.grommet/components/Box.BoxProps | undefined,   item :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   disabled :{  color :grommet.grommet/utils.ColorType | undefined,   cursor :string | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   icons :{  down :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   up :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined> : {  container :grommet.grommet/components/Box.BoxProps | undefined,   item :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   disabled :{  color :grommet.grommet/utils.ColorType | undefined,   cursor :string | undefined} | undefined,   pad :grommet.grommet/utils.PadType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   icons :{  down :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   up :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.maskedInput")
    @js.native
    val maskedInput: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   disabled :{  opacity :grommet.grommet/utils.OpacityType | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   disabled :{  opacity :grommet.grommet/utils.OpacityType | undefined} | undefined} | undefined> : {  container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   disabled :{  opacity :grommet.grommet/utils.OpacityType | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.menu")
    @js.native
    val menu: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  background :grommet.grommet/utils.BackgroundType | undefined,   item :grommet.grommet/themes/base.ButtonType | undefined,   drop :grommet.grommet/components/Drop.DropType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   group :{  container :grommet.grommet/components/Box.BoxProps | undefined,   separator :{  color :grommet.grommet/utils.ColorType | undefined,   size :string | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined} | undefined,   icons :{  down :any | undefined,   up :any | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  background :grommet.grommet/utils.BackgroundType | undefined,   item :grommet.grommet/themes/base.ButtonType | undefined,   drop :grommet.grommet/components/Drop.DropType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   group :{  container :grommet.grommet/components/Box.BoxProps | undefined,   separator :{  color :grommet.grommet/utils.ColorType | undefined,   size :string | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined} | undefined,   icons :{  down :any | undefined,   up :any | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined> : {  background :grommet.grommet/utils.BackgroundType | undefined,   item :grommet.grommet/themes/base.ButtonType | undefined,   drop :grommet.grommet/components/Drop.DropType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   group :{  container :grommet.grommet/components/Box.BoxProps | undefined,   separator :{  color :grommet.grommet/utils.ColorType | undefined,   size :string | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined} | undefined,   icons :{  down :any | undefined,   up :any | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.meter")
    @js.native
    val meter: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  color :grommet.grommet/utils.ColorType | undefined,   colors :grommet.grommet/utils.GraphColorsType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  color :grommet.grommet/utils.ColorType | undefined,   colors :grommet.grommet/utils.GraphColorsType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined> : {  color :grommet.grommet/utils.ColorType | undefined,   colors :grommet.grommet/utils.GraphColorsType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.nameValueList")
    @js.native
    val nameValueList: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  gap :{  column :grommet.grommet/utils.GapType | undefined,   row :grommet.grommet/utils.GapType | undefined} | undefined,   pair :{  column :{  gap :{  column :grommet.grommet/utils.GapType | undefined,   row :grommet.grommet/utils.GapType | undefined} | undefined} | undefined} | undefined,   name :{  width :string} | undefined,   value :{  width :string} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  gap :{  column :grommet.grommet/utils.GapType | undefined,   row :grommet.grommet/utils.GapType | undefined} | undefined,   pair :{  column :{  gap :{  column :grommet.grommet/utils.GapType | undefined,   row :grommet.grommet/utils.GapType | undefined} | undefined} | undefined} | undefined,   name :{  width :string} | undefined,   value :{  width :string} | undefined} | undefined> : {  gap :{  column :grommet.grommet/utils.GapType | undefined,   row :grommet.grommet/utils.GapType | undefined} | undefined,   pair :{  column :{  gap :{  column :grommet.grommet/utils.GapType | undefined,   row :grommet.grommet/utils.GapType | undefined} | undefined} | undefined} | undefined,   name :{  width :string} | undefined,   value :{  width :string} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.nameValuePair")
    @js.native
    val nameValuePair: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  column :{  gap :grommet.grommet/utils.GapType | undefined} | undefined,   name :grommet.grommet/components/Text.TextProps | undefined,   value :grommet.grommet/components/Text.TextProps | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  column :{  gap :grommet.grommet/utils.GapType | undefined} | undefined,   name :grommet.grommet/components/Text.TextProps | undefined,   value :grommet.grommet/components/Text.TextProps | undefined} | undefined> : {  column :{  gap :grommet.grommet/utils.GapType | undefined} | undefined,   name :grommet.grommet/components/Text.TextProps | undefined,   value :grommet.grommet/components/Text.TextProps | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.notification")
    @js.native
    val notification: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  actions :grommet.grommet/components/Anchor.AnchorProps | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   direction :'column' | 'row' | undefined,   global :{  direction :'column' | 'row' | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined} | undefined,   toast :{  container :grommet.grommet/components/Box.BoxProps | undefined,   direction :'column' | 'row' | undefined,   layer :grommet.grommet/components/Layer.LayerProps | undefined,   time :number | undefined} | undefined,   iconContainer :grommet.grommet/components/Box.BoxProps | undefined,   textContainer :grommet.grommet/components/Box.BoxProps | undefined,   title :grommet.grommet/components/Text.TextProps | undefined,   message :grommet.grommet/components/Text.TextProps | undefined,   close :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   critical :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   warning :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   normal :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   info :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   unknown :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   undefined :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  actions :grommet.grommet/components/Anchor.AnchorProps | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   direction :'column' | 'row' | undefined,   global :{  direction :'column' | 'row' | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined} | undefined,   toast :{  container :grommet.grommet/components/Box.BoxProps | undefined,   direction :'column' | 'row' | undefined,   layer :grommet.grommet/components/Layer.LayerProps | undefined,   time :number | undefined} | undefined,   iconContainer :grommet.grommet/components/Box.BoxProps | undefined,   textContainer :grommet.grommet/components/Box.BoxProps | undefined,   title :grommet.grommet/components/Text.TextProps | undefined,   message :grommet.grommet/components/Text.TextProps | undefined,   close :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   critical :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   warning :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   normal :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   info :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   unknown :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   undefined :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined} | undefined> : {  actions :grommet.grommet/components/Anchor.AnchorProps | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   direction :'column' | 'row' | undefined,   global :{  direction :'column' | 'row' | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined} | undefined,   toast :{  container :grommet.grommet/components/Box.BoxProps | undefined,   direction :'column' | 'row' | undefined,   layer :grommet.grommet/components/Layer.LayerProps | undefined,   time :number | undefined} | undefined,   iconContainer :grommet.grommet/components/Box.BoxProps | undefined,   textContainer :grommet.grommet/components/Box.BoxProps | undefined,   title :grommet.grommet/components/Text.TextProps | undefined,   message :grommet.grommet/components/Text.TextProps | undefined,   close :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   critical :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   warning :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   normal :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   info :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   unknown :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined,   undefined :{  icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   global :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   toast :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.page")
    @js.native
    val page: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {[key: string] : {  alignSelf :grommet.grommet/utils.AlignContentType | undefined,   width :string | {  min :string,   max :string} | undefined,   small :grommet.grommet/components/Box.BoxProps | undefined,   medium :grommet.grommet/components/Box.BoxProps | undefined,   large :grommet.grommet/components/Box.BoxProps | undefined}} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{[key: string] : {  alignSelf :grommet.grommet/utils.AlignContentType | undefined,   width :string | {  min :string,   max :string} | undefined,   small :grommet.grommet/components/Box.BoxProps | undefined,   medium :grommet.grommet/components/Box.BoxProps | undefined,   large :grommet.grommet/components/Box.BoxProps | undefined}} | undefined> : {[key: string] : {  alignSelf :grommet.grommet/utils.AlignContentType | undefined,   width :string | {  min :string,   max :string} | undefined,   small :grommet.grommet/components/Box.BoxProps | undefined,   medium :grommet.grommet/components/Box.BoxProps | undefined,   large :grommet.grommet/components/Box.BoxProps | undefined}} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.pageHeader")
    @js.native
    val pageHeader: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  actions :grommet.grommet/components/Box.BoxProps | undefined,   pad :grommet.grommet/utils.PadType | undefined,   parent :grommet.grommet/components/Box.BoxProps | undefined,   responsive :{  actions :grommet.grommet/components/Box.BoxProps | undefined,   areas :grommet.grommet/components/Grid.AreasType | undefined,   breakpoints :std.Array<string> | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Heading.HeadingProps | undefined,   size :{  small :{  pad :grommet.grommet/utils.PadType | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Paragraph.ParagraphProps | undefined} | undefined,   medium :{  pad :grommet.grommet/utils.PadType | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Paragraph.ParagraphProps | undefined} | undefined,   large :{  pad :grommet.grommet/utils.PadType | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Paragraph.ParagraphProps | undefined} | undefined} | undefined,   small :{  areas :grommet.grommet/components/Grid.AreasType | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined,   medium :{  areas :grommet.grommet/components/Grid.AreasType | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined,   large :{  areas :grommet.grommet/components/Grid.AreasType | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  actions :grommet.grommet/components/Box.BoxProps | undefined,   pad :grommet.grommet/utils.PadType | undefined,   parent :grommet.grommet/components/Box.BoxProps | undefined,   responsive :{  actions :grommet.grommet/components/Box.BoxProps | undefined,   areas :grommet.grommet/components/Grid.AreasType | undefined,   breakpoints :std.Array<string> | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Heading.HeadingProps | undefined,   size :{  small :{  pad :grommet.grommet/utils.PadType | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Paragraph.ParagraphProps | undefined} | undefined,   medium :{  pad :grommet.grommet/utils.PadType | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Paragraph.ParagraphProps | undefined} | undefined,   large :{  pad :grommet.grommet/utils.PadType | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Paragraph.ParagraphProps | undefined} | undefined} | undefined,   small :{  areas :grommet.grommet/components/Grid.AreasType | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined,   medium :{  areas :grommet.grommet/components/Grid.AreasType | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined,   large :{  areas :grommet.grommet/components/Grid.AreasType | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined} | undefined> : {  actions :grommet.grommet/components/Box.BoxProps | undefined,   pad :grommet.grommet/utils.PadType | undefined,   parent :grommet.grommet/components/Box.BoxProps | undefined,   responsive :{  actions :grommet.grommet/components/Box.BoxProps | undefined,   areas :grommet.grommet/components/Grid.AreasType | undefined,   breakpoints :std.Array<string> | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Heading.HeadingProps | undefined,   size :{  small :{  pad :grommet.grommet/utils.PadType | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Paragraph.ParagraphProps | undefined} | undefined,   medium :{  pad :grommet.grommet/utils.PadType | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Paragraph.ParagraphProps | undefined} | undefined,   large :{  pad :grommet.grommet/utils.PadType | undefined,   subtitle :grommet.grommet/components/Paragraph.ParagraphProps | undefined,   title :grommet.grommet/components/Paragraph.ParagraphProps | undefined} | undefined} | undefined,   small :{  areas :grommet.grommet/components/Grid.AreasType | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined,   medium :{  areas :grommet.grommet/components/Grid.AreasType | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined,   large :{  areas :grommet.grommet/components/Grid.AreasType | undefined,   columns :grommet.grommet/components/Grid.GridColumnsType | undefined,   rows :grommet.grommet/components/Grid.GridSizeType | undefined,   gap :grommet.grommet/components/Grid.GridGapType | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.pagination")
    @js.native
    val pagination: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  button :grommet.grommet/themes/base.ButtonType | string | undefined,   container :grommet.grommet/components/Box.BoxProps | {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   controls :{  align :grommet.grommet/utils.AlignContentType | undefined,   direction :grommet.grommet/utils.DirectionType | undefined,   gap :grommet.grommet/utils.GapType | undefined,   pad :grommet.grommet/utils.PadType | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   icons :{  color :grommet.grommet/utils.ColorType | undefined,   next :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   previous :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  button :grommet.grommet/themes/base.ButtonType | string | undefined,   container :grommet.grommet/components/Box.BoxProps | {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   controls :{  align :grommet.grommet/utils.AlignContentType | undefined,   direction :grommet.grommet/utils.DirectionType | undefined,   gap :grommet.grommet/utils.GapType | undefined,   pad :grommet.grommet/utils.PadType | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   icons :{  color :grommet.grommet/utils.ColorType | undefined,   next :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   previous :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined} | undefined} | undefined> : {  button :grommet.grommet/themes/base.ButtonType | string | undefined,   container :grommet.grommet/components/Box.BoxProps | {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   controls :{  align :grommet.grommet/utils.AlignContentType | undefined,   direction :grommet.grommet/utils.DirectionType | undefined,   gap :grommet.grommet/utils.GapType | undefined,   pad :grommet.grommet/utils.PadType | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   icons :{  color :grommet.grommet/utils.ColorType | undefined,   next :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   previous :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.paragraph")
    @js.native
    val paragraph: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xxlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xxlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xxlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.radioButton")
    @js.native
    val radioButton: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   border :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined} | undefined,   check :{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   radius :string | undefined,   background :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   hover :{  border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   background :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   icon :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   size :string | undefined} | undefined,   icons :{  circle :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined} | undefined,   gap :string | undefined,   size :string | undefined,   font :{  weight :number | string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   border :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined} | undefined,   check :{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   radius :string | undefined,   background :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   hover :{  border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   background :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   icon :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   size :string | undefined} | undefined,   icons :{  circle :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined} | undefined,   gap :string | undefined,   size :string | undefined,   font :{  weight :number | string | undefined} | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   border :{  color :grommet.grommet/utils.ColorType | undefined,   width :string | undefined} | undefined,   check :{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   radius :string | undefined,   background :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   hover :{  border :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   background :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   icon :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   size :string | undefined} | undefined,   icons :{  circle :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined} | undefined,   gap :string | undefined,   size :string | undefined,   font :{  weight :number | string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.radioButtonGroup")
    @js.native
    val radioButtonGroup: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  container :grommet.grommet/components/Box.BoxProps | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  container :grommet.grommet/components/Box.BoxProps | undefined} | undefined> : {  container :grommet.grommet/components/Box.BoxProps | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.rangeInput")
    @js.native
    val rangeInput: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  disabled :{  opacity :grommet.grommet/utils.OpacityType | undefined,   track :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   thumb :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   track :{  height :string | undefined,   color :any | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined,   lower :{  color :grommet.grommet/utils.ColorType | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined} | undefined,   upper :{  color :grommet.grommet/utils.ColorType | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined} | undefined} | undefined,   thumb :{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  disabled :{  opacity :grommet.grommet/utils.OpacityType | undefined,   track :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   thumb :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   track :{  height :string | undefined,   color :any | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined,   lower :{  color :grommet.grommet/utils.ColorType | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined} | undefined,   upper :{  color :grommet.grommet/utils.ColorType | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined} | undefined} | undefined,   thumb :{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined> : {  disabled :{  opacity :grommet.grommet/utils.OpacityType | undefined,   track :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   thumb :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   track :{  height :string | undefined,   color :any | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined,   lower :{  color :grommet.grommet/utils.ColorType | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined} | undefined,   upper :{  color :grommet.grommet/utils.ColorType | undefined,   opacity :grommet.grommet/utils.OpacityType | undefined} | undefined} | undefined,   thumb :{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.rangeSelector")
    @js.native
    val rangeSelector: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  background :{  invert :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   edge :{  type :string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  background :{  invert :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   edge :{  type :string | undefined} | undefined} | undefined> : {  background :{  invert :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined,   edge :{  type :string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.select")
    @js.native
    val select: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  background :grommet.grommet/utils.BackgroundType | undefined,   clear :{  container :grommet.grommet/components/Box.BoxProps | undefined,   text :grommet.grommet/components/Text.TextProps | undefined} | undefined,   container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   control :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   open :string | object | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   icons :{  color :grommet.grommet/utils.ColorType | undefined,   down :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   up :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   options :{  container :grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Box.BoxExtendedProps>> | undefined,   text :grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Text.TextExtendedProps>> | undefined} | undefined,   searchInput :react.react.ReactComponentElement<any, std.Pick<react.react.ComponentProps<any>, std.Exclude<keyof react.react.ComponentProps<any>, 'key' | 'ref'>>> | undefined,   step :number | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  background :grommet.grommet/utils.BackgroundType | undefined,   clear :{  container :grommet.grommet/components/Box.BoxProps | undefined,   text :grommet.grommet/components/Text.TextProps | undefined} | undefined,   container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   control :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   open :string | object | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   icons :{  color :grommet.grommet/utils.ColorType | undefined,   down :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   up :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   options :{  container :grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Box.BoxExtendedProps>> | undefined,   text :grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Text.TextExtendedProps>> | undefined} | undefined,   searchInput :react.react.ReactComponentElement<any, std.Pick<react.react.ComponentProps<any>, std.Exclude<keyof react.react.ComponentProps<any>, 'key' | 'ref'>>> | undefined,   step :number | undefined} | undefined> : {  background :grommet.grommet/utils.BackgroundType | undefined,   clear :{  container :grommet.grommet/components/Box.BoxProps | undefined,   text :grommet.grommet/components/Text.TextProps | undefined} | undefined,   container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   control :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   open :string | object | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   icons :{  color :grommet.grommet/utils.ColorType | undefined,   down :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   up :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   margin :grommet.grommet/utils.MarginType | undefined} | undefined,   options :{  container :grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Box.BoxExtendedProps>> | undefined,   text :grommet.grommet/utils.PropsOf<react.react.FC<grommet.grommet/components/Text.TextExtendedProps>> | undefined} | undefined,   searchInput :react.react.ReactComponentElement<any, std.Pick<react.react.ComponentProps<any>, std.Exclude<keyof react.react.ComponentProps<any>, 'key' | 'ref'>>> | undefined,   step :number | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.selectMultiple")
    @js.native
    val selectMultiple: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  maxInline :number | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  maxInline :number | undefined} | undefined> : {  maxInline :number | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.skipLinks")
    @js.native
    val skipLinks: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  position :grommet.grommet/components/Layer.LayerPositionType | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   label :grommet.grommet/components/Text.TextProps | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  position :grommet.grommet/components/Layer.LayerPositionType | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   label :grommet.grommet/components/Text.TextProps | undefined} | undefined> : {  position :grommet.grommet/components/Layer.LayerPositionType | undefined,   container :grommet.grommet/components/Box.BoxProps | undefined,   label :grommet.grommet/components/Text.TextProps | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.spinner")
    @js.native
    val spinner: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  container :grommet.grommet/components/Box.BoxProps | {  color :grommet.grommet/utils.ColorType | undefined} | {  size :'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | string | undefined} | undefined,   icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   size :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  container :grommet.grommet/components/Box.BoxProps | {  color :grommet.grommet/utils.ColorType | undefined} | {  size :'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | string | undefined} | undefined,   icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   size :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined} | undefined> : {  container :grommet.grommet/components/Box.BoxProps | {  color :grommet.grommet/utils.ColorType | undefined} | {  size :'xsmall' | 'small' | 'medium' | 'large' | 'xlarge' | string | undefined} | undefined,   icon :react.react.ReactNode | grommet-icons.grommet-icons/icons.Icon | undefined,   size :{  xsmall :string | undefined,   small :string | undefined,   medium :string | undefined,   large :string | undefined,   xlarge :string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.tab")
    @js.native
    val tab: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  active :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   border :{  side :string | undefined,   size :string | undefined,   color :grommet.grommet/utils.ColorType | undefined,   active :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   disabled :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   hover :{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   disabled :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  active :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   border :{  side :string | undefined,   size :string | undefined,   color :grommet.grommet/utils.ColorType | undefined,   active :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   disabled :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   hover :{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   disabled :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined> : {  active :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   border :{  side :string | undefined,   size :string | undefined,   color :grommet.grommet/utils.ColorType | undefined,   active :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   disabled :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   hover :{  color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined,   color :grommet.grommet/utils.ColorType | undefined,   disabled :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   color :grommet.grommet/utils.ColorType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   margin :grommet.grommet/utils.MarginType | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.table")
    @js.native
    val table: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  header :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   align :string | undefined,   pad :grommet.grommet/utils.PadType | undefined,   border :string | undefined,   verticalAlign :string | undefined,   fill :string | undefined} | undefined,   body :{  align :string | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   border :string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   footer :{  align :string | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined,   border :string | undefined,   verticalAlign :string | undefined,   fill :string | undefined} | undefined,   row :{  hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  header :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   align :string | undefined,   pad :grommet.grommet/utils.PadType | undefined,   border :string | undefined,   verticalAlign :string | undefined,   fill :string | undefined} | undefined,   body :{  align :string | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   border :string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   footer :{  align :string | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined,   border :string | undefined,   verticalAlign :string | undefined,   fill :string | undefined} | undefined,   row :{  hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined} | undefined> : {  header :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   align :string | undefined,   pad :grommet.grommet/utils.PadType | undefined,   border :string | undefined,   verticalAlign :string | undefined,   fill :string | undefined} | undefined,   body :{  align :string | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   border :string | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined} | undefined,   footer :{  align :string | undefined,   background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   pad :grommet.grommet/utils.PadType | undefined,   border :string | undefined,   verticalAlign :string | undefined,   fill :string | undefined} | undefined,   row :{  hover :{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.tabs")
    @js.native
    val tabs: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   gap :grommet.grommet/utils.GapType | undefined,   header :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  side :string | undefined,   size :string | undefined,   style :string | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   panel :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   step :{  small :number | undefined,   medium :number | undefined,   large :number | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   gap :grommet.grommet/utils.GapType | undefined,   header :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  side :string | undefined,   size :string | undefined,   style :string | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   panel :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   step :{  small :number | undefined,   medium :number | undefined,   large :number | undefined} | undefined} | undefined> : {  background :grommet.grommet/utils.BackgroundType | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   gap :grommet.grommet/utils.GapType | undefined,   header :{  background :grommet.grommet/utils.BackgroundType | undefined,   border :{  side :string | undefined,   size :string | undefined,   style :string | undefined,   color :grommet.grommet/utils.ColorType | undefined} | undefined,   extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   panel :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   step :{  small :number | undefined,   medium :number | undefined,   large :number | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.tag")
    @js.native
    val tag: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   round :grommet.grommet/utils.RoundType | undefined,   name :grommet.grommet/components/Text.TextProps | undefined,   pad :grommet.grommet/utils.PadType | undefined,   remove :grommet.grommet/themes/base.ButtonType | undefined,   separator :string | undefined,   size :{  xsmall :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   small :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   medium :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   large :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   xlarge :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined} | undefined,   value :grommet.grommet/components/Text.TextProps | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   round :grommet.grommet/utils.RoundType | undefined,   name :grommet.grommet/components/Text.TextProps | undefined,   pad :grommet.grommet/utils.PadType | undefined,   remove :grommet.grommet/themes/base.ButtonType | undefined,   separator :string | undefined,   size :{  xsmall :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   small :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   medium :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   large :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   xlarge :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined} | undefined,   value :grommet.grommet/components/Text.TextProps | undefined} | undefined> : {  background :grommet.grommet/utils.BackgroundType | undefined,   border :grommet.grommet/utils.BorderType | undefined,   round :grommet.grommet/utils.RoundType | undefined,   name :grommet.grommet/components/Text.TextProps | undefined,   pad :grommet.grommet/utils.PadType | undefined,   remove :grommet.grommet/themes/base.ButtonType | undefined,   separator :string | undefined,   size :{  xsmall :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   small :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   medium :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   large :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined,   xlarge :{  pad :grommet.grommet/utils.PadType | undefined,   icon :{  size :string | undefined} | undefined} | undefined} | undefined,   value :grommet.grommet/components/Text.TextProps | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.text")
    @js.native
    val text: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   xsmall :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xxlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   2xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   3xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   4xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   5xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   6xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   xsmall :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xxlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   2xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   3xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   4xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   5xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   6xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   xsmall :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   small :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   medium :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   large :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   xxlarge :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   2xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   3xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   4xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   5xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined,   6xl :{  size :string | undefined,   height :string | undefined,   maxWidth :string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.textArea")
    @js.native
    val textArea: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   disabled :grommet.grommet/utils.OpacityType | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   disabled :grommet.grommet/utils.OpacityType | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   disabled :grommet.grommet/utils.OpacityType | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.textInput")
    @js.native
    val textInput: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   disabled :grommet.grommet/utils.OpacityType | {  opacity :grommet.grommet/utils.OpacityType} | undefined,   container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   placeholder :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   suggestions :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   disabled :grommet.grommet/utils.OpacityType | {  opacity :grommet.grommet/utils.OpacityType} | undefined,   container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   placeholder :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   suggestions :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined> : {  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined,   disabled :grommet.grommet/utils.OpacityType | {  opacity :grommet.grommet/utils.OpacityType} | undefined,   container :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   placeholder :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined,   suggestions :{  extend :grommet.grommet/themes/base.ExtendType<std.Record<string, any>> | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.tip")
    @js.native
    val tip: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  content :grommet.grommet/components/Box.BoxProps | undefined,   drop :grommet.grommet/components/Drop.DropProps | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  content :grommet.grommet/components/Box.BoxProps | undefined,   drop :grommet.grommet/components/Drop.DropProps | undefined} | undefined> : {  content :grommet.grommet/components/Box.BoxProps | undefined,   drop :grommet.grommet/components/Drop.DropProps | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.video")
    @js.native
    val video: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  captions :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   controls :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   icons :{  closedCaption :any | undefined,   color :grommet.grommet/utils.ColorType | undefined,   configure :any | undefined,   fullScreen :any | undefined,   pause :any | undefined,   play :any | undefined,   reduceVolume :any | undefined,   volume :any | undefined} | undefined,   scrubber :{  color :grommet.grommet/utils.ColorType | undefined,   interval :number | undefined,   track :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  captions :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   controls :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   icons :{  closedCaption :any | undefined,   color :grommet.grommet/utils.ColorType | undefined,   configure :any | undefined,   fullScreen :any | undefined,   pause :any | undefined,   play :any | undefined,   reduceVolume :any | undefined,   volume :any | undefined} | undefined,   scrubber :{  color :grommet.grommet/utils.ColorType | undefined,   interval :number | undefined,   track :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined} | undefined> : {  captions :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   controls :{  background :grommet.grommet/utils.BackgroundType | undefined} | undefined,   icons :{  closedCaption :any | undefined,   color :grommet.grommet/utils.ColorType | undefined,   configure :any | undefined,   fullScreen :any | undefined,   pause :any | undefined,   play :any | undefined,   reduceVolume :any | undefined,   volume :any | undefined} | undefined,   scrubber :{  color :grommet.grommet/utils.ColorType | undefined,   interval :number | undefined,   track :{  color :grommet.grommet/utils.ColorType | undefined} | undefined} | undefined} | undefined */ js.Any
      ] = js.native
    
    @JSImport("grommet/themes", "base.worldMap")
    @js.native
    val worldMap: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: {  color :grommet.grommet/utils.ColorType | undefined,   continent :{  active :string | undefined,   base :string | undefined} | undefined,   hover :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   place :{  active :string | undefined,   base :string | undefined} | undefined} | undefined extends object ? grommet.grommet/utils.DeepReadonly<{  color :grommet.grommet/utils.ColorType | undefined,   continent :{  active :string | undefined,   base :string | undefined} | undefined,   hover :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   place :{  active :string | undefined,   base :string | undefined} | undefined} | undefined> : {  color :grommet.grommet/utils.ColorType | undefined,   continent :{  active :string | undefined,   base :string | undefined} | undefined,   hover :{  color :grommet.grommet/utils.ColorType | undefined} | undefined,   place :{  active :string | undefined,   base :string | undefined} | undefined} | undefined */ js.Any
      ] = js.native
  }
  
  @JSImport("grommet/themes", "dark")
  @js.native
  val dark: ThemeType = js.native
  
  inline def generate(): DeepReadonlyThemeType = ^.asInstanceOf[js.Dynamic].applyDynamic("generate")().asInstanceOf[DeepReadonlyThemeType]
  inline def generate(baseSpacing: Double): DeepReadonlyThemeType = ^.asInstanceOf[js.Dynamic].applyDynamic("generate")(baseSpacing.asInstanceOf[js.Any]).asInstanceOf[DeepReadonlyThemeType]
  inline def generate(baseSpacing: Double, scale: Double): DeepReadonlyThemeType = (^.asInstanceOf[js.Dynamic].applyDynamic("generate")(baseSpacing.asInstanceOf[js.Any], scale.asInstanceOf[js.Any])).asInstanceOf[DeepReadonlyThemeType]
  inline def generate(baseSpacing: Unit, scale: Double): DeepReadonlyThemeType = (^.asInstanceOf[js.Dynamic].applyDynamic("generate")(baseSpacing.asInstanceOf[js.Any], scale.asInstanceOf[js.Any])).asInstanceOf[DeepReadonlyThemeType]
  
  @JSImport("grommet/themes", "grommet")
  @js.native
  val grommet: ThemeType = js.native
}
