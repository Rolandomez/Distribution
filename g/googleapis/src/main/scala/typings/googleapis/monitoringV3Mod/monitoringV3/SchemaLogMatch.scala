package typings.googleapis.monitoringV3Mod.monitoringV3

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaLogMatch extends StObject {
  
  /**
    * Required. A logs-based filter. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries) for how this filter should be constructed.
    */
  var filter: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Optional. A map from a label key to an extractor expression, which is used to extract the value for this label key. Each entry in this map is a specification for how data should be extracted from log entries that match filter. Each combination of extracted values is treated as a separate rule for the purposes of triggering notifications. Label keys and corresponding values can be used in notifications generated by this condition.Please see the documentation on logs-based metric valueExtractors (https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics#LogMetric.FIELDS.value_extractor) for syntax and examples.
    */
  var labelExtractors: js.UndefOr[StringDictionary[String] | Null] = js.undefined
}
object SchemaLogMatch {
  
  inline def apply(): SchemaLogMatch = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaLogMatch]
  }
  
  extension [Self <: SchemaLogMatch](x: Self) {
    
    inline def setFilter(value: String): Self = StObject.set(x, "filter", value.asInstanceOf[js.Any])
    
    inline def setFilterNull: Self = StObject.set(x, "filter", null)
    
    inline def setFilterUndefined: Self = StObject.set(x, "filter", js.undefined)
    
    inline def setLabelExtractors(value: StringDictionary[String]): Self = StObject.set(x, "labelExtractors", value.asInstanceOf[js.Any])
    
    inline def setLabelExtractorsNull: Self = StObject.set(x, "labelExtractors", null)
    
    inline def setLabelExtractorsUndefined: Self = StObject.set(x, "labelExtractors", js.undefined)
  }
}
