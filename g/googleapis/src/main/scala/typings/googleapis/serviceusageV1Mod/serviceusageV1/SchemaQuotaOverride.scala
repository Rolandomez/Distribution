package typings.googleapis.serviceusageV1Mod.serviceusageV1

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaQuotaOverride extends StObject {
  
  /**
    * The resource name of the ancestor that requested the override. For example: `organizations/12345` or `folders/67890`. Used by admin overrides only.
    */
  var adminOverrideAncestor: js.UndefOr[String | Null] = js.undefined
  
  /**
    * If this map is nonempty, then this override applies only to specific values for dimensions defined in the limit unit. For example, an override on a limit with the unit `1/{project\}/{region\}` could contain an entry with the key `region` and the value `us-east-1`; the override is only applied to quota consumed in that region. This map has the following restrictions: * Keys that are not defined in the limit's unit are not valid keys. Any string appearing in `{brackets\}` in the unit (besides `{project\}` or `{user\}`) is a defined key. * `project` is not a valid key; the project is already specified in the parent resource name. * `user` is not a valid key; the API does not support quota overrides that apply only to a specific user. * If `region` appears as a key, its value must be a valid Cloud region. * If `zone` appears as a key, its value must be a valid Cloud zone. * If any valid key other than `region` or `zone` appears in the map, then all valid keys other than `region` or `zone` must also appear in the map.
    */
  var dimensions: js.UndefOr[StringDictionary[String] | Null] = js.undefined
  
  /**
    * The name of the metric to which this override applies. An example name would be: `compute.googleapis.com/cpus`
    */
  var metric: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The resource name of the override. This name is generated by the server when the override is created. Example names would be: `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/adminOverrides/4a3f2c1d` `projects/123/services/compute.googleapis.com/consumerQuotaMetrics/compute.googleapis.com%2Fcpus/limits/%2Fproject%2Fregion/consumerOverrides/4a3f2c1d` The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.
    */
  var name: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The overriding quota limit value. Can be any nonnegative integer, or -1 (unlimited quota).
    */
  var overrideValue: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The limit unit of the limit to which this override applies. An example unit would be: `1/{project\}/{region\}` Note that `{project\}` and `{region\}` are not placeholders in this example; the literal characters `{` and `\}` occur in the string.
    */
  var unit: js.UndefOr[String | Null] = js.undefined
}
object SchemaQuotaOverride {
  
  inline def apply(): SchemaQuotaOverride = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaQuotaOverride]
  }
  
  extension [Self <: SchemaQuotaOverride](x: Self) {
    
    inline def setAdminOverrideAncestor(value: String): Self = StObject.set(x, "adminOverrideAncestor", value.asInstanceOf[js.Any])
    
    inline def setAdminOverrideAncestorNull: Self = StObject.set(x, "adminOverrideAncestor", null)
    
    inline def setAdminOverrideAncestorUndefined: Self = StObject.set(x, "adminOverrideAncestor", js.undefined)
    
    inline def setDimensions(value: StringDictionary[String]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
    
    inline def setDimensionsNull: Self = StObject.set(x, "dimensions", null)
    
    inline def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
    
    inline def setMetric(value: String): Self = StObject.set(x, "metric", value.asInstanceOf[js.Any])
    
    inline def setMetricNull: Self = StObject.set(x, "metric", null)
    
    inline def setMetricUndefined: Self = StObject.set(x, "metric", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameNull: Self = StObject.set(x, "name", null)
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setOverrideValue(value: String): Self = StObject.set(x, "overrideValue", value.asInstanceOf[js.Any])
    
    inline def setOverrideValueNull: Self = StObject.set(x, "overrideValue", null)
    
    inline def setOverrideValueUndefined: Self = StObject.set(x, "overrideValue", js.undefined)
    
    inline def setUnit(value: String): Self = StObject.set(x, "unit", value.asInstanceOf[js.Any])
    
    inline def setUnitNull: Self = StObject.set(x, "unit", null)
    
    inline def setUnitUndefined: Self = StObject.set(x, "unit", js.undefined)
  }
}
