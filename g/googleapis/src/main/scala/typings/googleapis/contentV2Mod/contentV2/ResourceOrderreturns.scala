package typings.googleapis.contentV2Mod.contentV2

import typings.gaxios.commonMod.GaxiosPromise
import typings.googleapisCommon.apiMod.APIRequestContext
import typings.googleapisCommon.apiMod.BodyResponseCallback
import typings.googleapisCommon.apiMod.MethodOptions
import typings.googleapisCommon.apiMod.StreamMethodOptions
import typings.node.streamMod.Readable
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("googleapis/build/src/apis/content/v2", "content_v2.Resource$Orderreturns")
@js.native
open class ResourceOrderreturns protected () extends StObject {
  def this(context: APIRequestContext) = this()
  
  var context: APIRequestContext = js.native
  
  def get(): GaxiosPromise[SchemaMerchantOrderReturn] = js.native
  def get(callback: BodyResponseCallback[SchemaMerchantOrderReturn]): Unit = js.native
  def get(params: Unit, options: MethodOptions): GaxiosPromise[SchemaMerchantOrderReturn] = js.native
  def get(params: ParamsResourceOrderreturnsGet): GaxiosPromise[SchemaMerchantOrderReturn] = js.native
  def get(params: ParamsResourceOrderreturnsGet, callback: BodyResponseCallback[SchemaMerchantOrderReturn]): Unit = js.native
  def get(
    params: ParamsResourceOrderreturnsGet,
    options: BodyResponseCallback[Readable | SchemaMerchantOrderReturn],
    callback: BodyResponseCallback[Readable | SchemaMerchantOrderReturn]
  ): Unit = js.native
  def get(params: ParamsResourceOrderreturnsGet, options: MethodOptions): GaxiosPromise[SchemaMerchantOrderReturn] = js.native
  def get(
    params: ParamsResourceOrderreturnsGet,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaMerchantOrderReturn]
  ): Unit = js.native
  /**
    * Retrieves an order return from your Merchant Center account.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/content.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const content = google.content('v2');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/content'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await content.orderreturns.get({
    *     // The ID of the account that manages the order. This cannot be a multi-client account.
    *     merchantId: 'placeholder-value',
    *     // Merchant order return ID generated by Google.
    *     returnId: 'placeholder-value',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "creationDate": "my_creationDate",
    *   //   "merchantOrderId": "my_merchantOrderId",
    *   //   "orderId": "my_orderId",
    *   //   "orderReturnId": "my_orderReturnId",
    *   //   "returnItems": [],
    *   //   "returnShipments": []
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def get(params: ParamsResourceOrderreturnsGet, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def get(
    params: ParamsResourceOrderreturnsGet,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def list(): GaxiosPromise[SchemaOrderreturnsListResponse] = js.native
  def list(callback: BodyResponseCallback[SchemaOrderreturnsListResponse]): Unit = js.native
  def list(params: Unit, options: MethodOptions): GaxiosPromise[SchemaOrderreturnsListResponse] = js.native
  def list(params: ParamsResourceOrderreturnsList): GaxiosPromise[SchemaOrderreturnsListResponse] = js.native
  def list(
    params: ParamsResourceOrderreturnsList,
    callback: BodyResponseCallback[SchemaOrderreturnsListResponse]
  ): Unit = js.native
  def list(
    params: ParamsResourceOrderreturnsList,
    options: BodyResponseCallback[Readable | SchemaOrderreturnsListResponse],
    callback: BodyResponseCallback[Readable | SchemaOrderreturnsListResponse]
  ): Unit = js.native
  def list(params: ParamsResourceOrderreturnsList, options: MethodOptions): GaxiosPromise[SchemaOrderreturnsListResponse] = js.native
  def list(
    params: ParamsResourceOrderreturnsList,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaOrderreturnsListResponse]
  ): Unit = js.native
  /**
    * Lists order returns in your Merchant Center account.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/content.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const content = google.content('v2');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/content'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await content.orderreturns.list({
    *     // Obtains order returns created before this date (inclusively), in ISO 8601 format.
    *     createdEndDate: 'placeholder-value',
    *     // Obtains order returns created after this date (inclusively), in ISO 8601 format.
    *     createdStartDate: 'placeholder-value',
    *     // The maximum number of order returns to return in the response, used for paging. The default value is 25 returns per page, and the maximum allowed value is 250 returns per page.
    *     maxResults: 'placeholder-value',
    *     // The ID of the account that manages the order. This cannot be a multi-client account.
    *     merchantId: 'placeholder-value',
    *     // Return the results in the specified order.
    *     orderBy: 'placeholder-value',
    *     // The token returned by the previous request.
    *     pageToken: 'placeholder-value',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "kind": "my_kind",
    *   //   "nextPageToken": "my_nextPageToken",
    *   //   "resources": []
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def list(params: ParamsResourceOrderreturnsList, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def list(
    params: ParamsResourceOrderreturnsList,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
}
