package typings.googleapis.cloudbuildV1Mod.cloudbuildV1

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaBitbucketServerTriggerConfig extends StObject {
  
  /**
    * Output only. The BitbucketServerConfig specified in the bitbucket_server_config_resource field.
    */
  var bitbucketServerConfig: js.UndefOr[SchemaBitbucketServerConfig] = js.undefined
  
  /**
    * Required. The Bitbucket server config resource that this trigger config maps to.
    */
  var bitbucketServerConfigResource: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
    */
  var projectKey: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Filter to match changes in pull requests.
    */
  var pullRequest: js.UndefOr[SchemaPullRequestFilter] = js.undefined
  
  /**
    * Filter to match changes in refs like branches, tags.
    */
  var push: js.UndefOr[SchemaPushFilter] = js.undefined
  
  /**
    * Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
    */
  var repoSlug: js.UndefOr[String | Null] = js.undefined
}
object SchemaBitbucketServerTriggerConfig {
  
  inline def apply(): SchemaBitbucketServerTriggerConfig = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaBitbucketServerTriggerConfig]
  }
  
  extension [Self <: SchemaBitbucketServerTriggerConfig](x: Self) {
    
    inline def setBitbucketServerConfig(value: SchemaBitbucketServerConfig): Self = StObject.set(x, "bitbucketServerConfig", value.asInstanceOf[js.Any])
    
    inline def setBitbucketServerConfigResource(value: String): Self = StObject.set(x, "bitbucketServerConfigResource", value.asInstanceOf[js.Any])
    
    inline def setBitbucketServerConfigResourceNull: Self = StObject.set(x, "bitbucketServerConfigResource", null)
    
    inline def setBitbucketServerConfigResourceUndefined: Self = StObject.set(x, "bitbucketServerConfigResource", js.undefined)
    
    inline def setBitbucketServerConfigUndefined: Self = StObject.set(x, "bitbucketServerConfig", js.undefined)
    
    inline def setProjectKey(value: String): Self = StObject.set(x, "projectKey", value.asInstanceOf[js.Any])
    
    inline def setProjectKeyNull: Self = StObject.set(x, "projectKey", null)
    
    inline def setProjectKeyUndefined: Self = StObject.set(x, "projectKey", js.undefined)
    
    inline def setPullRequest(value: SchemaPullRequestFilter): Self = StObject.set(x, "pullRequest", value.asInstanceOf[js.Any])
    
    inline def setPullRequestUndefined: Self = StObject.set(x, "pullRequest", js.undefined)
    
    inline def setPush(value: SchemaPushFilter): Self = StObject.set(x, "push", value.asInstanceOf[js.Any])
    
    inline def setPushUndefined: Self = StObject.set(x, "push", js.undefined)
    
    inline def setRepoSlug(value: String): Self = StObject.set(x, "repoSlug", value.asInstanceOf[js.Any])
    
    inline def setRepoSlugNull: Self = StObject.set(x, "repoSlug", null)
    
    inline def setRepoSlugUndefined: Self = StObject.set(x, "repoSlug", js.undefined)
  }
}
