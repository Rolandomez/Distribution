package typings.googleapis.websecurityscannerV1betaMod.websecurityscannerV1beta

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * A ScanConfig resource contains the configurations to launch a scan. next
  * id: 12
  */
trait SchemaScanConfig extends StObject {
  
  /**
    * The authentication configuration. If specified, service will use the
    * authentication configuration during scanning.
    */
  var authentication: js.UndefOr[SchemaAuthentication] = js.undefined
  
  /**
    * The blacklist URL patterns as described in
    * https://cloud.google.com/security-scanner/docs/excluded-urls
    */
  var blacklistPatterns: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * Required. The user provided display name of the ScanConfig.
    */
  var displayName: js.UndefOr[String] = js.undefined
  
  /**
    * Controls export of scan configurations and results to Cloud Security
    * Command Center.
    */
  var exportToSecurityCommandCenter: js.UndefOr[String] = js.undefined
  
  /**
    * Latest ScanRun if available.
    */
  var latestRun: js.UndefOr[SchemaScanRun] = js.undefined
  
  /**
    * The maximum QPS during scanning. A valid value ranges from 5 to 20
    * inclusively. If the field is unspecified or its value is set 0, server
    * will default to 15. Other values outside of [5, 20] range will be
    * rejected with INVALID_ARGUMENT error.
    */
  var maxQps: js.UndefOr[Double] = js.undefined
  
  /**
    * The resource name of the ScanConfig. The name follows the format of
    * &#39;projects/{projectId}/scanConfigs/{scanConfigId}&#39;. The ScanConfig
    * IDs are generated by the system.
    */
  var name: js.UndefOr[String] = js.undefined
  
  /**
    * The schedule of the ScanConfig.
    */
  var schedule: js.UndefOr[SchemaSchedule] = js.undefined
  
  /**
    * Required. The starting URLs from which the scanner finds site pages.
    */
  var startingUrls: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * Set of Cloud Platforms targeted by the scan. If empty, APP_ENGINE will be
    * used as a default.
    */
  var targetPlatforms: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * The user agent used during scanning.
    */
  var userAgent: js.UndefOr[String] = js.undefined
}
object SchemaScanConfig {
  
  inline def apply(): SchemaScanConfig = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaScanConfig]
  }
  
  extension [Self <: SchemaScanConfig](x: Self) {
    
    inline def setAuthentication(value: SchemaAuthentication): Self = StObject.set(x, "authentication", value.asInstanceOf[js.Any])
    
    inline def setAuthenticationUndefined: Self = StObject.set(x, "authentication", js.undefined)
    
    inline def setBlacklistPatterns(value: js.Array[String]): Self = StObject.set(x, "blacklistPatterns", value.asInstanceOf[js.Any])
    
    inline def setBlacklistPatternsUndefined: Self = StObject.set(x, "blacklistPatterns", js.undefined)
    
    inline def setBlacklistPatternsVarargs(value: String*): Self = StObject.set(x, "blacklistPatterns", js.Array(value :_*))
    
    inline def setDisplayName(value: String): Self = StObject.set(x, "displayName", value.asInstanceOf[js.Any])
    
    inline def setDisplayNameUndefined: Self = StObject.set(x, "displayName", js.undefined)
    
    inline def setExportToSecurityCommandCenter(value: String): Self = StObject.set(x, "exportToSecurityCommandCenter", value.asInstanceOf[js.Any])
    
    inline def setExportToSecurityCommandCenterUndefined: Self = StObject.set(x, "exportToSecurityCommandCenter", js.undefined)
    
    inline def setLatestRun(value: SchemaScanRun): Self = StObject.set(x, "latestRun", value.asInstanceOf[js.Any])
    
    inline def setLatestRunUndefined: Self = StObject.set(x, "latestRun", js.undefined)
    
    inline def setMaxQps(value: Double): Self = StObject.set(x, "maxQps", value.asInstanceOf[js.Any])
    
    inline def setMaxQpsUndefined: Self = StObject.set(x, "maxQps", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setSchedule(value: SchemaSchedule): Self = StObject.set(x, "schedule", value.asInstanceOf[js.Any])
    
    inline def setScheduleUndefined: Self = StObject.set(x, "schedule", js.undefined)
    
    inline def setStartingUrls(value: js.Array[String]): Self = StObject.set(x, "startingUrls", value.asInstanceOf[js.Any])
    
    inline def setStartingUrlsUndefined: Self = StObject.set(x, "startingUrls", js.undefined)
    
    inline def setStartingUrlsVarargs(value: String*): Self = StObject.set(x, "startingUrls", js.Array(value :_*))
    
    inline def setTargetPlatforms(value: js.Array[String]): Self = StObject.set(x, "targetPlatforms", value.asInstanceOf[js.Any])
    
    inline def setTargetPlatformsUndefined: Self = StObject.set(x, "targetPlatforms", js.undefined)
    
    inline def setTargetPlatformsVarargs(value: String*): Self = StObject.set(x, "targetPlatforms", js.Array(value :_*))
    
    inline def setUserAgent(value: String): Self = StObject.set(x, "userAgent", value.asInstanceOf[js.Any])
    
    inline def setUserAgentUndefined: Self = StObject.set(x, "userAgent", js.undefined)
  }
}
