package typings.googleapis.v1alpha1Mod.cloudbuildV1alpha1

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * A build resource in the Cloud Build API.  At a high level, a `Build`
  * describes where to find source code, how to build it (for example, the
  * builder image to run on the source), and where to store the built
  * artifacts.  Fields can include the following variables, which will be
  * expanded when the build is created:  - $PROJECT_ID: the project ID of the
  * build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the
  * source repository name specified by RepoSource. - $BRANCH_NAME: the branch
  * name specified by RepoSource. - $TAG_NAME: the tag name specified by
  * RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by
  * RepoSource or   resolved from the specified branch or tag. - $SHORT_SHA:
  * first 7 characters of $REVISION_ID or $COMMIT_SHA.
  */
trait SchemaBuild extends StObject {
  
  /**
    * Artifacts produced by the build that should be uploaded upon successful
    * completion of all build steps.
    */
  var artifacts: js.UndefOr[SchemaArtifacts] = js.undefined
  
  /**
    * Output only. The ID of the `BuildTrigger` that triggered this build, if
    * it was triggered automatically.
    */
  var buildTriggerId: js.UndefOr[String] = js.undefined
  
  /**
    * Output only. Time at which the request to create the build was received.
    */
  var createTime: js.UndefOr[String] = js.undefined
  
  /**
    * Output only. Time at which execution of the build was finished.  The
    * difference between finish_time and start_time is the duration of the
    * build&#39;s execution.
    */
  var finishTime: js.UndefOr[String] = js.undefined
  
  /**
    * Output only. Unique identifier of the build.
    */
  var id: js.UndefOr[String] = js.undefined
  
  /**
    * A list of images to be pushed upon the successful completion of all build
    * steps.  The images are pushed using the builder service account&#39;s
    * credentials.  The digests of the pushed images will be stored in the
    * `Build` resource&#39;s results field.  If any of the images fail to be
    * pushed, the build status is marked `FAILURE`.
    */
  var images: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * Output only. URL to logs for this build in Google Cloud Console.
    */
  var logUrl: js.UndefOr[String] = js.undefined
  
  /**
    * Google Cloud Storage bucket where logs should be written (see [Bucket
    * Name
    * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
    * Logs file names will be of the format
    * `${logs_bucket}/log-${build_id}.txt`.
    */
  var logsBucket: js.UndefOr[String] = js.undefined
  
  /**
    * Special options for this build.
    */
  var options: js.UndefOr[SchemaBuildOptions] = js.undefined
  
  /**
    * Output only. ID of the project.
    */
  var projectId: js.UndefOr[String] = js.undefined
  
  /**
    * Output only. Results of the build.
    */
  var results: js.UndefOr[SchemaResults] = js.undefined
  
  /**
    * Secrets to decrypt using Cloud Key Management Service.
    */
  var secrets: js.UndefOr[js.Array[SchemaSecret]] = js.undefined
  
  /**
    * The location of the source files to build.
    */
  var source: js.UndefOr[SchemaSource] = js.undefined
  
  /**
    * Output only. A permanent fixed identifier for source.
    */
  var sourceProvenance: js.UndefOr[SchemaSourceProvenance] = js.undefined
  
  /**
    * Output only. Time at which execution of the build was started.
    */
  var startTime: js.UndefOr[String] = js.undefined
  
  /**
    * Output only. Status of the build.
    */
  var status: js.UndefOr[String] = js.undefined
  
  /**
    * Output only. Customer-readable message about the current status.
    */
  var statusDetail: js.UndefOr[String] = js.undefined
  
  /**
    * Required. The operations to be performed on the workspace.
    */
  var steps: js.UndefOr[js.Array[SchemaBuildStep]] = js.undefined
  
  /**
    * Substitutions data for `Build` resource.
    */
  var substitutions: js.UndefOr[StringDictionary[String]] = js.undefined
  
  /**
    * Tags for annotation of a `Build`. These are not docker tags.
    */
  var tags: js.UndefOr[js.Array[String]] = js.undefined
  
  /**
    * Amount of time that this build should be allowed to run, to second
    * granularity. If this amount of time elapses, work on the build will cease
    * and the build status will be `TIMEOUT`.  Default time is ten minutes.
    */
  var timeout: js.UndefOr[String] = js.undefined
  
  /**
    * Output only. Stores timing information for phases of the build. Valid
    * keys are:  * BUILD: time to execute all build steps * PUSH: time to push
    * all specified images. * FETCHSOURCE: time to fetch source.  If the build
    * does not specify source or images, these keys will not be included.
    */
  var timing: js.UndefOr[StringDictionary[SchemaTimeSpan]] = js.undefined
}
object SchemaBuild {
  
  inline def apply(): SchemaBuild = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaBuild]
  }
  
  extension [Self <: SchemaBuild](x: Self) {
    
    inline def setArtifacts(value: SchemaArtifacts): Self = StObject.set(x, "artifacts", value.asInstanceOf[js.Any])
    
    inline def setArtifactsUndefined: Self = StObject.set(x, "artifacts", js.undefined)
    
    inline def setBuildTriggerId(value: String): Self = StObject.set(x, "buildTriggerId", value.asInstanceOf[js.Any])
    
    inline def setBuildTriggerIdUndefined: Self = StObject.set(x, "buildTriggerId", js.undefined)
    
    inline def setCreateTime(value: String): Self = StObject.set(x, "createTime", value.asInstanceOf[js.Any])
    
    inline def setCreateTimeUndefined: Self = StObject.set(x, "createTime", js.undefined)
    
    inline def setFinishTime(value: String): Self = StObject.set(x, "finishTime", value.asInstanceOf[js.Any])
    
    inline def setFinishTimeUndefined: Self = StObject.set(x, "finishTime", js.undefined)
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    inline def setImages(value: js.Array[String]): Self = StObject.set(x, "images", value.asInstanceOf[js.Any])
    
    inline def setImagesUndefined: Self = StObject.set(x, "images", js.undefined)
    
    inline def setImagesVarargs(value: String*): Self = StObject.set(x, "images", js.Array(value :_*))
    
    inline def setLogUrl(value: String): Self = StObject.set(x, "logUrl", value.asInstanceOf[js.Any])
    
    inline def setLogUrlUndefined: Self = StObject.set(x, "logUrl", js.undefined)
    
    inline def setLogsBucket(value: String): Self = StObject.set(x, "logsBucket", value.asInstanceOf[js.Any])
    
    inline def setLogsBucketUndefined: Self = StObject.set(x, "logsBucket", js.undefined)
    
    inline def setOptions(value: SchemaBuildOptions): Self = StObject.set(x, "options", value.asInstanceOf[js.Any])
    
    inline def setOptionsUndefined: Self = StObject.set(x, "options", js.undefined)
    
    inline def setProjectId(value: String): Self = StObject.set(x, "projectId", value.asInstanceOf[js.Any])
    
    inline def setProjectIdUndefined: Self = StObject.set(x, "projectId", js.undefined)
    
    inline def setResults(value: SchemaResults): Self = StObject.set(x, "results", value.asInstanceOf[js.Any])
    
    inline def setResultsUndefined: Self = StObject.set(x, "results", js.undefined)
    
    inline def setSecrets(value: js.Array[SchemaSecret]): Self = StObject.set(x, "secrets", value.asInstanceOf[js.Any])
    
    inline def setSecretsUndefined: Self = StObject.set(x, "secrets", js.undefined)
    
    inline def setSecretsVarargs(value: SchemaSecret*): Self = StObject.set(x, "secrets", js.Array(value :_*))
    
    inline def setSource(value: SchemaSource): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
    
    inline def setSourceProvenance(value: SchemaSourceProvenance): Self = StObject.set(x, "sourceProvenance", value.asInstanceOf[js.Any])
    
    inline def setSourceProvenanceUndefined: Self = StObject.set(x, "sourceProvenance", js.undefined)
    
    inline def setSourceUndefined: Self = StObject.set(x, "source", js.undefined)
    
    inline def setStartTime(value: String): Self = StObject.set(x, "startTime", value.asInstanceOf[js.Any])
    
    inline def setStartTimeUndefined: Self = StObject.set(x, "startTime", js.undefined)
    
    inline def setStatus(value: String): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    inline def setStatusDetail(value: String): Self = StObject.set(x, "statusDetail", value.asInstanceOf[js.Any])
    
    inline def setStatusDetailUndefined: Self = StObject.set(x, "statusDetail", js.undefined)
    
    inline def setStatusUndefined: Self = StObject.set(x, "status", js.undefined)
    
    inline def setSteps(value: js.Array[SchemaBuildStep]): Self = StObject.set(x, "steps", value.asInstanceOf[js.Any])
    
    inline def setStepsUndefined: Self = StObject.set(x, "steps", js.undefined)
    
    inline def setStepsVarargs(value: SchemaBuildStep*): Self = StObject.set(x, "steps", js.Array(value :_*))
    
    inline def setSubstitutions(value: StringDictionary[String]): Self = StObject.set(x, "substitutions", value.asInstanceOf[js.Any])
    
    inline def setSubstitutionsUndefined: Self = StObject.set(x, "substitutions", js.undefined)
    
    inline def setTags(value: js.Array[String]): Self = StObject.set(x, "tags", value.asInstanceOf[js.Any])
    
    inline def setTagsUndefined: Self = StObject.set(x, "tags", js.undefined)
    
    inline def setTagsVarargs(value: String*): Self = StObject.set(x, "tags", js.Array(value :_*))
    
    inline def setTimeout(value: String): Self = StObject.set(x, "timeout", value.asInstanceOf[js.Any])
    
    inline def setTimeoutUndefined: Self = StObject.set(x, "timeout", js.undefined)
    
    inline def setTiming(value: StringDictionary[SchemaTimeSpan]): Self = StObject.set(x, "timing", value.asInstanceOf[js.Any])
    
    inline def setTimingUndefined: Self = StObject.set(x, "timing", js.undefined)
  }
}
