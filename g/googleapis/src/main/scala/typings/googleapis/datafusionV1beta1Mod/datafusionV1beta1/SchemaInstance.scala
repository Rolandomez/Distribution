package typings.googleapis.datafusionV1beta1Mod.datafusionV1beta1

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaInstance extends StObject {
  
  /**
    * List of accelerators enabled for this CDF instance.
    */
  var accelerators: js.UndefOr[js.Array[SchemaAccelerator]] = js.undefined
  
  /**
    * Output only. Endpoint on which the REST APIs is accessible.
    */
  var apiEndpoint: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Available versions that the instance can be upgraded to using UpdateInstanceRequest.
    */
  var availableVersion: js.UndefOr[js.Array[SchemaVersion]] = js.undefined
  
  /**
    * Output only. The time the instance was created.
    */
  var createTime: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
    */
  var cryptoKeyConfig: js.UndefOr[SchemaCryptoKeyConfig] = js.undefined
  
  /**
    * User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines. This allows users to have fine-grained access control on Dataproc's accesses to cloud resources.
    */
  var dataprocServiceAccount: js.UndefOr[String | Null] = js.undefined
  
  /**
    * A description of this instance.
    */
  var description: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. If the instance state is DISABLED, the reason for disabling the instance.
    */
  var disabledReason: js.UndefOr[js.Array[String] | Null] = js.undefined
  
  /**
    * Display name for an instance.
    */
  var displayName: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Option to enable granular role-based access control.
    */
  var enableRbac: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * Option to enable Stackdriver Logging.
    */
  var enableStackdriverLogging: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * Option to enable Stackdriver Monitoring.
    */
  var enableStackdriverMonitoring: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * Option to enable and pass metadata for event publishing.
    */
  var eventPublishConfig: js.UndefOr[SchemaEventPublishConfig] = js.undefined
  
  /**
    * Output only. Cloud Storage bucket generated by Data Fusion in the customer project.
    */
  var gcsBucket: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The resource labels for instance to use to annotate any related underlying resources such as Compute Engine VMs. The character '=' is not allowed to be used within the labels.
    */
  var labels: js.UndefOr[StringDictionary[String] | Null] = js.undefined
  
  /**
    * Output only. The name of this instance is in the form of projects/{project\}/locations/{location\}/instances/{instance\}.
    */
  var name: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Network configuration options. These are required when a private Data Fusion instance is to be created.
    */
  var networkConfig: js.UndefOr[SchemaNetworkConfig] = js.undefined
  
  /**
    * Map of additional options used to configure the behavior of Data Fusion instance.
    */
  var options: js.UndefOr[StringDictionary[String] | Null] = js.undefined
  
  /**
    * Output only. P4 service account for the customer project.
    */
  var p4ServiceAccount: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Specifies whether the Data Fusion instance should be private. If set to true, all Data Fusion nodes will have private IP addresses and will not be able to access the public internet.
    */
  var privateInstance: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * Output only. Deprecated. Use tenant_project_id instead to extract the tenant project ID.
    */
  var serviceAccount: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. Endpoint on which the Data Fusion UI is accessible.
    */
  var serviceEndpoint: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. The current state of this Data Fusion instance.
    */
  var state: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. Additional information about the current state of this Data Fusion instance if available.
    */
  var stateMessage: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. The name of the tenant project.
    */
  var tenantProjectId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Required. Instance type.
    */
  var `type`: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. The time the instance was last updated.
    */
  var updateTime: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Current version of Data Fusion.
    */
  var version: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
    */
  var zone: js.UndefOr[String | Null] = js.undefined
}
object SchemaInstance {
  
  inline def apply(): SchemaInstance = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaInstance]
  }
  
  extension [Self <: SchemaInstance](x: Self) {
    
    inline def setAccelerators(value: js.Array[SchemaAccelerator]): Self = StObject.set(x, "accelerators", value.asInstanceOf[js.Any])
    
    inline def setAcceleratorsUndefined: Self = StObject.set(x, "accelerators", js.undefined)
    
    inline def setAcceleratorsVarargs(value: SchemaAccelerator*): Self = StObject.set(x, "accelerators", js.Array(value*))
    
    inline def setApiEndpoint(value: String): Self = StObject.set(x, "apiEndpoint", value.asInstanceOf[js.Any])
    
    inline def setApiEndpointNull: Self = StObject.set(x, "apiEndpoint", null)
    
    inline def setApiEndpointUndefined: Self = StObject.set(x, "apiEndpoint", js.undefined)
    
    inline def setAvailableVersion(value: js.Array[SchemaVersion]): Self = StObject.set(x, "availableVersion", value.asInstanceOf[js.Any])
    
    inline def setAvailableVersionUndefined: Self = StObject.set(x, "availableVersion", js.undefined)
    
    inline def setAvailableVersionVarargs(value: SchemaVersion*): Self = StObject.set(x, "availableVersion", js.Array(value*))
    
    inline def setCreateTime(value: String): Self = StObject.set(x, "createTime", value.asInstanceOf[js.Any])
    
    inline def setCreateTimeNull: Self = StObject.set(x, "createTime", null)
    
    inline def setCreateTimeUndefined: Self = StObject.set(x, "createTime", js.undefined)
    
    inline def setCryptoKeyConfig(value: SchemaCryptoKeyConfig): Self = StObject.set(x, "cryptoKeyConfig", value.asInstanceOf[js.Any])
    
    inline def setCryptoKeyConfigUndefined: Self = StObject.set(x, "cryptoKeyConfig", js.undefined)
    
    inline def setDataprocServiceAccount(value: String): Self = StObject.set(x, "dataprocServiceAccount", value.asInstanceOf[js.Any])
    
    inline def setDataprocServiceAccountNull: Self = StObject.set(x, "dataprocServiceAccount", null)
    
    inline def setDataprocServiceAccountUndefined: Self = StObject.set(x, "dataprocServiceAccount", js.undefined)
    
    inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    inline def setDescriptionNull: Self = StObject.set(x, "description", null)
    
    inline def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    inline def setDisabledReason(value: js.Array[String]): Self = StObject.set(x, "disabledReason", value.asInstanceOf[js.Any])
    
    inline def setDisabledReasonNull: Self = StObject.set(x, "disabledReason", null)
    
    inline def setDisabledReasonUndefined: Self = StObject.set(x, "disabledReason", js.undefined)
    
    inline def setDisabledReasonVarargs(value: String*): Self = StObject.set(x, "disabledReason", js.Array(value*))
    
    inline def setDisplayName(value: String): Self = StObject.set(x, "displayName", value.asInstanceOf[js.Any])
    
    inline def setDisplayNameNull: Self = StObject.set(x, "displayName", null)
    
    inline def setDisplayNameUndefined: Self = StObject.set(x, "displayName", js.undefined)
    
    inline def setEnableRbac(value: Boolean): Self = StObject.set(x, "enableRbac", value.asInstanceOf[js.Any])
    
    inline def setEnableRbacNull: Self = StObject.set(x, "enableRbac", null)
    
    inline def setEnableRbacUndefined: Self = StObject.set(x, "enableRbac", js.undefined)
    
    inline def setEnableStackdriverLogging(value: Boolean): Self = StObject.set(x, "enableStackdriverLogging", value.asInstanceOf[js.Any])
    
    inline def setEnableStackdriverLoggingNull: Self = StObject.set(x, "enableStackdriverLogging", null)
    
    inline def setEnableStackdriverLoggingUndefined: Self = StObject.set(x, "enableStackdriverLogging", js.undefined)
    
    inline def setEnableStackdriverMonitoring(value: Boolean): Self = StObject.set(x, "enableStackdriverMonitoring", value.asInstanceOf[js.Any])
    
    inline def setEnableStackdriverMonitoringNull: Self = StObject.set(x, "enableStackdriverMonitoring", null)
    
    inline def setEnableStackdriverMonitoringUndefined: Self = StObject.set(x, "enableStackdriverMonitoring", js.undefined)
    
    inline def setEventPublishConfig(value: SchemaEventPublishConfig): Self = StObject.set(x, "eventPublishConfig", value.asInstanceOf[js.Any])
    
    inline def setEventPublishConfigUndefined: Self = StObject.set(x, "eventPublishConfig", js.undefined)
    
    inline def setGcsBucket(value: String): Self = StObject.set(x, "gcsBucket", value.asInstanceOf[js.Any])
    
    inline def setGcsBucketNull: Self = StObject.set(x, "gcsBucket", null)
    
    inline def setGcsBucketUndefined: Self = StObject.set(x, "gcsBucket", js.undefined)
    
    inline def setLabels(value: StringDictionary[String]): Self = StObject.set(x, "labels", value.asInstanceOf[js.Any])
    
    inline def setLabelsNull: Self = StObject.set(x, "labels", null)
    
    inline def setLabelsUndefined: Self = StObject.set(x, "labels", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameNull: Self = StObject.set(x, "name", null)
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setNetworkConfig(value: SchemaNetworkConfig): Self = StObject.set(x, "networkConfig", value.asInstanceOf[js.Any])
    
    inline def setNetworkConfigUndefined: Self = StObject.set(x, "networkConfig", js.undefined)
    
    inline def setOptions(value: StringDictionary[String]): Self = StObject.set(x, "options", value.asInstanceOf[js.Any])
    
    inline def setOptionsNull: Self = StObject.set(x, "options", null)
    
    inline def setOptionsUndefined: Self = StObject.set(x, "options", js.undefined)
    
    inline def setP4ServiceAccount(value: String): Self = StObject.set(x, "p4ServiceAccount", value.asInstanceOf[js.Any])
    
    inline def setP4ServiceAccountNull: Self = StObject.set(x, "p4ServiceAccount", null)
    
    inline def setP4ServiceAccountUndefined: Self = StObject.set(x, "p4ServiceAccount", js.undefined)
    
    inline def setPrivateInstance(value: Boolean): Self = StObject.set(x, "privateInstance", value.asInstanceOf[js.Any])
    
    inline def setPrivateInstanceNull: Self = StObject.set(x, "privateInstance", null)
    
    inline def setPrivateInstanceUndefined: Self = StObject.set(x, "privateInstance", js.undefined)
    
    inline def setServiceAccount(value: String): Self = StObject.set(x, "serviceAccount", value.asInstanceOf[js.Any])
    
    inline def setServiceAccountNull: Self = StObject.set(x, "serviceAccount", null)
    
    inline def setServiceAccountUndefined: Self = StObject.set(x, "serviceAccount", js.undefined)
    
    inline def setServiceEndpoint(value: String): Self = StObject.set(x, "serviceEndpoint", value.asInstanceOf[js.Any])
    
    inline def setServiceEndpointNull: Self = StObject.set(x, "serviceEndpoint", null)
    
    inline def setServiceEndpointUndefined: Self = StObject.set(x, "serviceEndpoint", js.undefined)
    
    inline def setState(value: String): Self = StObject.set(x, "state", value.asInstanceOf[js.Any])
    
    inline def setStateMessage(value: String): Self = StObject.set(x, "stateMessage", value.asInstanceOf[js.Any])
    
    inline def setStateMessageNull: Self = StObject.set(x, "stateMessage", null)
    
    inline def setStateMessageUndefined: Self = StObject.set(x, "stateMessage", js.undefined)
    
    inline def setStateNull: Self = StObject.set(x, "state", null)
    
    inline def setStateUndefined: Self = StObject.set(x, "state", js.undefined)
    
    inline def setTenantProjectId(value: String): Self = StObject.set(x, "tenantProjectId", value.asInstanceOf[js.Any])
    
    inline def setTenantProjectIdNull: Self = StObject.set(x, "tenantProjectId", null)
    
    inline def setTenantProjectIdUndefined: Self = StObject.set(x, "tenantProjectId", js.undefined)
    
    inline def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    
    inline def setTypeNull: Self = StObject.set(x, "type", null)
    
    inline def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
    
    inline def setUpdateTime(value: String): Self = StObject.set(x, "updateTime", value.asInstanceOf[js.Any])
    
    inline def setUpdateTimeNull: Self = StObject.set(x, "updateTime", null)
    
    inline def setUpdateTimeUndefined: Self = StObject.set(x, "updateTime", js.undefined)
    
    inline def setVersion(value: String): Self = StObject.set(x, "version", value.asInstanceOf[js.Any])
    
    inline def setVersionNull: Self = StObject.set(x, "version", null)
    
    inline def setVersionUndefined: Self = StObject.set(x, "version", js.undefined)
    
    inline def setZone(value: String): Self = StObject.set(x, "zone", value.asInstanceOf[js.Any])
    
    inline def setZoneNull: Self = StObject.set(x, "zone", null)
    
    inline def setZoneUndefined: Self = StObject.set(x, "zone", js.undefined)
  }
}
