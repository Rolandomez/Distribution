package typings.googleapis.containeranalysisV1alpha1Mod.containeranalysisV1alpha1

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaVulnerabilityDetails extends StObject {
  
  /**
    * Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.
    */
  var cvssScore: js.UndefOr[Double | Null] = js.undefined
  
  /**
    * The CVSS v3 score of this vulnerability.
    */
  var cvssV3: js.UndefOr[SchemaCVSS] = js.undefined
  
  /**
    * The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
    */
  var effectiveSeverity: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The set of affected locations and their fixes (if available) within the associated resource.
    */
  var packageIssue: js.UndefOr[js.Array[SchemaPackageIssue]] = js.undefined
  
  /**
    * Output only. The note provider assigned Severity of the vulnerability.
    */
  var severity: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.
    */
  var `type`: js.UndefOr[String | Null] = js.undefined
}
object SchemaVulnerabilityDetails {
  
  inline def apply(): SchemaVulnerabilityDetails = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaVulnerabilityDetails]
  }
  
  extension [Self <: SchemaVulnerabilityDetails](x: Self) {
    
    inline def setCvssScore(value: Double): Self = StObject.set(x, "cvssScore", value.asInstanceOf[js.Any])
    
    inline def setCvssScoreNull: Self = StObject.set(x, "cvssScore", null)
    
    inline def setCvssScoreUndefined: Self = StObject.set(x, "cvssScore", js.undefined)
    
    inline def setCvssV3(value: SchemaCVSS): Self = StObject.set(x, "cvssV3", value.asInstanceOf[js.Any])
    
    inline def setCvssV3Undefined: Self = StObject.set(x, "cvssV3", js.undefined)
    
    inline def setEffectiveSeverity(value: String): Self = StObject.set(x, "effectiveSeverity", value.asInstanceOf[js.Any])
    
    inline def setEffectiveSeverityNull: Self = StObject.set(x, "effectiveSeverity", null)
    
    inline def setEffectiveSeverityUndefined: Self = StObject.set(x, "effectiveSeverity", js.undefined)
    
    inline def setPackageIssue(value: js.Array[SchemaPackageIssue]): Self = StObject.set(x, "packageIssue", value.asInstanceOf[js.Any])
    
    inline def setPackageIssueUndefined: Self = StObject.set(x, "packageIssue", js.undefined)
    
    inline def setPackageIssueVarargs(value: SchemaPackageIssue*): Self = StObject.set(x, "packageIssue", js.Array(value*))
    
    inline def setSeverity(value: String): Self = StObject.set(x, "severity", value.asInstanceOf[js.Any])
    
    inline def setSeverityNull: Self = StObject.set(x, "severity", null)
    
    inline def setSeverityUndefined: Self = StObject.set(x, "severity", js.undefined)
    
    inline def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    
    inline def setTypeNull: Self = StObject.set(x, "type", null)
    
    inline def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
  }
}
