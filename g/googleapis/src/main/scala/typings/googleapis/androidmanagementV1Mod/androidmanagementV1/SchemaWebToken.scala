package typings.googleapis.androidmanagementV1Mod.androidmanagementV1

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaWebToken extends StObject {
  
  /**
    * The features to enable. Use this if you want to control exactly which feature(s) will be activated; leave empty to allow all features.Restrictions / things to note: - If no features are listed here, all features are enabled â€” this is the default behavior where you give access to all features to your admins. - This must not contain any FEATURE_UNSPECIFIED values. - Repeated values are ignored
    */
  var enabledFeatures: js.UndefOr[js.Array[String] | Null] = js.undefined
  
  /**
    * The name of the web token, which is generated by the server during creation in the form enterprises/{enterpriseId\}/webTokens/{webTokenId\}.
    */
  var name: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The URL of the parent frame hosting the iframe with the embedded UI. To prevent XSS, the iframe may not be hosted at other URLs. The URL must use the https scheme.
    */
  var parentFrameUrl: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Permissions available to an admin in the embedded UI. An admin must have all of these permissions in order to view the UI. This field is deprecated.
    */
  var permissions: js.UndefOr[js.Array[String] | Null] = js.undefined
  
  /**
    * The token value which is used in the hosting page to generate the iframe with the embedded UI. This is a read-only field generated by the server.
    */
  var value: js.UndefOr[String | Null] = js.undefined
}
object SchemaWebToken {
  
  inline def apply(): SchemaWebToken = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaWebToken]
  }
  
  extension [Self <: SchemaWebToken](x: Self) {
    
    inline def setEnabledFeatures(value: js.Array[String]): Self = StObject.set(x, "enabledFeatures", value.asInstanceOf[js.Any])
    
    inline def setEnabledFeaturesNull: Self = StObject.set(x, "enabledFeatures", null)
    
    inline def setEnabledFeaturesUndefined: Self = StObject.set(x, "enabledFeatures", js.undefined)
    
    inline def setEnabledFeaturesVarargs(value: String*): Self = StObject.set(x, "enabledFeatures", js.Array(value*))
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameNull: Self = StObject.set(x, "name", null)
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setParentFrameUrl(value: String): Self = StObject.set(x, "parentFrameUrl", value.asInstanceOf[js.Any])
    
    inline def setParentFrameUrlNull: Self = StObject.set(x, "parentFrameUrl", null)
    
    inline def setParentFrameUrlUndefined: Self = StObject.set(x, "parentFrameUrl", js.undefined)
    
    inline def setPermissions(value: js.Array[String]): Self = StObject.set(x, "permissions", value.asInstanceOf[js.Any])
    
    inline def setPermissionsNull: Self = StObject.set(x, "permissions", null)
    
    inline def setPermissionsUndefined: Self = StObject.set(x, "permissions", js.undefined)
    
    inline def setPermissionsVarargs(value: String*): Self = StObject.set(x, "permissions", js.Array(value*))
    
    inline def setValue(value: String): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
    
    inline def setValueNull: Self = StObject.set(x, "value", null)
    
    inline def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
  }
}
