package typings.googleapis.genomicsV1alpha2Mod.genomicsV1alpha2

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaPipeline extends StObject {
  
  /**
    * User-specified description.
    */
  var description: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Specifies the docker run information.
    */
  var docker: js.UndefOr[SchemaDockerExecutor] = js.undefined
  
  /**
    * Input parameters of the pipeline.
    */
  var inputParameters: js.UndefOr[js.Array[SchemaPipelineParameter]] = js.undefined
  
  /**
    * Required. A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
    */
  var name: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output parameters of the pipeline.
    */
  var outputParameters: js.UndefOr[js.Array[SchemaPipelineParameter]] = js.undefined
  
  /**
    * Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
    */
  var pipelineId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Required. The project in which to create the pipeline. The caller must have WRITE access.
    */
  var projectId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Required. Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
    */
  var resources: js.UndefOr[SchemaPipelineResources] = js.undefined
}
object SchemaPipeline {
  
  inline def apply(): SchemaPipeline = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaPipeline]
  }
  
  extension [Self <: SchemaPipeline](x: Self) {
    
    inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    inline def setDescriptionNull: Self = StObject.set(x, "description", null)
    
    inline def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    inline def setDocker(value: SchemaDockerExecutor): Self = StObject.set(x, "docker", value.asInstanceOf[js.Any])
    
    inline def setDockerUndefined: Self = StObject.set(x, "docker", js.undefined)
    
    inline def setInputParameters(value: js.Array[SchemaPipelineParameter]): Self = StObject.set(x, "inputParameters", value.asInstanceOf[js.Any])
    
    inline def setInputParametersUndefined: Self = StObject.set(x, "inputParameters", js.undefined)
    
    inline def setInputParametersVarargs(value: SchemaPipelineParameter*): Self = StObject.set(x, "inputParameters", js.Array(value*))
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameNull: Self = StObject.set(x, "name", null)
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setOutputParameters(value: js.Array[SchemaPipelineParameter]): Self = StObject.set(x, "outputParameters", value.asInstanceOf[js.Any])
    
    inline def setOutputParametersUndefined: Self = StObject.set(x, "outputParameters", js.undefined)
    
    inline def setOutputParametersVarargs(value: SchemaPipelineParameter*): Self = StObject.set(x, "outputParameters", js.Array(value*))
    
    inline def setPipelineId(value: String): Self = StObject.set(x, "pipelineId", value.asInstanceOf[js.Any])
    
    inline def setPipelineIdNull: Self = StObject.set(x, "pipelineId", null)
    
    inline def setPipelineIdUndefined: Self = StObject.set(x, "pipelineId", js.undefined)
    
    inline def setProjectId(value: String): Self = StObject.set(x, "projectId", value.asInstanceOf[js.Any])
    
    inline def setProjectIdNull: Self = StObject.set(x, "projectId", null)
    
    inline def setProjectIdUndefined: Self = StObject.set(x, "projectId", js.undefined)
    
    inline def setResources(value: SchemaPipelineResources): Self = StObject.set(x, "resources", value.asInstanceOf[js.Any])
    
    inline def setResourcesUndefined: Self = StObject.set(x, "resources", js.undefined)
  }
}
