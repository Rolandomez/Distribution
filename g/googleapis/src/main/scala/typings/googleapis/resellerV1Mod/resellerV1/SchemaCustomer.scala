package typings.googleapis.resellerV1Mod.resellerV1

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaCustomer extends StObject {
  
  /**
    * Like the "Customer email" in the reseller tools, this email is the secondary contact used if something happens to the customer's service such as service outage or a security issue. This property is required when creating a new "domain" customer and should not use the same domain as `customerDomain`. The `alternateEmail` field is not necessary to create a "team" customer.
    */
  var alternateEmail: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The customer's primary domain name string. `customerDomain` is required when creating a new customer. Do not include the `www` prefix in the domain when adding a customer.
    */
  var customerDomain: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Whether the customer's primary domain has been verified.
    */
  var customerDomainVerified: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary domain or the unique identifier generated by Google.
    */
  var customerId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Identifies the type of the customer. Acceptable values include: * `domain`: Implies a domain-verified customer (default). * `team`: Implies an email-verified customer. For more information, see [managed teams](https://support.google.com/a/users/answer/9939479).
    */
  var customerType: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Identifies the resource as a customer. Value: `reseller#customer`
    */
  var kind: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Customer contact phone number. Must start with "+" followed by the country code. The rest of the number can be contiguous numbers or respect the phone local format conventions, but it must be a real phone number and not, for example, "123". This field is silently ignored if invalid.
    */
  var phoneNumber: js.UndefOr[String | Null] = js.undefined
  
  /**
    * A customer's address information. Each field has a limit of 255 charcters.
    */
  var postalAddress: js.UndefOr[SchemaAddress] = js.undefined
  
  /**
    * The first admin details of the customer, present in case of TEAM customer.
    */
  var primaryAdmin: js.UndefOr[SchemaPrimaryAdmin] = js.undefined
  
  /**
    * URL to customer's Admin console dashboard. The read-only URL is generated by the API service. This is used if your client application requires the customer to complete a task in the Admin console.
    */
  var resourceUiUrl: js.UndefOr[String | Null] = js.undefined
}
object SchemaCustomer {
  
  inline def apply(): SchemaCustomer = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaCustomer]
  }
  
  extension [Self <: SchemaCustomer](x: Self) {
    
    inline def setAlternateEmail(value: String): Self = StObject.set(x, "alternateEmail", value.asInstanceOf[js.Any])
    
    inline def setAlternateEmailNull: Self = StObject.set(x, "alternateEmail", null)
    
    inline def setAlternateEmailUndefined: Self = StObject.set(x, "alternateEmail", js.undefined)
    
    inline def setCustomerDomain(value: String): Self = StObject.set(x, "customerDomain", value.asInstanceOf[js.Any])
    
    inline def setCustomerDomainNull: Self = StObject.set(x, "customerDomain", null)
    
    inline def setCustomerDomainUndefined: Self = StObject.set(x, "customerDomain", js.undefined)
    
    inline def setCustomerDomainVerified(value: Boolean): Self = StObject.set(x, "customerDomainVerified", value.asInstanceOf[js.Any])
    
    inline def setCustomerDomainVerifiedNull: Self = StObject.set(x, "customerDomainVerified", null)
    
    inline def setCustomerDomainVerifiedUndefined: Self = StObject.set(x, "customerDomainVerified", js.undefined)
    
    inline def setCustomerId(value: String): Self = StObject.set(x, "customerId", value.asInstanceOf[js.Any])
    
    inline def setCustomerIdNull: Self = StObject.set(x, "customerId", null)
    
    inline def setCustomerIdUndefined: Self = StObject.set(x, "customerId", js.undefined)
    
    inline def setCustomerType(value: String): Self = StObject.set(x, "customerType", value.asInstanceOf[js.Any])
    
    inline def setCustomerTypeNull: Self = StObject.set(x, "customerType", null)
    
    inline def setCustomerTypeUndefined: Self = StObject.set(x, "customerType", js.undefined)
    
    inline def setKind(value: String): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    inline def setKindNull: Self = StObject.set(x, "kind", null)
    
    inline def setKindUndefined: Self = StObject.set(x, "kind", js.undefined)
    
    inline def setPhoneNumber(value: String): Self = StObject.set(x, "phoneNumber", value.asInstanceOf[js.Any])
    
    inline def setPhoneNumberNull: Self = StObject.set(x, "phoneNumber", null)
    
    inline def setPhoneNumberUndefined: Self = StObject.set(x, "phoneNumber", js.undefined)
    
    inline def setPostalAddress(value: SchemaAddress): Self = StObject.set(x, "postalAddress", value.asInstanceOf[js.Any])
    
    inline def setPostalAddressUndefined: Self = StObject.set(x, "postalAddress", js.undefined)
    
    inline def setPrimaryAdmin(value: SchemaPrimaryAdmin): Self = StObject.set(x, "primaryAdmin", value.asInstanceOf[js.Any])
    
    inline def setPrimaryAdminUndefined: Self = StObject.set(x, "primaryAdmin", js.undefined)
    
    inline def setResourceUiUrl(value: String): Self = StObject.set(x, "resourceUiUrl", value.asInstanceOf[js.Any])
    
    inline def setResourceUiUrlNull: Self = StObject.set(x, "resourceUiUrl", null)
    
    inline def setResourceUiUrlUndefined: Self = StObject.set(x, "resourceUiUrl", js.undefined)
  }
}
