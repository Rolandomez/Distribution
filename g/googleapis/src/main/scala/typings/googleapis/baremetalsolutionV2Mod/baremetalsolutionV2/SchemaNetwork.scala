package typings.googleapis.baremetalsolutionV2Mod.baremetalsolutionV2

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaNetwork extends StObject {
  
  /**
    * The cidr of the Network.
    */
  var cidr: js.UndefOr[String | Null] = js.undefined
  
  /**
    * An identifier for the `Network`, generated by the backend.
    */
  var id: js.UndefOr[String | Null] = js.undefined
  
  /**
    * IP address configured.
    */
  var ipAddress: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Labels as key value pairs.
    */
  var labels: js.UndefOr[StringDictionary[String] | Null] = js.undefined
  
  /**
    * List of physical interfaces.
    */
  var macAddress: js.UndefOr[js.Array[String] | Null] = js.undefined
  
  /**
    * Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project\}/locations/{location\}/networks/{network\}`
    */
  var name: js.UndefOr[String | Null] = js.undefined
  
  /**
    * List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
    */
  var reservations: js.UndefOr[js.Array[SchemaNetworkAddressReservation]] = js.undefined
  
  /**
    * IP range for reserved for services (e.g. NFS).
    */
  var servicesCidr: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The Network state.
    */
  var state: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The type of this network.
    */
  var `type`: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The vlan id of the Network.
    */
  var vlanId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The vrf for the Network.
    */
  var vrf: js.UndefOr[SchemaVRF] = js.undefined
}
object SchemaNetwork {
  
  inline def apply(): SchemaNetwork = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaNetwork]
  }
  
  extension [Self <: SchemaNetwork](x: Self) {
    
    inline def setCidr(value: String): Self = StObject.set(x, "cidr", value.asInstanceOf[js.Any])
    
    inline def setCidrNull: Self = StObject.set(x, "cidr", null)
    
    inline def setCidrUndefined: Self = StObject.set(x, "cidr", js.undefined)
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setIdNull: Self = StObject.set(x, "id", null)
    
    inline def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    inline def setIpAddress(value: String): Self = StObject.set(x, "ipAddress", value.asInstanceOf[js.Any])
    
    inline def setIpAddressNull: Self = StObject.set(x, "ipAddress", null)
    
    inline def setIpAddressUndefined: Self = StObject.set(x, "ipAddress", js.undefined)
    
    inline def setLabels(value: StringDictionary[String]): Self = StObject.set(x, "labels", value.asInstanceOf[js.Any])
    
    inline def setLabelsNull: Self = StObject.set(x, "labels", null)
    
    inline def setLabelsUndefined: Self = StObject.set(x, "labels", js.undefined)
    
    inline def setMacAddress(value: js.Array[String]): Self = StObject.set(x, "macAddress", value.asInstanceOf[js.Any])
    
    inline def setMacAddressNull: Self = StObject.set(x, "macAddress", null)
    
    inline def setMacAddressUndefined: Self = StObject.set(x, "macAddress", js.undefined)
    
    inline def setMacAddressVarargs(value: String*): Self = StObject.set(x, "macAddress", js.Array(value*))
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameNull: Self = StObject.set(x, "name", null)
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setReservations(value: js.Array[SchemaNetworkAddressReservation]): Self = StObject.set(x, "reservations", value.asInstanceOf[js.Any])
    
    inline def setReservationsUndefined: Self = StObject.set(x, "reservations", js.undefined)
    
    inline def setReservationsVarargs(value: SchemaNetworkAddressReservation*): Self = StObject.set(x, "reservations", js.Array(value*))
    
    inline def setServicesCidr(value: String): Self = StObject.set(x, "servicesCidr", value.asInstanceOf[js.Any])
    
    inline def setServicesCidrNull: Self = StObject.set(x, "servicesCidr", null)
    
    inline def setServicesCidrUndefined: Self = StObject.set(x, "servicesCidr", js.undefined)
    
    inline def setState(value: String): Self = StObject.set(x, "state", value.asInstanceOf[js.Any])
    
    inline def setStateNull: Self = StObject.set(x, "state", null)
    
    inline def setStateUndefined: Self = StObject.set(x, "state", js.undefined)
    
    inline def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    
    inline def setTypeNull: Self = StObject.set(x, "type", null)
    
    inline def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
    
    inline def setVlanId(value: String): Self = StObject.set(x, "vlanId", value.asInstanceOf[js.Any])
    
    inline def setVlanIdNull: Self = StObject.set(x, "vlanId", null)
    
    inline def setVlanIdUndefined: Self = StObject.set(x, "vlanId", js.undefined)
    
    inline def setVrf(value: SchemaVRF): Self = StObject.set(x, "vrf", value.asInstanceOf[js.Any])
    
    inline def setVrfUndefined: Self = StObject.set(x, "vrf", js.undefined)
  }
}
