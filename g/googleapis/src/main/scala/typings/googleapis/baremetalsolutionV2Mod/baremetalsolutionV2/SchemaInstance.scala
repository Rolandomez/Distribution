package typings.googleapis.baremetalsolutionV2Mod.baremetalsolutionV2

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaInstance extends StObject {
  
  /**
    * Output only. Create a time stamp.
    */
  var createTime: js.UndefOr[String | Null] = js.undefined
  
  /**
    * True if you enable hyperthreading for the server, otherwise false. The default value is false.
    */
  var hyperthreadingEnabled: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * Output only. An identifier for the `Instance`, generated by the backend.
    */
  var id: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
    */
  var interactiveSerialConsoleEnabled: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * Labels as key value pairs.
    */
  var labels: js.UndefOr[StringDictionary[String] | Null] = js.undefined
  
  /**
    * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
    */
  var logicalInterfaces: js.UndefOr[js.Array[SchemaGoogleCloudBaremetalsolutionV2LogicalInterface]] = js.undefined
  
  /**
    * Output only. Text field about info for logging in.
    */
  var loginInfo: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Immutable. List of LUNs associated with this server.
    */
  var luns: js.UndefOr[js.Array[SchemaLun]] = js.undefined
  
  /**
    * Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
    */
  var machineType: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project\}/locations/{location\}/instances/{instance\}`
    */
  var name: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of "bond" or "nic".
    */
  var networkTemplate: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. List of networks associated with this server.
    */
  var networks: js.UndefOr[js.Array[SchemaNetwork]] = js.undefined
  
  /**
    * The OS image currently installed on the server.
    */
  var osImage: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Immutable. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes) allocated in the same pod only.
    */
  var pod: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. The state of the server.
    */
  var state: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Output only. Update a time stamp.
    */
  var updateTime: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
    */
  var volumes: js.UndefOr[js.Array[SchemaVolume]] = js.undefined
}
object SchemaInstance {
  
  inline def apply(): SchemaInstance = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaInstance]
  }
  
  extension [Self <: SchemaInstance](x: Self) {
    
    inline def setCreateTime(value: String): Self = StObject.set(x, "createTime", value.asInstanceOf[js.Any])
    
    inline def setCreateTimeNull: Self = StObject.set(x, "createTime", null)
    
    inline def setCreateTimeUndefined: Self = StObject.set(x, "createTime", js.undefined)
    
    inline def setHyperthreadingEnabled(value: Boolean): Self = StObject.set(x, "hyperthreadingEnabled", value.asInstanceOf[js.Any])
    
    inline def setHyperthreadingEnabledNull: Self = StObject.set(x, "hyperthreadingEnabled", null)
    
    inline def setHyperthreadingEnabledUndefined: Self = StObject.set(x, "hyperthreadingEnabled", js.undefined)
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setIdNull: Self = StObject.set(x, "id", null)
    
    inline def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    inline def setInteractiveSerialConsoleEnabled(value: Boolean): Self = StObject.set(x, "interactiveSerialConsoleEnabled", value.asInstanceOf[js.Any])
    
    inline def setInteractiveSerialConsoleEnabledNull: Self = StObject.set(x, "interactiveSerialConsoleEnabled", null)
    
    inline def setInteractiveSerialConsoleEnabledUndefined: Self = StObject.set(x, "interactiveSerialConsoleEnabled", js.undefined)
    
    inline def setLabels(value: StringDictionary[String]): Self = StObject.set(x, "labels", value.asInstanceOf[js.Any])
    
    inline def setLabelsNull: Self = StObject.set(x, "labels", null)
    
    inline def setLabelsUndefined: Self = StObject.set(x, "labels", js.undefined)
    
    inline def setLogicalInterfaces(value: js.Array[SchemaGoogleCloudBaremetalsolutionV2LogicalInterface]): Self = StObject.set(x, "logicalInterfaces", value.asInstanceOf[js.Any])
    
    inline def setLogicalInterfacesUndefined: Self = StObject.set(x, "logicalInterfaces", js.undefined)
    
    inline def setLogicalInterfacesVarargs(value: SchemaGoogleCloudBaremetalsolutionV2LogicalInterface*): Self = StObject.set(x, "logicalInterfaces", js.Array(value*))
    
    inline def setLoginInfo(value: String): Self = StObject.set(x, "loginInfo", value.asInstanceOf[js.Any])
    
    inline def setLoginInfoNull: Self = StObject.set(x, "loginInfo", null)
    
    inline def setLoginInfoUndefined: Self = StObject.set(x, "loginInfo", js.undefined)
    
    inline def setLuns(value: js.Array[SchemaLun]): Self = StObject.set(x, "luns", value.asInstanceOf[js.Any])
    
    inline def setLunsUndefined: Self = StObject.set(x, "luns", js.undefined)
    
    inline def setLunsVarargs(value: SchemaLun*): Self = StObject.set(x, "luns", js.Array(value*))
    
    inline def setMachineType(value: String): Self = StObject.set(x, "machineType", value.asInstanceOf[js.Any])
    
    inline def setMachineTypeNull: Self = StObject.set(x, "machineType", null)
    
    inline def setMachineTypeUndefined: Self = StObject.set(x, "machineType", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameNull: Self = StObject.set(x, "name", null)
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setNetworkTemplate(value: String): Self = StObject.set(x, "networkTemplate", value.asInstanceOf[js.Any])
    
    inline def setNetworkTemplateNull: Self = StObject.set(x, "networkTemplate", null)
    
    inline def setNetworkTemplateUndefined: Self = StObject.set(x, "networkTemplate", js.undefined)
    
    inline def setNetworks(value: js.Array[SchemaNetwork]): Self = StObject.set(x, "networks", value.asInstanceOf[js.Any])
    
    inline def setNetworksUndefined: Self = StObject.set(x, "networks", js.undefined)
    
    inline def setNetworksVarargs(value: SchemaNetwork*): Self = StObject.set(x, "networks", js.Array(value*))
    
    inline def setOsImage(value: String): Self = StObject.set(x, "osImage", value.asInstanceOf[js.Any])
    
    inline def setOsImageNull: Self = StObject.set(x, "osImage", null)
    
    inline def setOsImageUndefined: Self = StObject.set(x, "osImage", js.undefined)
    
    inline def setPod(value: String): Self = StObject.set(x, "pod", value.asInstanceOf[js.Any])
    
    inline def setPodNull: Self = StObject.set(x, "pod", null)
    
    inline def setPodUndefined: Self = StObject.set(x, "pod", js.undefined)
    
    inline def setState(value: String): Self = StObject.set(x, "state", value.asInstanceOf[js.Any])
    
    inline def setStateNull: Self = StObject.set(x, "state", null)
    
    inline def setStateUndefined: Self = StObject.set(x, "state", js.undefined)
    
    inline def setUpdateTime(value: String): Self = StObject.set(x, "updateTime", value.asInstanceOf[js.Any])
    
    inline def setUpdateTimeNull: Self = StObject.set(x, "updateTime", null)
    
    inline def setUpdateTimeUndefined: Self = StObject.set(x, "updateTime", js.undefined)
    
    inline def setVolumes(value: js.Array[SchemaVolume]): Self = StObject.set(x, "volumes", value.asInstanceOf[js.Any])
    
    inline def setVolumesUndefined: Self = StObject.set(x, "volumes", js.undefined)
    
    inline def setVolumesVarargs(value: SchemaVolume*): Self = StObject.set(x, "volumes", js.Array(value*))
  }
}
