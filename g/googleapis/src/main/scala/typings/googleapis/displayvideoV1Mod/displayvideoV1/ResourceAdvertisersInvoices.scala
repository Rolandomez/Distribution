package typings.googleapis.displayvideoV1Mod.displayvideoV1

import typings.gaxios.commonMod.GaxiosPromise
import typings.googleapisCommon.apiMod.APIRequestContext
import typings.googleapisCommon.apiMod.BodyResponseCallback
import typings.googleapisCommon.apiMod.MethodOptions
import typings.googleapisCommon.apiMod.StreamMethodOptions
import typings.node.streamMod.Readable
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("googleapis/build/src/apis/displayvideo/v1", "displayvideo_v1.Resource$Advertisers$Invoices")
@js.native
open class ResourceAdvertisersInvoices protected () extends StObject {
  def this(context: APIRequestContext) = this()
  
  var context: APIRequestContext = js.native
  
  def list(): GaxiosPromise[SchemaListInvoicesResponse] = js.native
  def list(callback: BodyResponseCallback[SchemaListInvoicesResponse]): Unit = js.native
  def list(params: Unit, options: MethodOptions): GaxiosPromise[SchemaListInvoicesResponse] = js.native
  def list(params: ParamsResourceAdvertisersInvoicesList): GaxiosPromise[SchemaListInvoicesResponse] = js.native
  def list(
    params: ParamsResourceAdvertisersInvoicesList,
    callback: BodyResponseCallback[SchemaListInvoicesResponse]
  ): Unit = js.native
  def list(
    params: ParamsResourceAdvertisersInvoicesList,
    options: BodyResponseCallback[Readable | SchemaListInvoicesResponse],
    callback: BodyResponseCallback[Readable | SchemaListInvoicesResponse]
  ): Unit = js.native
  def list(params: ParamsResourceAdvertisersInvoicesList, options: MethodOptions): GaxiosPromise[SchemaListInvoicesResponse] = js.native
  def list(
    params: ParamsResourceAdvertisersInvoicesList,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaListInvoicesResponse]
  ): Unit = js.native
  /**
    * Lists invoices posted for an advertiser in a given month. Invoices generated by billing profiles with a "Partner" invoice level are not retrievable through this method.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/displayvideo.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const displayvideo = google.displayvideo('v1');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: [
    *       'https://www.googleapis.com/auth/display-video',
    *       'https://www.googleapis.com/auth/display-video-mediaplanning',
    *     ],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await displayvideo.advertisers.invoices.list({
    *     // Required. The ID of the advertiser to list invoices for.
    *     advertiserId: '[^/]+',
    *     // The month to list the invoices for. If not set, the request will retrieve invoices for the previous month. Must be in the format YYYYMM.
    *     issueMonth: 'placeholder-value',
    *     // Select type of invoice to retrieve for Loi Sapin advertisers. Only applicable to Loi Sapin advertisers. Will be ignored otherwise.
    *     loiSapinInvoiceType: 'placeholder-value',
    *     // Requested page size. Must be between `1` and `100`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
    *     pageSize: 'placeholder-value',
    *     // A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInvoices` method. If not specified, the first page of results will be returned.
    *     pageToken: 'placeholder-value',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "invoices": [],
    *   //   "nextPageToken": "my_nextPageToken"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def list(params: ParamsResourceAdvertisersInvoicesList, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def list(
    params: ParamsResourceAdvertisersInvoicesList,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def lookupInvoiceCurrency(): GaxiosPromise[SchemaLookupInvoiceCurrencyResponse] = js.native
  def lookupInvoiceCurrency(callback: BodyResponseCallback[SchemaLookupInvoiceCurrencyResponse]): Unit = js.native
  def lookupInvoiceCurrency(params: Unit, options: MethodOptions): GaxiosPromise[SchemaLookupInvoiceCurrencyResponse] = js.native
  def lookupInvoiceCurrency(params: ParamsResourceAdvertisersInvoicesLookupinvoicecurrency): GaxiosPromise[SchemaLookupInvoiceCurrencyResponse] = js.native
  def lookupInvoiceCurrency(
    params: ParamsResourceAdvertisersInvoicesLookupinvoicecurrency,
    callback: BodyResponseCallback[SchemaLookupInvoiceCurrencyResponse]
  ): Unit = js.native
  def lookupInvoiceCurrency(
    params: ParamsResourceAdvertisersInvoicesLookupinvoicecurrency,
    options: BodyResponseCallback[Readable | SchemaLookupInvoiceCurrencyResponse],
    callback: BodyResponseCallback[Readable | SchemaLookupInvoiceCurrencyResponse]
  ): Unit = js.native
  def lookupInvoiceCurrency(params: ParamsResourceAdvertisersInvoicesLookupinvoicecurrency, options: MethodOptions): GaxiosPromise[SchemaLookupInvoiceCurrencyResponse] = js.native
  def lookupInvoiceCurrency(
    params: ParamsResourceAdvertisersInvoicesLookupinvoicecurrency,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaLookupInvoiceCurrencyResponse]
  ): Unit = js.native
  /**
    * Retrieves the invoice currency used by an advertiser in a given month.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/displayvideo.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const displayvideo = google.displayvideo('v1');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: [
    *       'https://www.googleapis.com/auth/display-video',
    *       'https://www.googleapis.com/auth/display-video-mediaplanning',
    *     ],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await displayvideo.advertisers.invoices.lookupInvoiceCurrency({
    *     // Required. The ID of the advertiser to lookup currency for.
    *     advertiserId: '[^/]+',
    *     // Month for which the currency is needed. If not set, the request will return existing currency settings for the advertiser. Must be in the format YYYYMM.
    *     invoiceMonth: 'placeholder-value',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "currencyCode": "my_currencyCode"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def lookupInvoiceCurrency(params: ParamsResourceAdvertisersInvoicesLookupinvoicecurrency, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def lookupInvoiceCurrency(
    params: ParamsResourceAdvertisersInvoicesLookupinvoicecurrency,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
}
