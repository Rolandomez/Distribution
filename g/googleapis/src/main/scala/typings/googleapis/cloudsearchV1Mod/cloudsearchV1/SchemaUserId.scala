package typings.googleapis.cloudsearchV1Mod.cloudsearchV1

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaUserId extends StObject {
  
  /**
    * Optional. Opaque, server-assigned ID of the user profile associated with App/user acting on behalf of the human user. This is currently only set when a 3P application is acting on the user's behalf.
    */
  var actingUserId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Opaque, server-assigned ID of the User.
    */
  var id: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Optional. Identifier of the App involved (directly or on behalf of a human creator) in creating this message. This is not set if the user posted a message directly, but is used in the case of, for example, a message being generated by a 1P integration based on a user action (creating an event, creating a task etc). This should only be used on the BE. For clients, please use the field in the FE message proto instead (google3/apps/dynamite/v1/frontend/api/message.proto?q=origin_app_id).
    */
  var originAppId: js.UndefOr[SchemaAppId] = js.undefined
  
  /**
    * Clients do not need to send UserType to Backend, but Backend will always send this field to clients per the following rule: 1. For HUMAN Ids, the field is empty but by default .getType() will return HUMAN. 2. For BOT Ids, the field is ALWAYS set to BOT.
    */
  var `type`: js.UndefOr[String | Null] = js.undefined
}
object SchemaUserId {
  
  inline def apply(): SchemaUserId = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaUserId]
  }
  
  extension [Self <: SchemaUserId](x: Self) {
    
    inline def setActingUserId(value: String): Self = StObject.set(x, "actingUserId", value.asInstanceOf[js.Any])
    
    inline def setActingUserIdNull: Self = StObject.set(x, "actingUserId", null)
    
    inline def setActingUserIdUndefined: Self = StObject.set(x, "actingUserId", js.undefined)
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setIdNull: Self = StObject.set(x, "id", null)
    
    inline def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    inline def setOriginAppId(value: SchemaAppId): Self = StObject.set(x, "originAppId", value.asInstanceOf[js.Any])
    
    inline def setOriginAppIdUndefined: Self = StObject.set(x, "originAppId", js.undefined)
    
    inline def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    
    inline def setTypeNull: Self = StObject.set(x, "type", null)
    
    inline def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
  }
}
