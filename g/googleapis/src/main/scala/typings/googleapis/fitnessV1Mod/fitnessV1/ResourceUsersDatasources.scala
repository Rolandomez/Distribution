package typings.googleapis.fitnessV1Mod.fitnessV1

import typings.gaxios.commonMod.GaxiosPromise
import typings.googleapisCommon.apiMod.APIRequestContext
import typings.googleapisCommon.apiMod.BodyResponseCallback
import typings.googleapisCommon.apiMod.MethodOptions
import typings.googleapisCommon.apiMod.StreamMethodOptions
import typings.node.streamMod.Readable
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("googleapis/build/src/apis/fitness/v1", "fitness_v1.Resource$Users$Datasources")
@js.native
open class ResourceUsersDatasources protected () extends StObject {
  def this(context: APIRequestContext) = this()
  
  var context: APIRequestContext = js.native
  
  def create(): GaxiosPromise[SchemaDataSource] = js.native
  def create(callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def create(params: Unit, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def create(params: ParamsResourceUsersDatasourcesCreate): GaxiosPromise[SchemaDataSource] = js.native
  def create(params: ParamsResourceUsersDatasourcesCreate, callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def create(
    params: ParamsResourceUsersDatasourcesCreate,
    options: BodyResponseCallback[Readable | SchemaDataSource],
    callback: BodyResponseCallback[Readable | SchemaDataSource]
  ): Unit = js.native
  def create(params: ParamsResourceUsersDatasourcesCreate, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def create(
    params: ParamsResourceUsersDatasourcesCreate,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  /**
    * Creates a new data source that is unique across all data sources belonging to this user. A data source is a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point in every dataset inserted into or read from the Fitness API has an associated data source. Each data source produces a unique stream of dataset updates, with a unique data source identifier. Not all changes to data source affect the data stream ID, so that data collected by updated versions of the same application/device can still be considered to belong to the same data source. Data sources are identified using a string generated by the server, based on the contents of the source being created. The dataStreamId field should not be set when invoking this method. It will be automatically generated by the server with the correct format. If a dataStreamId is set, it must match the format that the server would generate. This format is a combination of some fields from the data source, and has a specific order. If it doesn't match, the request will fail with an error. Specifying a DataType which is not a known type (beginning with "com.google.") will create a DataSource with a *custom data type*. Custom data types are only readable by the application that created them. Custom data types are *deprecated*; use standard data types instead. In addition to the data source fields included in the data source ID, the developer project number that is authenticated when creating the data source is included. This developer project number is obfuscated when read by any other developer reading public data types.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/fitness.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const fitness = google.fitness('v1');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: [
    *       'https://www.googleapis.com/auth/fitness.activity.write',
    *       'https://www.googleapis.com/auth/fitness.blood_glucose.write',
    *       'https://www.googleapis.com/auth/fitness.blood_pressure.write',
    *       'https://www.googleapis.com/auth/fitness.body.write',
    *       'https://www.googleapis.com/auth/fitness.body_temperature.write',
    *       'https://www.googleapis.com/auth/fitness.heart_rate.write',
    *       'https://www.googleapis.com/auth/fitness.location.write',
    *       'https://www.googleapis.com/auth/fitness.nutrition.write',
    *       'https://www.googleapis.com/auth/fitness.oxygen_saturation.write',
    *       'https://www.googleapis.com/auth/fitness.reproductive_health.write',
    *       'https://www.googleapis.com/auth/fitness.sleep.write',
    *     ],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await fitness.users.dataSources.create({
    *     // Create the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    *     userId: 'placeholder-value',
    *
    *     // Request body metadata
    *     requestBody: {
    *       // request body parameters
    *       // {
    *       //   "application": {},
    *       //   "dataQualityStandard": [],
    *       //   "dataStreamId": "my_dataStreamId",
    *       //   "dataStreamName": "my_dataStreamName",
    *       //   "dataType": {},
    *       //   "device": {},
    *       //   "name": "my_name",
    *       //   "type": "my_type"
    *       // }
    *     },
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "application": {},
    *   //   "dataQualityStandard": [],
    *   //   "dataStreamId": "my_dataStreamId",
    *   //   "dataStreamName": "my_dataStreamName",
    *   //   "dataType": {},
    *   //   "device": {},
    *   //   "name": "my_name",
    *   //   "type": "my_type"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def create(params: ParamsResourceUsersDatasourcesCreate, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def create(
    params: ParamsResourceUsersDatasourcesCreate,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  var dataPointChanges: ResourceUsersDatasourcesDatapointchanges = js.native
  
  var datasets: ResourceUsersDatasourcesDatasets = js.native
  
  def delete(): GaxiosPromise[SchemaDataSource] = js.native
  def delete(callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def delete(params: Unit, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def delete(params: ParamsResourceUsersDatasourcesDelete): GaxiosPromise[SchemaDataSource] = js.native
  def delete(params: ParamsResourceUsersDatasourcesDelete, callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def delete(
    params: ParamsResourceUsersDatasourcesDelete,
    options: BodyResponseCallback[Readable | SchemaDataSource],
    callback: BodyResponseCallback[Readable | SchemaDataSource]
  ): Unit = js.native
  def delete(params: ParamsResourceUsersDatasourcesDelete, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def delete(
    params: ParamsResourceUsersDatasourcesDelete,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  /**
    * Deletes the specified data source. The request will fail if the data source contains any data points.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/fitness.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const fitness = google.fitness('v1');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: [
    *       'https://www.googleapis.com/auth/fitness.activity.write',
    *       'https://www.googleapis.com/auth/fitness.blood_glucose.write',
    *       'https://www.googleapis.com/auth/fitness.blood_pressure.write',
    *       'https://www.googleapis.com/auth/fitness.body.write',
    *       'https://www.googleapis.com/auth/fitness.body_temperature.write',
    *       'https://www.googleapis.com/auth/fitness.heart_rate.write',
    *       'https://www.googleapis.com/auth/fitness.location.write',
    *       'https://www.googleapis.com/auth/fitness.nutrition.write',
    *       'https://www.googleapis.com/auth/fitness.oxygen_saturation.write',
    *       'https://www.googleapis.com/auth/fitness.reproductive_health.write',
    *       'https://www.googleapis.com/auth/fitness.sleep.write',
    *     ],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await fitness.users.dataSources.delete({
    *     // The data stream ID of the data source to delete.
    *     dataSourceId: 'placeholder-value',
    *     // Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    *     userId: 'placeholder-value',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "application": {},
    *   //   "dataQualityStandard": [],
    *   //   "dataStreamId": "my_dataStreamId",
    *   //   "dataStreamName": "my_dataStreamName",
    *   //   "dataType": {},
    *   //   "device": {},
    *   //   "name": "my_name",
    *   //   "type": "my_type"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def delete(params: ParamsResourceUsersDatasourcesDelete, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def delete(
    params: ParamsResourceUsersDatasourcesDelete,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def get(): GaxiosPromise[SchemaDataSource] = js.native
  def get(callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def get(params: Unit, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def get(params: ParamsResourceUsersDatasourcesGet): GaxiosPromise[SchemaDataSource] = js.native
  def get(params: ParamsResourceUsersDatasourcesGet, callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def get(
    params: ParamsResourceUsersDatasourcesGet,
    options: BodyResponseCallback[Readable | SchemaDataSource],
    callback: BodyResponseCallback[Readable | SchemaDataSource]
  ): Unit = js.native
  def get(params: ParamsResourceUsersDatasourcesGet, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def get(
    params: ParamsResourceUsersDatasourcesGet,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  /**
    * Returns the specified data source.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/fitness.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const fitness = google.fitness('v1');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: [
    *       'https://www.googleapis.com/auth/fitness.activity.read',
    *       'https://www.googleapis.com/auth/fitness.activity.write',
    *       'https://www.googleapis.com/auth/fitness.blood_glucose.read',
    *       'https://www.googleapis.com/auth/fitness.blood_glucose.write',
    *       'https://www.googleapis.com/auth/fitness.blood_pressure.read',
    *       'https://www.googleapis.com/auth/fitness.blood_pressure.write',
    *       'https://www.googleapis.com/auth/fitness.body.read',
    *       'https://www.googleapis.com/auth/fitness.body.write',
    *       'https://www.googleapis.com/auth/fitness.body_temperature.read',
    *       'https://www.googleapis.com/auth/fitness.body_temperature.write',
    *       'https://www.googleapis.com/auth/fitness.heart_rate.read',
    *       'https://www.googleapis.com/auth/fitness.heart_rate.write',
    *       'https://www.googleapis.com/auth/fitness.location.read',
    *       'https://www.googleapis.com/auth/fitness.location.write',
    *       'https://www.googleapis.com/auth/fitness.nutrition.read',
    *       'https://www.googleapis.com/auth/fitness.nutrition.write',
    *       'https://www.googleapis.com/auth/fitness.oxygen_saturation.read',
    *       'https://www.googleapis.com/auth/fitness.oxygen_saturation.write',
    *       'https://www.googleapis.com/auth/fitness.reproductive_health.read',
    *       'https://www.googleapis.com/auth/fitness.reproductive_health.write',
    *       'https://www.googleapis.com/auth/fitness.sleep.read',
    *       'https://www.googleapis.com/auth/fitness.sleep.write',
    *     ],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await fitness.users.dataSources.get({
    *     // The data stream ID of the data source to retrieve.
    *     dataSourceId: 'placeholder-value',
    *     // Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    *     userId: 'placeholder-value',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "application": {},
    *   //   "dataQualityStandard": [],
    *   //   "dataStreamId": "my_dataStreamId",
    *   //   "dataStreamName": "my_dataStreamName",
    *   //   "dataType": {},
    *   //   "device": {},
    *   //   "name": "my_name",
    *   //   "type": "my_type"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def get(params: ParamsResourceUsersDatasourcesGet, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def get(
    params: ParamsResourceUsersDatasourcesGet,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def list(): GaxiosPromise[SchemaListDataSourcesResponse] = js.native
  def list(callback: BodyResponseCallback[SchemaListDataSourcesResponse]): Unit = js.native
  def list(params: Unit, options: MethodOptions): GaxiosPromise[SchemaListDataSourcesResponse] = js.native
  def list(params: ParamsResourceUsersDatasourcesList): GaxiosPromise[SchemaListDataSourcesResponse] = js.native
  def list(
    params: ParamsResourceUsersDatasourcesList,
    callback: BodyResponseCallback[SchemaListDataSourcesResponse]
  ): Unit = js.native
  def list(
    params: ParamsResourceUsersDatasourcesList,
    options: BodyResponseCallback[Readable | SchemaListDataSourcesResponse],
    callback: BodyResponseCallback[Readable | SchemaListDataSourcesResponse]
  ): Unit = js.native
  def list(params: ParamsResourceUsersDatasourcesList, options: MethodOptions): GaxiosPromise[SchemaListDataSourcesResponse] = js.native
  def list(
    params: ParamsResourceUsersDatasourcesList,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaListDataSourcesResponse]
  ): Unit = js.native
  /**
    * Lists all data sources that are visible to the developer, using the OAuth scopes provided. The list is not exhaustive; the user may have private data sources that are only visible to other developers, or calls using other scopes.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/fitness.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const fitness = google.fitness('v1');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: [
    *       'https://www.googleapis.com/auth/fitness.activity.read',
    *       'https://www.googleapis.com/auth/fitness.activity.write',
    *       'https://www.googleapis.com/auth/fitness.blood_glucose.read',
    *       'https://www.googleapis.com/auth/fitness.blood_glucose.write',
    *       'https://www.googleapis.com/auth/fitness.blood_pressure.read',
    *       'https://www.googleapis.com/auth/fitness.blood_pressure.write',
    *       'https://www.googleapis.com/auth/fitness.body.read',
    *       'https://www.googleapis.com/auth/fitness.body.write',
    *       'https://www.googleapis.com/auth/fitness.body_temperature.read',
    *       'https://www.googleapis.com/auth/fitness.body_temperature.write',
    *       'https://www.googleapis.com/auth/fitness.heart_rate.read',
    *       'https://www.googleapis.com/auth/fitness.heart_rate.write',
    *       'https://www.googleapis.com/auth/fitness.location.read',
    *       'https://www.googleapis.com/auth/fitness.location.write',
    *       'https://www.googleapis.com/auth/fitness.nutrition.read',
    *       'https://www.googleapis.com/auth/fitness.nutrition.write',
    *       'https://www.googleapis.com/auth/fitness.oxygen_saturation.read',
    *       'https://www.googleapis.com/auth/fitness.oxygen_saturation.write',
    *       'https://www.googleapis.com/auth/fitness.reproductive_health.read',
    *       'https://www.googleapis.com/auth/fitness.reproductive_health.write',
    *       'https://www.googleapis.com/auth/fitness.sleep.read',
    *       'https://www.googleapis.com/auth/fitness.sleep.write',
    *     ],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await fitness.users.dataSources.list({
    *     // The names of data types to include in the list. If not specified, all data sources will be returned.
    *     dataTypeName: 'placeholder-value',
    *     // List data sources for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    *     userId: 'placeholder-value',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "dataSource": []
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def list(params: ParamsResourceUsersDatasourcesList, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def list(
    params: ParamsResourceUsersDatasourcesList,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def update(): GaxiosPromise[SchemaDataSource] = js.native
  def update(callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def update(params: Unit, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def update(params: ParamsResourceUsersDatasourcesUpdate): GaxiosPromise[SchemaDataSource] = js.native
  def update(params: ParamsResourceUsersDatasourcesUpdate, callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def update(
    params: ParamsResourceUsersDatasourcesUpdate,
    options: BodyResponseCallback[Readable | SchemaDataSource],
    callback: BodyResponseCallback[Readable | SchemaDataSource]
  ): Unit = js.native
  def update(params: ParamsResourceUsersDatasourcesUpdate, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def update(
    params: ParamsResourceUsersDatasourcesUpdate,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  /**
    * Updates the specified data source. The dataStreamId, dataType, type, dataStreamName, and device properties with the exception of version, cannot be modified. Data sources are identified by their dataStreamId.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/fitness.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const fitness = google.fitness('v1');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: [
    *       'https://www.googleapis.com/auth/fitness.activity.write',
    *       'https://www.googleapis.com/auth/fitness.blood_glucose.write',
    *       'https://www.googleapis.com/auth/fitness.blood_pressure.write',
    *       'https://www.googleapis.com/auth/fitness.body.write',
    *       'https://www.googleapis.com/auth/fitness.body_temperature.write',
    *       'https://www.googleapis.com/auth/fitness.heart_rate.write',
    *       'https://www.googleapis.com/auth/fitness.location.write',
    *       'https://www.googleapis.com/auth/fitness.nutrition.write',
    *       'https://www.googleapis.com/auth/fitness.oxygen_saturation.write',
    *       'https://www.googleapis.com/auth/fitness.reproductive_health.write',
    *       'https://www.googleapis.com/auth/fitness.sleep.write',
    *     ],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await fitness.users.dataSources.update({
    *     // The data stream ID of the data source to update.
    *     dataSourceId: 'placeholder-value',
    *     // Update the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    *     userId: 'placeholder-value',
    *
    *     // Request body metadata
    *     requestBody: {
    *       // request body parameters
    *       // {
    *       //   "application": {},
    *       //   "dataQualityStandard": [],
    *       //   "dataStreamId": "my_dataStreamId",
    *       //   "dataStreamName": "my_dataStreamName",
    *       //   "dataType": {},
    *       //   "device": {},
    *       //   "name": "my_name",
    *       //   "type": "my_type"
    *       // }
    *     },
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "application": {},
    *   //   "dataQualityStandard": [],
    *   //   "dataStreamId": "my_dataStreamId",
    *   //   "dataStreamName": "my_dataStreamName",
    *   //   "dataType": {},
    *   //   "device": {},
    *   //   "name": "my_name",
    *   //   "type": "my_type"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def update(params: ParamsResourceUsersDatasourcesUpdate, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def update(
    params: ParamsResourceUsersDatasourcesUpdate,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
}
