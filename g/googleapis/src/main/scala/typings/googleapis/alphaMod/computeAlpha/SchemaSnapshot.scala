package typings.googleapis.alphaMod.computeAlpha

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaSnapshot extends StObject {
  
  /**
    * [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64.
    */
  var architecture: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk.
    */
  var autoCreated: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
    */
  var chainName: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] Size in bytes of the snapshot at creation time.
    */
  var creationSizeBytes: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String | Null] = js.undefined
  
  /**
    * An optional description of this resource. Provide this property when you create the resource.
    */
  var description: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] Size of the source disk, specified in GB.
    */
  var diskSizeGb: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] Number of bytes downloaded to restore a snapshot to a disk.
    */
  var downloadBytes: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process.
    */
  var guestFlush: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * [Output Only] A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
    */
  var guestOsFeatures: js.UndefOr[js.Array[SchemaGuestOsFeature]] = js.undefined
  
  /**
    * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    */
  var id: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources.
    */
  var kind: js.UndefOr[String | Null] = js.undefined
  
  /**
    * A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot.
    */
  var labelFingerprint: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
    */
  var labels: js.UndefOr[StringDictionary[String] | Null] = js.undefined
  
  /**
    * [Output Only] Integer license codes indicating which licenses are attached to this snapshot.
    */
  var licenseCodes: js.UndefOr[js.Array[String] | Null] = js.undefined
  
  /**
    * [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
    */
  var licenses: js.UndefOr[js.Array[String] | Null] = js.undefined
  
  /**
    * An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
    */
  var locationHint: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Number of days the snapshot should be retained before being deleted automatically.
    */
  var maxRetentionDays: js.UndefOr[Double | Null] = js.undefined
  
  /**
    * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    */
  var name: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] Reserved for future use.
    */
  var satisfiesPzs: js.UndefOr[Boolean | Null] = js.undefined
  
  /**
    * [Output Only] Server-defined URL for the resource.
    */
  var selfLink: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] Server-defined URL for this resource's resource id.
    */
  var selfLinkWithId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Encrypts the snapshot using a customer-supplied encryption key. After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request. Customer-supplied encryption keys do not protect access to metadata of the snapshot. If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later.
    */
  var snapshotEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.undefined
  
  /**
    * Indicates the type of the snapshot.
    */
  var snapshotType: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The source disk used to create this snapshot.
    */
  var sourceDisk: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
    */
  var sourceDiskEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.undefined
  
  /**
    * [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
    */
  var sourceDiskId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * The source instant snapshot used to create this snapshot. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instantSnapshots/instantSnapshot - projects/project/zones/zone/instantSnapshots/instantSnapshot - zones/zone/instantSnapshots/instantSnapshot
    */
  var sourceInstantSnapshot: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] The unique ID of the instant snapshot used to create this snapshot. This value identifies the exact instant snapshot that was used to create this persistent disk. For example, if you created the persistent disk from an instant snapshot that was later deleted and recreated under the same name, the source instant snapshot ID would identify the exact instant snapshot that was used.
    */
  var sourceInstantSnapshotId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] URL of the resource policy which created this scheduled snapshot.
    */
  var sourceSnapshotSchedulePolicy: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] ID of the resource policy which created this scheduled snapshot.
    */
  var sourceSnapshotSchedulePolicyId: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
    */
  var status: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
    */
  var storageBytes: js.UndefOr[String | Null] = js.undefined
  
  /**
    * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
    */
  var storageBytesStatus: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    */
  var storageLocations: js.UndefOr[js.Array[String] | Null] = js.undefined
  
  /**
    * [Output Only] A list of user provided licenses represented by a list of URLs to the license resource.
    */
  var userLicenses: js.UndefOr[js.Array[String] | Null] = js.undefined
}
object SchemaSnapshot {
  
  inline def apply(): SchemaSnapshot = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaSnapshot]
  }
  
  extension [Self <: SchemaSnapshot](x: Self) {
    
    inline def setArchitecture(value: String): Self = StObject.set(x, "architecture", value.asInstanceOf[js.Any])
    
    inline def setArchitectureNull: Self = StObject.set(x, "architecture", null)
    
    inline def setArchitectureUndefined: Self = StObject.set(x, "architecture", js.undefined)
    
    inline def setAutoCreated(value: Boolean): Self = StObject.set(x, "autoCreated", value.asInstanceOf[js.Any])
    
    inline def setAutoCreatedNull: Self = StObject.set(x, "autoCreated", null)
    
    inline def setAutoCreatedUndefined: Self = StObject.set(x, "autoCreated", js.undefined)
    
    inline def setChainName(value: String): Self = StObject.set(x, "chainName", value.asInstanceOf[js.Any])
    
    inline def setChainNameNull: Self = StObject.set(x, "chainName", null)
    
    inline def setChainNameUndefined: Self = StObject.set(x, "chainName", js.undefined)
    
    inline def setCreationSizeBytes(value: String): Self = StObject.set(x, "creationSizeBytes", value.asInstanceOf[js.Any])
    
    inline def setCreationSizeBytesNull: Self = StObject.set(x, "creationSizeBytes", null)
    
    inline def setCreationSizeBytesUndefined: Self = StObject.set(x, "creationSizeBytes", js.undefined)
    
    inline def setCreationTimestamp(value: String): Self = StObject.set(x, "creationTimestamp", value.asInstanceOf[js.Any])
    
    inline def setCreationTimestampNull: Self = StObject.set(x, "creationTimestamp", null)
    
    inline def setCreationTimestampUndefined: Self = StObject.set(x, "creationTimestamp", js.undefined)
    
    inline def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    inline def setDescriptionNull: Self = StObject.set(x, "description", null)
    
    inline def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    inline def setDiskSizeGb(value: String): Self = StObject.set(x, "diskSizeGb", value.asInstanceOf[js.Any])
    
    inline def setDiskSizeGbNull: Self = StObject.set(x, "diskSizeGb", null)
    
    inline def setDiskSizeGbUndefined: Self = StObject.set(x, "diskSizeGb", js.undefined)
    
    inline def setDownloadBytes(value: String): Self = StObject.set(x, "downloadBytes", value.asInstanceOf[js.Any])
    
    inline def setDownloadBytesNull: Self = StObject.set(x, "downloadBytes", null)
    
    inline def setDownloadBytesUndefined: Self = StObject.set(x, "downloadBytes", js.undefined)
    
    inline def setGuestFlush(value: Boolean): Self = StObject.set(x, "guestFlush", value.asInstanceOf[js.Any])
    
    inline def setGuestFlushNull: Self = StObject.set(x, "guestFlush", null)
    
    inline def setGuestFlushUndefined: Self = StObject.set(x, "guestFlush", js.undefined)
    
    inline def setGuestOsFeatures(value: js.Array[SchemaGuestOsFeature]): Self = StObject.set(x, "guestOsFeatures", value.asInstanceOf[js.Any])
    
    inline def setGuestOsFeaturesUndefined: Self = StObject.set(x, "guestOsFeatures", js.undefined)
    
    inline def setGuestOsFeaturesVarargs(value: SchemaGuestOsFeature*): Self = StObject.set(x, "guestOsFeatures", js.Array(value*))
    
    inline def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    inline def setIdNull: Self = StObject.set(x, "id", null)
    
    inline def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    inline def setKind(value: String): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    inline def setKindNull: Self = StObject.set(x, "kind", null)
    
    inline def setKindUndefined: Self = StObject.set(x, "kind", js.undefined)
    
    inline def setLabelFingerprint(value: String): Self = StObject.set(x, "labelFingerprint", value.asInstanceOf[js.Any])
    
    inline def setLabelFingerprintNull: Self = StObject.set(x, "labelFingerprint", null)
    
    inline def setLabelFingerprintUndefined: Self = StObject.set(x, "labelFingerprint", js.undefined)
    
    inline def setLabels(value: StringDictionary[String]): Self = StObject.set(x, "labels", value.asInstanceOf[js.Any])
    
    inline def setLabelsNull: Self = StObject.set(x, "labels", null)
    
    inline def setLabelsUndefined: Self = StObject.set(x, "labels", js.undefined)
    
    inline def setLicenseCodes(value: js.Array[String]): Self = StObject.set(x, "licenseCodes", value.asInstanceOf[js.Any])
    
    inline def setLicenseCodesNull: Self = StObject.set(x, "licenseCodes", null)
    
    inline def setLicenseCodesUndefined: Self = StObject.set(x, "licenseCodes", js.undefined)
    
    inline def setLicenseCodesVarargs(value: String*): Self = StObject.set(x, "licenseCodes", js.Array(value*))
    
    inline def setLicenses(value: js.Array[String]): Self = StObject.set(x, "licenses", value.asInstanceOf[js.Any])
    
    inline def setLicensesNull: Self = StObject.set(x, "licenses", null)
    
    inline def setLicensesUndefined: Self = StObject.set(x, "licenses", js.undefined)
    
    inline def setLicensesVarargs(value: String*): Self = StObject.set(x, "licenses", js.Array(value*))
    
    inline def setLocationHint(value: String): Self = StObject.set(x, "locationHint", value.asInstanceOf[js.Any])
    
    inline def setLocationHintNull: Self = StObject.set(x, "locationHint", null)
    
    inline def setLocationHintUndefined: Self = StObject.set(x, "locationHint", js.undefined)
    
    inline def setMaxRetentionDays(value: Double): Self = StObject.set(x, "maxRetentionDays", value.asInstanceOf[js.Any])
    
    inline def setMaxRetentionDaysNull: Self = StObject.set(x, "maxRetentionDays", null)
    
    inline def setMaxRetentionDaysUndefined: Self = StObject.set(x, "maxRetentionDays", js.undefined)
    
    inline def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    inline def setNameNull: Self = StObject.set(x, "name", null)
    
    inline def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    inline def setSatisfiesPzs(value: Boolean): Self = StObject.set(x, "satisfiesPzs", value.asInstanceOf[js.Any])
    
    inline def setSatisfiesPzsNull: Self = StObject.set(x, "satisfiesPzs", null)
    
    inline def setSatisfiesPzsUndefined: Self = StObject.set(x, "satisfiesPzs", js.undefined)
    
    inline def setSelfLink(value: String): Self = StObject.set(x, "selfLink", value.asInstanceOf[js.Any])
    
    inline def setSelfLinkNull: Self = StObject.set(x, "selfLink", null)
    
    inline def setSelfLinkUndefined: Self = StObject.set(x, "selfLink", js.undefined)
    
    inline def setSelfLinkWithId(value: String): Self = StObject.set(x, "selfLinkWithId", value.asInstanceOf[js.Any])
    
    inline def setSelfLinkWithIdNull: Self = StObject.set(x, "selfLinkWithId", null)
    
    inline def setSelfLinkWithIdUndefined: Self = StObject.set(x, "selfLinkWithId", js.undefined)
    
    inline def setSnapshotEncryptionKey(value: SchemaCustomerEncryptionKey): Self = StObject.set(x, "snapshotEncryptionKey", value.asInstanceOf[js.Any])
    
    inline def setSnapshotEncryptionKeyUndefined: Self = StObject.set(x, "snapshotEncryptionKey", js.undefined)
    
    inline def setSnapshotType(value: String): Self = StObject.set(x, "snapshotType", value.asInstanceOf[js.Any])
    
    inline def setSnapshotTypeNull: Self = StObject.set(x, "snapshotType", null)
    
    inline def setSnapshotTypeUndefined: Self = StObject.set(x, "snapshotType", js.undefined)
    
    inline def setSourceDisk(value: String): Self = StObject.set(x, "sourceDisk", value.asInstanceOf[js.Any])
    
    inline def setSourceDiskEncryptionKey(value: SchemaCustomerEncryptionKey): Self = StObject.set(x, "sourceDiskEncryptionKey", value.asInstanceOf[js.Any])
    
    inline def setSourceDiskEncryptionKeyUndefined: Self = StObject.set(x, "sourceDiskEncryptionKey", js.undefined)
    
    inline def setSourceDiskId(value: String): Self = StObject.set(x, "sourceDiskId", value.asInstanceOf[js.Any])
    
    inline def setSourceDiskIdNull: Self = StObject.set(x, "sourceDiskId", null)
    
    inline def setSourceDiskIdUndefined: Self = StObject.set(x, "sourceDiskId", js.undefined)
    
    inline def setSourceDiskNull: Self = StObject.set(x, "sourceDisk", null)
    
    inline def setSourceDiskUndefined: Self = StObject.set(x, "sourceDisk", js.undefined)
    
    inline def setSourceInstantSnapshot(value: String): Self = StObject.set(x, "sourceInstantSnapshot", value.asInstanceOf[js.Any])
    
    inline def setSourceInstantSnapshotId(value: String): Self = StObject.set(x, "sourceInstantSnapshotId", value.asInstanceOf[js.Any])
    
    inline def setSourceInstantSnapshotIdNull: Self = StObject.set(x, "sourceInstantSnapshotId", null)
    
    inline def setSourceInstantSnapshotIdUndefined: Self = StObject.set(x, "sourceInstantSnapshotId", js.undefined)
    
    inline def setSourceInstantSnapshotNull: Self = StObject.set(x, "sourceInstantSnapshot", null)
    
    inline def setSourceInstantSnapshotUndefined: Self = StObject.set(x, "sourceInstantSnapshot", js.undefined)
    
    inline def setSourceSnapshotSchedulePolicy(value: String): Self = StObject.set(x, "sourceSnapshotSchedulePolicy", value.asInstanceOf[js.Any])
    
    inline def setSourceSnapshotSchedulePolicyId(value: String): Self = StObject.set(x, "sourceSnapshotSchedulePolicyId", value.asInstanceOf[js.Any])
    
    inline def setSourceSnapshotSchedulePolicyIdNull: Self = StObject.set(x, "sourceSnapshotSchedulePolicyId", null)
    
    inline def setSourceSnapshotSchedulePolicyIdUndefined: Self = StObject.set(x, "sourceSnapshotSchedulePolicyId", js.undefined)
    
    inline def setSourceSnapshotSchedulePolicyNull: Self = StObject.set(x, "sourceSnapshotSchedulePolicy", null)
    
    inline def setSourceSnapshotSchedulePolicyUndefined: Self = StObject.set(x, "sourceSnapshotSchedulePolicy", js.undefined)
    
    inline def setStatus(value: String): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    inline def setStatusNull: Self = StObject.set(x, "status", null)
    
    inline def setStatusUndefined: Self = StObject.set(x, "status", js.undefined)
    
    inline def setStorageBytes(value: String): Self = StObject.set(x, "storageBytes", value.asInstanceOf[js.Any])
    
    inline def setStorageBytesNull: Self = StObject.set(x, "storageBytes", null)
    
    inline def setStorageBytesStatus(value: String): Self = StObject.set(x, "storageBytesStatus", value.asInstanceOf[js.Any])
    
    inline def setStorageBytesStatusNull: Self = StObject.set(x, "storageBytesStatus", null)
    
    inline def setStorageBytesStatusUndefined: Self = StObject.set(x, "storageBytesStatus", js.undefined)
    
    inline def setStorageBytesUndefined: Self = StObject.set(x, "storageBytes", js.undefined)
    
    inline def setStorageLocations(value: js.Array[String]): Self = StObject.set(x, "storageLocations", value.asInstanceOf[js.Any])
    
    inline def setStorageLocationsNull: Self = StObject.set(x, "storageLocations", null)
    
    inline def setStorageLocationsUndefined: Self = StObject.set(x, "storageLocations", js.undefined)
    
    inline def setStorageLocationsVarargs(value: String*): Self = StObject.set(x, "storageLocations", js.Array(value*))
    
    inline def setUserLicenses(value: js.Array[String]): Self = StObject.set(x, "userLicenses", value.asInstanceOf[js.Any])
    
    inline def setUserLicensesNull: Self = StObject.set(x, "userLicenses", null)
    
    inline def setUserLicensesUndefined: Self = StObject.set(x, "userLicenses", js.undefined)
    
    inline def setUserLicensesVarargs(value: String*): Self = StObject.set(x, "userLicenses", js.Array(value*))
  }
}
