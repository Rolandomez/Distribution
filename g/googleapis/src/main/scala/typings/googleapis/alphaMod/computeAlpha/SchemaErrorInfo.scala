package typings.googleapis.alphaMod.computeAlpha

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait SchemaErrorInfo extends StObject {
  
  /**
    * The logical grouping to which the "reason" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example: "pubsub.googleapis.com". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is "googleapis.com".
    */
  var domain: js.UndefOr[String | Null] = js.undefined
  
  /**
    * Additional structured details about this error. Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {"instanceLimit": "100/request"\}, should be returned as, {"instanceLimitPerRequest": "100"\}, if the client exceeds the number of instances that can be created in a single (batch) request.
    */
  var metadatas: js.UndefOr[StringDictionary[String] | Null] = js.undefined
  
  /**
    * The reason of the error. This is a constant value that identifies the proximate cause of the error. Error reasons are unique within a particular domain of errors. This should be at most 63 characters and match /[A-Z0-9_]+/.
    */
  var reason: js.UndefOr[String | Null] = js.undefined
}
object SchemaErrorInfo {
  
  inline def apply(): SchemaErrorInfo = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaErrorInfo]
  }
  
  extension [Self <: SchemaErrorInfo](x: Self) {
    
    inline def setDomain(value: String): Self = StObject.set(x, "domain", value.asInstanceOf[js.Any])
    
    inline def setDomainNull: Self = StObject.set(x, "domain", null)
    
    inline def setDomainUndefined: Self = StObject.set(x, "domain", js.undefined)
    
    inline def setMetadatas(value: StringDictionary[String]): Self = StObject.set(x, "metadatas", value.asInstanceOf[js.Any])
    
    inline def setMetadatasNull: Self = StObject.set(x, "metadatas", null)
    
    inline def setMetadatasUndefined: Self = StObject.set(x, "metadatas", js.undefined)
    
    inline def setReason(value: String): Self = StObject.set(x, "reason", value.asInstanceOf[js.Any])
    
    inline def setReasonNull: Self = StObject.set(x, "reason", null)
    
    inline def setReasonUndefined: Self = StObject.set(x, "reason", js.undefined)
  }
}
