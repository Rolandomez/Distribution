package typings.googleapis.retailV2betaMod.retailV2beta

import typings.gaxios.commonMod.GaxiosPromise
import typings.googleapisCommon.apiMod.APIRequestContext
import typings.googleapisCommon.apiMod.BodyResponseCallback
import typings.googleapisCommon.apiMod.MethodOptions
import typings.googleapisCommon.apiMod.StreamMethodOptions
import typings.node.streamMod.Readable
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("googleapis/build/src/apis/retail/v2beta", "retail_v2beta.Resource$Projects$Locations$Catalogs")
@js.native
open class ResourceProjectsLocationsCatalogs protected () extends StObject {
  def this(context: APIRequestContext) = this()
  
  var attributesConfig: ResourceProjectsLocationsCatalogsAttributesconfig = js.native
  
  var branches: ResourceProjectsLocationsCatalogsBranches = js.native
  
  def completeQuery(): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompleteQueryResponse] = js.native
  def completeQuery(callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCompleteQueryResponse]): Unit = js.native
  def completeQuery(params: Unit, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompleteQueryResponse] = js.native
  def completeQuery(params: ParamsResourceProjectsLocationsCatalogsCompletequery): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompleteQueryResponse] = js.native
  def completeQuery(
    params: ParamsResourceProjectsLocationsCatalogsCompletequery,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCompleteQueryResponse]
  ): Unit = js.native
  def completeQuery(
    params: ParamsResourceProjectsLocationsCatalogsCompletequery,
    options: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaCompleteQueryResponse],
    callback: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaCompleteQueryResponse]
  ): Unit = js.native
  def completeQuery(params: ParamsResourceProjectsLocationsCatalogsCompletequery, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompleteQueryResponse] = js.native
  def completeQuery(
    params: ParamsResourceProjectsLocationsCatalogsCompletequery,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCompleteQueryResponse]
  ): Unit = js.native
  /**
    * Completes the specified prefix with keyword suggestions. This feature is only available for users who have Retail Search enabled. Please enable Retail Search on Cloud Console before using this feature.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/retail.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const retail = google.retail('v2beta');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await retail.projects.locations.catalogs.completeQuery({
    *     // Required. Catalog for which the completion is performed. Full resource name of catalog, such as `projects/x/locations/global/catalogs/default_catalog`.
    *     catalog: 'projects/my-project/locations/my-location/catalogs/my-catalog',
    *     // Determines which dataset to use for fetching completion. "user-data" will use the imported dataset through CompletionService.ImportCompletionData. "cloud-retail" will use the dataset generated by cloud retail based on user events. If leave empty, it will use the "user-data". Current supported values: * user-data * cloud-retail: This option requires enabling auto-learning function first. See [guidelines](https://cloud.google.com/retail/docs/completion-overview#generated-completion-dataset).
    *     dataset: 'placeholder-value',
    *     // The device type context for completion suggestions. It is useful to apply different suggestions on different device types, e.g. `DESKTOP`, `MOBILE`. If it is empty, the suggestions are across all device types. Supported formats: * `UNKNOWN_DEVICE_TYPE` * `DESKTOP` * `MOBILE` * A customized string starts with `OTHER_`, e.g. `OTHER_IPHONE`.
    *     deviceType: 'placeholder-value',
    *     // Note that this field applies for `user-data` dataset only. For requests with `cloud-retail` dataset, setting this field has no effect. The language filters applied to the output suggestions. If set, it should contain the language of the query. If not set, suggestions are returned without considering language restrictions. This is the BCP-47 language code, such as "en-US" or "sr-Latn". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47). The maximum number of language codes is 3.
    *     languageCodes: 'placeholder-value',
    *     // Completion max suggestions. If left unset or set to 0, then will fallback to the configured value CompletionConfig.max_suggestions. The maximum allowed max suggestions is 20. If it is set higher, it will be capped by 20.
    *     maxSuggestions: 'placeholder-value',
    *     // Required. The query used to generate suggestions. The maximum number of allowed characters is 255.
    *     query: 'placeholder-value',
    *     // Required field. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
    *     visitorId: 'placeholder-value',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "attributionToken": "my_attributionToken",
    *   //   "completionResults": [],
    *   //   "recentSearchResults": []
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def completeQuery(params: ParamsResourceProjectsLocationsCatalogsCompletequery, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def completeQuery(
    params: ParamsResourceProjectsLocationsCatalogsCompletequery,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  var completionData: ResourceProjectsLocationsCatalogsCompletiondata = js.native
  
  var context: APIRequestContext = js.native
  
  var controls: ResourceProjectsLocationsCatalogsControls = js.native
  
  def getAttributesConfig(): GaxiosPromise[SchemaGoogleCloudRetailV2betaAttributesConfig] = js.native
  def getAttributesConfig(callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaAttributesConfig]): Unit = js.native
  def getAttributesConfig(params: Unit, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaAttributesConfig] = js.native
  def getAttributesConfig(params: ParamsResourceProjectsLocationsCatalogsGetattributesconfig): GaxiosPromise[SchemaGoogleCloudRetailV2betaAttributesConfig] = js.native
  def getAttributesConfig(
    params: ParamsResourceProjectsLocationsCatalogsGetattributesconfig,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaAttributesConfig]
  ): Unit = js.native
  def getAttributesConfig(
    params: ParamsResourceProjectsLocationsCatalogsGetattributesconfig,
    options: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaAttributesConfig],
    callback: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaAttributesConfig]
  ): Unit = js.native
  def getAttributesConfig(params: ParamsResourceProjectsLocationsCatalogsGetattributesconfig, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaAttributesConfig] = js.native
  def getAttributesConfig(
    params: ParamsResourceProjectsLocationsCatalogsGetattributesconfig,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaAttributesConfig]
  ): Unit = js.native
  /**
    * Gets an AttributesConfig.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/retail.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const retail = google.retail('v2beta');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await retail.projects.locations.catalogs.getAttributesConfig({
    *     // Required. Full AttributesConfig resource name. Format: `projects/{project_number\}/locations/{location_id\}/catalogs/{catalog_id\}/attributesConfig`
    *     name: 'projects/my-project/locations/my-location/catalogs/my-catalog/attributesConfig',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "attributeConfigLevel": "my_attributeConfigLevel",
    *   //   "catalogAttributes": {},
    *   //   "name": "my_name"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def getAttributesConfig(params: ParamsResourceProjectsLocationsCatalogsGetattributesconfig, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def getAttributesConfig(
    params: ParamsResourceProjectsLocationsCatalogsGetattributesconfig,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def getCompletionConfig(): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompletionConfig] = js.native
  def getCompletionConfig(callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCompletionConfig]): Unit = js.native
  def getCompletionConfig(params: Unit, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompletionConfig] = js.native
  def getCompletionConfig(params: ParamsResourceProjectsLocationsCatalogsGetcompletionconfig): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompletionConfig] = js.native
  def getCompletionConfig(
    params: ParamsResourceProjectsLocationsCatalogsGetcompletionconfig,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCompletionConfig]
  ): Unit = js.native
  def getCompletionConfig(
    params: ParamsResourceProjectsLocationsCatalogsGetcompletionconfig,
    options: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaCompletionConfig],
    callback: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaCompletionConfig]
  ): Unit = js.native
  def getCompletionConfig(params: ParamsResourceProjectsLocationsCatalogsGetcompletionconfig, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompletionConfig] = js.native
  def getCompletionConfig(
    params: ParamsResourceProjectsLocationsCatalogsGetcompletionconfig,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCompletionConfig]
  ): Unit = js.native
  /**
    * Gets a CompletionConfig.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/retail.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const retail = google.retail('v2beta');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await retail.projects.locations.catalogs.getCompletionConfig({
    *     // Required. Full CompletionConfig resource name. Format: projects/{project_number\}/locations/{location_id\}/catalogs/{catalog_id\}/completionConfig
    *     name: 'projects/my-project/locations/my-location/catalogs/my-catalog/completionConfig',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "allowlistInputConfig": {},
    *   //   "autoLearning": false,
    *   //   "denylistInputConfig": {},
    *   //   "lastAllowlistImportOperation": "my_lastAllowlistImportOperation",
    *   //   "lastDenylistImportOperation": "my_lastDenylistImportOperation",
    *   //   "lastSuggestionsImportOperation": "my_lastSuggestionsImportOperation",
    *   //   "matchingOrder": "my_matchingOrder",
    *   //   "maxSuggestions": 0,
    *   //   "minPrefixLength": 0,
    *   //   "name": "my_name",
    *   //   "suggestionsInputConfig": {}
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def getCompletionConfig(params: ParamsResourceProjectsLocationsCatalogsGetcompletionconfig, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def getCompletionConfig(
    params: ParamsResourceProjectsLocationsCatalogsGetcompletionconfig,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def getDefaultBranch(): GaxiosPromise[SchemaGoogleCloudRetailV2betaGetDefaultBranchResponse] = js.native
  def getDefaultBranch(callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaGetDefaultBranchResponse]): Unit = js.native
  def getDefaultBranch(params: Unit, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaGetDefaultBranchResponse] = js.native
  def getDefaultBranch(params: ParamsResourceProjectsLocationsCatalogsGetdefaultbranch): GaxiosPromise[SchemaGoogleCloudRetailV2betaGetDefaultBranchResponse] = js.native
  def getDefaultBranch(
    params: ParamsResourceProjectsLocationsCatalogsGetdefaultbranch,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaGetDefaultBranchResponse]
  ): Unit = js.native
  def getDefaultBranch(
    params: ParamsResourceProjectsLocationsCatalogsGetdefaultbranch,
    options: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaGetDefaultBranchResponse],
    callback: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaGetDefaultBranchResponse]
  ): Unit = js.native
  def getDefaultBranch(params: ParamsResourceProjectsLocationsCatalogsGetdefaultbranch, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaGetDefaultBranchResponse] = js.native
  def getDefaultBranch(
    params: ParamsResourceProjectsLocationsCatalogsGetdefaultbranch,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaGetDefaultBranchResponse]
  ): Unit = js.native
  /**
    * Get which branch is currently default branch set by CatalogService.SetDefaultBranch method under a specified parent catalog.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/retail.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const retail = google.retail('v2beta');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await retail.projects.locations.catalogs.getDefaultBranch({
    *     // The parent catalog resource name, such as `projects/x/locations/global/catalogs/default_catalog`.
    *     catalog: 'projects/my-project/locations/my-location/catalogs/my-catalog',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "branch": "my_branch",
    *   //   "note": "my_note",
    *   //   "setTime": "my_setTime"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def getDefaultBranch(params: ParamsResourceProjectsLocationsCatalogsGetdefaultbranch, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def getDefaultBranch(
    params: ParamsResourceProjectsLocationsCatalogsGetdefaultbranch,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def list(): GaxiosPromise[SchemaGoogleCloudRetailV2betaListCatalogsResponse] = js.native
  def list(callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaListCatalogsResponse]): Unit = js.native
  def list(params: Unit, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaListCatalogsResponse] = js.native
  def list(params: ParamsResourceProjectsLocationsCatalogsList): GaxiosPromise[SchemaGoogleCloudRetailV2betaListCatalogsResponse] = js.native
  def list(
    params: ParamsResourceProjectsLocationsCatalogsList,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaListCatalogsResponse]
  ): Unit = js.native
  def list(
    params: ParamsResourceProjectsLocationsCatalogsList,
    options: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaListCatalogsResponse],
    callback: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaListCatalogsResponse]
  ): Unit = js.native
  def list(params: ParamsResourceProjectsLocationsCatalogsList, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaListCatalogsResponse] = js.native
  def list(
    params: ParamsResourceProjectsLocationsCatalogsList,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaListCatalogsResponse]
  ): Unit = js.native
  /**
    * Lists all the Catalogs associated with the project.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/retail.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const retail = google.retail('v2beta');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await retail.projects.locations.catalogs.list({
    *     // Maximum number of Catalogs to return. If unspecified, defaults to 50. The maximum allowed value is 1000. Values above 1000 will be coerced to 1000. If this field is negative, an INVALID_ARGUMENT is returned.
    *     pageSize: 'placeholder-value',
    *     // A page token ListCatalogsResponse.next_page_token, received from a previous CatalogService.ListCatalogs call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to CatalogService.ListCatalogs must match the call that provided the page token. Otherwise, an INVALID_ARGUMENT error is returned.
    *     pageToken: 'placeholder-value',
    *     // Required. The account resource name with an associated location. If the caller does not have permission to list Catalogs under this location, regardless of whether or not this location exists, a PERMISSION_DENIED error is returned.
    *     parent: 'projects/my-project/locations/my-location',
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "catalogs": [],
    *   //   "nextPageToken": "my_nextPageToken"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def list(params: ParamsResourceProjectsLocationsCatalogsList, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def list(
    params: ParamsResourceProjectsLocationsCatalogsList,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  var operations: ResourceProjectsLocationsCatalogsOperations = js.native
  
  def patch(): GaxiosPromise[SchemaGoogleCloudRetailV2betaCatalog] = js.native
  def patch(callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCatalog]): Unit = js.native
  def patch(params: Unit, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaCatalog] = js.native
  def patch(params: ParamsResourceProjectsLocationsCatalogsPatch): GaxiosPromise[SchemaGoogleCloudRetailV2betaCatalog] = js.native
  def patch(
    params: ParamsResourceProjectsLocationsCatalogsPatch,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCatalog]
  ): Unit = js.native
  def patch(
    params: ParamsResourceProjectsLocationsCatalogsPatch,
    options: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaCatalog],
    callback: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaCatalog]
  ): Unit = js.native
  def patch(params: ParamsResourceProjectsLocationsCatalogsPatch, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaCatalog] = js.native
  def patch(
    params: ParamsResourceProjectsLocationsCatalogsPatch,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCatalog]
  ): Unit = js.native
  /**
    * Updates the Catalogs.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/retail.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const retail = google.retail('v2beta');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await retail.projects.locations.catalogs.patch({
    *     // Required. Immutable. The fully qualified resource name of the catalog.
    *     name: 'projects/my-project/locations/my-location/catalogs/my-catalog',
    *     // Indicates which fields in the provided Catalog to update. If an unsupported or unknown field is provided, an INVALID_ARGUMENT error is returned.
    *     updateMask: 'placeholder-value',
    *
    *     // Request body metadata
    *     requestBody: {
    *       // request body parameters
    *       // {
    *       //   "displayName": "my_displayName",
    *       //   "merchantCenterLinkingConfig": {},
    *       //   "name": "my_name",
    *       //   "productLevelConfig": {}
    *       // }
    *     },
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "displayName": "my_displayName",
    *   //   "merchantCenterLinkingConfig": {},
    *   //   "name": "my_name",
    *   //   "productLevelConfig": {}
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def patch(params: ParamsResourceProjectsLocationsCatalogsPatch, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def patch(
    params: ParamsResourceProjectsLocationsCatalogsPatch,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  var placements: ResourceProjectsLocationsCatalogsPlacements = js.native
  
  var servingConfigs: ResourceProjectsLocationsCatalogsServingconfigs = js.native
  
  def setDefaultBranch(): GaxiosPromise[SchemaGoogleProtobufEmpty] = js.native
  def setDefaultBranch(callback: BodyResponseCallback[SchemaGoogleProtobufEmpty]): Unit = js.native
  def setDefaultBranch(params: Unit, options: MethodOptions): GaxiosPromise[SchemaGoogleProtobufEmpty] = js.native
  def setDefaultBranch(params: ParamsResourceProjectsLocationsCatalogsSetdefaultbranch): GaxiosPromise[SchemaGoogleProtobufEmpty] = js.native
  def setDefaultBranch(
    params: ParamsResourceProjectsLocationsCatalogsSetdefaultbranch,
    callback: BodyResponseCallback[SchemaGoogleProtobufEmpty]
  ): Unit = js.native
  def setDefaultBranch(
    params: ParamsResourceProjectsLocationsCatalogsSetdefaultbranch,
    options: BodyResponseCallback[Readable | SchemaGoogleProtobufEmpty],
    callback: BodyResponseCallback[Readable | SchemaGoogleProtobufEmpty]
  ): Unit = js.native
  def setDefaultBranch(params: ParamsResourceProjectsLocationsCatalogsSetdefaultbranch, options: MethodOptions): GaxiosPromise[SchemaGoogleProtobufEmpty] = js.native
  def setDefaultBranch(
    params: ParamsResourceProjectsLocationsCatalogsSetdefaultbranch,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaGoogleProtobufEmpty]
  ): Unit = js.native
  /**
    * Set a specified branch id as default branch. API methods such as SearchService.Search, ProductService.GetProduct, ProductService.ListProducts will treat requests using "default_branch" to the actual branch id set as default. For example, if `projects/x/locations/x/catalogs/x/branches/1` is set as default, setting SearchRequest.branch to `projects/x/locations/x/catalogs/x/branches/default_branch` is equivalent to setting SearchRequest.branch to `projects/x/locations/x/catalogs/x/branches/1`. Using multiple branches can be useful when developers would like to have a staging branch to test and verify for future usage. When it becomes ready, developers switch on the staging branch using this API while keeping using `projects/x/locations/x/catalogs/x/branches/default_branch` as SearchRequest.branch to route the traffic to this staging branch. CAUTION: If you have live predict/search traffic, switching the default branch could potentially cause outages if the ID space of the new branch is very different from the old one. More specifically: * PredictionService will only return product IDs from branch {newBranch\}. * SearchService will only return product IDs from branch {newBranch\} (if branch is not explicitly set). * UserEventService will only join events with products from branch {newBranch\}.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/retail.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const retail = google.retail('v2beta');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await retail.projects.locations.catalogs.setDefaultBranch({
    *     // Full resource name of the catalog, such as `projects/x/locations/global/catalogs/default_catalog`.
    *     catalog: 'projects/my-project/locations/my-location/catalogs/my-catalog',
    *
    *     // Request body metadata
    *     requestBody: {
    *       // request body parameters
    *       // {
    *       //   "branchId": "my_branchId",
    *       //   "force": false,
    *       //   "note": "my_note"
    *       // }
    *     },
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {}
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def setDefaultBranch(params: ParamsResourceProjectsLocationsCatalogsSetdefaultbranch, options: StreamMethodOptions): GaxiosPromise[Readable] = js.native
  def setDefaultBranch(
    params: ParamsResourceProjectsLocationsCatalogsSetdefaultbranch,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def updateAttributesConfig(): GaxiosPromise[SchemaGoogleCloudRetailV2betaAttributesConfig] = js.native
  def updateAttributesConfig(callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaAttributesConfig]): Unit = js.native
  def updateAttributesConfig(params: Unit, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaAttributesConfig] = js.native
  def updateAttributesConfig(params: ParamsResourceProjectsLocationsCatalogsUpdateattributesconfig): GaxiosPromise[SchemaGoogleCloudRetailV2betaAttributesConfig] = js.native
  def updateAttributesConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdateattributesconfig,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaAttributesConfig]
  ): Unit = js.native
  def updateAttributesConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdateattributesconfig,
    options: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaAttributesConfig],
    callback: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaAttributesConfig]
  ): Unit = js.native
  def updateAttributesConfig(params: ParamsResourceProjectsLocationsCatalogsUpdateattributesconfig, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaAttributesConfig] = js.native
  def updateAttributesConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdateattributesconfig,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaAttributesConfig]
  ): Unit = js.native
  /**
    * Updates the AttributesConfig. The catalog attributes in the request will be updated in the catalog, or inserted if they do not exist. Existing catalog attributes not included in the request will remain unchanged. Attributes that are assigned to products, but do not exist at the catalog level, are always included in the response. The product attribute is assigned default values for missing catalog attribute fields, e.g., searchable and dynamic facetable options.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/retail.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const retail = google.retail('v2beta');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await retail.projects.locations.catalogs.updateAttributesConfig({
    *     // Required. Immutable. The fully qualified resource name of the attribute config. Format: `projects/x/locations/x/catalogs/x/attributesConfig`
    *     name: 'projects/my-project/locations/my-location/catalogs/my-catalog/attributesConfig',
    *     // Indicates which fields in the provided AttributesConfig to update. The following is the only supported field: * AttributesConfig.catalog_attributes If not set, all supported fields are updated.
    *     updateMask: 'placeholder-value',
    *
    *     // Request body metadata
    *     requestBody: {
    *       // request body parameters
    *       // {
    *       //   "attributeConfigLevel": "my_attributeConfigLevel",
    *       //   "catalogAttributes": {},
    *       //   "name": "my_name"
    *       // }
    *     },
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "attributeConfigLevel": "my_attributeConfigLevel",
    *   //   "catalogAttributes": {},
    *   //   "name": "my_name"
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def updateAttributesConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdateattributesconfig,
    options: StreamMethodOptions
  ): GaxiosPromise[Readable] = js.native
  def updateAttributesConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdateattributesconfig,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  def updateCompletionConfig(): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompletionConfig] = js.native
  def updateCompletionConfig(callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCompletionConfig]): Unit = js.native
  def updateCompletionConfig(params: Unit, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompletionConfig] = js.native
  def updateCompletionConfig(params: ParamsResourceProjectsLocationsCatalogsUpdatecompletionconfig): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompletionConfig] = js.native
  def updateCompletionConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdatecompletionconfig,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCompletionConfig]
  ): Unit = js.native
  def updateCompletionConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdatecompletionconfig,
    options: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaCompletionConfig],
    callback: BodyResponseCallback[Readable | SchemaGoogleCloudRetailV2betaCompletionConfig]
  ): Unit = js.native
  def updateCompletionConfig(params: ParamsResourceProjectsLocationsCatalogsUpdatecompletionconfig, options: MethodOptions): GaxiosPromise[SchemaGoogleCloudRetailV2betaCompletionConfig] = js.native
  def updateCompletionConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdatecompletionconfig,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaGoogleCloudRetailV2betaCompletionConfig]
  ): Unit = js.native
  /**
    * Updates the CompletionConfigs.
    * @example
    * ```js
    * // Before running the sample:
    * // - Enable the API at:
    * //   https://console.developers.google.com/apis/api/retail.googleapis.com
    * // - Login into gcloud by running:
    * //   `$ gcloud auth application-default login`
    * // - Install the npm module by running:
    * //   `$ npm install googleapis`
    *
    * const {google} = require('googleapis');
    * const retail = google.retail('v2beta');
    *
    * async function main() {
    *   const auth = new google.auth.GoogleAuth({
    *     // Scopes can be specified either as an array or as a single, space-delimited string.
    *     scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    *   });
    *
    *   // Acquire an auth client, and bind it to all future calls
    *   const authClient = await auth.getClient();
    *   google.options({auth: authClient});
    *
    *   // Do the magic
    *   const res = await retail.projects.locations.catalogs.updateCompletionConfig({
    *     // Required. Immutable. Fully qualified name `projects/x/locations/x/catalogs/x/completionConfig`
    *     name: 'projects/my-project/locations/my-location/catalogs/my-catalog/completionConfig',
    *     // Indicates which fields in the provided CompletionConfig to update. The following are the only supported fields: * CompletionConfig.matching_order * CompletionConfig.max_suggestions * CompletionConfig.min_prefix_length * CompletionConfig.auto_learning If not set, all supported fields are updated.
    *     updateMask: 'placeholder-value',
    *
    *     // Request body metadata
    *     requestBody: {
    *       // request body parameters
    *       // {
    *       //   "allowlistInputConfig": {},
    *       //   "autoLearning": false,
    *       //   "denylistInputConfig": {},
    *       //   "lastAllowlistImportOperation": "my_lastAllowlistImportOperation",
    *       //   "lastDenylistImportOperation": "my_lastDenylistImportOperation",
    *       //   "lastSuggestionsImportOperation": "my_lastSuggestionsImportOperation",
    *       //   "matchingOrder": "my_matchingOrder",
    *       //   "maxSuggestions": 0,
    *       //   "minPrefixLength": 0,
    *       //   "name": "my_name",
    *       //   "suggestionsInputConfig": {}
    *       // }
    *     },
    *   });
    *   console.log(res.data);
    *
    *   // Example response
    *   // {
    *   //   "allowlistInputConfig": {},
    *   //   "autoLearning": false,
    *   //   "denylistInputConfig": {},
    *   //   "lastAllowlistImportOperation": "my_lastAllowlistImportOperation",
    *   //   "lastDenylistImportOperation": "my_lastDenylistImportOperation",
    *   //   "lastSuggestionsImportOperation": "my_lastSuggestionsImportOperation",
    *   //   "matchingOrder": "my_matchingOrder",
    *   //   "maxSuggestions": 0,
    *   //   "minPrefixLength": 0,
    *   //   "name": "my_name",
    *   //   "suggestionsInputConfig": {}
    *   // }
    * }
    *
    * main().catch(e => {
    *   console.error(e);
    *   throw e;
    * });
    *
    * ```
    *
    * @param params - Parameters for request
    * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param callback - Optional callback that handles the response.
    * @returns A promise if used with async/await, or void if used with a callback.
    */
  def updateCompletionConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdatecompletionconfig,
    options: StreamMethodOptions
  ): GaxiosPromise[Readable] = js.native
  def updateCompletionConfig(
    params: ParamsResourceProjectsLocationsCatalogsUpdatecompletionconfig,
    options: StreamMethodOptions,
    callback: BodyResponseCallback[Readable]
  ): Unit = js.native
  
  var userEvents: ResourceProjectsLocationsCatalogsUserevents = js.native
}
