package typings.oojsUi.OO.ui.mixin

import org.scalablytyped.runtime.Instantiable0
import org.scalablytyped.runtime.Instantiable1
import typings.jquery.JQuery
import typings.oojsUi.OO.ui.Deferrable
import typings.oojsUi.OO.ui.Icon
import typings.oojsUi.OO.ui.mixin.IconElement.Props
import typings.oojsUi.OO.ui.mixin.IconElement.Prototype
import typings.std.HTMLElement
import typings.std.Record
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * IconElement is often mixed into other classes to generate an icon.
  * Icons are graphics, about the size of normal text. They are used to aid the user
  * in locating a control or to convey information in a space-efficient way. See the
  * [OOUI documentation on MediaWiki](https://www.mediawiki.org/wiki/OOUI/Widgets/Icons,_Indicators,_and_Labels#Icons)
  * for a list of icons included in the library.
  *
  * ResourceLoader module: `oojs-ui-core`
  *
  * @see https://doc.wikimedia.org/oojs-ui/master/js/#!/api/OO.ui.mixin.IconElement
  */
@js.native
trait IconElement
  extends StObject
     with Props
     with Prototype
object IconElement {
  
  trait ConfigOptions extends StObject {
    
    /**
      * The icon element created by the class. If this configuration is omitted,
      * the icon element will use a generated `<span>`. To use a different HTML tag, or to
      * specify that the icon element be set to an existing icon instead of the one generated
      * by this class, set a value using a jQuery selection. For example:
      *
      *     // Use a <div> tag instead of a <span>
      *     $icon: $( '<div>' )
      *     // Use an existing icon element instead of the one generated by the class
      *     $icon: this.$element
      *     // Use an icon element from a child widget
      *     $icon: this.childwidget.$element
      */
    @JSName("$icon")
    var $icon: js.UndefOr[JQuery[HTMLElement]] = js.undefined
    
    /**
      * The symbolic name of the icon (e.g., ‘remove’ or ‘menu’), or a
      * map of symbolic names. A map is used for i18n purposes and contains a `default` icon
      * name and additional names keyed by language code. The `default` name is used when no
      * icon is keyed by the user's language.
      *
      * Example of an i18n map:
      *
      *     { default: 'bold-a', en: 'bold-b', de: 'bold-f' }
      * See the [OOUI documentation on MediaWiki](https://www.mediawiki.org/wiki/OOUI/Widgets/Icons,_Indicators,_and_Labels#Icons)
      * for a list of icons included in the library.
      */
    var icon: js.UndefOr[Icon | (Record[String, Icon])] = js.undefined
  }
  object ConfigOptions {
    
    inline def apply(): ConfigOptions = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[ConfigOptions]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: ConfigOptions] (val x: Self) extends AnyVal {
      
      inline def set$icon(value: JQuery[HTMLElement]): Self = StObject.set(x, "$icon", value.asInstanceOf[js.Any])
      
      inline def set$iconUndefined: Self = StObject.set(x, "$icon", js.undefined)
      
      inline def setIcon(value: Icon | (Record[String, Icon])): Self = StObject.set(x, "icon", value.asInstanceOf[js.Any])
      
      inline def setIconUndefined: Self = StObject.set(x, "icon", js.undefined)
    }
  }
  
  @js.native
  trait Constructor
    extends StObject
       with /** @param config Configuration options */
  Instantiable0[IconElement]
       with Instantiable1[/* config */ ConfigOptions, IconElement] {
    
    var static: Static = js.native
  }
  
  trait Props extends StObject {
    
    @JSName("$icon")
    var $icon: JQuery[HTMLElement]
  }
  object Props {
    
    inline def apply($icon: JQuery[HTMLElement]): Props = {
      val __obj = js.Dynamic.literal($icon = $icon.asInstanceOf[js.Any])
      __obj.asInstanceOf[Props]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: Props] (val x: Self) extends AnyVal {
      
      inline def set$icon(value: JQuery[HTMLElement]): Self = StObject.set(x, "$icon", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait Prototype extends StObject {
    
    /**
      * Get the symbolic name of the icon.
      *
      * @return Icon name
      */
    def getIcon(): String = js.native
    
    /**
      * Set icon by symbolic name (e.g., ‘remove’ or ‘menu’). Use `null` to remove an icon.
      * The icon parameter can also be set to a map of icon names. See the {@link ConfigOptions.icon icon}
      * config setting for an example.
      *
      * @param icon A symbolic icon name, a {@link ConfigOptions.icon map of icon names} keyed
      *  by language code, or `null` to remove the icon.
      * @return The element, for chaining
      */
    def setIcon(): this.type = js.native
    def setIcon(icon: Icon): this.type = js.native
    def setIcon(icon: Record[String, Icon]): this.type = js.native
    
    /**
      * Set the icon element. This method is used to retarget an icon mixin so that its
      * functionality applies to the specified icon element instead of the one created by the
      * class. If an icon element is already set, the mixin’s effect on that element is
      * removed. Generated CSS classes and mixin methods will no longer affect the element.
      *
      * @param $icon Element to use as icon
      */
    def setIconElement($icon: JQuery[HTMLElement]): Unit = js.native
  }
  
  trait Static extends StObject {
    
    /**
      * The symbolic name of the icon (e.g., ‘remove’ or ‘menu’), or a map of symbolic names.
      * A map is used for i18n purposes and contains a `default` icon name and additional
      * names keyed by language code. The `default` name is used when no icon is keyed by the
      * user's language.
      *
      * Example of an i18n map:
      *
      *     { default: 'bold-a', en: 'bold-b', de: 'bold-f' }
      *
      * Note: the static property will be overridden if the {@link ConfigOptions.icon icon}
      * configuration is used.
      */
    var icon: String | (Record[String, String]) | Null
    
    /**
      * The icon title, displayed when users move the mouse over the icon. The value can be
      * text, a function that returns title text, or `null` for no title.
      *
      * The static property will be overridden if the iconTitle configuration is used.
      */
    var iconTitle: Deferrable[String] | Null
  }
  object Static {
    
    inline def apply(): Static = {
      val __obj = js.Dynamic.literal(icon = null, iconTitle = null)
      __obj.asInstanceOf[Static]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: Static] (val x: Self) extends AnyVal {
      
      inline def setIcon(value: String | (Record[String, String])): Self = StObject.set(x, "icon", value.asInstanceOf[js.Any])
      
      inline def setIconNull: Self = StObject.set(x, "icon", null)
      
      inline def setIconTitle(value: Deferrable[String]): Self = StObject.set(x, "iconTitle", value.asInstanceOf[js.Any])
      
      inline def setIconTitleFunction0(value: () => String): Self = StObject.set(x, "iconTitle", js.Any.fromFunction0(value))
      
      inline def setIconTitleNull: Self = StObject.set(x, "iconTitle", null)
    }
  }
}
