package typings.octokitOpenapiTypes

import typings.octokitOpenapiTypes.anon.Actionsbillingusage
import typings.octokitOpenapiTypes.anon.Actionscachegitreffull
import typings.octokitOpenapiTypes.anon.Actionsrunnerlabels
import typings.octokitOpenapiTypes.anon.Delete
import typings.octokitOpenapiTypes.anon.Delete31
import typings.octokitOpenapiTypes.anon.DeleteGet
import typings.octokitOpenapiTypes.anon.DeleteGetPatch
import typings.octokitOpenapiTypes.anon.DeleteGetPost
import typings.octokitOpenapiTypes.anon.DeleteGetPostPut
import typings.octokitOpenapiTypes.anon.DeleteGetPut
import typings.octokitOpenapiTypes.anon.DeleteParameters141Responses
import typings.octokitOpenapiTypes.anon.DeleteParameters141Responses371
import typings.octokitOpenapiTypes.anon.DeleteParameters154
import typings.octokitOpenapiTypes.anon.DeleteParameters248Responses9
import typings.octokitOpenapiTypes.anon.DeleteParameters337Responses108
import typings.octokitOpenapiTypes.anon.DeleteParameters395Responses371
import typings.octokitOpenapiTypes.anon.DeleteParameters47Responses
import typings.octokitOpenapiTypes.anon.DeleteParameters96
import typings.octokitOpenapiTypes.anon.DeleteParametersPath131Responses44
import typings.octokitOpenapiTypes.anon.DeleteParametersPath375Responses
import typings.octokitOpenapiTypes.anon.DeleteParametersPath389Responses371
import typings.octokitOpenapiTypes.anon.DeleteParametersPath397
import typings.octokitOpenapiTypes.anon.DeleteParametersPath69Responses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathArtifactidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathAssetidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathAutolinkidResponses7
import typings.octokitOpenapiTypes.anon.DeleteParametersPathBranchResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathBranchResponses7
import typings.octokitOpenapiTypes.anon.DeleteParametersPathBranchResponses88
import typings.octokitOpenapiTypes.anon.DeleteParametersPathBranchpolicyidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCacheid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCodespacename
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCommentidOwnerResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCommentidOwnerResponses7
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCommentnumberDiscussionnumberResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCommentnumberResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathDiscussionnumberOrg
import typings.octokitOpenapiTypes.anon.DeleteParametersPathDiscussionnumberResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathDiscussionnumberTeamidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathEnvironmentnameRepositoryidSecretnameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathEnvironmentnameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathGpgkeyidResponses135
import typings.octokitOpenapiTypes.anon.DeleteParametersPathHookidOwnerResponses7
import typings.octokitOpenapiTypes.anon.DeleteParametersPathHookidResponses7
import typings.octokitOpenapiTypes.anon.DeleteParametersPathInstallationidRepositoryid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathInvitationid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathInvitationidOwner
import typings.octokitOpenapiTypes.anon.DeleteParametersPathIssuenumberName
import typings.octokitOpenapiTypes.anon.DeleteParametersPathIssuenumberOwner
import typings.octokitOpenapiTypes.anon.DeleteParametersPathIssuenumberResponses92
import typings.octokitOpenapiTypes.anon.DeleteParametersPathKeyidOwnerResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathMigrationidReponame
import typings.octokitOpenapiTypes.anon.DeleteParametersPathMilestonenumberResponses7
import typings.octokitOpenapiTypes.anon.DeleteParametersPathNameOrg
import typings.octokitOpenapiTypes.anon.DeleteParametersPathNameOrgRepositoryid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathNameOwner
import typings.octokitOpenapiTypes.anon.DeleteParametersPathNameOwnerRepoResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathNameRepositoryid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathNameStringResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOrgRepositoryid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOrgTeamslugResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOwnerProtectionruleid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOwnerReactionid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackagenamePackagetypePackageversionid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackagenamePackagetypeResponses99
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackagetypePackageversionidResponses99
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackagetypeUsernameResponses99
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackageversionidResponses99
import typings.octokitOpenapiTypes.anon.DeleteParametersPathProjectidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathProjectidTeamidResponses75
import typings.octokitOpenapiTypes.anon.DeleteParametersPathReactionid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathReactionidReleaseid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathReleaseidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepoResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepoRunneridResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepoSecretnameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepoTeamidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepoUsername
import typings.octokitOpenapiTypes.anon.DeleteParametersPathReponame
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepositoryidNumber
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepositoryidSecretname
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRequiredworkflowidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRunneridResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathSecretnameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathSecretnameResponses7
import typings.octokitOpenapiTypes.anon.DeleteParametersPathSshsigningkeyidResponses371
import typings.octokitOpenapiTypes.anon.DeleteParametersPathTagprotectionid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathTeamidResponses75
import typings.octokitOpenapiTypes.anon.DeleteParametersPathTeamidUsername
import typings.octokitOpenapiTypes.anon.DeleteParametersPathTeamslug
import typings.octokitOpenapiTypes.anon.DeleteParametersPathUsernameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersQueryConfirmdelete
import typings.octokitOpenapiTypes.anon.DeleteParametersQueryKeyRef
import typings.octokitOpenapiTypes.anon.DeletePatch
import typings.octokitOpenapiTypes.anon.DeletePost
import typings.octokitOpenapiTypes.anon.DeletePut
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyContentApplicationjsonAccounturlsResponses135
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyContentApplicationjsonAssigneesArray
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyContentApplicationjsonAuthorBranch
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyContentApplicationjsonTeamreviewers
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyResponses
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyResponses135
import typings.octokitOpenapiTypes.anon.DeleteResponses108
import typings.octokitOpenapiTypes.anon.DeleteResponses135
import typings.octokitOpenapiTypes.anon.DeleteResponses200181422
import typings.octokitOpenapiTypes.anon.DeleteResponses200Content325404422
import typings.octokitOpenapiTypes.anon.DeleteResponses200Content71422
import typings.octokitOpenapiTypes.anon.DeleteResponses202304401
import typings.octokitOpenapiTypes.anon.DeleteResponses234
import typings.octokitOpenapiTypes.anon.DeleteResponses283
import typings.octokitOpenapiTypes.anon.DeleteResponses307
import typings.octokitOpenapiTypes.anon.DeleteResponses371
import typings.octokitOpenapiTypes.anon.DeleteResponses403500
import typings.octokitOpenapiTypes.anon.DeleteResponses403ContentApplicationjsonErrors
import typings.octokitOpenapiTypes.anon.DeleteResponses404409422
import typings.octokitOpenapiTypes.anon.DeleteResponses404410
import typings.octokitOpenapiTypes.anon.DeleteResponses422ContentApplicationjsonDocumentationurl
import typings.octokitOpenapiTypes.anon.DeleteResponses75
import typings.octokitOpenapiTypes.anon.DeleteResponses88
import typings.octokitOpenapiTypes.anon.DeleteResponses92
import typings.octokitOpenapiTypes.anon.DeleteResponses99
import typings.octokitOpenapiTypes.anon.Get
import typings.octokitOpenapiTypes.anon.Get385
import typings.octokitOpenapiTypes.anon.Get419
import typings.octokitOpenapiTypes.anon.GetParameters141Responses
import typings.octokitOpenapiTypes.anon.GetParameters141Responses200Content57
import typings.octokitOpenapiTypes.anon.GetParameters141Responses200Content58
import typings.octokitOpenapiTypes.anon.GetParameters141Responses200Content61
import typings.octokitOpenapiTypes.anon.GetParameters141Responses200Content66
import typings.octokitOpenapiTypes.anon.GetParameters141Responses200Content73
import typings.octokitOpenapiTypes.anon.GetParameters141Responses200Content76
import typings.octokitOpenapiTypes.anon.GetParameters141Responses200Content83
import typings.octokitOpenapiTypes.anon.GetParameters156
import typings.octokitOpenapiTypes.anon.GetParameters248
import typings.octokitOpenapiTypes.anon.GetParameters248Responses
import typings.octokitOpenapiTypes.anon.GetParameters365
import typings.octokitOpenapiTypes.anon.GetParameters386
import typings.octokitOpenapiTypes.anon.GetParameters47Responses200Content90
import typings.octokitOpenapiTypes.anon.GetParametersPath134QueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPath370
import typings.octokitOpenapiTypes.anon.GetParametersPath370QueryDirectionPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersPath370QueryPackagetypePage
import typings.octokitOpenapiTypes.anon.GetParametersPath370QueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPath370QueryPageResponses104
import typings.octokitOpenapiTypes.anon.GetParametersPath370QueryPageResponses97
import typings.octokitOpenapiTypes.anon.GetParametersPath370QueryPerpage
import typings.octokitOpenapiTypes.anon.GetParametersPath370QueryPerpageState
import typings.octokitOpenapiTypes.anon.GetParametersPath370Responses200401403
import typings.octokitOpenapiTypes.anon.GetParametersPath370Responses200Content110
import typings.octokitOpenapiTypes.anon.GetParametersPath370Responses200Content111
import typings.octokitOpenapiTypes.anon.GetParametersPath370Responses200Content112
import typings.octokitOpenapiTypes.anon.GetParametersPath370Responses200Content6
import typings.octokitOpenapiTypes.anon.GetParametersPath394
import typings.octokitOpenapiTypes.anon.GetParametersPath394QueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPath69QueryPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersPathAccountid
import typings.octokitOpenapiTypes.anon.GetParametersPathAlertnumber
import typings.octokitOpenapiTypes.anon.GetParametersPathAlertnumberOwner
import typings.octokitOpenapiTypes.anon.GetParametersPathAlertnumberQueryPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersPathAppslug
import typings.octokitOpenapiTypes.anon.GetParametersPathArchiveformat
import typings.octokitOpenapiTypes.anon.GetParametersPathAssignee
import typings.octokitOpenapiTypes.anon.GetParametersPathAssigneeIssuenumber
import typings.octokitOpenapiTypes.anon.GetParametersPathAttemptnumber
import typings.octokitOpenapiTypes.anon.GetParametersPathAttemptnumberQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathBaseHead_
import typings.octokitOpenapiTypes.anon.GetParametersPathBasehead
import typings.octokitOpenapiTypes.anon.GetParametersPathBranch
import typings.octokitOpenapiTypes.anon.GetParametersPathBuildid
import typings.octokitOpenapiTypes.anon.GetParametersPathCheckrunid
import typings.octokitOpenapiTypes.anon.GetParametersPathCheckrunidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathChecksuiteid
import typings.octokitOpenapiTypes.anon.GetParametersPathCommentidOwnerQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathCommentnumberDiscussionnumberQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathCommitsha
import typings.octokitOpenapiTypes.anon.GetParametersPathCommitshaQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathDeliveryid
import typings.octokitOpenapiTypes.anon.GetParametersPathDeliveryidHookid
import typings.octokitOpenapiTypes.anon.GetParametersPathDeliveryidHookidOwner
import typings.octokitOpenapiTypes.anon.GetParametersPathDeploymentidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathDir
import typings.octokitOpenapiTypes.anon.GetParametersPathDiscussionnumberQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathDiscussionnumberTeamidQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathDiscussionnumberTeamidQueryDirectionPage
import typings.octokitOpenapiTypes.anon.GetParametersPathEnterprise
import typings.octokitOpenapiTypes.anon.GetParametersPathEnvironmentnameOwner
import typings.octokitOpenapiTypes.anon.GetParametersPathEnvironmentnameOwnerQueryPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersPathEnvironmentnameQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathEnvironmentnameRepositoryid
import typings.octokitOpenapiTypes.anon.GetParametersPathEnvironmentnameRepositoryidQuery68
import typings.octokitOpenapiTypes.anon.GetParametersPathEventid
import typings.octokitOpenapiTypes.anon.GetParametersPathExportid
import typings.octokitOpenapiTypes.anon.GetParametersPathFilesha
import typings.octokitOpenapiTypes.anon.GetParametersPathGhsaid
import typings.octokitOpenapiTypes.anon.GetParametersPathGistidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathHookidOwnerQueryCursor
import typings.octokitOpenapiTypes.anon.GetParametersPathHookidOwnerResponses200Content2
import typings.octokitOpenapiTypes.anon.GetParametersPathHookidResponses200Content2
import typings.octokitOpenapiTypes.anon.GetParametersPathInstallationidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathInvitationidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathIssuenumber
import typings.octokitOpenapiTypes.anon.GetParametersPathIssuenumberQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathIssuenumberQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathIssuenumberQueryPerpage
import typings.octokitOpenapiTypes.anon.GetParametersPathJobid
import typings.octokitOpenapiTypes.anon.GetParametersPathJobidResponses
import typings.octokitOpenapiTypes.anon.GetParametersPathKey
import typings.octokitOpenapiTypes.anon.GetParametersPathLanguage
import typings.octokitOpenapiTypes.anon.GetParametersPathLicense
import typings.octokitOpenapiTypes.anon.GetParametersPathMigrationid
import typings.octokitOpenapiTypes.anon.GetParametersPathMigrationidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathMilestonenumberQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathName
import typings.octokitOpenapiTypes.anon.GetParametersPathOrg
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgPatid
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgRepo
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgUsername
import typings.octokitOpenapiTypes.anon.GetParametersPathOwner
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerQuery68
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerQueryPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerQueryPerpageState
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerQueryResolution
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerRef
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerRefQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerRepo
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerResponses129
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerResponses200Content16
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerResponses200ContentApplicationjsonRunners
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerResponses97
import typings.octokitOpenapiTypes.anon.GetParametersPathPackagenamePackagetypeQueryState
import typings.octokitOpenapiTypes.anon.GetParametersPathPatrequestidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathPlanid
import typings.octokitOpenapiTypes.anon.GetParametersPathPullnumber
import typings.octokitOpenapiTypes.anon.GetParametersPathPullnumberQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathPullnumberQueryPerpageSince
import typings.octokitOpenapiTypes.anon.GetParametersPathPullnumberResponses
import typings.octokitOpenapiTypes.anon.GetParametersPathQuery
import typings.octokitOpenapiTypes.anon.GetParametersPathReleaseidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathRepoSarifid
import typings.octokitOpenapiTypes.anon.GetParametersPathRequiredworkflowidResponses200ContentApplicationjsonTotalcount
import typings.octokitOpenapiTypes.anon.GetParametersPathRequiredworkflowidforrepo
import typings.octokitOpenapiTypes.anon.GetParametersPathReviewidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathRunidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathSha
import typings.octokitOpenapiTypes.anon.GetParametersPathStatusid
import typings.octokitOpenapiTypes.anon.GetParametersPathTag
import typings.octokitOpenapiTypes.anon.GetParametersPathTagsha
import typings.octokitOpenapiTypes.anon.GetParametersPathTargetuser
import typings.octokitOpenapiTypes.anon.GetParametersPathTeamidQueryDirectionPage
import typings.octokitOpenapiTypes.anon.GetParametersPathTeamidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathTeamidQueryPerpageRole
import typings.octokitOpenapiTypes.anon.GetParametersPathTeamslugQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathThreadid
import typings.octokitOpenapiTypes.anon.GetParametersPathTreesha
import typings.octokitOpenapiTypes.anon.GetParametersPathUsernameQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathUsernameResponses
import typings.octokitOpenapiTypes.anon.GetParametersPathWorkflowid
import typings.octokitOpenapiTypes.anon.GetParametersPathWorkflowidQueryActor
import typings.octokitOpenapiTypes.anon.GetParametersQuery168
import typings.octokitOpenapiTypes.anon.GetParametersQuery205
import typings.octokitOpenapiTypes.anon.GetParametersQuery229
import typings.octokitOpenapiTypes.anon.GetParametersQuery262
import typings.octokitOpenapiTypes.anon.GetParametersQuery364
import typings.octokitOpenapiTypes.anon.GetParametersQuery411
import typings.octokitOpenapiTypes.anon.GetParametersQuery68
import typings.octokitOpenapiTypes.anon.GetParametersQueryActor
import typings.octokitOpenapiTypes.anon.GetParametersQueryAffiliation
import typings.octokitOpenapiTypes.anon.GetParametersQueryAffiliationPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryAfter
import typings.octokitOpenapiTypes.anon.GetParametersQueryAfterBefore
import typings.octokitOpenapiTypes.anon.GetParametersQueryAll
import typings.octokitOpenapiTypes.anon.GetParametersQueryAnon
import typings.octokitOpenapiTypes.anon.GetParametersQueryAppidCheckname
import typings.octokitOpenapiTypes.anon.GetParametersQueryArchivedstate
import typings.octokitOpenapiTypes.anon.GetParametersQueryAuthor
import typings.octokitOpenapiTypes.anon.GetParametersQueryCheckname
import typings.octokitOpenapiTypes.anon.GetParametersQueryChecknamePage
import typings.octokitOpenapiTypes.anon.GetParametersQueryClientipLocation
import typings.octokitOpenapiTypes.anon.GetParametersQueryClientipRef
import typings.octokitOpenapiTypes.anon.GetParametersQueryCollab
import typings.octokitOpenapiTypes.anon.GetParametersQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryContentPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryCreator
import typings.octokitOpenapiTypes.anon.GetParametersQueryCursor
import typings.octokitOpenapiTypes.anon.GetParametersQueryDirectionPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryDirectionPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryEcosystem
import typings.octokitOpenapiTypes.anon.GetParametersQueryEnvironment
import typings.octokitOpenapiTypes.anon.GetParametersQueryExclude
import typings.octokitOpenapiTypes.anon.GetParametersQueryFeatured
import typings.octokitOpenapiTypes.anon.GetParametersQueryFilter
import typings.octokitOpenapiTypes.anon.GetParametersQueryFilterPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryFilterPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryHead
import typings.octokitOpenapiTypes.anon.GetParametersQueryIncludesparents
import typings.octokitOpenapiTypes.anon.GetParametersQueryInvitationsource
import typings.octokitOpenapiTypes.anon.GetParametersQueryNamePage
import typings.octokitOpenapiTypes.anon.GetParametersQueryOrder
import typings.octokitOpenapiTypes.anon.GetParametersQueryOrderPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryOrderPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryOutdated
import typings.octokitOpenapiTypes.anon.GetParametersQueryPackagetype
import typings.octokitOpenapiTypes.anon.GetParametersQueryPackagetypePage
import typings.octokitOpenapiTypes.anon.GetParametersQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryPagePerpageQ
import typings.octokitOpenapiTypes.anon.GetParametersQueryPagePerpageState
import typings.octokitOpenapiTypes.anon.GetParametersQueryParticipating
import typings.octokitOpenapiTypes.anon.GetParametersQueryPer
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageQ
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageRef
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageRepositoryid
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageRole
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageSince
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageSort
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageState
import typings.octokitOpenapiTypes.anon.GetParametersQueryPinned
import typings.octokitOpenapiTypes.anon.GetParametersQueryProtected
import typings.octokitOpenapiTypes.anon.GetParametersQueryQ
import typings.octokitOpenapiTypes.anon.GetParametersQueryQSort
import typings.octokitOpenapiTypes.anon.GetParametersQueryResolution
import typings.octokitOpenapiTypes.anon.GetParametersQueryRole
import typings.octokitOpenapiTypes.anon.GetParametersQueryS
import typings.octokitOpenapiTypes.anon.GetParametersQuerySarifid
import typings.octokitOpenapiTypes.anon.GetParametersQuerySeverity
import typings.octokitOpenapiTypes.anon.GetParametersQuerySince
import typings.octokitOpenapiTypes.anon.GetParametersQuerySinceSort
import typings.octokitOpenapiTypes.anon.GetParametersQuerySort
import typings.octokitOpenapiTypes.anon.GetParametersQuerySortState
import typings.octokitOpenapiTypes.anon.GetParametersQuerySortType
import typings.octokitOpenapiTypes.anon.GetParametersQueryState
import typings.octokitOpenapiTypes.anon.GetParametersQuerySubjectid
import typings.octokitOpenapiTypes.anon.GetParametersQueryToolguid
import typings.octokitOpenapiTypes.anon.GetParametersQueryType
import typings.octokitOpenapiTypes.anon.GetParametersResponses
import typings.octokitOpenapiTypes.anon.GetPatch
import typings.octokitOpenapiTypes.anon.GetPost
import typings.octokitOpenapiTypes.anon.GetPostPut
import typings.octokitOpenapiTypes.anon.GetPut
import typings.octokitOpenapiTypes.anon.GetResponses104
import typings.octokitOpenapiTypes.anon.GetResponses129
import typings.octokitOpenapiTypes.anon.GetResponses167
import typings.octokitOpenapiTypes.anon.GetResponses200202204
import typings.octokitOpenapiTypes.anon.GetResponses200202404
import typings.octokitOpenapiTypes.anon.GetResponses200204
import typings.octokitOpenapiTypes.anon.GetResponses200247
import typings.octokitOpenapiTypes.anon.GetResponses200301404
import typings.octokitOpenapiTypes.anon.GetResponses200304
import typings.octokitOpenapiTypes.anon.GetResponses200304401403404422
import typings.octokitOpenapiTypes.anon.GetResponses200333
import typings.octokitOpenapiTypes.anon.GetResponses200401403
import typings.octokitOpenapiTypes.anon.GetResponses200401403404
import typings.octokitOpenapiTypes.anon.GetResponses200401403404500
import typings.octokitOpenapiTypes.anon.GetResponses200404500
import typings.octokitOpenapiTypes.anon.GetResponses200422500
import typings.octokitOpenapiTypes.anon.GetResponses200Content0
import typings.octokitOpenapiTypes.anon.GetResponses200Content109
import typings.octokitOpenapiTypes.anon.GetResponses200Content110
import typings.octokitOpenapiTypes.anon.GetResponses200Content111
import typings.octokitOpenapiTypes.anon.GetResponses200Content112
import typings.octokitOpenapiTypes.anon.GetResponses200Content113
import typings.octokitOpenapiTypes.anon.GetResponses200Content122404
import typings.octokitOpenapiTypes.anon.GetResponses200Content124
import typings.octokitOpenapiTypes.anon.GetResponses200Content124404
import typings.octokitOpenapiTypes.anon.GetResponses200Content13
import typings.octokitOpenapiTypes.anon.GetResponses200Content138
import typings.octokitOpenapiTypes.anon.GetResponses200Content140
import typings.octokitOpenapiTypes.anon.GetResponses200Content145
import typings.octokitOpenapiTypes.anon.GetResponses200Content151
import typings.octokitOpenapiTypes.anon.GetResponses200Content152
import typings.octokitOpenapiTypes.anon.GetResponses200Content155
import typings.octokitOpenapiTypes.anon.GetResponses200Content159
import typings.octokitOpenapiTypes.anon.GetResponses200Content16
import typings.octokitOpenapiTypes.anon.GetResponses200Content161
import typings.octokitOpenapiTypes.anon.GetResponses200Content17
import typings.octokitOpenapiTypes.anon.GetResponses200Content176404
import typings.octokitOpenapiTypes.anon.GetResponses200Content177
import typings.octokitOpenapiTypes.anon.GetResponses200Content179
import typings.octokitOpenapiTypes.anon.GetResponses200Content194
import typings.octokitOpenapiTypes.anon.GetResponses200Content196
import typings.octokitOpenapiTypes.anon.GetResponses200Content208
import typings.octokitOpenapiTypes.anon.GetResponses200Content211
import typings.octokitOpenapiTypes.anon.GetResponses200Content212
import typings.octokitOpenapiTypes.anon.GetResponses200Content216
import typings.octokitOpenapiTypes.anon.GetResponses200Content219
import typings.octokitOpenapiTypes.anon.GetResponses200Content220
import typings.octokitOpenapiTypes.anon.GetResponses200Content228
import typings.octokitOpenapiTypes.anon.GetResponses200Content231
import typings.octokitOpenapiTypes.anon.GetResponses200Content250
import typings.octokitOpenapiTypes.anon.GetResponses200Content255
import typings.octokitOpenapiTypes.anon.GetResponses200Content26
import typings.octokitOpenapiTypes.anon.GetResponses200Content266
import typings.octokitOpenapiTypes.anon.GetResponses200Content268
import typings.octokitOpenapiTypes.anon.GetResponses200Content268304
import typings.octokitOpenapiTypes.anon.GetResponses200Content27
import typings.octokitOpenapiTypes.anon.GetResponses200Content273
import typings.octokitOpenapiTypes.anon.GetResponses200Content278
import typings.octokitOpenapiTypes.anon.GetResponses200Content285
import typings.octokitOpenapiTypes.anon.GetResponses200Content286
import typings.octokitOpenapiTypes.anon.GetResponses200Content29
import typings.octokitOpenapiTypes.anon.GetResponses200Content292
import typings.octokitOpenapiTypes.anon.GetResponses200Content294
import typings.octokitOpenapiTypes.anon.GetResponses200Content308
import typings.octokitOpenapiTypes.anon.GetResponses200Content310
import typings.octokitOpenapiTypes.anon.GetResponses200Content315
import typings.octokitOpenapiTypes.anon.GetResponses200Content324
import typings.octokitOpenapiTypes.anon.GetResponses200Content328
import typings.octokitOpenapiTypes.anon.GetResponses200Content329
import typings.octokitOpenapiTypes.anon.GetResponses200Content336
import typings.octokitOpenapiTypes.anon.GetResponses200Content347
import typings.octokitOpenapiTypes.anon.GetResponses200Content35
import typings.octokitOpenapiTypes.anon.GetResponses200Content350
import typings.octokitOpenapiTypes.anon.GetResponses200Content351
import typings.octokitOpenapiTypes.anon.GetResponses200Content353
import typings.octokitOpenapiTypes.anon.GetResponses200Content355
import typings.octokitOpenapiTypes.anon.GetResponses200Content356
import typings.octokitOpenapiTypes.anon.GetResponses200Content360
import typings.octokitOpenapiTypes.anon.GetResponses200Content361
import typings.octokitOpenapiTypes.anon.GetResponses200Content362
import typings.octokitOpenapiTypes.anon.GetResponses200Content368
import typings.octokitOpenapiTypes.anon.GetResponses200Content368404
import typings.octokitOpenapiTypes.anon.GetResponses200Content37
import typings.octokitOpenapiTypes.anon.GetResponses200Content374
import typings.octokitOpenapiTypes.anon.GetResponses200Content38
import typings.octokitOpenapiTypes.anon.GetResponses200Content382HeadersLink
import typings.octokitOpenapiTypes.anon.GetResponses200Content383
import typings.octokitOpenapiTypes.anon.GetResponses200Content387
import typings.octokitOpenapiTypes.anon.GetResponses200Content39
import typings.octokitOpenapiTypes.anon.GetResponses200Content390
import typings.octokitOpenapiTypes.anon.GetResponses200Content406
import typings.octokitOpenapiTypes.anon.GetResponses200Content408
import typings.octokitOpenapiTypes.anon.GetResponses200Content414
import typings.octokitOpenapiTypes.anon.GetResponses200Content45HeadersLink
import typings.octokitOpenapiTypes.anon.GetResponses200Content48
import typings.octokitOpenapiTypes.anon.GetResponses200Content48304
import typings.octokitOpenapiTypes.anon.GetResponses200Content53
import typings.octokitOpenapiTypes.anon.GetResponses200Content54
import typings.octokitOpenapiTypes.anon.GetResponses200Content56
import typings.octokitOpenapiTypes.anon.GetResponses200Content57
import typings.octokitOpenapiTypes.anon.GetResponses200Content58
import typings.octokitOpenapiTypes.anon.GetResponses200Content6
import typings.octokitOpenapiTypes.anon.GetResponses200Content61
import typings.octokitOpenapiTypes.anon.GetResponses200Content66
import typings.octokitOpenapiTypes.anon.GetResponses200Content71
import typings.octokitOpenapiTypes.anon.GetResponses200Content71304
import typings.octokitOpenapiTypes.anon.GetResponses200Content73
import typings.octokitOpenapiTypes.anon.GetResponses200Content76
import typings.octokitOpenapiTypes.anon.GetResponses200Content77
import typings.octokitOpenapiTypes.anon.GetResponses200Content78
import typings.octokitOpenapiTypes.anon.GetResponses200Content79
import typings.octokitOpenapiTypes.anon.GetResponses200Content80
import typings.octokitOpenapiTypes.anon.GetResponses200Content87403
import typings.octokitOpenapiTypes.anon.GetResponses200Content87403404
import typings.octokitOpenapiTypes.anon.GetResponses200Content93304
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjson227
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjson373
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonEnvironments
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonInstallations
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonInstallations304
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonRepositoriesTotalcount404
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonRequiredworkflows
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonRunners
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonSecrets
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonSecretsArray
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonSecretsArrayTotalcountNumber
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonSecretsTotalcount
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonTotalcount
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonTotalcountNumber
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonWorkflows
import typings.octokitOpenapiTypes.anon.GetResponses200ContentTextplainString
import typings.octokitOpenapiTypes.anon.GetResponses200HeadersLink304
import typings.octokitOpenapiTypes.anon.GetResponses200HeadersLink404
import typings.octokitOpenapiTypes.anon.GetResponses202204
import typings.octokitOpenapiTypes.anon.GetResponses304401
import typings.octokitOpenapiTypes.anon.GetResponses304401403404500
import typings.octokitOpenapiTypes.anon.GetResponses304401404
import typings.octokitOpenapiTypes.anon.GetResponses304503
import typings.octokitOpenapiTypes.anon.GetResponses400401
import typings.octokitOpenapiTypes.anon.GetResponses400404
import typings.octokitOpenapiTypes.anon.GetResponses401403
import typings.octokitOpenapiTypes.anon.GetResponses401403404
import typings.octokitOpenapiTypes.anon.GetResponses401403404500
import typings.octokitOpenapiTypes.anon.GetResponses401404
import typings.octokitOpenapiTypes.anon.GetResponses403422
import typings.octokitOpenapiTypes.anon.GetResponses403503
import typings.octokitOpenapiTypes.anon.GetResponses412
import typings.octokitOpenapiTypes.anon.GetResponses415
import typings.octokitOpenapiTypes.anon.GetResponses416
import typings.octokitOpenapiTypes.anon.GetResponses417
import typings.octokitOpenapiTypes.anon.GetResponses422500
import typings.octokitOpenapiTypes.anon.GetResponses97
import typings.octokitOpenapiTypes.anon.Parameters496
import typings.octokitOpenapiTypes.anon.Parameters496RequestBody
import typings.octokitOpenapiTypes.anon.Parameters496RequestBodyContentApplicationjsonSelectedrepositoryids
import typings.octokitOpenapiTypes.anon.Parameters496RequestBodyContentApplicationjsonSelectedusernamesArray
import typings.octokitOpenapiTypes.anon.Parameters496RequestBodyContentApplicationjsonValue
import typings.octokitOpenapiTypes.anon.Parameters496RequestBodyResponses
import typings.octokitOpenapiTypes.anon.Parameters496Responses
import typings.octokitOpenapiTypes.anon.Parameters496Responses200ContentApplicationjsonOrganizationOrganizationurl
import typings.octokitOpenapiTypes.anon.Parameters519
import typings.octokitOpenapiTypes.anon.Parameters540
import typings.octokitOpenapiTypes.anon.Parameters540RequestBody
import typings.octokitOpenapiTypes.anon.Parameters540RequestBodyContentApplicationjsonBodyName
import typings.octokitOpenapiTypes.anon.Parameters540RequestBodyContentApplicationjsonClientpayload
import typings.octokitOpenapiTypes.anon.Parameters540RequestBodyContentApplicationjsonNameValue
import typings.octokitOpenapiTypes.anon.Parameters540Responses
import typings.octokitOpenapiTypes.anon.Parameters540Responses200Content504
import typings.octokitOpenapiTypes.anon.Parameters540Responses200Content515
import typings.octokitOpenapiTypes.anon.Parameters540Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
import typings.octokitOpenapiTypes.anon.Parameters540Responses200ContentApplicationjsonCreatedatId
import typings.octokitOpenapiTypes.anon.Parameters540Responses200ContentApplicationjsonGithubownedallowed
import typings.octokitOpenapiTypes.anon.Parameters540Responses200ContentApplicationjsonKeyKeyid
import typings.octokitOpenapiTypes.anon.Parameters540Responses201ContentApplicationjsonExpiresatPermissions
import typings.octokitOpenapiTypes.anon.Parameters540Responses401Content36403Content36404Content36
import typings.octokitOpenapiTypes.anon.Parameters544
import typings.octokitOpenapiTypes.anon.Parameters544RequestBody
import typings.octokitOpenapiTypes.anon.Parameters546
import typings.octokitOpenapiTypes.anon.Parameters572
import typings.octokitOpenapiTypes.anon.Parameters582
import typings.octokitOpenapiTypes.anon.Parameters582Responses
import typings.octokitOpenapiTypes.anon.Parameters582Responses476
import typings.octokitOpenapiTypes.anon.Parameters625
import typings.octokitOpenapiTypes.anon.Parameters625Responses500Content36
import typings.octokitOpenapiTypes.anon.Parameters641
import typings.octokitOpenapiTypes.anon.Parameters642
import typings.octokitOpenapiTypes.anon.Parameters642RequestBodyContentApplicationjsonNameValue
import typings.octokitOpenapiTypes.anon.Parameters657
import typings.octokitOpenapiTypes.anon.Parameters662
import typings.octokitOpenapiTypes.anon.Parameters662Responses401Content36403Content36404Content36
import typings.octokitOpenapiTypes.anon.ParametersPath
import typings.octokitOpenapiTypes.anon.ParametersPath649
import typings.octokitOpenapiTypes.anon.ParametersPath649Query473
import typings.octokitOpenapiTypes.anon.ParametersPath649Query473Responses521
import typings.octokitOpenapiTypes.anon.ParametersPath649Query473Responses526
import typings.octokitOpenapiTypes.anon.ParametersPath649Query524
import typings.octokitOpenapiTypes.anon.ParametersPath649QueryDirectionPagePerpageSort
import typings.octokitOpenapiTypes.anon.ParametersPath649QueryPackagetypePagePerpage
import typings.octokitOpenapiTypes.anon.ParametersPath649QueryPagePerpageSince
import typings.octokitOpenapiTypes.anon.ParametersPath649QuerySubjectid
import typings.octokitOpenapiTypes.anon.ParametersPath649Responses200Content510
import typings.octokitOpenapiTypes.anon.ParametersPath649Responses200ContentApplicationjsonDaysleftinbillingcycle
import typings.octokitOpenapiTypes.anon.ParametersPath649Responses200ContentApplicationjsonIncludedgigabytesbandwidth
import typings.octokitOpenapiTypes.anon.ParametersPath649Responses200ContentApplicationjsonIncludedminutes
import typings.octokitOpenapiTypes.anon.ParametersPath649Responses304401Content36403Content36
import typings.octokitOpenapiTypes.anon.ParametersPath649Responses514
import typings.octokitOpenapiTypes.anon.ParametersPath652
import typings.octokitOpenapiTypes.anon.ParametersPath652RequestBodyContentApplicationjsonKeyidSelectedrepositoryids
import typings.octokitOpenapiTypes.anon.ParametersPath652Responses
import typings.octokitOpenapiTypes.anon.ParametersPathAccountidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathAlertnumberOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathAlertnumberOwnerRepoQuery507
import typings.octokitOpenapiTypes.anon.ParametersPathAnalysisidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAnalysisidOwnerQueryConfirmdelete
import typings.octokitOpenapiTypes.anon.ParametersPathAppslugString
import typings.octokitOpenapiTypes.anon.ParametersPathArchiveformatArtifactid
import typings.octokitOpenapiTypes.anon.ParametersPathArtifactidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathArtifactidOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathAssetidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAssetidOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathAssigneeIssuenumberOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAssigneeOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAttemptnumberOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAttemptnumberOwnerQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathAuthoridOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAutolinkidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAutolinkidOwnerResponses404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathBaseheadOwner
import typings.octokitOpenapiTypes.anon.ParametersPathBranchOwner
import typings.octokitOpenapiTypes.anon.ParametersPathBranchOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathBranchOwnerResponses404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathBranchOwnerResponses517
import typings.octokitOpenapiTypes.anon.ParametersPathBranchpolicyidEnvironmentname
import typings.octokitOpenapiTypes.anon.ParametersPathBranchpolicyidEnvironmentnameRequestBodyContentApplicationjsonName
import typings.octokitOpenapiTypes.anon.ParametersPathBranchpolicyidEnvironmentnameResponses
import typings.octokitOpenapiTypes.anon.ParametersPathBuildidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathCacheidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathCardidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathCheckrunidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathCheckrunidOwnerQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathChecksuiteidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathChecksuiteidOwnerResponses506
import typings.octokitOpenapiTypes.anon.ParametersPathClientidString
import typings.octokitOpenapiTypes.anon.ParametersPathCodespacenameExportid
import typings.octokitOpenapiTypes.anon.ParametersPathCodespacenameOrg
import typings.octokitOpenapiTypes.anon.ParametersPathCodespacenameString
import typings.octokitOpenapiTypes.anon.ParametersPathColumnidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathColumnidNumberResponses304401Content36
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidGistid
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidGistidResponses304403Content36
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerPullnumber
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerRepoQuery532
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerRepoResponses
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerRepoResponses404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberOrg
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberOrgResponses
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberTeamid
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberTeamidQuery532
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberTeamidRequestBodyContentApplicationjsonBody
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberTeamidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathCommitshaOwner
import typings.octokitOpenapiTypes.anon.ParametersPathCommitshaOwnerQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidHookidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidHookidOrgResponses202400422
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidHookidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidHookidOwnerRepoResponses202400422
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathDeploymentidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathDeploymentidOwnerQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathDirOwner
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumber
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberQuery530
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberQuery532
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberRequestBody
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjson119
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjsonBody
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberResponses
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberOrgTeamslug
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberOrgTeamslugQuery532
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberOrgTeamslugRequestBodyContentApplicationjson119
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberOrgTeamslugResponses
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseString
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameNameRepositoryid
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameOwnerProtectionruleid
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameOwnerRepoQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameOwnerRepoResponses
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameString
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameStringNameString
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameStringNameStringRequestBodyContentApplicationjson165
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameStringQuery507
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameStringRepositoryidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameStringRepositoryidNumberResponses200ContentApplicationjsonTotalcountNumberVariablesArray
import typings.octokitOpenapiTypes.anon.ParametersPathEventidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathFileshaOwner
import typings.octokitOpenapiTypes.anon.ParametersPathGhsaidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathGistidSha
import typings.octokitOpenapiTypes.anon.ParametersPathGistidString
import typings.octokitOpenapiTypes.anon.ParametersPathGistidStringQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathGpgkeyidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathGpgkeyidNumberResponses304401Content36403Content36
import typings.octokitOpenapiTypes.anon.ParametersPathHeadOwner
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrgQueryRedelivery
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrgRequestBody
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrgResponses200ContentApplicationjsonContenttype
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrgResponses404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepoQueryRedelivery
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepoRequestBody
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepoResponses200ContentApplicationjsonContenttype
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepoResponses404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathInstallationidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathInstallationidNumberQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathInstallationidNumberRepositoryidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathInvitationidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathInvitationidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathInvitationidOrgQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathInvitationidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberNameOwner
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerReactionid
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoQuery532
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoQueryPagePerpageSince
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoRequestBodyContentApplicationjson119
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoResponses403Content36404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathJobidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathJobidOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathKeyidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathKeyidNumberResponses401Content36403Content36404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathKeyidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathKeyidOwnerRepoResponses
import typings.octokitOpenapiTypes.anon.ParametersPathLanguageOwner
import typings.octokitOpenapiTypes.anon.ParametersPathMigrationidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathMigrationidNumberQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathMigrationidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathMigrationidOrgQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathMilestonenumberOwner
import typings.octokitOpenapiTypes.anon.ParametersPathMilestonenumberOwnerQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathMilestonenumberOwnerResponses404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathNameOrgRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathNameOwnerRepoRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathNameStringOrgString
import typings.octokitOpenapiTypes.anon.ParametersPathNameStringOrgStringQuery507
import typings.octokitOpenapiTypes.anon.ParametersPathNameStringOrgStringRepositoryidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathNameStringOrgStringRequestBodyContentApplicationjsonSelectedrepositoryids
import typings.octokitOpenapiTypes.anon.ParametersPathNameStringOrgStringRequestBodyContentApplicationjsonVisibility
import typings.octokitOpenapiTypes.anon.ParametersPathNameStringOrgStringResponses
import typings.octokitOpenapiTypes.anon.ParametersPathNameStringOwnerString
import typings.octokitOpenapiTypes.anon.ParametersPathNameStringOwnerStringRequestBodyContentApplicationjson165
import typings.octokitOpenapiTypes.anon.ParametersPathNameStringOwnerStringResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgOwner
import typings.octokitOpenapiTypes.anon.ParametersPathOrgOwnerRequestBody
import typings.octokitOpenapiTypes.anon.ParametersPathOrgOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPackagename
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPackagenamePackagetype
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPackagenamePackagetypeResponses401Content36403Content36
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPackagenameQueryToken
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPatrequestid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPatrequestidQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathOrgProjectid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgProjectidRequestBody
import typings.octokitOpenapiTypes.anon.ParametersPathOrgProjectidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgReactionid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgReponame
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRepositoryidSecretname
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRequiredworkflowid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRequiredworkflowidRequestBodyContentApplicationjsonSelectedrepositoryids
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRequiredworkflowidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRequiredworkflowidResponses200ContentApplicationjsonRepositoriesArray
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRulesetid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRunneridResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretname
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretnameResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretnameResponses404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathOrgString
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringRepositoryidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringUsernameString
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerPathRepo
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRefRepo
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRefRepoQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseidQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseidQueryLabelName
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseidRequestBodyContentApplicationjson335
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoRequiredworkflowidforrepo
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoRulesetid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoRunneridRequestBodyContentApplicationjsonLabels
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoRunneridResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoRunneridResponses200ContentApplicationjsonLabelsArray
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSarifid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSecretname
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjson163
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSecretnameResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSha
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoTeamid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoTeamidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoUsername
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerString
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQuery205
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQuery507
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQuery524
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQueryBeforeDirection
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQueryClientipLocation
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQueryClientipRef
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQueryIncludesparents
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringResponses200Content480
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringResponses200ContentApplicationjsonRunnersTotalcount
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringResponses521
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringResponses537
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenamePackagetypePackageversionidUsername
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenamePackagetypeUsername
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenamePackagetypeUsernameQueryToken
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenamePackagetypeUsernameResponses401Content36403Content36
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenameString
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenameStringQuery522
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenameStringQueryToken
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenameStringResponses401Content36403Content36
import typings.octokitOpenapiTypes.anon.ParametersPathPackagetypePackageversionidUsername
import typings.octokitOpenapiTypes.anon.ParametersPathPackageversionidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathPackageversionidNumberResponses401Content36403Content36
import typings.octokitOpenapiTypes.anon.ParametersPathPatidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathPatidNumberQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathPlanidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumberQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumberTeamidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumberTeamidNumberResponses404Content36422Content346
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumberUsernameString
import typings.octokitOpenapiTypes.anon.ParametersPathProtectionruleidRepo
import typings.octokitOpenapiTypes.anon.ParametersPathPullnumberRepo
import typings.octokitOpenapiTypes.anon.ParametersPathPullnumberRepoQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathPullnumberRepoQueryPerpageSinceSort
import typings.octokitOpenapiTypes.anon.ParametersPathPullnumberRepoResponses
import typings.octokitOpenapiTypes.anon.ParametersPathReactionidRepo
import typings.octokitOpenapiTypes.anon.ParametersPathReactionidTeamslug
import typings.octokitOpenapiTypes.anon.ParametersPathReleaseidRepo
import typings.octokitOpenapiTypes.anon.ParametersPathRepoRequiredworkflowidforrepo
import typings.octokitOpenapiTypes.anon.ParametersPathRepoReviewid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoReviewidQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathRepoReviewidRequestBodyContentApplicationjsonEvent
import typings.octokitOpenapiTypes.anon.ParametersPathRepoRunid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoRunidQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathRepoStatusid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoString
import typings.octokitOpenapiTypes.anon.ParametersPathRepoTag
import typings.octokitOpenapiTypes.anon.ParametersPathRepoTagprotectionid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoTagsha
import typings.octokitOpenapiTypes.anon.ParametersPathRepoTreesha
import typings.octokitOpenapiTypes.anon.ParametersPathRepoWorkflowid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoWorkflowidQueryActorBranch
import typings.octokitOpenapiTypes.anon.ParametersPathRepoWorkflowidRequestBodyContentApplicationjsonInputs
import typings.octokitOpenapiTypes.anon.ParametersPathRepoWorkflowidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathReponameString
import typings.octokitOpenapiTypes.anon.ParametersPathRepositoryidNumberSecretnameString
import typings.octokitOpenapiTypes.anon.ParametersPathRepositoryidRequiredworkflowid
import typings.octokitOpenapiTypes.anon.ParametersPathSecretnameString
import typings.octokitOpenapiTypes.anon.ParametersPathSecretnameStringRequestBodyContentApplicationjsonEncryptedvalueString
import typings.octokitOpenapiTypes.anon.ParametersPathSecretnameStringResponses
import typings.octokitOpenapiTypes.anon.ParametersPathSecurityproduct
import typings.octokitOpenapiTypes.anon.ParametersPathSshsigningkeyidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathSshsigningkeyidNumberResponses401Content36403Content36404Content36
import typings.octokitOpenapiTypes.anon.ParametersPathTargetuserUsername
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberQuery530
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberQuery535
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberRequestBodyContentApplicationjsonParentteamid
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberRequestBodyContentApplicationjsonPrivate
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberResponses404Content36422Content346
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberUsernameString
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberUsernameStringRequestBody
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberUsernameStringResponses517
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugString
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugStringQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugUsername
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugUsernameResponses
import typings.octokitOpenapiTypes.anon.ParametersPathThreadidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathThreadidNumberRequestBody
import typings.octokitOpenapiTypes.anon.ParametersPathUsernameString
import typings.octokitOpenapiTypes.anon.ParametersPathUsernameStringQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathUsernameStringResponses
import typings.octokitOpenapiTypes.anon.ParametersPathUsernameStringResponses422ContentApplicationjsonDocumentationurl
import typings.octokitOpenapiTypes.anon.ParametersQuery473
import typings.octokitOpenapiTypes.anon.ParametersQuery493
import typings.octokitOpenapiTypes.anon.ParametersQuery507
import typings.octokitOpenapiTypes.anon.ParametersQuery520
import typings.octokitOpenapiTypes.anon.ParametersQuery522
import typings.octokitOpenapiTypes.anon.ParametersQuery524
import typings.octokitOpenapiTypes.anon.ParametersQuery530
import typings.octokitOpenapiTypes.anon.ParametersQuery532
import typings.octokitOpenapiTypes.anon.ParametersQuery535
import typings.octokitOpenapiTypes.anon.ParametersQuery548
import typings.octokitOpenapiTypes.anon.ParametersQuery553
import typings.octokitOpenapiTypes.anon.ParametersQuery575
import typings.octokitOpenapiTypes.anon.ParametersQuery580
import typings.octokitOpenapiTypes.anon.ParametersQuery589
import typings.octokitOpenapiTypes.anon.ParametersQuery623
import typings.octokitOpenapiTypes.anon.ParametersQuery637
import typings.octokitOpenapiTypes.anon.ParametersQuery660
import typings.octokitOpenapiTypes.anon.ParametersQueryActorBranch
import typings.octokitOpenapiTypes.anon.ParametersQueryAffiliationBefore
import typings.octokitOpenapiTypes.anon.ParametersQueryAffiliationPagePerpage
import typings.octokitOpenapiTypes.anon.ParametersQueryAllBefore
import typings.octokitOpenapiTypes.anon.ParametersQueryAnonPage
import typings.octokitOpenapiTypes.anon.ParametersQueryAppidChecknamePage
import typings.octokitOpenapiTypes.anon.ParametersQueryArchivedstatePage
import typings.octokitOpenapiTypes.anon.ParametersQueryBaseDirection
import typings.octokitOpenapiTypes.anon.ParametersQueryBeforeDirection
import typings.octokitOpenapiTypes.anon.ParametersQueryBeforePage
import typings.octokitOpenapiTypes.anon.ParametersQueryChecknameFilter
import typings.octokitOpenapiTypes.anon.ParametersQueryDirectionFilter
import typings.octokitOpenapiTypes.anon.ParametersQueryDirectionKey
import typings.octokitOpenapiTypes.anon.ParametersQueryDirectionPagePerpageSince
import typings.octokitOpenapiTypes.anon.ParametersQueryDirectionPagePerpageSort
import typings.octokitOpenapiTypes.anon.ParametersQueryDirectionPerpage
import typings.octokitOpenapiTypes.anon.ParametersQueryEnvironmentPage
import typings.octokitOpenapiTypes.anon.ParametersQueryExcludePage
import typings.octokitOpenapiTypes.anon.ParametersQueryFeaturedPage
import typings.octokitOpenapiTypes.anon.ParametersQueryFirst
import typings.octokitOpenapiTypes.anon.ParametersQueryInvitationsourcePage
import typings.octokitOpenapiTypes.anon.ParametersQueryKeyStringRef
import typings.octokitOpenapiTypes.anon.ParametersQueryLast
import typings.octokitOpenapiTypes.anon.ParametersQueryMentioned
import typings.octokitOpenapiTypes.anon.ParametersQueryNamePagePerpage
import typings.octokitOpenapiTypes.anon.ParametersQueryOrderPagePerpageQ
import typings.octokitOpenapiTypes.anon.ParametersQueryOrderPagePerpageQSort
import typings.octokitOpenapiTypes.anon.ParametersQueryOrgs
import typings.octokitOpenapiTypes.anon.ParametersQueryOutdatedPage
import typings.octokitOpenapiTypes.anon.ParametersQueryPackagetypePagePerpage
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePermission
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageQSort
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageRef
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageRepositoryid
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageRole
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageSince
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageSortType
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpagePinned
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageProtected
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageQSort
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageQString
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageSinceSort
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageSortState
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageSortType
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageStatus
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageVisibility
import typings.octokitOpenapiTypes.anon.ParametersQueryQRepositoryid
import typings.octokitOpenapiTypes.anon.ParametersQueryQString
import typings.octokitOpenapiTypes.anon.ParametersQueryRedelivery
import typings.octokitOpenapiTypes.anon.ParametersQueryRefSarifid
import typings.octokitOpenapiTypes.anon.ParametersQueryRefSort
import typings.octokitOpenapiTypes.anon.ParametersQueryS
import typings.octokitOpenapiTypes.anon.ParametersQuerySecrettype
import typings.octokitOpenapiTypes.anon.ParametersQueryToolname
import typings.octokitOpenapiTypes.anon.ParametersQueryUntil
import typings.octokitOpenapiTypes.anon.Patch
import typings.octokitOpenapiTypes.anon.PatchParametersPathAuthorid
import typings.octokitOpenapiTypes.anon.PatchPut
import typings.octokitOpenapiTypes.anon.PatchRequestBodyContentApplicationjson381
import typings.octokitOpenapiTypes.anon.PatchRequestBodyContentApplicationjsonAutotriggerchecks
import typings.octokitOpenapiTypes.anon.PatchRequestBodyContentApplicationjsonUselfs
import typings.octokitOpenapiTypes.anon.Post
import typings.octokitOpenapiTypes.anon.PostParameters141Responses201Content62
import typings.octokitOpenapiTypes.anon.PostParametersPathChecksuiteidResponses201Content55
import typings.octokitOpenapiTypes.anon.PostParametersPathDeliveryidHookidOwnerResponses202
import typings.octokitOpenapiTypes.anon.PostParametersPathDeliveryidHookidResponses202
import typings.octokitOpenapiTypes.anon.PostParametersPathEnablement
import typings.octokitOpenapiTypes.anon.PostParametersPathHookidOwnerResponses7
import typings.octokitOpenapiTypes.anon.PostParametersPathHookidResponses7
import typings.octokitOpenapiTypes.anon.PostParametersPathOwnerPullnumber
import typings.octokitOpenapiTypes.anon.PostParametersPathPackagenamePackagetypePackageversionid
import typings.octokitOpenapiTypes.anon.PostParametersPathPackagenamePackagetypeQueryToken
import typings.octokitOpenapiTypes.anon.PostParametersPathPackagetypePackageversionidResponses99
import typings.octokitOpenapiTypes.anon.PostParametersPathPackagetypeUsernameQueryToken
import typings.octokitOpenapiTypes.anon.PostParametersPathPackageversionidResponses99
import typings.octokitOpenapiTypes.anon.PostParametersPathPatid
import typings.octokitOpenapiTypes.anon.PostParametersPathPatrequestid
import typings.octokitOpenapiTypes.anon.PostParametersPathRepoSha
import typings.octokitOpenapiTypes.anon.PostParametersPathTemplateowner
import typings.octokitOpenapiTypes.anon.PostParametersQueryToken
import typings.octokitOpenapiTypes.anon.PostParametersRequestBody
import typings.octokitOpenapiTypes.anon.PostPut
import typings.octokitOpenapiTypes.anon.PostRequestBodyContent157
import typings.octokitOpenapiTypes.anon.PostRequestBodyContent182
import typings.octokitOpenapiTypes.anon.PostRequestBodyContent232
import typings.octokitOpenapiTypes.anon.PostRequestBodyContent318
import typings.octokitOpenapiTypes.anon.PostRequestBodyContent344
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonArtifacturl
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBase
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBasetree
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBodyEvent
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBodyNameString
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBranchString
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonCheckouturi
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonClientpayload
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonColumnid
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonConfigurationfilepath
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonContext
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonEncoding
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonHeadsha
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonInputs
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonNamePrivate
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonNameValue
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonNewname
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonNewowner
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonObject
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonParents
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonPosition
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonRefSha
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonRepositories
import typings.octokitOpenapiTypes.anon.PostResponses200Content89401
import typings.octokitOpenapiTypes.anon.PostResponses200HeadersXCommonMarkerVersion
import typings.octokitOpenapiTypes.anon.PostResponses201403
import typings.octokitOpenapiTypes.anon.PostResponses201403404422
import typings.octokitOpenapiTypes.anon.PostResponses201Content55
import typings.octokitOpenapiTypes.anon.PostResponses201Content55403
import typings.octokitOpenapiTypes.anon.PostResponses201Content62
import typings.octokitOpenapiTypes.anon.PostResponses202
import typings.octokitOpenapiTypes.anon.PostResponses202401403
import typings.octokitOpenapiTypes.anon.PostResponses202409
import typings.octokitOpenapiTypes.anon.PostResponses402
import typings.octokitOpenapiTypes.anon.PostResponses403404500
import typings.octokitOpenapiTypes.anon.Put
import typings.octokitOpenapiTypes.anon.PutParametersPathWorkflowidResponses
import typings.octokitOpenapiTypes.anon.PutRequestBodyContentApplicationjsonEvent
import typings.octokitOpenapiTypes.anon.PutRequestBodyContentApplicationjsonSelectedusernames
import typings.octokitOpenapiTypes.anon.PutResponses202403422
import typings.octokitOpenapiTypes.anon.PutResponses293
import typings.octokitOpenapiTypes.anon.RequestBodyContent372Responses201202401
import typings.octokitOpenapiTypes.anon.RequestBodyContent547
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjson501
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjson502
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonAccesslevel
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonAccesstoken
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonAccounturlsResponses304401Content36403Content36
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonAllowedactionsEnabledBoolean
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonBypassactorsBypassmode
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonBypassactorsConditions
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonConfigEvents
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonContenttypeInsecuressl
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonCreditsCveid
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonCvssvectorstringCweids
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonDismissedreasonState
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonExpiryLimit
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonIncludeallbranches
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonIncludeclaimkeysArray
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonJob
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonQuerysuite
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonRemoveevents
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonResolutionResolutioncomment
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonSarif
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonSelectedrepositoryidsResponses404Content36
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonTargetid
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonVulnerabilities
import typings.octokitOpenapiTypes.anon.RequestBodyResponses202ContentApplicationjsonUrl
import typings.octokitOpenapiTypes.anon.RequestBodyResponses304401Content36403Content36
import typings.octokitOpenapiTypes.anon.Responses200201403
import typings.octokitOpenapiTypes.anon.Responses200304401403404500
import typings.octokitOpenapiTypes.anon.Responses200304401404
import typings.octokitOpenapiTypes.anon.Responses200304403422
import typings.octokitOpenapiTypes.anon.Responses200304503
import typings.octokitOpenapiTypes.anon.Responses200307403
import typings.octokitOpenapiTypes.anon.Responses200400403404
import typings.octokitOpenapiTypes.anon.Responses200409
import typings.octokitOpenapiTypes.anon.Responses200422500503
import typings.octokitOpenapiTypes.anon.Responses200482404Content36
import typings.octokitOpenapiTypes.anon.Responses200484404Content36
import typings.octokitOpenapiTypes.anon.Responses200513404Content36
import typings.octokitOpenapiTypes.anon.Responses200558
import typings.octokitOpenapiTypes.anon.Responses200558422Content346
import typings.octokitOpenapiTypes.anon.Responses200581
import typings.octokitOpenapiTypes.anon.Responses200596
import typings.octokitOpenapiTypes.anon.Responses200603
import typings.octokitOpenapiTypes.anon.Responses200615
import typings.octokitOpenapiTypes.anon.Responses200621
import typings.octokitOpenapiTypes.anon.Responses200621404ContentApplicationjsonDocumentationurlMessage
import typings.octokitOpenapiTypes.anon.Responses200Content13304
import typings.octokitOpenapiTypes.anon.Responses200Content29304
import typings.octokitOpenapiTypes.anon.Responses200Content29403Content36
import typings.octokitOpenapiTypes.anon.Responses200Content29404Content36
import typings.octokitOpenapiTypes.anon.Responses200Content29404Content36422Content346
import typings.octokitOpenapiTypes.anon.Responses200Content477
import typings.octokitOpenapiTypes.anon.Responses200Content480
import typings.octokitOpenapiTypes.anon.Responses200Content485
import typings.octokitOpenapiTypes.anon.Responses200Content486
import typings.octokitOpenapiTypes.anon.Responses200Content489
import typings.octokitOpenapiTypes.anon.Responses200Content489401Content36
import typings.octokitOpenapiTypes.anon.Responses200Content490
import typings.octokitOpenapiTypes.anon.Responses200Content494HeadersLinkString
import typings.octokitOpenapiTypes.anon.Responses200Content497
import typings.octokitOpenapiTypes.anon.Responses200Content497304
import typings.octokitOpenapiTypes.anon.Responses200Content504
import typings.octokitOpenapiTypes.anon.Responses200Content508
import typings.octokitOpenapiTypes.anon.Responses200Content508304
import typings.octokitOpenapiTypes.anon.Responses200Content508404Content36
import typings.octokitOpenapiTypes.anon.Responses200Content508422Content346
import typings.octokitOpenapiTypes.anon.Responses200Content508Headers25
import typings.octokitOpenapiTypes.anon.Responses200Content508HeadersLinkString304401Content36
import typings.octokitOpenapiTypes.anon.Responses200Content508HeadersLinkString404Content36
import typings.octokitOpenapiTypes.anon.Responses200Content510
import typings.octokitOpenapiTypes.anon.Responses200Content511
import typings.octokitOpenapiTypes.anon.Responses200Content512
import typings.octokitOpenapiTypes.anon.Responses200Content515
import typings.octokitOpenapiTypes.anon.Responses200Content516403Content36
import typings.octokitOpenapiTypes.anon.Responses200Content516403Content36404Content36
import typings.octokitOpenapiTypes.anon.Responses200Content518304
import typings.octokitOpenapiTypes.anon.Responses200Content523
import typings.octokitOpenapiTypes.anon.Responses200Content527
import typings.octokitOpenapiTypes.anon.Responses200Content528
import typings.octokitOpenapiTypes.anon.Responses200Content536
import typings.octokitOpenapiTypes.anon.Responses200Content536404Content36
import typings.octokitOpenapiTypes.anon.Responses200Content545
import typings.octokitOpenapiTypes.anon.Responses200Content550
import typings.octokitOpenapiTypes.anon.Responses200Content551
import typings.octokitOpenapiTypes.anon.Responses200Content557
import typings.octokitOpenapiTypes.anon.Responses200Content557422Content346
import typings.octokitOpenapiTypes.anon.Responses200Content564
import typings.octokitOpenapiTypes.anon.Responses200Content567
import typings.octokitOpenapiTypes.anon.Responses200Content570
import typings.octokitOpenapiTypes.anon.Responses200Content571
import typings.octokitOpenapiTypes.anon.Responses200Content586
import typings.octokitOpenapiTypes.anon.Responses200Content591
import typings.octokitOpenapiTypes.anon.Responses200Content593
import typings.octokitOpenapiTypes.anon.Responses200Content593304
import typings.octokitOpenapiTypes.anon.Responses200Content595
import typings.octokitOpenapiTypes.anon.Responses200Content598
import typings.octokitOpenapiTypes.anon.Responses200Content598404Content36
import typings.octokitOpenapiTypes.anon.Responses200Content600
import typings.octokitOpenapiTypes.anon.Responses200Content601
import typings.octokitOpenapiTypes.anon.Responses200Content605
import typings.octokitOpenapiTypes.anon.Responses200Content612
import typings.octokitOpenapiTypes.anon.Responses200Content617
import typings.octokitOpenapiTypes.anon.Responses200Content620
import typings.octokitOpenapiTypes.anon.Responses200Content624
import typings.octokitOpenapiTypes.anon.Responses200Content630
import typings.octokitOpenapiTypes.anon.Responses200Content631
import typings.octokitOpenapiTypes.anon.Responses200Content631204
import typings.octokitOpenapiTypes.anon.Responses200Content632
import typings.octokitOpenapiTypes.anon.Responses200Content633
import typings.octokitOpenapiTypes.anon.Responses200Content635
import typings.octokitOpenapiTypes.anon.Responses200Content636
import typings.octokitOpenapiTypes.anon.Responses200Content638
import typings.octokitOpenapiTypes.anon.Responses200Content639
import typings.octokitOpenapiTypes.anon.Responses200Content648
import typings.octokitOpenapiTypes.anon.Responses200Content648404Content36
import typings.octokitOpenapiTypes.anon.Responses200Content654
import typings.octokitOpenapiTypes.anon.Responses200Content654HeadersLinkString
import typings.octokitOpenapiTypes.anon.Responses200Content655
import typings.octokitOpenapiTypes.anon.Responses200Content658
import typings.octokitOpenapiTypes.anon.Responses200Content659
import typings.octokitOpenapiTypes.anon.Responses200Content664
import typings.octokitOpenapiTypes.anon.Responses200Content666
import typings.octokitOpenapiTypes.anon.Responses200Content667
import typings.octokitOpenapiTypes.anon.Responses200Content669
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjson505
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjson542
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjson650
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAccesslevel
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonActivecachescount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAllOwner
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAllowedactionsEnabled
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAllowedactionsEnabledrepositories
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAllowforksyncing
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAltdomain
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonApi
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAppsurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonArchivedColumnname304
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAuthorassociationBody
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAuthorizationsurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAuthorscount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAuthorscount422Content346
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAuthorscount503Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBasebranch
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBillable
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBillingemail
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodyHtmlurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodyString
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytext
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytext422Content346
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytextCommitid
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytextCommitid403Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytextCommitid404Content36422Content471
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytextCommitid422Content471
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBusinessplus
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCardsurl304
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCodespacesTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCommentscount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCommitCreatedat
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonContenttype
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCountUniques
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCreatedatDiffurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCreatedatId
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCreatedatIgnored
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCurrentuserorganizationurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCustom404
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDaysleftinbillingcycle
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDismissstalereviews
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDismissstalereviews422Content346
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDocumentation
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDownloadcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDownloadurlEncoding
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonEnabledUrl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonEnabledUrl404Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonEnforceadmins
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonEnvironmentsTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonExternalurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonFingerprint422Content346
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonGithubownedallowed
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIdletimeoutnotice
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIdletimeoutnotice401Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIdletimeoutnotice401Content36403Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonImplementation
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIncludeclaimkeys
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIncludeclaimkeysArray
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIncludedgigabytesbandwidth
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIncludedminutes
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonInreplytoid
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonInstallationsTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonInstallationsTotalcount304
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonInvitee
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonKeyKeyid
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonLabelsArray
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonLabelsArray404Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonLanguages
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonLasteditedat
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonMachinesTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonMarketplacependingchange401Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNameNodeid
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNameSource
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNames404Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNodeidObject
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNodeidObject422Content346
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNodeidUser
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOrganizationOrganizationurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOrganizationOrganizationurl403Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOrganizationOrganizationurl403Content36404Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOrigin
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOutput
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonPermissionRolename
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonPermissionString
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonPreferencesRepository
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonReposcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRepositoriesArray
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber401Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber404Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRepositoryselectionTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRepositoryurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRequiredworkflowsArray
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonResources
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRoleState
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRoleState404Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRules
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRundurationms
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRunnersTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRunsrerequestable
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonSbom
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonSecurityadvisory
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonStrict
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonStrict404Content36
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonSubmodulegiturl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonTeamsArrayUsersArray
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonTotalactivecachescount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonTotalcountNumberVariablesArray
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonTotalcountWorkflows
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonVariablesArray
import typings.octokitOpenapiTypes.anon.Responses200ContentTextplainString
import typings.octokitOpenapiTypes.anon.Responses200HeadersContentType
import typings.octokitOpenapiTypes.anon.Responses200HeadersLinkString
import typings.octokitOpenapiTypes.anon.Responses200HeadersXCommonMarkerVersionString
import typings.octokitOpenapiTypes.anon.Responses201202400
import typings.octokitOpenapiTypes.anon.Responses201202401
import typings.octokitOpenapiTypes.anon.Responses201202422
import typings.octokitOpenapiTypes.anon.Responses201304403404
import typings.octokitOpenapiTypes.anon.Responses201304403404422
import typings.octokitOpenapiTypes.anon.Responses201400404
import typings.octokitOpenapiTypes.anon.Responses201401403
import typings.octokitOpenapiTypes.anon.Responses201401403404
import typings.octokitOpenapiTypes.anon.Responses201401403404422
import typings.octokitOpenapiTypes.anon.Responses201403404409
import typings.octokitOpenapiTypes.anon.Responses201403404410
import typings.octokitOpenapiTypes.anon.Responses201404422503
import typings.octokitOpenapiTypes.anon.Responses201409422
import typings.octokitOpenapiTypes.anon.Responses201596
import typings.octokitOpenapiTypes.anon.Responses201665
import typings.octokitOpenapiTypes.anon.Responses201Content654
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAddedby
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAllowupdatebranch
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAuthorCommentsurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAuthorCommitter
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAuthorassociationBodyHeadersLocation
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonBodyColumnsurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCanencryptcomms
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCardsurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonClosedissues
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCommentscount
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCreatedatDiffurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCreatedatEnabled
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCreatedatIdKey
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonDefaultDescription
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonEnabledId
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonExcludeownerprojects
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonExcludeownerprojects304
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonExpiresatPermissions
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonIdKey
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonInreplytoidHeadersLocation
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonInvitationteamsurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonInvitee
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonKeyprefix
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonLasteditedat
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonLocked
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonLogurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonMentionscount
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonMessageNodeid
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonNamePath
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonNodeidObjectHeadersLocation
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonNodeidUpdatedat
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonNodeidUser
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonOutput
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonRecord
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonRecord304
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonRecord403Content36
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonRecord404Content36
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonReposcount
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonRequiredapprovingreviewcount
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonStatusUrl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonTesturl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonTruncated
import typings.octokitOpenapiTypes.anon.Responses202304401403
import typings.octokitOpenapiTypes.anon.Responses202304401403404
import typings.octokitOpenapiTypes.anon.Responses202400403
import typings.octokitOpenapiTypes.anon.Responses202400422
import typings.octokitOpenapiTypes.anon.Responses202401403404
import typings.octokitOpenapiTypes.anon.Responses202403404422
import typings.octokitOpenapiTypes.anon.Responses202ContentApplicationjsonBranchesurl
import typings.octokitOpenapiTypes.anon.Responses202ContentApplicationjsonRecord
import typings.octokitOpenapiTypes.anon.Responses202ContentApplicationjsonRecord404Content36
import typings.octokitOpenapiTypes.anon.Responses202ContentApplicationjsonUrl403Content36
import typings.octokitOpenapiTypes.anon.Responses301403404
import typings.octokitOpenapiTypes.anon.Responses301404410422
import typings.octokitOpenapiTypes.anon.Responses301Content36
import typings.octokitOpenapiTypes.anon.Responses301Content36404Content36
import typings.octokitOpenapiTypes.anon.Responses304400401
import typings.octokitOpenapiTypes.anon.Responses304401403404410
import typings.octokitOpenapiTypes.anon.Responses304401403422503
import typings.octokitOpenapiTypes.anon.Responses304401Content36
import typings.octokitOpenapiTypes.anon.Responses304401Content36403Content36
import typings.octokitOpenapiTypes.anon.Responses304403503
import typings.octokitOpenapiTypes.anon.Responses304403Content36
import typings.octokitOpenapiTypes.anon.Responses304404422500
import typings.octokitOpenapiTypes.anon.Responses307403
import typings.octokitOpenapiTypes.anon.Responses400401403
import typings.octokitOpenapiTypes.anon.Responses400404422
import typings.octokitOpenapiTypes.anon.Responses400409422
import typings.octokitOpenapiTypes.anon.Responses401402
import typings.octokitOpenapiTypes.anon.Responses401403410
import typings.octokitOpenapiTypes.anon.Responses401403422503
import typings.octokitOpenapiTypes.anon.Responses401Content36
import typings.octokitOpenapiTypes.anon.Responses401Content36403Content36
import typings.octokitOpenapiTypes.anon.Responses401Content36403Content36404Content36
import typings.octokitOpenapiTypes.anon.Responses401Content36403ContentApplicationjsonErrors
import typings.octokitOpenapiTypes.anon.Responses403404422500
import typings.octokitOpenapiTypes.anon.Responses403Content36404Content36
import typings.octokitOpenapiTypes.anon.Responses403Content36404ContentApplicationjsonDocumentationurlMessage
import typings.octokitOpenapiTypes.anon.Responses403Content36404ContentApplicationjsonRecord
import typings.octokitOpenapiTypes.anon.Responses403Content36422Content346
import typings.octokitOpenapiTypes.anon.Responses403Content36500Content36
import typings.octokitOpenapiTypes.anon.Responses403ContentApplicationjsonDocumentationurl404Content36
import typings.octokitOpenapiTypes.anon.Responses403ContentApplicationjsonDocumentationurlMessage
import typings.octokitOpenapiTypes.anon.Responses404405
import typings.octokitOpenapiTypes.anon.Responses404Content36
import typings.octokitOpenapiTypes.anon.Responses404Content36409Content36
import typings.octokitOpenapiTypes.anon.Responses404Content36410Content36
import typings.octokitOpenapiTypes.anon.Responses404Content36422Content346
import typings.octokitOpenapiTypes.anon.Responses404Content36422Content471
import typings.octokitOpenapiTypes.anon.Responses404Content36500Content36
import typings.octokitOpenapiTypes.anon.Responses409422503
import typings.octokitOpenapiTypes.anon.Responses409Content36
import typings.octokitOpenapiTypes.anon.Responses410422503
import typings.octokitOpenapiTypes.anon.Responses422Content471
import typings.octokitOpenapiTypes.anon.Responses422ContentApplicationjsonDocumentationurlMessage
import typings.octokitOpenapiTypes.anon.Responses476
import typings.octokitOpenapiTypes.anon.Responses492
import typings.octokitOpenapiTypes.anon.Responses500Content36
import typings.octokitOpenapiTypes.anon.Responses503Content36
import typings.octokitOpenapiTypes.anon.Responses506
import typings.octokitOpenapiTypes.anon.Responses514
import typings.octokitOpenapiTypes.anon.Responses517
import typings.octokitOpenapiTypes.anon.Responses521
import typings.octokitOpenapiTypes.anon.Responses526
import typings.octokitOpenapiTypes.anon.Responses537
import typings.octokitOpenapiTypes.anon.Responses552
import typings.octokitOpenapiTypes.anon.Responses592
import typings.octokitOpenapiTypes.anon.Responses604
import typings.octokitOpenapiTypes.anon.Responses606
import typings.octokitOpenapiTypes.anon.Responses609
import typings.octokitOpenapiTypes.anon.Responses614
import typings.octokitOpenapiTypes.anon.Responses634
import typings.octokitOpenapiTypes.anon.Responses647
import typings.octokitOpenapiTypes.anon.Responses653
import typings.octokitOpenapiTypes.anon.Responses668
import typings.octokitOpenapiTypes.anon.Responses670
import typings.octokitOpenapiTypes.anon.Responses671
import typings.octokitOpenapiTypes.anon.Responses672
import typings.octokitOpenapiTypes.anon.Xcommonmarkerversion
import typings.octokitOpenapiTypes.anon.`31`
import typings.octokitOpenapiTypes.anon.`651`
import typings.octokitOpenapiTypes.anon.`656`
import typings.octokitOpenapiTypes.anon.`674`
import typings.std.Record
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object mod {
  
  /** NOTE: Conditional type definitions are impossible to translate to Scala.
    * See https://www.typescriptlang.org/docs/handbook/2/conditional-types.html for an intro.
    * You'll have to cast your way around this structure, unfortunately.
    * TS definition: {{{
    T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? @octokit/openapi-types.@octokit/openapi-types.OneOf<[@octokit/openapi-types.@octokit/openapi-types.XOR<A, B>, ...Rest]> : never
    }}}
    */
  @js.native
  trait OneOf[T /* <: js.Array[Any] */] extends StObject
  
  /** NOTE: Mapped type definitions are impossible to translate to Scala.
    * See https://www.typescriptlang.org/docs/handbook/2/mapped-types.html for an intro.
    * You'll have to cast your way around this structure, unfortunately. 
    * TS definition: {{{
    {[ P in std.Exclude<keyof T, keyof U> ]:? never}
    }}}
    */
  @js.native
  trait Without[T, U] extends StObject
  
  /** NOTE: Conditional type definitions are impossible to translate to Scala.
    * See https://www.typescriptlang.org/docs/handbook/2/conditional-types.html for an intro.
    * This RHS of the type alias is guess work. You should cast if it's not correct in your case.
    * TS definition: {{{
    T | U extends object ? @octokit/openapi-types.@octokit/openapi-types.Without<T, U> & U | @octokit/openapi-types.@octokit/openapi-types.Without<U, T> & T : T | U
    }}}
    */
  type XOR[T, U] = ((Without[T, U]) & U) | ((Without[U, T]) & T)
  
  trait components extends StObject {
    
    var headers: Xcommonmarkerversion
    
    var parameters: Actionscachegitreffull
    
    var responses: Actionsrunnerlabels
    
    var schemas: Actionsbillingusage
  }
  object components {
    
    inline def apply(
      headers: Xcommonmarkerversion,
      parameters: Actionscachegitreffull,
      responses: Actionsrunnerlabels,
      schemas: Actionsbillingusage
    ): components = {
      val __obj = js.Dynamic.literal(headers = headers.asInstanceOf[js.Any], parameters = parameters.asInstanceOf[js.Any], responses = responses.asInstanceOf[js.Any], schemas = schemas.asInstanceOf[js.Any])
      __obj.asInstanceOf[components]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: components] (val x: Self) extends AnyVal {
      
      inline def setHeaders(value: Xcommonmarkerversion): Self = StObject.set(x, "headers", value.asInstanceOf[js.Any])
      
      inline def setParameters(value: Actionscachegitreffull): Self = StObject.set(x, "parameters", value.asInstanceOf[js.Any])
      
      inline def setResponses(value: Actionsrunnerlabels): Self = StObject.set(x, "responses", value.asInstanceOf[js.Any])
      
      inline def setSchemas(value: Actionsbillingusage): Self = StObject.set(x, "schemas", value.asInstanceOf[js.Any])
    }
  }
  
  type external = Record[String, scala.Nothing]
  
  trait operations extends StObject {
    
    /**
      * Add custom labels to a self-hosted runner for an organization
      * @description Add custom labels to a self-hosted runner configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/add-custom-labels-to-self-hosted-runner-for-org")
    var `actionsSlashadd-custom-labels-to-self-hosted-runner-for-org`: Responses200ContentApplicationjsonLabelsArray404Content36
    
    /**
      * Add custom labels to a self-hosted runner for a repository
      * @description Add custom labels to a self-hosted runner configured in a repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/add-custom-labels-to-self-hosted-runner-for-repo")
    var `actionsSlashadd-custom-labels-to-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunneridRequestBodyContentApplicationjsonLabels
    
    /**
      * Add selected repository to an organization secret
      * @description Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
      */
    @JSName("actions/add-selected-repo-to-org-secret")
    var `actionsSlashadd-selected-repo-to-org-secret`: ParametersPathOrgRepositoryidSecretname
    
    /**
      * Add selected repository to an organization variable
      * @description Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
      */
    @JSName("actions/add-selected-repo-to-org-variable")
    var `actionsSlashadd-selected-repo-to-org-variable`: ParametersPathNameStringOrgStringRepositoryidNumber
    
    /**
      * Add a repository to a required workflow
      * @description Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/add-selected-repo-to-required-workflow")
    var `actionsSlashadd-selected-repo-to-required-workflow`: ParametersPathRepositoryidRequiredworkflowid
    
    /**
      * Approve a workflow run for a fork pull request
      * @description Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/approve-workflow-run")
    var `actionsSlashapprove-workflow-run`: Responses201ContentApplicationjsonRecord
    
    /**
      * Cancel a workflow run
      * @description Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/cancel-workflow-run")
    var `actionsSlashcancel-workflow-run`: Responses409Content36
    
    /**
      * Create an environment variable
      * @description Create an environment variable that you can reference in a GitHub Actions workflow.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      * GitHub Apps must have the `environment:write` repository permission to use this endpoint.
      */
    @JSName("actions/create-environment-variable")
    var `actionsSlashcreate-environment-variable`: Parameters642RequestBodyContentApplicationjsonNameValue
    
    /**
      * Create or update an environment secret
      * @description Creates or updates an environment secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
      * this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
      *
      * ```
      * const sodium = require('libsodium-wrappers')
      * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
      * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
      *
      * //Check if libsodium is ready and then proceed.
      * sodium.ready.then(() => {
      *   // Convert Secret & Base64 key to Uint8Array.
      *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
      *   let binsec = sodium.from_string(secret)
      *
      *   //Encrypt the secret using LibSodium
      *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
      *
      *   // Convert encrypted Uint8Array to Base64
      *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
      *
      *   console.log(output)
      * });
      * ```
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("actions/create-or-update-environment-secret")
    var `actionsSlashcreate-or-update-environment-secret`: ParametersPathSecretnameStringRequestBodyContentApplicationjsonEncryptedvalueString
    
    /**
      * Create or update an organization secret
      * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
      * use this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
      *
      * ```
      * const sodium = require('tweetsodium');
      *
      * const key = "base64-encoded-public-key";
      * const value = "plain-text-secret";
      *
      * // Convert the message and key to Uint8Array's (Buffer implements that interface)
      * const messageBytes = Buffer.from(value);
      * const keyBytes = Buffer.from(key, 'base64');
      *
      * // Encrypt using LibSodium.
      * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
      *
      * // Base64 the encrypted secret
      * const encrypted = Buffer.from(encryptedBytes).toString('base64');
      *
      * console.log(encrypted);
      * ```
      *
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("actions/create-or-update-org-secret")
    var `actionsSlashcreate-or-update-org-secret`: Responses506
    
    /**
      * Create or update a repository secret
      * @description Creates or updates a repository secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
      * this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
      *
      * ```
      * const sodium = require('libsodium-wrappers')
      * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
      * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
      *
      * //Check if libsodium is ready and then proceed.
      * sodium.ready.then(() => {
      *   // Convert Secret & Base64 key to Uint8Array.
      *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
      *   let binsec = sodium.from_string(secret)
      *
      *   //Encrypt the secret using LibSodium
      *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
      *
      *   // Convert encrypted Uint8Array to Base64
      *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
      *
      *   console.log(output)
      * });
      * ```
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("actions/create-or-update-repo-secret")
    var `actionsSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjson163
    
    /**
      * Create an organization variable
      * @description Creates an organization variable that you can reference in a GitHub Actions workflow.
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      * GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
      */
    @JSName("actions/create-org-variable")
    var `actionsSlashcreate-org-variable`: Parameters496RequestBodyContentApplicationjsonValue
    
    /**
      * Create a registration token for an organization
      * @description Returns a token that you can pass to the `config` script. The token expires after one hour.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * #### Example using registration token
      *
      * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
      *
      * ```
      * ./config.sh --url https://github.com/octo-org --token TOKEN
      * ```
      */
    @JSName("actions/create-registration-token-for-org")
    var `actionsSlashcreate-registration-token-for-org`: Responses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * Create a registration token for a repository
      * @description Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
      * using an access token with the `repo` scope to use this endpoint.
      *
      * #### Example using registration token
      *
      * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
      *
      * ```
      * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
      * ```
      */
    @JSName("actions/create-registration-token-for-repo")
    var `actionsSlashcreate-registration-token-for-repo`: Parameters540Responses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * Create a remove token for an organization
      * @description Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * #### Example using remove token
      *
      * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
      * endpoint.
      *
      * ```
      * ./config.sh remove --token TOKEN
      * ```
      */
    @JSName("actions/create-remove-token-for-org")
    var `actionsSlashcreate-remove-token-for-org`: Responses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * Create a remove token for a repository
      * @description Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      *
      * #### Example using remove token
      *
      * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
      *
      * ```
      * ./config.sh remove --token TOKEN
      * ```
      */
    @JSName("actions/create-remove-token-for-repo")
    var `actionsSlashcreate-remove-token-for-repo`: Parameters540Responses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * Create a repository variable
      * @description Creates a repository variable that you can reference in a GitHub Actions workflow.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      * GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
      */
    @JSName("actions/create-repo-variable")
    var `actionsSlashcreate-repo-variable`: Parameters540RequestBodyContentApplicationjsonNameValue
    
    /**
      * Create a required workflow
      * @description Create a required workflow in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/create-required-workflow")
    var `actionsSlashcreate-required-workflow`: Responses201ContentApplicationjsonNamePath
    
    /**
      * Create a workflow dispatch event
      * @description You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
      *
      * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
      */
    @JSName("actions/create-workflow-dispatch")
    var `actionsSlashcreate-workflow-dispatch`: ParametersPathRepoWorkflowidRequestBodyContentApplicationjsonInputs
    
    /**
      * Delete a GitHub Actions cache for a repository (using a cache ID)
      * @description Deletes a GitHub Actions cache for a repository, using a cache ID.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      *
      * GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/delete-actions-cache-by-id")
    var `actionsSlashdelete-actions-cache-by-id`: ParametersPathCacheidOwner
    
    /**
      * Delete GitHub Actions caches for a repository (using a cache key)
      * @description Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      *
      * GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/delete-actions-cache-by-key")
    var `actionsSlashdelete-actions-cache-by-key`: ParametersQueryKeyStringRef
    
    /**
      * Delete an artifact
      * @description Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/delete-artifact")
    var `actionsSlashdelete-artifact`: ParametersPathArtifactidOwnerResponses
    
    /**
      * Delete an environment secret
      * @description Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
      */
    @JSName("actions/delete-environment-secret")
    var `actionsSlashdelete-environment-secret`: ParametersPathSecretnameStringResponses
    
    /**
      * Delete an environment variable
      * @description Deletes an environment variable using the variable name.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      * GitHub Apps must have the `environment:write` repository permission to use this endpoint.
      */
    @JSName("actions/delete-environment-variable")
    var `actionsSlashdelete-environment-variable`: ParametersPathEnvironmentnameStringNameString
    
    /**
      * Delete an organization secret
      * @description Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
      */
    @JSName("actions/delete-org-secret")
    var `actionsSlashdelete-org-secret`: ParametersPathOrgSecretnameResponses
    
    /**
      * Delete an organization variable
      * @description Deletes an organization variable using the variable name.
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      * GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
      */
    @JSName("actions/delete-org-variable")
    var `actionsSlashdelete-org-variable`: ParametersPathNameStringOrgStringResponses
    
    /**
      * Delete a repository secret
      * @description Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
      */
    @JSName("actions/delete-repo-secret")
    var `actionsSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses
    
    /**
      * Delete a repository variable
      * @description Deletes a repository variable using the variable name.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      * GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
      */
    @JSName("actions/delete-repo-variable")
    var `actionsSlashdelete-repo-variable`: ParametersPathNameStringOwnerStringResponses
    
    /**
      * Delete a required workflow
      * @description Deletes a required workflow configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/delete-required-workflow")
    var `actionsSlashdelete-required-workflow`: ParametersPathOrgRequiredworkflowidResponses
    
    /**
      * Delete a self-hosted runner from an organization
      * @description Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/delete-self-hosted-runner-from-org")
    var `actionsSlashdelete-self-hosted-runner-from-org`: ParametersPathOrgRunneridResponses
    
    /**
      * Delete a self-hosted runner from a repository
      * @description Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
      *
      * You must authenticate using an access token with the `repo`
      * scope to use this endpoint.
      */
    @JSName("actions/delete-self-hosted-runner-from-repo")
    var `actionsSlashdelete-self-hosted-runner-from-repo`: ParametersPathOwnerRepoRunneridResponses
    
    /**
      * Delete a workflow run
      * @description Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
      * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
      * this endpoint.
      */
    @JSName("actions/delete-workflow-run")
    var `actionsSlashdelete-workflow-run`: Parameters544
    
    /**
      * Delete workflow run logs
      * @description Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/delete-workflow-run-logs")
    var `actionsSlashdelete-workflow-run-logs`: Responses403Content36500Content36
    
    /**
      * Disable a selected repository for GitHub Actions in an organization
      * @description Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/disable-selected-repository-github-actions-organization")
    var `actionsSlashdisable-selected-repository-github-actions-organization`: ParametersPathOrgStringRepositoryidNumber
    
    /**
      * Disable a workflow
      * @description Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/disable-workflow")
    var `actionsSlashdisable-workflow`: ParametersPathRepoWorkflowidResponses
    
    /**
      * Download an artifact
      * @description Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
      * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
      * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
      * GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/download-artifact")
    var `actionsSlashdownload-artifact`: ParametersPathArchiveformatArtifactid
    
    /**
      * Download job logs for a workflow run
      * @description Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
      * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
      * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
      * have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/download-job-logs-for-workflow-run")
    var `actionsSlashdownload-job-logs-for-workflow-run`: ParametersPathJobidOwnerResponses
    
    /**
      * Download workflow run attempt logs
      * @description Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
      * 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
      * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
      * GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/download-workflow-run-attempt-logs")
    var `actionsSlashdownload-workflow-run-attempt-logs`: Parameters546
    
    /**
      * Download workflow run logs
      * @description Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
      * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
      * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
      * the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/download-workflow-run-logs")
    var `actionsSlashdownload-workflow-run-logs`: Parameters544
    
    /**
      * Enable a selected repository for GitHub Actions in an organization
      * @description Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/enable-selected-repository-github-actions-organization")
    var `actionsSlashenable-selected-repository-github-actions-organization`: ParametersPathOrgStringRepositoryidNumber
    
    /**
      * Enable a workflow
      * @description Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/enable-workflow")
    var `actionsSlashenable-workflow`: ParametersPathRepoWorkflowidResponses
    
    /**
      * List GitHub Actions caches for a repository
      * @description Lists the GitHub Actions caches for a repository.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      * GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-actions-cache-list")
    var `actionsSlashget-actions-cache-list`: ParametersQueryDirectionKey
    
    /**
      * Get GitHub Actions cache usage for a repository
      * @description Gets GitHub Actions cache usage for a repository.
      * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-actions-cache-usage")
    var `actionsSlashget-actions-cache-usage`: Responses200ContentApplicationjsonActivecachescount
    
    /**
      * List repositories with GitHub Actions cache usage for an organization
      * @description Lists repositories and their GitHub Actions cache usage for an organization.
      * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
      * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
      */
    @JSName("actions/get-actions-cache-usage-by-repo-for-org")
    var `actionsSlashget-actions-cache-usage-by-repo-for-org`: ParametersPathOrgStringQuery473
    
    /**
      * Get GitHub Actions cache usage for an organization
      * @description Gets the total GitHub Actions cache usage for an organization.
      * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
      * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
      */
    @JSName("actions/get-actions-cache-usage-for-org")
    var `actionsSlashget-actions-cache-usage-for-org`: Responses200ContentApplicationjsonTotalactivecachescount
    
    /**
      * Get allowed actions and reusable workflows for an organization
      * @description Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/get-allowed-actions-organization")
    var `actionsSlashget-allowed-actions-organization`: Responses200ContentApplicationjsonGithubownedallowed
    
    /**
      * Get allowed actions and reusable workflows for a repository
      * @description Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
      */
    @JSName("actions/get-allowed-actions-repository")
    var `actionsSlashget-allowed-actions-repository`: Parameters540Responses200ContentApplicationjsonGithubownedallowed
    
    /**
      * Get an artifact
      * @description Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-artifact")
    var `actionsSlashget-artifact`: ParametersPathArtifactidOwner
    
    /**
      * Get the customization template for an OIDC subject claim for a repository
      * @description Gets the customization template for an OpenID Connect (OIDC) subject claim.
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
      */
    @JSName("actions/get-custom-oidc-sub-claim-for-repo")
    var `actionsSlashget-custom-oidc-sub-claim-for-repo`: Responses200ContentApplicationjsonIncludeclaimkeys
    
    /**
      * Get an environment public key
      * @description Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
      */
    @JSName("actions/get-environment-public-key")
    var `actionsSlashget-environment-public-key`: Parameters642
    
    /**
      * Get an environment secret
      * @description Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
      */
    @JSName("actions/get-environment-secret")
    var `actionsSlashget-environment-secret`: ParametersPathSecretnameString
    
    /**
      * Get an environment variable
      * @description Gets a specific variable in an environment. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
      */
    @JSName("actions/get-environment-variable")
    var `actionsSlashget-environment-variable`: ParametersPathEnvironmentnameNameRepositoryid
    
    /**
      * Get default workflow permissions for an organization
      * @description Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
      * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
      * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/get-github-actions-default-workflow-permissions-organization")
    var `actionsSlashget-github-actions-default-workflow-permissions-organization`: Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
    
    /**
      * Get default workflow permissions for a repository
      * @description Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
      * as well as if GitHub Actions can submit approving pull request reviews.
      * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
      */
    @JSName("actions/get-github-actions-default-workflow-permissions-repository")
    var `actionsSlashget-github-actions-default-workflow-permissions-repository`: Parameters540Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
    
    /**
      * Get GitHub Actions permissions for an organization
      * @description Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/get-github-actions-permissions-organization")
    var `actionsSlashget-github-actions-permissions-organization`: Responses200ContentApplicationjsonAllowedactionsEnabledrepositories
    
    /**
      * Get GitHub Actions permissions for a repository
      * @description Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
      */
    @JSName("actions/get-github-actions-permissions-repository")
    var `actionsSlashget-github-actions-permissions-repository`: Responses200ContentApplicationjsonAllowedactionsEnabled
    
    /**
      * Get a job for a workflow run
      * @description Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-job-for-workflow-run")
    var `actionsSlashget-job-for-workflow-run`: ParametersPathJobidOwner
    
    /**
      * Get an organization public key
      * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
      */
    @JSName("actions/get-org-public-key")
    var `actionsSlashget-org-public-key`: Responses200ContentApplicationjsonCreatedatId
    
    /**
      * Get an organization secret
      * @description Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
      */
    @JSName("actions/get-org-secret")
    var `actionsSlashget-org-secret`: ParametersPathOrgSecretname
    
    /**
      * Get an organization variable
      * @description Gets a specific variable in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
      */
    @JSName("actions/get-org-variable")
    var `actionsSlashget-org-variable`: ParametersPathNameStringOrgString
    
    /**
      * Get pending deployments for a workflow run
      * @description Get all deployment environments for a workflow run that are waiting for protection rules to pass.
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-pending-deployments-for-run")
    var `actionsSlashget-pending-deployments-for-run`: Responses200Content550
    
    /**
      * Get a repository public key
      * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
      */
    @JSName("actions/get-repo-public-key")
    var `actionsSlashget-repo-public-key`: Parameters540Responses200ContentApplicationjsonCreatedatId
    
    /**
      * Get a required workflow entity for a repository
      * @description Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/get-repo-required-workflow")
    var `actionsSlashget-repo-required-workflow`: ParametersPathRepoRequiredworkflowidforrepo
    
    /**
      * Get required workflow usage
      * @description Gets the number of billable minutes used by a specific required workflow during the current billing cycle.
      *
      * Billable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)."
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-repo-required-workflow-usage")
    var `actionsSlashget-repo-required-workflow-usage`: Responses200ContentApplicationjsonBillable
    
    /**
      * Get a repository secret
      * @description Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
      */
    @JSName("actions/get-repo-secret")
    var `actionsSlashget-repo-secret`: ParametersPathOwnerRepoSecretname
    
    /**
      * Get a repository variable
      * @description Gets a specific variable in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
      */
    @JSName("actions/get-repo-variable")
    var `actionsSlashget-repo-variable`: ParametersPathNameStringOwnerString
    
    /**
      * Get a required workflow
      * @description Get a required workflow configured in an organization.
      *
      * You must authenticate using an access token with the `read:org` scope to use this endpoint.
      *
      * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/get-required-workflow")
    var `actionsSlashget-required-workflow`: ParametersPathOrgRequiredworkflowid
    
    /**
      * Get the review history for a workflow run
      * @description Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-reviews-for-run")
    var `actionsSlashget-reviews-for-run`: Responses200Content545
    
    /**
      * Get a self-hosted runner for an organization
      * @description Gets a specific self-hosted runner configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/get-self-hosted-runner-for-org")
    var `actionsSlashget-self-hosted-runner-for-org`: ParametersPathOrgRunnerid
    
    /**
      * Get a self-hosted runner for a repository
      * @description Gets a specific self-hosted runner configured in a repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/get-self-hosted-runner-for-repo")
    var `actionsSlashget-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunnerid
    
    /**
      * Get a workflow
      * @description Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-workflow")
    var `actionsSlashget-workflow`: ParametersPathRepoWorkflowid
    
    /**
      * Get the level of access for workflows outside of the repository
      * @description Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
      * This endpoint only applies to private repositories.
      * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
      * repository `administration` permission to use this endpoint.
      */
    @JSName("actions/get-workflow-access-to-repository")
    var `actionsSlashget-workflow-access-to-repository`: Responses200ContentApplicationjsonAccesslevel
    
    /**
      * Get a workflow run
      * @description Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-workflow-run")
    var `actionsSlashget-workflow-run`: ParametersPathRepoRunid
    
    /**
      * Get a workflow run attempt
      * @description Gets a specific workflow run attempt. Anyone with read access to the repository
      * can use this endpoint. If the repository is private you must use an access token
      * with the `repo` scope. GitHub Apps must have the `actions:read` permission to
      * use this endpoint.
      */
    @JSName("actions/get-workflow-run-attempt")
    var `actionsSlashget-workflow-run-attempt`: ParametersPathAttemptnumberOwner
    
    /**
      * Get workflow run usage
      * @description Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-workflow-run-usage")
    var `actionsSlashget-workflow-run-usage`: Responses200ContentApplicationjsonRundurationms
    
    /**
      * Get workflow usage
      * @description Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
      *
      * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-workflow-usage")
    var `actionsSlashget-workflow-usage`: Responses552
    
    /**
      * List artifacts for a repository
      * @description Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/list-artifacts-for-repo")
    var `actionsSlashlist-artifacts-for-repo`: ParametersQueryNamePagePerpage
    
    /**
      * List environment secrets
      * @description Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
      */
    @JSName("actions/list-environment-secrets")
    var `actionsSlashlist-environment-secrets`: ParametersPathEnvironmentnameStringRepositoryidNumber
    
    /**
      * List environment variables
      * @description Lists all environment variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.
      */
    @JSName("actions/list-environment-variables")
    var `actionsSlashlist-environment-variables`: ParametersPathEnvironmentnameStringRepositoryidNumberResponses200ContentApplicationjsonTotalcountNumberVariablesArray
    
    /**
      * List jobs for a workflow run
      * @description Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
      */
    @JSName("actions/list-jobs-for-workflow-run")
    var `actionsSlashlist-jobs-for-workflow-run`: ParametersQuery548
    
    /**
      * List jobs for a workflow run attempt
      * @description Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
      */
    @JSName("actions/list-jobs-for-workflow-run-attempt")
    var `actionsSlashlist-jobs-for-workflow-run-attempt`: ParametersPathAttemptnumberOwnerQuery473
    
    /**
      * List labels for a self-hosted runner for an organization
      * @description Lists all labels for a self-hosted runner configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/list-labels-for-self-hosted-runner-for-org")
    var `actionsSlashlist-labels-for-self-hosted-runner-for-org`: Responses200ContentApplicationjsonLabelsArray
    
    /**
      * List labels for a self-hosted runner for a repository
      * @description Lists all labels for a self-hosted runner configured in a repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/list-labels-for-self-hosted-runner-for-repo")
    var `actionsSlashlist-labels-for-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunneridResponses200ContentApplicationjsonLabelsArray
    
    /**
      * List organization secrets
      * @description Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
      */
    @JSName("actions/list-org-secrets")
    var `actionsSlashlist-org-secrets`: Responses200ContentApplicationjson505
    
    /**
      * List organization variables
      * @description Lists all organization variables. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
      */
    @JSName("actions/list-org-variables")
    var `actionsSlashlist-org-variables`: Responses200ContentApplicationjsonVariablesArray
    
    /**
      * List repository organization secrets
      * @description Lists all organization secrets shared with a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
      */
    @JSName("actions/list-repo-organization-secrets")
    var `actionsSlashlist-repo-organization-secrets`: Responses200ContentApplicationjson542
    
    /**
      * List repository organization variables
      * @description Lists all organiation variables shared with a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
      */
    @JSName("actions/list-repo-organization-variables")
    var `actionsSlashlist-repo-organization-variables`: Responses200ContentApplicationjsonTotalcountNumberVariablesArray
    
    /**
      * List repository required workflows
      * @description Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/list-repo-required-workflows")
    var `actionsSlashlist-repo-required-workflows`: ParametersPathRepoString
    
    /**
      * List repository secrets
      * @description Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
      */
    @JSName("actions/list-repo-secrets")
    var `actionsSlashlist-repo-secrets`: Responses200ContentApplicationjson542
    
    /**
      * List repository variables
      * @description Lists all repository variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.
      */
    @JSName("actions/list-repo-variables")
    var `actionsSlashlist-repo-variables`: Responses200ContentApplicationjsonTotalcountNumberVariablesArray
    
    /**
      * List repository workflows
      * @description Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/list-repo-workflows")
    var `actionsSlashlist-repo-workflows`: Responses200ContentApplicationjsonTotalcountWorkflows
    
    /**
      * List workflow runs for a required workflow
      * @description List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/list-required-workflow-runs")
    var `actionsSlashlist-required-workflow-runs`: ParametersPathOwnerRepoRequiredworkflowidforrepo
    
    /**
      * List required workflows
      * @description List all required workflows in an organization.
      *
      * You must authenticate using an access token with the `read:org` scope to use this endpoint.
      *
      * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/list-required-workflows")
    var `actionsSlashlist-required-workflows`: Responses200ContentApplicationjsonRequiredworkflowsArray
    
    /**
      * List runner applications for an organization
      * @description Lists binaries for the runner application that you can download and run.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/list-runner-applications-for-org")
    var `actionsSlashlist-runner-applications-for-org`: Responses200Content504
    
    /**
      * List runner applications for a repository
      * @description Lists binaries for the runner application that you can download and run.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      */
    @JSName("actions/list-runner-applications-for-repo")
    var `actionsSlashlist-runner-applications-for-repo`: Parameters540Responses200Content504
    
    /**
      * List selected repositories for an organization secret
      * @description Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
      */
    @JSName("actions/list-selected-repos-for-org-secret")
    var `actionsSlashlist-selected-repos-for-org-secret`: ParametersQuery507
    
    /**
      * List selected repositories for an organization variable
      * @description Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.
      */
    @JSName("actions/list-selected-repos-for-org-variable")
    var `actionsSlashlist-selected-repos-for-org-variable`: ParametersPathNameStringOrgStringQuery507
    
    /**
      * List selected repositories enabled for GitHub Actions in an organization
      * @description Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/list-selected-repositories-enabled-github-actions-organization")
    var `actionsSlashlist-selected-repositories-enabled-github-actions-organization`: Responses200ContentApplicationjsonRepositoriesArray
    
    /**
      * List selected repositories for a required workflow
      * @description Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.
      *
      * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this endpoint.
      *
      * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/list-selected-repositories-required-workflow")
    var `actionsSlashlist-selected-repositories-required-workflow`: ParametersPathOrgRequiredworkflowidResponses200ContentApplicationjsonRepositoriesArray
    
    /**
      * List self-hosted runners for an organization
      * @description Lists all self-hosted runners configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/list-self-hosted-runners-for-org")
    var `actionsSlashlist-self-hosted-runners-for-org`: Responses200ContentApplicationjsonRunnersTotalcount
    
    /**
      * List self-hosted runners for a repository
      * @description Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
      */
    @JSName("actions/list-self-hosted-runners-for-repo")
    var `actionsSlashlist-self-hosted-runners-for-repo`: ParametersPathOwnerStringResponses200ContentApplicationjsonRunnersTotalcount
    
    /**
      * List workflow run artifacts
      * @description Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/list-workflow-run-artifacts")
    var `actionsSlashlist-workflow-run-artifacts`: ParametersPathRepoRunidQuery473
    
    /**
      * List workflow runs for a workflow
      * @description List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
      */
    @JSName("actions/list-workflow-runs")
    var `actionsSlashlist-workflow-runs`: ParametersPathRepoWorkflowidQueryActorBranch
    
    /**
      * List workflow runs for a repository
      * @description Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/list-workflow-runs-for-repo")
    var `actionsSlashlist-workflow-runs-for-repo`: ParametersQueryActorBranch
    
    /**
      * Re-run a job from a workflow run
      * @description Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/re-run-job-for-workflow-run")
    var `actionsSlashre-run-job-for-workflow-run`: Responses201ContentApplicationjsonRecord403Content36
    
    /**
      * Re-run a workflow
      * @description Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/re-run-workflow")
    var `actionsSlashre-run-workflow`: Parameters544RequestBody
    
    /**
      * Re-run failed jobs from a workflow run
      * @description Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint.
      */
    @JSName("actions/re-run-workflow-failed-jobs")
    var `actionsSlashre-run-workflow-failed-jobs`: Parameters544RequestBody
    
    /**
      * Remove all custom labels from a self-hosted runner for an organization
      * @description Remove all custom labels from a self-hosted runner configured in an
      * organization. Returns the remaining read-only labels from the runner.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/remove-all-custom-labels-from-self-hosted-runner-for-org")
    var `actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-org`: Responses200ContentApplicationjsonLabelsArray
    
    /**
      * Remove all custom labels from a self-hosted runner for a repository
      * @description Remove all custom labels from a self-hosted runner configured in a
      * repository. Returns the remaining read-only labels from the runner.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/remove-all-custom-labels-from-self-hosted-runner-for-repo")
    var `actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunneridResponses200ContentApplicationjsonLabelsArray
    
    /**
      * Remove a custom label from a self-hosted runner for an organization
      * @description Remove a custom label from a self-hosted runner configured
      * in an organization. Returns the remaining labels from the runner.
      *
      * This endpoint returns a `404 Not Found` status if the custom label is not
      * present on the runner.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/remove-custom-label-from-self-hosted-runner-for-org")
    var `actionsSlashremove-custom-label-from-self-hosted-runner-for-org`: ParametersPathNameOrgRunnerid
    
    /**
      * Remove a custom label from a self-hosted runner for a repository
      * @description Remove a custom label from a self-hosted runner configured
      * in a repository. Returns the remaining labels from the runner.
      *
      * This endpoint returns a `404 Not Found` status if the custom label is not
      * present on the runner.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/remove-custom-label-from-self-hosted-runner-for-repo")
    var `actionsSlashremove-custom-label-from-self-hosted-runner-for-repo`: ParametersPathNameOwnerRepoRunnerid
    
    /**
      * Remove selected repository from an organization secret
      * @description Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
      */
    @JSName("actions/remove-selected-repo-from-org-secret")
    var `actionsSlashremove-selected-repo-from-org-secret`: ParametersPathOrgRepositoryidSecretname
    
    /**
      * Remove selected repository from an organization variable
      * @description Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
      */
    @JSName("actions/remove-selected-repo-from-org-variable")
    var `actionsSlashremove-selected-repo-from-org-variable`: ParametersPathNameStringOrgStringRepositoryidNumber
    
    /**
      * Remove a selected repository from required workflow
      * @description Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/remove-selected-repo-from-required-workflow")
    var `actionsSlashremove-selected-repo-from-required-workflow`: ParametersPathRepositoryidRequiredworkflowid
    
    /**
      * Review custom deployment protection rules for a workflow run
      * @description Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
      *
      * **Note:** GitHub Apps can only review their own custom deployment protection rules.
      * To approve or reject pending deployments that are waiting for review from a specific person or team, see [`POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
      *
      * GitHub Apps must have read and write permission for **Deployments** to use this endpoint.
      */
    @JSName("actions/review-custom-gates-for-run")
    var `actionsSlashreview-custom-gates-for-run`: RequestBodyContent547
    
    /**
      * Review pending deployments for a workflow run
      * @description Approve or reject pending deployments that are waiting on approval by a required reviewer.
      *
      * Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
      */
    @JSName("actions/review-pending-deployments-for-run")
    var `actionsSlashreview-pending-deployments-for-run`: Responses200Content551
    
    /**
      * Set allowed actions and reusable workflows for an organization
      * @description Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/set-allowed-actions-organization")
    var `actionsSlashset-allowed-actions-organization`: Parameters496RequestBody
    
    /**
      * Set allowed actions and reusable workflows for a repository
      * @description Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
      */
    @JSName("actions/set-allowed-actions-repository")
    var `actionsSlashset-allowed-actions-repository`: Parameters540RequestBody
    
    /**
      * Set custom labels for a self-hosted runner for an organization
      * @description Remove all previous custom labels and set the new custom labels for a specific
      * self-hosted runner configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/set-custom-labels-for-self-hosted-runner-for-org")
    var `actionsSlashset-custom-labels-for-self-hosted-runner-for-org`: Responses200ContentApplicationjsonLabelsArray404Content36
    
    /**
      * Set custom labels for a self-hosted runner for a repository
      * @description Remove all previous custom labels and set the new custom labels for a specific
      * self-hosted runner configured in a repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/set-custom-labels-for-self-hosted-runner-for-repo")
    var `actionsSlashset-custom-labels-for-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunneridRequestBodyContentApplicationjsonLabels
    
    /**
      * Set the customization template for an OIDC subject claim for a repository
      * @description Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/set-custom-oidc-sub-claim-for-repo")
    var `actionsSlashset-custom-oidc-sub-claim-for-repo`: Responses201400404
    
    /**
      * Set default workflow permissions for an organization
      * @description Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
      * can submit approving pull request reviews. For more information, see
      * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/set-github-actions-default-workflow-permissions-organization")
    var `actionsSlashset-github-actions-default-workflow-permissions-organization`: Parameters496RequestBodyResponses
    
    /**
      * Set default workflow permissions for a repository
      * @description Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
      * can submit approving pull request reviews.
      * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
      */
    @JSName("actions/set-github-actions-default-workflow-permissions-repository")
    var `actionsSlashset-github-actions-default-workflow-permissions-repository`: RequestBodyContentApplicationjson502
    
    /**
      * Set GitHub Actions permissions for an organization
      * @description Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/set-github-actions-permissions-organization")
    var `actionsSlashset-github-actions-permissions-organization`: RequestBodyContentApplicationjson501
    
    /**
      * Set GitHub Actions permissions for a repository
      * @description Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
      */
    @JSName("actions/set-github-actions-permissions-repository")
    var `actionsSlashset-github-actions-permissions-repository`: RequestBodyContentApplicationjsonAllowedactionsEnabledBoolean
    
    /**
      * Set selected repositories for an organization secret
      * @description Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
      */
    @JSName("actions/set-selected-repos-for-org-secret")
    var `actionsSlashset-selected-repos-for-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids
    
    /**
      * Set selected repositories for an organization variable
      * @description Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
      */
    @JSName("actions/set-selected-repos-for-org-variable")
    var `actionsSlashset-selected-repos-for-org-variable`: ParametersPathNameStringOrgStringRequestBodyContentApplicationjsonSelectedrepositoryids
    
    /**
      * Sets repositories for a required workflow
      * @description Sets the repositories for a required workflow that is required for selected repositories.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/set-selected-repos-to-required-workflow")
    var `actionsSlashset-selected-repos-to-required-workflow`: ParametersPathOrgRequiredworkflowidRequestBodyContentApplicationjsonSelectedrepositoryids
    
    /**
      * Set selected repositories enabled for GitHub Actions in an organization
      * @description Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/set-selected-repositories-enabled-github-actions-organization")
    var `actionsSlashset-selected-repositories-enabled-github-actions-organization`: Parameters496RequestBodyContentApplicationjsonSelectedrepositoryids
    
    /**
      * Set the level of access for workflows outside of the repository
      * @description Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
      * This endpoint only applies to private repositories.
      * For more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
      * repository `administration` permission to use this endpoint.
      */
    @JSName("actions/set-workflow-access-to-repository")
    var `actionsSlashset-workflow-access-to-repository`: RequestBodyContentApplicationjsonAccesslevel
    
    /**
      * Update an environment variable
      * @description Updates an environment variable that you can reference in a GitHub Actions workflow.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      * GitHub Apps must have the `environment:write` repository permission to use this endpoint.
      */
    @JSName("actions/update-environment-variable")
    var `actionsSlashupdate-environment-variable`: ParametersPathEnvironmentnameStringNameStringRequestBodyContentApplicationjson165
    
    /**
      * Update an organization variable
      * @description Updates an organization variable that you can reference in a GitHub Actions workflow.
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      * GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.
      */
    @JSName("actions/update-org-variable")
    var `actionsSlashupdate-org-variable`: ParametersPathNameStringOrgStringRequestBodyContentApplicationjsonVisibility
    
    /**
      * Update a repository variable
      * @description Updates a repository variable that you can reference in a GitHub Actions workflow.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      * GitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.
      */
    @JSName("actions/update-repo-variable")
    var `actionsSlashupdate-repo-variable`: ParametersPathNameStringOwnerStringRequestBodyContentApplicationjson165
    
    /**
      * Update a required workflow
      * @description Update a required workflow in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."
      */
    @JSName("actions/update-required-workflow")
    var `actionsSlashupdate-required-workflow`: Responses422Content471
    
    /** Check if a repository is starred by the authenticated user */
    @JSName("activity/check-repo-is-starred-by-authenticated-user")
    var `activitySlashcheck-repo-is-starred-by-authenticated-user`: Responses403Content36404ContentApplicationjsonDocumentationurlMessage
    
    /**
      * Delete a repository subscription
      * @description This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
      */
    @JSName("activity/delete-repo-subscription")
    var `activitySlashdelete-repo-subscription`: Parameters540Responses
    
    /**
      * Delete a thread subscription
      * @description Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
      */
    @JSName("activity/delete-thread-subscription")
    var `activitySlashdelete-thread-subscription`: Responses304401Content36
    
    /**
      * Get feeds
      * @description GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
      *
      * *   **Timeline**: The GitHub global public timeline
      * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
      * *   **Current user public**: The public timeline for the authenticated user
      * *   **Current user**: The private timeline for the authenticated user
      * *   **Current user actor**: The private timeline for activity created by the authenticated user
      * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
      * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
      *
      * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
      */
    @JSName("activity/get-feeds")
    var `activitySlashget-feeds`: Responses200ContentApplicationjsonCurrentuserorganizationurl
    
    /** Get a repository subscription */
    @JSName("activity/get-repo-subscription")
    var `activitySlashget-repo-subscription`: Responses200ContentApplicationjsonCreatedatIgnored
    
    /**
      * Get a thread
      * @description Gets information about a notification thread.
      */
    @JSName("activity/get-thread")
    var `activitySlashget-thread`: ParametersPathThreadidNumber
    
    /**
      * Get a thread subscription for the authenticated user
      * @description This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
      *
      * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
      */
    @JSName("activity/get-thread-subscription-for-authenticated-user")
    var `activitySlashget-thread-subscription-for-authenticated-user`: Responses200ContentApplicationjsonRepositoryurl
    
    /**
      * List events for the authenticated user
      * @description If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
      */
    @JSName("activity/list-events-for-authenticated-user")
    var `activitySlashlist-events-for-authenticated-user`: ParametersPath649Query473
    
    /**
      * List notifications for the authenticated user
      * @description List all notifications for the current user, sorted by most recently updated.
      */
    @JSName("activity/list-notifications-for-authenticated-user")
    var `activitySlashlist-notifications-for-authenticated-user`: ParametersQueryAllBefore
    
    /**
      * List organization events for the authenticated user
      * @description This is the user's organization dashboard. You must be authenticated as the user to view this.
      */
    @JSName("activity/list-org-events-for-authenticated-user")
    var `activitySlashlist-org-events-for-authenticated-user`: ParametersPathOrgStringUsernameString
    
    /**
      * List public events
      * @description We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
      */
    @JSName("activity/list-public-events")
    var `activitySlashlist-public-events`: Responses304403503
    
    /** List public events for a network of repositories */
    @JSName("activity/list-public-events-for-repo-network")
    var `activitySlashlist-public-events-for-repo-network`: ParametersPathOwnerString
    
    /** List public events for a user */
    @JSName("activity/list-public-events-for-user")
    var `activitySlashlist-public-events-for-user`: ParametersPath649Query473
    
    /** List public organization events */
    @JSName("activity/list-public-org-events")
    var `activitySlashlist-public-org-events`: Responses200Content480
    
    /**
      * List events received by the authenticated user
      * @description These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
      */
    @JSName("activity/list-received-events-for-user")
    var `activitySlashlist-received-events-for-user`: ParametersPath649Query473
    
    /** List public events received by a user */
    @JSName("activity/list-received-public-events-for-user")
    var `activitySlashlist-received-public-events-for-user`: ParametersPath649Query473
    
    /**
      * List repository events
      * @description **Note**: This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
      */
    @JSName("activity/list-repo-events")
    var `activitySlashlist-repo-events`: ParametersPathOwnerStringResponses200Content480
    
    /**
      * List repository notifications for the authenticated user
      * @description Lists all notifications for the current user in the specified repository.
      */
    @JSName("activity/list-repo-notifications-for-authenticated-user")
    var `activitySlashlist-repo-notifications-for-authenticated-user`: ParametersQueryBeforePage
    
    /**
      * List repositories starred by the authenticated user
      * @description Lists repositories the authenticated user has starred.
      *
      * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
      */
    @JSName("activity/list-repos-starred-by-authenticated-user")
    var `activitySlashlist-repos-starred-by-authenticated-user`: ParametersQueryDirectionPagePerpageSort
    
    /**
      * List repositories starred by a user
      * @description Lists repositories a user has starred.
      *
      * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
      */
    @JSName("activity/list-repos-starred-by-user")
    var `activitySlashlist-repos-starred-by-user`: ParametersPath649QueryDirectionPagePerpageSort
    
    /**
      * List repositories watched by a user
      * @description Lists repositories a user is watching.
      */
    @JSName("activity/list-repos-watched-by-user")
    var `activitySlashlist-repos-watched-by-user`: ParametersPath649Query473Responses526
    
    /**
      * List stargazers
      * @description Lists the people that have starred the repository.
      *
      * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.
      */
    @JSName("activity/list-stargazers-for-repo")
    var `activitySlashlist-stargazers-for-repo`: Responses200Content630
    
    /**
      * List repositories watched by the authenticated user
      * @description Lists repositories the authenticated user is watching.
      */
    @JSName("activity/list-watched-repos-for-authenticated-user")
    var `activitySlashlist-watched-repos-for-authenticated-user`: Responses200Content497304
    
    /**
      * List watchers
      * @description Lists the people watching the specified repository.
      */
    @JSName("activity/list-watchers-for-repo")
    var `activitySlashlist-watchers-for-repo`: ParametersPathOwnerStringResponses521
    
    /**
      * Mark notifications as read
      * @description Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
      */
    @JSName("activity/mark-notifications-as-read")
    var `activitySlashmark-notifications-as-read`: Responses202304401403
    
    /**
      * Mark repository notifications as read
      * @description Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
      */
    @JSName("activity/mark-repo-notifications-as-read")
    var `activitySlashmark-repo-notifications-as-read`: RequestBodyResponses202ContentApplicationjsonUrl
    
    /**
      * Mark a thread as read
      * @description Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.
      */
    @JSName("activity/mark-thread-as-read")
    var `activitySlashmark-thread-as-read`: Responses492
    
    /**
      * Set a repository subscription
      * @description If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
      */
    @JSName("activity/set-repo-subscription")
    var `activitySlashset-repo-subscription`: Responses634
    
    /**
      * Set a thread subscription
      * @description If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
      *
      * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
      *
      * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
      */
    @JSName("activity/set-thread-subscription")
    var `activitySlashset-thread-subscription`: ParametersPathThreadidNumberRequestBody
    
    /**
      * Star a repository for the authenticated user
      * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("activity/star-repo-for-authenticated-user")
    var `activitySlashstar-repo-for-authenticated-user`: Parameters540Responses401Content36403Content36404Content36
    
    /** Unstar a repository for the authenticated user */
    @JSName("activity/unstar-repo-for-authenticated-user")
    var `activitySlashunstar-repo-for-authenticated-user`: Parameters540Responses401Content36403Content36404Content36
    
    /**
      * Add a repository to an app installation
      * @description Add a single repository to an installation. The authenticated user must have admin access to the repository.
      *
      * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
      */
    @JSName("apps/add-repo-to-installation-for-authenticated-user")
    var `appsSlashadd-repo-to-installation-for-authenticated-user`: ParametersPathInstallationidNumberRepositoryidNumber
    
    /**
      * Check a token
      * @description OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
      */
    @JSName("apps/check-token")
    var `appsSlashcheck-token`: RequestBodyContentApplicationjsonAccesstoken
    
    /**
      * Create a GitHub App from a manifest
      * @description Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
      */
    @JSName("apps/create-from-manifest")
    var `appsSlashcreate-from-manifest`: ParametersPath
    
    /**
      * Create an installation access token for an app
      * @description Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/create-installation-access-token")
    var `appsSlashcreate-installation-access-token`: Responses201401403
    
    /**
      * Delete an app authorization
      * @description OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
      * Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
      */
    @JSName("apps/delete-authorization")
    var `appsSlashdelete-authorization`: ParametersPathClientidString
    
    /**
      * Delete an installation for the authenticated app
      * @description Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/delete-installation")
    var `appsSlashdelete-installation`: Responses404Content36
    
    /**
      * Delete an app token
      * @description OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application's `client_id` and `client_secret` as the username and password.
      */
    @JSName("apps/delete-token")
    var `appsSlashdelete-token`: ParametersPathClientidString
    
    /**
      * Get the authenticated app
      * @description Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-authenticated")
    var `appsSlashget-authenticated`: Responses200ContentApplicationjsonExternalurl
    
    /**
      * Get an app
      * @description **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
      *
      * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
      */
    @JSName("apps/get-by-slug")
    var `appsSlashget-by-slug`: ParametersPathAppslugString
    
    /**
      * Get an installation for the authenticated app
      * @description Enables an authenticated GitHub App to find an installation's information using the installation id.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-installation")
    var `appsSlashget-installation`: ParametersPathInstallationidNumber
    
    /**
      * Get an organization installation for the authenticated app
      * @description Enables an authenticated GitHub App to find the organization's installation information.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-org-installation")
    var `appsSlashget-org-installation`: Responses514
    
    /**
      * Get a repository installation for the authenticated app
      * @description Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-repo-installation")
    var `appsSlashget-repo-installation`: Responses301Content36
    
    /**
      * Get a subscription plan for an account
      * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/get-subscription-plan-for-account")
    var `appsSlashget-subscription-plan-for-account`: ParametersPathAccountidNumber
    
    /**
      * Get a subscription plan for an account (stubbed)
      * @description Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/get-subscription-plan-for-account-stubbed")
    var `appsSlashget-subscription-plan-for-account-stubbed`: Responses200ContentApplicationjsonMarketplacependingchange401Content36
    
    /**
      * Get a user installation for the authenticated app
      * @description Enables an authenticated GitHub App to find the user’s installation information.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-user-installation")
    var `appsSlashget-user-installation`: ParametersPath649Responses514
    
    /**
      * Get a webhook configuration for an app
      * @description Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-webhook-config-for-app")
    var `appsSlashget-webhook-config-for-app`: Responses200ContentApplicationjsonContenttype
    
    /**
      * Get a delivery for an app webhook
      * @description Returns a delivery for the webhook configured for a GitHub App.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-webhook-delivery")
    var `appsSlashget-webhook-delivery`: ParametersPathDeliveryidNumber
    
    /**
      * List accounts for a plan
      * @description Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/list-accounts-for-plan")
    var `appsSlashlist-accounts-for-plan`: ParametersPathPlanidNumber
    
    /**
      * List accounts for a plan (stubbed)
      * @description Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/list-accounts-for-plan-stubbed")
    var `appsSlashlist-accounts-for-plan-stubbed`: Responses200Content490
    
    /**
      * List repositories accessible to the user access token
      * @description List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
      *
      * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
      *
      * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
      *
      * The access the user has to each repository is included in the hash under the `permissions` key.
      */
    @JSName("apps/list-installation-repos-for-authenticated-user")
    var `appsSlashlist-installation-repos-for-authenticated-user`: ParametersPathInstallationidNumberQuery473
    
    /**
      * List installation requests for the authenticated app
      * @description Lists all the pending installation requests for the authenticated GitHub App.
      */
    @JSName("apps/list-installation-requests-for-authenticated-app")
    var `appsSlashlist-installation-requests-for-authenticated-app`: ParametersQuery473
    
    /**
      * List installations for the authenticated app
      * @description You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      *
      * The permissions the installation has are included under the `permissions` key.
      */
    @JSName("apps/list-installations")
    var `appsSlashlist-installations`: ParametersQueryOutdatedPage
    
    /**
      * List app installations accessible to the user access token
      * @description Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
      *
      * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
      *
      * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
      *
      * You can find the permissions for the installation under the `permissions` key.
      */
    @JSName("apps/list-installations-for-authenticated-user")
    var `appsSlashlist-installations-for-authenticated-user`: Responses200ContentApplicationjsonInstallationsTotalcount304
    
    /**
      * List plans
      * @description Lists all plans that are part of your GitHub Marketplace listing.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/list-plans")
    var `appsSlashlist-plans`: Responses200Content489
    
    /**
      * List plans (stubbed)
      * @description Lists all plans that are part of your GitHub Marketplace listing.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/list-plans-stubbed")
    var `appsSlashlist-plans-stubbed`: Responses200Content489401Content36
    
    /**
      * List repositories accessible to the app installation
      * @description List repositories that an app installation can access.
      *
      * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
      */
    @JSName("apps/list-repos-accessible-to-installation")
    var `appsSlashlist-repos-accessible-to-installation`: Responses200ContentApplicationjsonRepositoryselectionTotalcount
    
    /**
      * List subscriptions for the authenticated user
      * @description Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
      */
    @JSName("apps/list-subscriptions-for-authenticated-user")
    var `appsSlashlist-subscriptions-for-authenticated-user`: Responses200304401404
    
    /**
      * List subscriptions for the authenticated user (stubbed)
      * @description Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
      */
    @JSName("apps/list-subscriptions-for-authenticated-user-stubbed")
    var `appsSlashlist-subscriptions-for-authenticated-user-stubbed`: Responses200Content659
    
    /**
      * List deliveries for an app webhook
      * @description Returns a list of webhook deliveries for the webhook configured for a GitHub App.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/list-webhook-deliveries")
    var `appsSlashlist-webhook-deliveries`: ParametersQueryRedelivery
    
    /**
      * Redeliver a delivery for an app webhook
      * @description Redeliver a delivery for the webhook configured for a GitHub App.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/redeliver-webhook-delivery")
    var `appsSlashredeliver-webhook-delivery`: Responses202400422
    
    /**
      * Remove a repository from an app installation
      * @description Remove a single repository from an installation. The authenticated user must have admin access to the repository.
      *
      * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
      */
    @JSName("apps/remove-repo-from-installation-for-authenticated-user")
    var `appsSlashremove-repo-from-installation-for-authenticated-user`: ParametersPathInstallationidNumberRepositoryidNumber
    
    /**
      * Reset a token
      * @description OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
      */
    @JSName("apps/reset-token")
    var `appsSlashreset-token`: Responses200ContentApplicationjsonFingerprint422Content346
    
    /**
      * Revoke an installation access token
      * @description Revokes the installation token you're using to authenticate as an installation and access this endpoint.
      *
      * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
      *
      * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
      */
    @JSName("apps/revoke-installation-access-token")
    var `appsSlashrevoke-installation-access-token`: `31`
    
    /**
      * Create a scoped access token
      * @description Use a non-scoped user-to-server access token to create a repository scoped and/or permission scoped user-to-server access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App as the username and password. Invalid tokens will return `404 NOT FOUND`.
      */
    @JSName("apps/scope-token")
    var `appsSlashscope-token`: RequestBodyContentApplicationjsonTargetid
    
    /**
      * Suspend an app installation
      * @description Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/suspend-installation")
    var `appsSlashsuspend-installation`: Responses404Content36
    
    /**
      * Unsuspend an app installation
      * @description Removes a GitHub App installation suspension.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/unsuspend-installation")
    var `appsSlashunsuspend-installation`: Responses404Content36
    
    /**
      * Update a webhook configuration for an app
      * @description Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/update-webhook-config-for-app")
    var `appsSlashupdate-webhook-config-for-app`: RequestBodyContentApplicationjsonContenttypeInsecuressl
    
    /**
      * Get GitHub Actions billing for an organization
      * @description Gets the summary of the free and paid GitHub Actions minutes used.
      *
      * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
      *
      * Access tokens must have the `repo` or `admin:org` scope.
      */
    @JSName("billing/get-github-actions-billing-org")
    var `billingSlashget-github-actions-billing-org`: Responses200ContentApplicationjsonIncludedminutes
    
    /**
      * Get GitHub Actions billing for a user
      * @description Gets the summary of the free and paid GitHub Actions minutes used.
      *
      * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
      *
      * Access tokens must have the `user` scope.
      */
    @JSName("billing/get-github-actions-billing-user")
    var `billingSlashget-github-actions-billing-user`: ParametersPath649Responses200ContentApplicationjsonIncludedminutes
    
    /**
      * Get GitHub Packages billing for an organization
      * @description Gets the free and paid storage used for GitHub Packages in gigabytes.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * Access tokens must have the `repo` or `admin:org` scope.
      */
    @JSName("billing/get-github-packages-billing-org")
    var `billingSlashget-github-packages-billing-org`: Responses200ContentApplicationjsonIncludedgigabytesbandwidth
    
    /**
      * Get GitHub Packages billing for a user
      * @description Gets the free and paid storage used for GitHub Packages in gigabytes.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * Access tokens must have the `user` scope.
      */
    @JSName("billing/get-github-packages-billing-user")
    var `billingSlashget-github-packages-billing-user`: ParametersPath649Responses200ContentApplicationjsonIncludedgigabytesbandwidth
    
    /**
      * Get shared storage billing for an organization
      * @description Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * Access tokens must have the `repo` or `admin:org` scope.
      */
    @JSName("billing/get-shared-storage-billing-org")
    var `billingSlashget-shared-storage-billing-org`: Responses200ContentApplicationjsonDaysleftinbillingcycle
    
    /**
      * Get shared storage billing for a user
      * @description Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * Access tokens must have the `user` scope.
      */
    @JSName("billing/get-shared-storage-billing-user")
    var `billingSlashget-shared-storage-billing-user`: ParametersPath649Responses200ContentApplicationjsonDaysleftinbillingcycle
    
    /**
      * Create a check run
      * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
      *
      * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
      */
    @JSName("checks/create")
    var checksSlashcreate: Responses201ContentApplicationjsonOutput
    
    /**
      * Create a check suite
      * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
      *
      * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
      */
    @JSName("checks/create-suite")
    var `checksSlashcreate-suite`: Responses200ContentApplicationjsonRunsrerequestable
    
    /**
      * Get a check run
      * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
      */
    @JSName("checks/get")
    var checksSlashget: ParametersPathCheckrunidOwner
    
    /**
      * Get a check suite
      * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
      *
      * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
      */
    @JSName("checks/get-suite")
    var `checksSlashget-suite`: ParametersPathChecksuiteidOwner
    
    /**
      * List check run annotations
      * @description Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
      */
    @JSName("checks/list-annotations")
    var `checksSlashlist-annotations`: ParametersPathCheckrunidOwnerQuery473
    
    /**
      * List check runs for a Git reference
      * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
      */
    @JSName("checks/list-for-ref")
    var `checksSlashlist-for-ref`: ParametersQueryPerpageStatus
    
    /**
      * List check runs in a check suite
      * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
      */
    @JSName("checks/list-for-suite")
    var `checksSlashlist-for-suite`: ParametersQueryChecknameFilter
    
    /**
      * List check suites for a Git reference
      * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
      *
      * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
      */
    @JSName("checks/list-suites-for-ref")
    var `checksSlashlist-suites-for-ref`: ParametersQueryAppidChecknamePage
    
    /**
      * Rerequest a check run
      * @description Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
      *
      * To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
      */
    @JSName("checks/rerequest-run")
    var `checksSlashrerequest-run`: Responses403ContentApplicationjsonDocumentationurlMessage
    
    /**
      * Rerequest a check suite
      * @description Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
      *
      * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
      */
    @JSName("checks/rerequest-suite")
    var `checksSlashrerequest-suite`: ParametersPathChecksuiteidOwnerResponses506
    
    /**
      * Update repository preferences for check suites
      * @description Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
      */
    @JSName("checks/set-suites-preferences")
    var `checksSlashset-suites-preferences`: Responses200ContentApplicationjsonPreferencesRepository
    
    /**
      * Update a check run
      * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
      */
    @JSName("checks/update")
    var checksSlashupdate: Responses200ContentApplicationjsonOutput
    
    /**
      * Delete a code scanning analysis from a repository
      * @description Deletes a specified code scanning analysis from a repository. For
      * private repositories, you must use an access token with the `repo` scope. For public repositories,
      * you must use an access token with `public_repo` scope.
      * GitHub Apps must have the `security_events` write permission to use this endpoint.
      *
      * You can delete one analysis at a time.
      * To delete a series of analyses, start with the most recent analysis and work backwards.
      * Conceptually, the process is similar to the undo function in a text editor.
      *
      * When you list the analyses for a repository,
      * one or more will be identified as deletable in the response:
      *
      * ```
      * "deletable": true
      * ```
      *
      * An analysis is deletable when it's the most recent in a set of analyses.
      * Typically, a repository will have multiple sets of analyses
      * for each enabled code scanning tool,
      * where a set is determined by a unique combination of analysis values:
      *
      * * `ref`
      * * `tool`
      * * `category`
      *
      * If you attempt to delete an analysis that is not the most recent in a set,
      * you'll get a 400 response with the message:
      *
      * ```
      * Analysis specified is not deletable.
      * ```
      *
      * The response from a successful `DELETE` operation provides you with
      * two alternative URLs for deleting the next analysis in the set:
      * `next_analysis_url` and `confirm_delete_url`.
      * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
      * in a set. This is a useful option if you want to preserve at least one analysis
      * for the specified tool in your repository.
      * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
      * When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
      * in the 200 response is `null`.
      *
      * As an example of the deletion process,
      * let's imagine that you added a workflow that configured a particular code scanning tool
      * to analyze the code in a repository. This tool has added 15 analyses:
      * 10 on the default branch, and another 5 on a topic branch.
      * You therefore have two separate sets of analyses for this tool.
      * You've now decided that you want to remove all of the analyses for the tool.
      * To do this you must make 15 separate deletion requests.
      * To start, you must find an analysis that's identified as deletable.
      * Each set of analyses always has one that's identified as deletable.
      * Having found the deletable analysis for one of the two sets,
      * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
      * Then repeat the process for the second set.
      * The procedure therefore consists of a nested loop:
      *
      * **Outer loop**:
      * * List the analyses for the repository, filtered by tool.
      * * Parse this list to find a deletable analysis. If found:
      *
      *   **Inner loop**:
      *   * Delete the identified analysis.
      *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
      *
      * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
      */
    @JSName("code-scanning/delete-analysis")
    var `code-scanningSlashdelete-analysis`: ParametersPathAnalysisidOwnerQueryConfirmdelete
    
    /**
      * Get a code scanning alert
      * @description Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
      */
    @JSName("code-scanning/get-alert")
    var `code-scanningSlashget-alert`: ParametersPathAlertnumberOwnerRepo
    
    /**
      * Get a code scanning analysis for a repository
      * @description Gets a specified code scanning analysis for a repository.
      * You must use an access token with the `security_events` scope to use this endpoint with private repos,
      * the `public_repo` scope also grants permission to read security events on public repos only.
      * GitHub Apps must have the `security_events` read permission to use this endpoint.
      *
      * The default JSON response contains fields that describe the analysis.
      * This includes the Git reference and commit SHA to which the analysis relates,
      * the datetime of the analysis, the name of the code scanning tool,
      * and the number of alerts.
      *
      * The `rules_count` field in the default response give the number of rules
      * that were run in the analysis.
      * For very old analyses this data is not available,
      * and `0` is returned in this field.
      *
      * If you use the Accept header `application/sarif+json`,
      * the response contains the analysis data that was uploaded.
      * This is formatted as
      * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
      */
    @JSName("code-scanning/get-analysis")
    var `code-scanningSlashget-analysis`: ParametersPathAnalysisidOwner
    
    /**
      * Get a CodeQL database for a repository
      * @description Gets a CodeQL database for a language in a repository.
      *
      * By default this endpoint returns JSON metadata about the CodeQL database. To
      * download the CodeQL database binary content, set the `Accept` header of the request
      * to [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure
      * your HTTP client is configured to follow redirects or use the `Location` header
      * to make a second request to get the redirect URL.
      *
      * For private repositories, you must use an access token with the `security_events` scope.
      * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
      * GitHub Apps must have the `contents` read permission to use this endpoint.
      */
    @JSName("code-scanning/get-codeql-database")
    var `code-scanningSlashget-codeql-database`: ParametersPathLanguageOwner
    
    /**
      * Get a code scanning default setup configuration
      * @description Gets a code scanning default setup configuration.
      * You must use an access token with the `repo` scope to use this endpoint with private repos or the `public_repo`
      * scope for public repos. GitHub Apps must have the `repo` write permission to use this endpoint.
      */
    @JSName("code-scanning/get-default-setup")
    var `code-scanningSlashget-default-setup`: Responses200ContentApplicationjsonLanguages
    
    /**
      * Get information about a SARIF upload
      * @description Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
      */
    @JSName("code-scanning/get-sarif")
    var `code-scanningSlashget-sarif`: ParametersPathOwnerRepoSarifid
    
    /**
      * List instances of a code scanning alert
      * @description Lists all instances of the specified code scanning alert.
      * You must use an access token with the `security_events` scope to use this endpoint with private repos,
      * the `public_repo` scope also grants permission to read security events on public repos only.
      * GitHub Apps must have the `security_events` read permission to use this endpoint.
      */
    @JSName("code-scanning/list-alert-instances")
    var `code-scanningSlashlist-alert-instances`: ParametersQueryPagePerpageRef
    
    /**
      * List code scanning alerts for an organization
      * @description Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      *
      * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
      *
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `security_events` read permission to use this endpoint.
      */
    @JSName("code-scanning/list-alerts-for-org")
    var `code-scanningSlashlist-alerts-for-org`: ParametersQueryToolname
    
    /**
      * List code scanning alerts for a repository
      * @description Lists all open code scanning alerts for the default branch (usually `main`
      * or `master`). You must use an access token with the `security_events` scope to use
      * this endpoint with private repos, the `public_repo` scope also grants permission to read
      * security events on public repos only. GitHub Apps must have the `security_events` read
      * permission to use this endpoint.
      *
      * The response includes a `most_recent_instance` object.
      * This provides details of the most recent instance of this alert
      * for the default branch or for the specified Git reference
      * (if you used `ref` in the request).
      */
    @JSName("code-scanning/list-alerts-for-repo")
    var `code-scanningSlashlist-alerts-for-repo`: ParametersQueryRefSort
    
    /**
      * List CodeQL databases for a repository
      * @description Lists the CodeQL databases that are available in a repository.
      *
      * For private repositories, you must use an access token with the `security_events` scope.
      * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
      * GitHub Apps must have the `contents` read permission to use this endpoint.
      */
    @JSName("code-scanning/list-codeql-databases")
    var `code-scanningSlashlist-codeql-databases`: Responses200Content564
    
    /**
      * List code scanning analyses for a repository
      * @description Lists the details of all code scanning analyses for a repository,
      * starting with the most recent.
      * The response is paginated and you can use the `page` and `per_page` parameters
      * to list the analyses you're interested in.
      * By default 30 analyses are listed per page.
      *
      * The `rules_count` field in the response give the number of rules
      * that were run in the analysis.
      * For very old analyses this data is not available,
      * and `0` is returned in this field.
      *
      * You must use an access token with the `security_events` scope to use this endpoint with private repos,
      * the `public_repo` scope also grants permission to read security events on public repos only.
      * GitHub Apps must have the `security_events` read permission to use this endpoint.
      *
      * **Deprecation notice**:
      * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
      */
    @JSName("code-scanning/list-recent-analyses")
    var `code-scanningSlashlist-recent-analyses`: ParametersQueryRefSarifid
    
    /**
      * Update a code scanning alert
      * @description Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
      */
    @JSName("code-scanning/update-alert")
    var `code-scanningSlashupdate-alert`: RequestBodyContentApplicationjsonDismissedreasonState
    
    /**
      * Update a code scanning default setup configuration
      * @description Updates a code scanning default setup configuration.
      * You must use an access token with the `repo` scope to use this endpoint with private repos or the `public_repo`
      * scope for public repos. GitHub Apps must have the `repo` write permission to use this endpoint.
      */
    @JSName("code-scanning/update-default-setup")
    var `code-scanningSlashupdate-default-setup`: RequestBodyContentApplicationjsonQuerysuite
    
    /**
      * Upload an analysis as SARIF data
      * @description Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
      *
      * There are two places where you can upload code scanning results.
      *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
      *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
      *
      * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
      *
      * ```
      * gzip -c analysis-data.sarif | base64 -w0
      * ```
      * <br>
      * SARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.
      * To get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries.
      *
      *
      * | **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |
      * |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
      * | Runs per file                    |         20         |                                                                                  |
      * | Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |
      * | Rules per run                    |       25,000       |                                                                                  |
      * | Tool extensions per run          |        100         |                                                                                  |
      * | Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
      * | Location per result	             |       1,000        | Only 100 locations will be included.                                             |
      * | Tags per rule	                   |         20         | Only 10 tags will be included.                                                   |
      *
      *
      * The `202 Accepted` response includes an `id` value.
      * You can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.
      * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
      */
    @JSName("code-scanning/upload-sarif")
    var `code-scanningSlashupload-sarif`: RequestBodyContentApplicationjsonSarif
    
    /** Get all codes of conduct */
    @JSName("codes-of-conduct/get-all-codes-of-conduct")
    var `codes-of-conductSlashget-all-codes-of-conduct`: Responses200Content477
    
    /** Get a code of conduct */
    @JSName("codes-of-conduct/get-conduct-code")
    var `codes-of-conductSlashget-conduct-code`: Responses200ContentApplicationjsonBodyHtmlurl
    
    /**
      * Add a selected repository to a user secret
      * @description Adds a repository to the selected repositories for a user's codespace secret.
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on the referenced repository to use this endpoint.
      */
    @JSName("codespaces/add-repository-for-secret-for-authenticated-user")
    var `codespacesSlashadd-repository-for-secret-for-authenticated-user`: ParametersPathRepositoryidNumberSecretnameString
    
    /**
      * Add selected repository to an organization secret
      * @description Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/add-selected-repo-to-org-secret")
    var `codespacesSlashadd-selected-repo-to-org-secret`: Responses404Content36422Content346
    
    /**
      * List machine types for a codespace
      * @description List the machine types a codespace can transition to use.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
      */
    @JSName("codespaces/codespace-machines-for-authenticated-user")
    var `codespacesSlashcodespace-machines-for-authenticated-user`: Responses200ContentApplicationjsonMachinesTotalcount
    
    /**
      * Create a codespace for the authenticated user
      * @description Creates a new codespace, owned by the authenticated user.
      *
      * This endpoint requires either a `repository_id` OR a `pull_request` but not both.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/create-for-authenticated-user")
    var `codespacesSlashcreate-for-authenticated-user`: RequestBodyContent372Responses201202401
    
    /**
      * Create or update an organization secret
      * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `admin:org` scope to use this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
      *
      * ```
      * const sodium = require('libsodium-wrappers')
      * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
      * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
      *
      * //Check if libsodium is ready and then proceed.
      * sodium.ready.then(() => {
      *   // Convert Secret & Base64 key to Uint8Array.
      *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
      *   let binsec = sodium.from_string(secret)
      *
      *   //Encrypt the secret using LibSodium
      *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
      *
      *   // Convert encrypted Uint8Array to Base64
      *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
      *
      *   console.log(output)
      * });
      * ```
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("codespaces/create-or-update-org-secret")
    var `codespacesSlashcreate-or-update-org-secret`: Responses201ContentApplicationjsonRecord404Content36
    
    /**
      * Create or update a repository secret
      * @description Creates or updates a repository secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets`
      * repository permission to use this endpoint.
      *
      * #### Example of encrypting a secret using Node.js
      *
      * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
      *
      * ```
      * const sodium = require('libsodium-wrappers')
      * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
      * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
      *
      * //Check if libsodium is ready and then proceed.
      * sodium.ready.then(() => {
      *   // Convert Secret & Base64 key to Uint8Array.
      *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
      *   let binsec = sodium.from_string(secret)
      *
      *   //Encrypt the secret using LibSodium
      *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
      *
      *   // Convert encrypted Uint8Array to Base64
      *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
      *
      *   console.log(output)
      * });
      * ```
      *
      * #### Example of encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example of encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example of encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("codespaces/create-or-update-repo-secret")
    var `codespacesSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjson163
    
    /**
      * Create or update a secret for the authenticated user
      * @description Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must also have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
      *
      * ```
      * const sodium = require('libsodium-wrappers')
      * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
      * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
      *
      * //Check if libsodium is ready and then proceed.
      * sodium.ready.then(() => {
      *   // Convert Secret & Base64 key to Uint8Array.
      *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
      *   let binsec = sodium.from_string(secret)
      *
      *   //Encrypt the secret using LibSodium
      *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
      *
      *   // Convert encrypted Uint8Array to Base64
      *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
      *
      *   console.log(output)
      * });
      * ```
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("codespaces/create-or-update-secret-for-authenticated-user")
    var `codespacesSlashcreate-or-update-secret-for-authenticated-user`: ParametersPath652RequestBodyContentApplicationjsonKeyidSelectedrepositoryids
    
    /**
      * Create a codespace from a pull request
      * @description Creates a codespace owned by the authenticated user for the specified pull request.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/create-with-pr-for-authenticated-user")
    var `codespacesSlashcreate-with-pr-for-authenticated-user`: Responses201202401
    
    /**
      * Create a codespace in a repository
      * @description Creates a codespace owned by the authenticated user in the specified repository.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/create-with-repo-for-authenticated-user")
    var `codespacesSlashcreate-with-repo-for-authenticated-user`: Responses201202400
    
    /**
      * Removes users from Codespaces billing for an organization
      * @description Codespaces for the specified users will no longer be billed to the organization.
      * To use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/delete-codespaces-billing-users")
    var `codespacesSlashdelete-codespaces-billing-users`: Parameters496RequestBodyContentApplicationjsonSelectedusernamesArray
    
    /**
      * Delete a codespace for the authenticated user
      * @description Deletes a user's codespace.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/delete-for-authenticated-user")
    var `codespacesSlashdelete-for-authenticated-user`: Responses202304401403404
    
    /**
      * Delete a codespace from the organization
      * @description Deletes a user's codespace.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/delete-from-organization")
    var `codespacesSlashdelete-from-organization`: ParametersPathCodespacenameOrg
    
    /**
      * Delete an organization secret
      * @description Deletes an organization secret using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/delete-org-secret")
    var `codespacesSlashdelete-org-secret`: ParametersPathOrgSecretnameResponses404Content36
    
    /**
      * Delete a repository secret
      * @description Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
      */
    @JSName("codespaces/delete-repo-secret")
    var `codespacesSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses
    
    /**
      * Delete a secret for the authenticated user
      * @description Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/delete-secret-for-authenticated-user")
    var `codespacesSlashdelete-secret-for-authenticated-user`: ParametersPath652Responses
    
    /**
      * Export a codespace for the authenticated user
      * @description Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
      *
      * If changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.
      *
      * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
      */
    @JSName("codespaces/export-for-authenticated-user")
    var `codespacesSlashexport-for-authenticated-user`: Responses202401403404
    
    /**
      * List codespaces for a user in organization
      * @description Lists the codespaces that a member of an organization has for repositories in that organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/get-codespaces-for-user-in-org")
    var `codespacesSlashget-codespaces-for-user-in-org`: ParametersPathUsernameStringQuery473
    
    /**
      * Get details about a codespace export
      * @description Gets information about an export of a codespace.
      *
      * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
      */
    @JSName("codespaces/get-export-details-for-authenticated-user")
    var `codespacesSlashget-export-details-for-authenticated-user`: ParametersPathCodespacenameExportid
    
    /**
      * Get a codespace for the authenticated user
      * @description Gets information about a user's codespace.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/get-for-authenticated-user")
    var `codespacesSlashget-for-authenticated-user`: ParametersPathCodespacenameString
    
    /**
      * Get an organization public key
      * @description Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/get-org-public-key")
    var `codespacesSlashget-org-public-key`: Responses200ContentApplicationjsonCreatedatId
    
    /**
      * Get an organization secret
      * @description Gets an organization secret without revealing its encrypted value.
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/get-org-secret")
    var `codespacesSlashget-org-secret`: Responses200HeadersLinkString
    
    /**
      * Get public key for the authenticated user
      * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/get-public-key-for-authenticated-user")
    var `codespacesSlashget-public-key-for-authenticated-user`: `651`
    
    /**
      * Get a repository public key
      * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
      */
    @JSName("codespaces/get-repo-public-key")
    var `codespacesSlashget-repo-public-key`: Parameters540Responses200ContentApplicationjsonCreatedatId
    
    /**
      * Get a repository secret
      * @description Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
      */
    @JSName("codespaces/get-repo-secret")
    var `codespacesSlashget-repo-secret`: ParametersPathOwnerRepoSecretname
    
    /**
      * Get a secret for the authenticated user
      * @description Gets a secret available to a user's codespaces without revealing its encrypted value.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/get-secret-for-authenticated-user")
    var `codespacesSlashget-secret-for-authenticated-user`: ParametersPath652
    
    /**
      * List devcontainer configurations in a repository for the authenticated user
      * @description Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
      * specify launchpoint configurations for codespaces created within the repository.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
      */
    @JSName("codespaces/list-devcontainers-in-repository-for-authenticated-user")
    var `codespacesSlashlist-devcontainers-in-repository-for-authenticated-user`: Responses400401403
    
    /**
      * List codespaces for the authenticated user
      * @description Lists the authenticated user's codespaces.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/list-for-authenticated-user")
    var `codespacesSlashlist-for-authenticated-user`: ParametersQueryPagePerpageRepositoryid
    
    /**
      * List codespaces for the organization
      * @description Lists the codespaces associated to a specified organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/list-in-organization")
    var `codespacesSlashlist-in-organization`: Responses200304401403404500
    
    /**
      * List codespaces in a repository for the authenticated user
      * @description Lists the codespaces associated to a specified repository and the authenticated user.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/list-in-repository-for-authenticated-user")
    var `codespacesSlashlist-in-repository-for-authenticated-user`: Responses200ContentApplicationjsonCodespacesTotalcount
    
    /**
      * List organization secrets
      * @description Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/list-org-secrets")
    var `codespacesSlashlist-org-secrets`: Responses200ContentApplicationjson505
    
    /**
      * List repository secrets
      * @description Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.
      */
    @JSName("codespaces/list-repo-secrets")
    var `codespacesSlashlist-repo-secrets`: Responses200ContentApplicationjson542
    
    /**
      * List selected repositories for a user secret
      * @description List the repositories that have been granted the ability to use a user's codespace secret.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
      */
    @JSName("codespaces/list-repositories-for-secret-for-authenticated-user")
    var `codespacesSlashlist-repositories-for-secret-for-authenticated-user`: Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber401Content36
    
    /**
      * List secrets for the authenticated user
      * @description Lists all secrets available for a user's Codespaces without revealing their
      * encrypted values.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/list-secrets-for-authenticated-user")
    var `codespacesSlashlist-secrets-for-authenticated-user`: Responses200ContentApplicationjson650
    
    /**
      * List selected repositories for an organization secret
      * @description Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/list-selected-repos-for-org-secret")
    var `codespacesSlashlist-selected-repos-for-org-secret`: Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber404Content36
    
    /**
      * Get default attributes for a codespace
      * @description Gets the default attributes for codespaces created by the user with the repository.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/pre-flight-with-repo-for-authenticated-user")
    var `codespacesSlashpre-flight-with-repo-for-authenticated-user`: ParametersPathOwnerStringQueryClientipRef
    
    /**
      * Create a repository from an unpublished codespace
      * @description Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
      *
      * The codespace's token is granted write permissions to the repository, allowing the user to push their changes.
      *
      * This will fail for a codespace that is already published, meaning it has an associated repository.
      *
      * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/publish-for-authenticated-user")
    var `codespacesSlashpublish-for-authenticated-user`: Responses201401403404422
    
    /**
      * Remove a selected repository from a user secret
      * @description Removes a repository from the selected repositories for a user's codespace secret.
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      * GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/remove-repository-for-secret-for-authenticated-user")
    var `codespacesSlashremove-repository-for-secret-for-authenticated-user`: ParametersPathRepositoryidNumberSecretnameString
    
    /**
      * Remove selected repository from an organization secret
      * @description Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/remove-selected-repo-from-org-secret")
    var `codespacesSlashremove-selected-repo-from-org-secret`: Responses404Content36422Content346
    
    /**
      * List available machine types for a repository
      * @description List the machine types available for a given repository based on its configuration.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.
      */
    @JSName("codespaces/repo-machines-for-authenticated-user")
    var `codespacesSlashrepo-machines-for-authenticated-user`: ParametersPathOwnerStringQueryClientipLocation
    
    /**
      * Manage access control for organization codespaces
      * @description Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces billing permissions for users according to the visibility.
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/set-codespaces-billing")
    var `codespacesSlashset-codespaces-billing`: Responses304404422500
    
    /**
      * Add users to Codespaces billing for an organization
      * @description Codespaces for the specified users will be billed to the organization.
      * To use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/set-codespaces-billing-users")
    var `codespacesSlashset-codespaces-billing-users`: Parameters496RequestBodyContentApplicationjsonSelectedusernamesArray
    
    /**
      * Set selected repositories for a user secret
      * @description Select the repositories that will use a user's codespace secret.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
      */
    @JSName("codespaces/set-repositories-for-secret-for-authenticated-user")
    var `codespacesSlashset-repositories-for-secret-for-authenticated-user`: Responses404Content36500Content36
    
    /**
      * Set selected repositories for an organization secret
      * @description Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/set-selected-repos-for-org-secret")
    var `codespacesSlashset-selected-repos-for-org-secret`: RequestBodyContentApplicationjsonSelectedrepositoryidsResponses404Content36
    
    /**
      * Start a codespace for the authenticated user
      * @description Starts a user's codespace.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
      */
    @JSName("codespaces/start-for-authenticated-user")
    var `codespacesSlashstart-for-authenticated-user`: Responses401402
    
    /**
      * Stop a codespace for the authenticated user
      * @description Stops a user's codespace.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
      */
    @JSName("codespaces/stop-for-authenticated-user")
    var `codespacesSlashstop-for-authenticated-user`: Responses200ContentApplicationjsonIdletimeoutnotice401Content36403Content36
    
    /**
      * Stop a codespace for an organization user
      * @description Stops a user's codespace.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/stop-in-organization")
    var `codespacesSlashstop-in-organization`: Responses200ContentApplicationjsonIdletimeoutnotice
    
    /**
      * Update a codespace for the authenticated user
      * @description Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
      *
      * If you specify a new machine type it will be applied the next time your codespace is started.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/update-for-authenticated-user")
    var `codespacesSlashupdate-for-authenticated-user`: Responses200ContentApplicationjsonIdletimeoutnotice401Content36
    
    /**
      * Add selected repository to an organization secret
      * @description Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
      */
    @JSName("dependabot/add-selected-repo-to-org-secret")
    var `dependabotSlashadd-selected-repo-to-org-secret`: ParametersPathOrgRepositoryidSecretname
    
    /**
      * Create or update an organization secret
      * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
      * permission to use this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
      *
      * ```
      * const sodium = require('tweetsodium');
      *
      * const key = "base64-encoded-public-key";
      * const value = "plain-text-secret";
      *
      * // Convert the message and key to Uint8Array's (Buffer implements that interface)
      * const messageBytes = Buffer.from(value);
      * const keyBytes = Buffer.from(key, 'base64');
      *
      * // Encrypt using LibSodium.
      * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
      *
      * // Base64 the encrypted secret
      * const encrypted = Buffer.from(encryptedBytes).toString('base64');
      *
      * console.log(encrypted);
      * ```
      *
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("dependabot/create-or-update-org-secret")
    var `dependabotSlashcreate-or-update-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid
    
    /**
      * Create or update a repository secret
      * @description Creates or updates a repository secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
      * permission to use this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.
      *
      * ```
      * const sodium = require('libsodium-wrappers')
      * const secret = 'plain-text-secret' // replace with the secret you want to encrypt
      * const key = 'base64-encoded-public-key' // replace with the Base64 encoded public key
      *
      * //Check if libsodium is ready and then proceed.
      * sodium.ready.then(() => {
      *   // Convert Secret & Base64 key to Uint8Array.
      *   let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
      *   let binsec = sodium.from_string(secret)
      *
      *   //Encrypt the secret using LibSodium
      *   let encBytes = sodium.crypto_box_seal(binsec, binkey)
      *
      *   // Convert encrypted Uint8Array to Base64
      *   let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)
      *
      *   console.log(output)
      * });
      * ```
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("dependabot/create-or-update-repo-secret")
    var `dependabotSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjson163
    
    /**
      * Delete an organization secret
      * @description Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
      */
    @JSName("dependabot/delete-org-secret")
    var `dependabotSlashdelete-org-secret`: ParametersPathOrgSecretnameResponses
    
    /**
      * Delete a repository secret
      * @description Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
      */
    @JSName("dependabot/delete-repo-secret")
    var `dependabotSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses
    
    /**
      * Get a Dependabot alert
      * @description You must use an access token with the `security_events` scope to use this endpoint with private repositories.
      * You can also use tokens with the `public_repo` scope for public repositories only.
      * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
      */
    @JSName("dependabot/get-alert")
    var `dependabotSlashget-alert`: Responses200ContentApplicationjsonSecurityadvisory
    
    /**
      * Get an organization public key
      * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
      */
    @JSName("dependabot/get-org-public-key")
    var `dependabotSlashget-org-public-key`: Responses200ContentApplicationjsonKeyKeyid
    
    /**
      * Get an organization secret
      * @description Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
      */
    @JSName("dependabot/get-org-secret")
    var `dependabotSlashget-org-secret`: ParametersPathOrgSecretname
    
    /**
      * Get a repository public key
      * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
      */
    @JSName("dependabot/get-repo-public-key")
    var `dependabotSlashget-repo-public-key`: Parameters540Responses200ContentApplicationjsonKeyKeyid
    
    /**
      * Get a repository secret
      * @description Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
      */
    @JSName("dependabot/get-repo-secret")
    var `dependabotSlashget-repo-secret`: ParametersPathOwnerRepoSecretname
    
    /**
      * List Dependabot alerts for an enterprise
      * @description Lists Dependabot alerts for repositories that are owned by the specified enterprise.
      * To use this endpoint, you must be a member of the enterprise, and you must use an
      * access token with the `repo` scope or `security_events` scope.
      * Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      */
    @JSName("dependabot/list-alerts-for-enterprise")
    var `dependabotSlashlist-alerts-for-enterprise`: ParametersPathEnterpriseString
    
    /**
      * List Dependabot alerts for an organization
      * @description Lists Dependabot alerts for an organization.
      *
      * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
      *
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
      */
    @JSName("dependabot/list-alerts-for-org")
    var `dependabotSlashlist-alerts-for-org`: ParametersQueryFirst
    
    /**
      * List Dependabot alerts for a repository
      * @description You must use an access token with the `security_events` scope to use this endpoint with private repositories.
      * You can also use tokens with the `public_repo` scope for public repositories only.
      * GitHub Apps must have **Dependabot alerts** read permission to use this endpoint.
      */
    @JSName("dependabot/list-alerts-for-repo")
    var `dependabotSlashlist-alerts-for-repo`: ParametersQueryLast
    
    /**
      * List organization secrets
      * @description Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
      */
    @JSName("dependabot/list-org-secrets")
    var `dependabotSlashlist-org-secrets`: Responses200ContentApplicationjson505
    
    /**
      * List repository secrets
      * @description Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.
      */
    @JSName("dependabot/list-repo-secrets")
    var `dependabotSlashlist-repo-secrets`: Responses200ContentApplicationjson542
    
    /**
      * List selected repositories for an organization secret
      * @description Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
      */
    @JSName("dependabot/list-selected-repos-for-org-secret")
    var `dependabotSlashlist-selected-repos-for-org-secret`: ParametersQuery507
    
    /**
      * Remove selected repository from an organization secret
      * @description Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
      */
    @JSName("dependabot/remove-selected-repo-from-org-secret")
    var `dependabotSlashremove-selected-repo-from-org-secret`: ParametersPathOrgRepositoryidSecretname
    
    /**
      * Set selected repositories for an organization secret
      * @description Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.
      */
    @JSName("dependabot/set-selected-repos-for-org-secret")
    var `dependabotSlashset-selected-repos-for-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids
    
    /**
      * Update a Dependabot alert
      * @description You must use an access token with the `security_events` scope to use this endpoint with private repositories.
      * You can also use tokens with the `public_repo` scope for public repositories only.
      * GitHub Apps must have **Dependabot alerts** write permission to use this endpoint.
      */
    @JSName("dependabot/update-alert")
    var `dependabotSlashupdate-alert`: Responses200400403404
    
    /**
      * Create a snapshot of dependencies for a repository
      * @description Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to.
      */
    @JSName("dependency-graph/create-repository-snapshot")
    var `dependency-graphSlashcreate-repository-snapshot`: RequestBodyContentApplicationjsonJob
    
    /**
      * Get a diff of the dependencies between commits
      * @description Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
      */
    @JSName("dependency-graph/diff-range")
    var `dependency-graphSlashdiff-range`: ParametersQuery575
    
    /**
      * Export a software bill of materials (SBOM) for a repository.
      * @description Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
      */
    @JSName("dependency-graph/export-sbom")
    var `dependency-graphSlashexport-sbom`: Responses200ContentApplicationjsonSbom
    
    /**
      * Get emojis
      * @description Lists all the emojis available to use on GitHub.
      */
    @JSName("emojis/get")
    var emojisSlashget: Responses200Content13304
    
    /** Check if a gist is starred */
    @JSName("gists/check-is-starred")
    var `gistsSlashcheck-is-starred`: Responses403Content36404ContentApplicationjsonRecord
    
    /**
      * Create a gist
      * @description Allows you to add a new gist with one or more files.
      *
      * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
      */
    @JSName("gists/create")
    var gistsSlashcreate: Responses201304403404
    
    /** Create a gist comment */
    @JSName("gists/create-comment")
    var `gistsSlashcreate-comment`: Responses201ContentApplicationjsonNodeidUpdatedat
    
    /** Delete a gist */
    @JSName("gists/delete")
    var gistsSlashdelete: Responses304403Content36
    
    /** Delete a gist comment */
    @JSName("gists/delete-comment")
    var `gistsSlashdelete-comment`: ParametersPathCommentidGistidResponses304403Content36
    
    /** Fork a gist */
    @JSName("gists/fork")
    var gistsSlashfork: Responses201304403404422
    
    /** Get a gist */
    @JSName("gists/get")
    var gistsSlashget: ParametersPathGistidString
    
    /** Get a gist comment */
    @JSName("gists/get-comment")
    var `gistsSlashget-comment`: ParametersPathCommentidGistid
    
    /** Get a gist revision */
    @JSName("gists/get-revision")
    var `gistsSlashget-revision`: ParametersPathGistidSha
    
    /**
      * List gists for the authenticated user
      * @description Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
      */
    @JSName("gists/list")
    var gistsSlashlist: ParametersQueryPagePerpageSince
    
    /** List gist comments */
    @JSName("gists/list-comments")
    var `gistsSlashlist-comments`: ParametersPathGistidStringQuery473
    
    /** List gist commits */
    @JSName("gists/list-commits")
    var `gistsSlashlist-commits`: Responses200Content485
    
    /**
      * List gists for a user
      * @description Lists public gists for the specified user:
      */
    @JSName("gists/list-for-user")
    var `gistsSlashlist-for-user`: ParametersPath649QueryPagePerpageSince
    
    /** List gist forks */
    @JSName("gists/list-forks")
    var `gistsSlashlist-forks`: Responses200Content486
    
    /**
      * List public gists
      * @description List public gists sorted by most recently updated to least recently updated.
      *
      * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
      */
    @JSName("gists/list-public")
    var `gistsSlashlist-public`: Responses200304403422
    
    /**
      * List starred gists
      * @description List the authenticated user's starred gists:
      */
    @JSName("gists/list-starred")
    var `gistsSlashlist-starred`: Responses401Content36
    
    /**
      * Star a gist
      * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("gists/star")
    var gistsSlashstar: Responses304403Content36
    
    /** Unstar a gist */
    @JSName("gists/unstar")
    var gistsSlashunstar: Responses304403Content36
    
    /**
      * Update a gist
      * @description Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
      */
    @JSName("gists/update")
    var gistsSlashupdate: Responses200482404Content36
    
    /** Update a gist comment */
    @JSName("gists/update-comment")
    var `gistsSlashupdate-comment`: Responses200484404Content36
    
    /** Create a blob */
    @JSName("git/create-blob")
    var `gitSlashcreate-blob`: Responses201403404409
    
    /**
      * Create a commit
      * @description Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("git/create-commit")
    var `gitSlashcreate-commit`: Responses201ContentApplicationjsonAuthorCommitter
    
    /**
      * Create a reference
      * @description Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
      */
    @JSName("git/create-ref")
    var `gitSlashcreate-ref`: Responses201ContentApplicationjsonNodeidObjectHeadersLocation
    
    /**
      * Create a tag object
      * @description Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("git/create-tag")
    var `gitSlashcreate-tag`: Responses201ContentApplicationjsonMessageNodeid
    
    /**
      * Create a tree
      * @description The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
      *
      * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
      *
      * Returns an error if you try to delete a file that does not exist.
      */
    @JSName("git/create-tree")
    var `gitSlashcreate-tree`: Responses201ContentApplicationjsonTruncated
    
    /** Delete a reference */
    @JSName("git/delete-ref")
    var `gitSlashdelete-ref`: Parameters582Responses476
    
    /**
      * Get a blob
      * @description The `content` in the response will always be Base64 encoded.
      *
      * _Note_: This API supports blobs up to 100 megabytes in size.
      */
    @JSName("git/get-blob")
    var `gitSlashget-blob`: ParametersPathFileshaOwner
    
    /**
      * Get a commit
      * @description Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("git/get-commit")
    var `gitSlashget-commit`: Responses200581
    
    /**
      * Get a reference
      * @description Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
      *
      * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
      */
    @JSName("git/get-ref")
    var `gitSlashget-ref`: Responses200ContentApplicationjsonNodeidObject
    
    /**
      * Get a tag
      * @description **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("git/get-tag")
    var `gitSlashget-tag`: ParametersPathRepoTagsha
    
    /**
      * Get a tree
      * @description Returns a single tree using the SHA1 value for that tree.
      *
      * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
      *
      *
      * **Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
      */
    @JSName("git/get-tree")
    var `gitSlashget-tree`: ParametersPathRepoTreesha
    
    /**
      * List matching references
      * @description Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
      *
      * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
      *
      * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
      *
      * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
      */
    @JSName("git/list-matching-refs")
    var `gitSlashlist-matching-refs`: Parameters582
    
    /** Update a reference */
    @JSName("git/update-ref")
    var `gitSlashupdate-ref`: Responses200ContentApplicationjsonNodeidObject422Content346
    
    /**
      * Get all gitignore templates
      * @description List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
      */
    @JSName("gitignore/get-all-templates")
    var `gitignoreSlashget-all-templates`: Responses200Content29304
    
    /**
      * Get a gitignore template
      * @description The API also allows fetching the source of a single template.
      * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
      */
    @JSName("gitignore/get-template")
    var `gitignoreSlashget-template`: Responses200ContentApplicationjsonNameSource
    
    /**
      * Get interaction restrictions for your public repositories
      * @description Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
      */
    @JSName("interactions/get-restrictions-for-authenticated-user")
    var `interactionsSlashget-restrictions-for-authenticated-user`: `656`
    
    /**
      * Get interaction restrictions for an organization
      * @description Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
      */
    @JSName("interactions/get-restrictions-for-org")
    var `interactionsSlashget-restrictions-for-org`: Responses200Content515
    
    /**
      * Get interaction restrictions for a repository
      * @description Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
      */
    @JSName("interactions/get-restrictions-for-repo")
    var `interactionsSlashget-restrictions-for-repo`: Parameters540Responses200Content515
    
    /**
      * Remove interaction restrictions from your public repositories
      * @description Removes any interaction restrictions from your public repositories.
      */
    @JSName("interactions/remove-restrictions-for-authenticated-user")
    var `interactionsSlashremove-restrictions-for-authenticated-user`: `31`
    
    /**
      * Remove interaction restrictions for an organization
      * @description Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
      */
    @JSName("interactions/remove-restrictions-for-org")
    var `interactionsSlashremove-restrictions-for-org`: Parameters496Responses
    
    /**
      * Remove interaction restrictions for a repository
      * @description Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
      */
    @JSName("interactions/remove-restrictions-for-repo")
    var `interactionsSlashremove-restrictions-for-repo`: Parameters540Responses
    
    /**
      * Set interaction restrictions for your public repositories
      * @description Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
      */
    @JSName("interactions/set-restrictions-for-authenticated-user")
    var `interactionsSlashset-restrictions-for-authenticated-user`: Responses200ContentApplicationjsonOrigin
    
    /**
      * Set interaction restrictions for an organization
      * @description Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
      */
    @JSName("interactions/set-restrictions-for-org")
    var `interactionsSlashset-restrictions-for-org`: RequestBodyContentApplicationjsonExpiryLimit
    
    /**
      * Set interaction restrictions for a repository
      * @description Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
      */
    @JSName("interactions/set-restrictions-for-repo")
    var `interactionsSlashset-restrictions-for-repo`: Responses592
    
    /**
      * Add assignees to an issue
      * @description Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
      */
    @JSName("issues/add-assignees")
    var `issuesSlashadd-assignees`: Responses201596
    
    /** Add labels to an issue */
    @JSName("issues/add-labels")
    var `issuesSlashadd-labels`: Responses301404410422
    
    /**
      * Check if a user can be assigned
      * @description Checks if a user has permission to be assigned to an issue in this repository.
      *
      * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
      *
      * Otherwise a `404` status code is returned.
      */
    @JSName("issues/check-user-can-be-assigned")
    var `issuesSlashcheck-user-can-be-assigned`: ParametersPathAssigneeOwner
    
    /**
      * Check if a user can be assigned to a issue
      * @description Checks if a user has permission to be assigned to a specific issue.
      *
      * If the `assignee` can be assigned to this issue, a `204` status code with no content is returned.
      *
      * Otherwise a `404` status code is returned.
      */
    @JSName("issues/check-user-can-be-assigned-to-issue")
    var `issuesSlashcheck-user-can-be-assigned-to-issue`: ParametersPathAssigneeIssuenumberOwner
    
    /**
      * Create an issue
      * @description Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("issues/create")
    var issuesSlashcreate: Responses410422503
    
    /**
      * Create an issue comment
      * @description
      * You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      * Creating content too quickly using this endpoint may result in secondary rate limiting.
      * See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)"
      * and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)"
      * for details.
      */
    @JSName("issues/create-comment")
    var `issuesSlashcreate-comment`: Responses201403404410
    
    /** Create a label */
    @JSName("issues/create-label")
    var `issuesSlashcreate-label`: Responses201ContentApplicationjsonDefaultDescription
    
    /** Create a milestone */
    @JSName("issues/create-milestone")
    var `issuesSlashcreate-milestone`: Responses201ContentApplicationjsonClosedissues
    
    /**
      * Delete an issue comment
      * @description You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
      */
    @JSName("issues/delete-comment")
    var `issuesSlashdelete-comment`: ParametersPathCommentidOwnerRepoResponses
    
    /** Delete a label */
    @JSName("issues/delete-label")
    var `issuesSlashdelete-label`: ParametersPathNameStringOwnerStringResponses
    
    /** Delete a milestone */
    @JSName("issues/delete-milestone")
    var `issuesSlashdelete-milestone`: ParametersPathMilestonenumberOwnerResponses404Content36
    
    /**
      * Get an issue
      * @description The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
      * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
      * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
      * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
      * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
      * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
      *
      * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/get")
    var issuesSlashget: ParametersPathIssuenumberOwnerRepo
    
    /**
      * Get an issue comment
      * @description You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
      */
    @JSName("issues/get-comment")
    var `issuesSlashget-comment`: Responses200ContentApplicationjsonBodytext
    
    /** Get an issue event */
    @JSName("issues/get-event")
    var `issuesSlashget-event`: ParametersPathEventidOwner
    
    /** Get a label */
    @JSName("issues/get-label")
    var `issuesSlashget-label`: Responses200603
    
    /** Get a milestone */
    @JSName("issues/get-milestone")
    var `issuesSlashget-milestone`: ParametersPathMilestonenumberOwner
    
    /**
      * List issues assigned to the authenticated user
      * @description List issues assigned to the authenticated user across all visible repositories including owned repositories, member
      * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
      * necessarily assigned to you.
      *
      *
      * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/list")
    var issuesSlashlist: ParametersQueryOrgs
    
    /**
      * List assignees
      * @description Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
      */
    @JSName("issues/list-assignees")
    var `issuesSlashlist-assignees`: Responses200Content508HeadersLinkString404Content36
    
    /**
      * List issue comments
      * @description You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
      *
      * Issue comments are ordered by ascending ID.
      */
    @JSName("issues/list-comments")
    var `issuesSlashlist-comments`: ParametersPathIssuenumberOwnerRepoQueryPagePerpageSince
    
    /**
      * List issue comments for a repository
      * @description You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue, but not every issue is a pull request.
      *
      * By default, issue comments are ordered by ascending ID.
      */
    @JSName("issues/list-comments-for-repo")
    var `issuesSlashlist-comments-for-repo`: ParametersQueryPerpageSinceSort
    
    /** List issue events */
    @JSName("issues/list-events")
    var `issuesSlashlist-events`: ParametersPathIssuenumberOwnerRepoQuery473
    
    /** List issue events for a repository */
    @JSName("issues/list-events-for-repo")
    var `issuesSlashlist-events-for-repo`: Responses200Content595
    
    /** List timeline events for an issue */
    @JSName("issues/list-events-for-timeline")
    var `issuesSlashlist-events-for-timeline`: Responses200Content600
    
    /**
      * List user account issues assigned to the authenticated user
      * @description List issues across owned and member repositories assigned to the authenticated user.
      *
      * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/list-for-authenticated-user")
    var `issuesSlashlist-for-authenticated-user`: Parameters657
    
    /**
      * List organization issues assigned to the authenticated user
      * @description List issues in an organization assigned to the authenticated user.
      *
      * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/list-for-org")
    var `issuesSlashlist-for-org`: ParametersQueryDirectionFilter
    
    /**
      * List repository issues
      * @description List issues in a repository. Only open issues will be listed.
      *
      * **Note**: GitHub's REST API considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/list-for-repo")
    var `issuesSlashlist-for-repo`: ParametersQueryMentioned
    
    /** List labels for issues in a milestone */
    @JSName("issues/list-labels-for-milestone")
    var `issuesSlashlist-labels-for-milestone`: ParametersPathMilestonenumberOwnerQuery473
    
    /** List labels for a repository */
    @JSName("issues/list-labels-for-repo")
    var `issuesSlashlist-labels-for-repo`: Responses200Content598404Content36
    
    /** List labels for an issue */
    @JSName("issues/list-labels-on-issue")
    var `issuesSlashlist-labels-on-issue`: Responses200Content598
    
    /** List milestones */
    @JSName("issues/list-milestones")
    var `issuesSlashlist-milestones`: ParametersQueryPerpageSortState
    
    /**
      * Lock an issue
      * @description Users with push access can lock an issue or pull request's conversation.
      *
      * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("issues/lock")
    var issuesSlashlock: Responses404Content36410Content36
    
    /** Remove all labels from an issue */
    @JSName("issues/remove-all-labels")
    var `issuesSlashremove-all-labels`: Responses301Content36404Content36
    
    /**
      * Remove assignees from an issue
      * @description Removes one or more assignees from an issue.
      */
    @JSName("issues/remove-assignees")
    var `issuesSlashremove-assignees`: Responses200596
    
    /**
      * Remove a label from an issue
      * @description Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
      */
    @JSName("issues/remove-label")
    var `issuesSlashremove-label`: ParametersPathIssuenumberNameOwner
    
    /**
      * Set labels for an issue
      * @description Removes any previous labels and sets the new labels for an issue.
      */
    @JSName("issues/set-labels")
    var `issuesSlashset-labels`: Responses301404410422
    
    /**
      * Unlock an issue
      * @description Users with push access can unlock an issue's conversation.
      */
    @JSName("issues/unlock")
    var issuesSlashunlock: ParametersPathIssuenumberOwnerRepoResponses403Content36404Content36
    
    /**
      * Update an issue
      * @description Issue owners and users with push access can edit an issue.
      */
    @JSName("issues/update")
    var issuesSlashupdate: Responses301403404
    
    /**
      * Update an issue comment
      * @description You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.
      */
    @JSName("issues/update-comment")
    var `issuesSlashupdate-comment`: Responses200ContentApplicationjsonBodytext422Content346
    
    /** Update a label */
    @JSName("issues/update-label")
    var `issuesSlashupdate-label`: Responses604
    
    /** Update a milestone */
    @JSName("issues/update-milestone")
    var `issuesSlashupdate-milestone`: Responses609
    
    /** Get a license */
    @JSName("licenses/get")
    var licensesSlashget: Responses200ContentApplicationjsonImplementation
    
    /** Get all commonly used licenses */
    @JSName("licenses/get-all-commonly-used")
    var `licensesSlashget-all-commonly-used`: ParametersQueryFeaturedPage
    
    /**
      * Get the license for a repository
      * @description This method returns the contents of the repository's license file, if one is detected.
      *
      * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
      */
    @JSName("licenses/get-for-repo")
    var `licensesSlashget-for-repo`: Responses200ContentApplicationjsonDownloadurlEncoding
    
    /** Render a Markdown document */
    @JSName("markdown/render")
    var markdownSlashrender: Responses200HeadersContentType
    
    /**
      * Render a Markdown document in raw mode
      * @description You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
      */
    @JSName("markdown/render-raw")
    var `markdownSlashrender-raw`: Responses200HeadersXCommonMarkerVersionString
    
    /**
      * Get GitHub meta information
      * @description Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
      *
      * The values shown in the documentation's response are example values. You must always query the API directly to get the latest values.
      *
      * **Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.
      */
    @JSName("meta/get")
    var metaSlashget: Responses200ContentApplicationjsonApi
    
    /**
      * Get all API versions
      * @description Get all supported GitHub API versions.
      */
    @JSName("meta/get-all-versions")
    var `metaSlashget-all-versions`: `674`
    
    /**
      * Get Octocat
      * @description Get the octocat as ASCII art
      */
    @JSName("meta/get-octocat")
    var `metaSlashget-octocat`: ParametersQueryS
    
    /**
      * Get the Zen of GitHub
      * @description Get a random sentence from the Zen of GitHub
      */
    @JSName("meta/get-zen")
    var `metaSlashget-zen`: Responses200ContentTextplainString
    
    /**
      * GitHub API Root
      * @description Get Hypermedia links to resources accessible in GitHub's REST API
      */
    @JSName("meta/root")
    var metaSlashroot: Responses200ContentApplicationjsonAuthorizationsurl
    
    /**
      * Cancel an import
      * @description Stop an import for a repository.
      *
      * **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
      * on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
      * these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
      */
    @JSName("migrations/cancel-import")
    var `migrationsSlashcancel-import`: Responses503Content36
    
    /**
      * Delete a user migration archive
      * @description Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
      */
    @JSName("migrations/delete-archive-for-authenticated-user")
    var `migrationsSlashdelete-archive-for-authenticated-user`: Parameters662Responses401Content36403Content36404Content36
    
    /**
      * Delete an organization migration archive
      * @description Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
      */
    @JSName("migrations/delete-archive-for-org")
    var `migrationsSlashdelete-archive-for-org`: Parameters519
    
    /**
      * Download an organization migration archive
      * @description Fetches the URL to a migration archive.
      */
    @JSName("migrations/download-archive-for-org")
    var `migrationsSlashdownload-archive-for-org`: Parameters519
    
    /**
      * Download a user migration archive
      * @description Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
      *
      * *   attachments
      * *   bases
      * *   commit\_comments
      * *   issue\_comments
      * *   issue\_events
      * *   issues
      * *   milestones
      * *   organizations
      * *   projects
      * *   protected\_branches
      * *   pull\_request\_reviews
      * *   pull\_requests
      * *   releases
      * *   repositories
      * *   review\_comments
      * *   schema
      * *   users
      *
      * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
      */
    @JSName("migrations/get-archive-for-authenticated-user")
    var `migrationsSlashget-archive-for-authenticated-user`: Parameters662
    
    /**
      * Get commit authors
      * @description Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
      *
      * This endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.
      *
      * **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
      * on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
      * these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
      */
    @JSName("migrations/get-commit-authors")
    var `migrationsSlashget-commit-authors`: ParametersQuery589
    
    /**
      * Get an import status
      * @description View the progress of an import.
      *
      * **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
      * on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
      * these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
      *
      * **Import status**
      *
      * This section includes details about the possible values of the `status` field of the Import Progress response.
      *
      * An import that does not have errors will progress through these steps:
      *
      * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
      * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
      * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
      * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
      * *   `complete` - the import is complete, and the repository is ready on GitHub.
      *
      * If there are problems, you will see one of these in the `status` field:
      *
      * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
      * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
      * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
      * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
      * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
      *
      * **The project_choices field**
      *
      * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
      *
      * **Git LFS related fields**
      *
      * This section includes details about Git LFS related fields that may be present in the Import Progress response.
      *
      * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
      * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
      * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
      * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
      */
    @JSName("migrations/get-import-status")
    var `migrationsSlashget-import-status`: Responses200ContentApplicationjsonAuthorscount
    
    /**
      * Get large files
      * @description List files larger than 100MB found during the import
      *
      * **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
      * on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
      * these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
      */
    @JSName("migrations/get-large-files")
    var `migrationsSlashget-large-files`: Responses200Content591
    
    /**
      * Get a user migration status
      * @description Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
      *
      * *   `pending` - the migration hasn't started yet.
      * *   `exporting` - the migration is in progress.
      * *   `exported` - the migration finished successfully.
      * *   `failed` - the migration failed.
      *
      * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
      */
    @JSName("migrations/get-status-for-authenticated-user")
    var `migrationsSlashget-status-for-authenticated-user`: ParametersPathMigrationidNumber
    
    /**
      * Get an organization migration status
      * @description Fetches the status of a migration.
      *
      * The `state` of a migration can be one of the following values:
      *
      * *   `pending`, which means the migration hasn't started yet.
      * *   `exporting`, which means the migration is in progress.
      * *   `exported`, which means the migration finished successfully.
      * *   `failed`, which means the migration failed.
      */
    @JSName("migrations/get-status-for-org")
    var `migrationsSlashget-status-for-org`: ParametersPathMigrationidOrg
    
    /**
      * List user migrations
      * @description Lists all migrations a user has started.
      */
    @JSName("migrations/list-for-authenticated-user")
    var `migrationsSlashlist-for-authenticated-user`: Responses200Content518304
    
    /**
      * List organization migrations
      * @description Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
      *
      * A list of `repositories` is only returned for export migrations.
      */
    @JSName("migrations/list-for-org")
    var `migrationsSlashlist-for-org`: ParametersQueryExcludePage
    
    /**
      * List repositories for a user migration
      * @description Lists all the repositories for this user migration.
      */
    @JSName("migrations/list-repos-for-authenticated-user")
    var `migrationsSlashlist-repos-for-authenticated-user`: ParametersPathMigrationidNumberQuery473
    
    /**
      * List repositories in an organization migration
      * @description List all the repositories for this organization migration.
      */
    @JSName("migrations/list-repos-for-org")
    var `migrationsSlashlist-repos-for-org`: ParametersPathMigrationidOrgQuery473
    
    /**
      * Map a commit author
      * @description Update an author's identity for the import. Your application can continue updating authors any time before you push
      * new commits to the repository.
      *
      * **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
      * on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
      * these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
      */
    @JSName("migrations/map-commit-author")
    var `migrationsSlashmap-commit-author`: ParametersPathAuthoridOwner
    
    /**
      * Update Git LFS preference
      * @description You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability
      * is powered by [Git LFS](https://git-lfs.com).
      *
      * You can learn more about our LFS feature and working with large files [on our help
      * site](https://docs.github.com/repositories/working-with-files/managing-large-files).
      *
      * **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
      * on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
      * these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
      */
    @JSName("migrations/set-lfs-preference")
    var `migrationsSlashset-lfs-preference`: Responses200ContentApplicationjsonAuthorscount422Content346
    
    /**
      * Start a user migration
      * @description Initiates the generation of a user migration archive.
      */
    @JSName("migrations/start-for-authenticated-user")
    var `migrationsSlashstart-for-authenticated-user`: Responses201ContentApplicationjsonExcludeownerprojects304
    
    /**
      * Start an organization migration
      * @description Initiates the generation of a migration archive.
      */
    @JSName("migrations/start-for-org")
    var `migrationsSlashstart-for-org`: Responses201ContentApplicationjsonExcludeownerprojects
    
    /**
      * Start an import
      * @description Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status `422 Unprocessable Entity` response.
      * **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
      */
    @JSName("migrations/start-import")
    var `migrationsSlashstart-import`: Responses201404422503
    
    /**
      * Unlock a user repository
      * @description Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
      */
    @JSName("migrations/unlock-repo-for-authenticated-user")
    var `migrationsSlashunlock-repo-for-authenticated-user`: ParametersPathReponameString
    
    /**
      * Unlock an organization repository
      * @description Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
      */
    @JSName("migrations/unlock-repo-for-org")
    var `migrationsSlashunlock-repo-for-org`: ParametersPathOrgReponame
    
    /**
      * Update an import
      * @description An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
      * request. If no parameters are provided, the import will be restarted.
      *
      * Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
      * have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
      * You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
      *
      * **Warning:** Support for importing Mercurial, Subversion and Team Foundation Version Control repositories will end
      * on October 17, 2023. For more details, see [changelog](https://gh.io/github-importer-non-git-eol). In the coming weeks, we will update
      * these docs to reflect relevant changes to the API and will contact all integrators using the "Source imports" API.
      */
    @JSName("migrations/update-import")
    var `migrationsSlashupdate-import`: Responses200ContentApplicationjsonAuthorscount503Content36
    
    /**
      * Get the customization template for an OIDC subject claim for an organization
      * @description Gets the customization template for an OpenID Connect (OIDC) subject claim.
      * You must authenticate using an access token with the `read:org` scope to use this endpoint.
      * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
      */
    @JSName("oidc/get-oidc-custom-sub-template-for-org")
    var `oidcSlashget-oidc-custom-sub-template-for-org`: Responses200ContentApplicationjsonIncludeclaimkeysArray
    
    /**
      * Set the customization template for an OIDC subject claim for an organization
      * @description Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
      * You must authenticate using an access token with the `write:org` scope to use this endpoint.
      * GitHub Apps must have the `admin:org` permission to use this endpoint.
      */
    @JSName("oidc/update-oidc-custom-sub-template-for-org")
    var `oidcSlashupdate-oidc-custom-sub-template-for-org`: RequestBodyContentApplicationjsonIncludeclaimkeysArray
    
    /**
      * Add a security manager team
      * @description Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."
      *
      * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `write:org` scope.
      *
      * GitHub Apps must have the `administration` organization read-write permission to use this endpoint.
      */
    @JSName("orgs/add-security-manager-team")
    var `orgsSlashadd-security-manager-team`: ParametersPathTeamslugString
    
    /** Block a user from an organization */
    @JSName("orgs/block-user")
    var `orgsSlashblock-user`: Responses476
    
    /**
      * Cancel an organization invitation
      * @description Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      */
    @JSName("orgs/cancel-invitation")
    var `orgsSlashcancel-invitation`: ParametersPathInvitationidOrg
    
    /** Check if a user is blocked by an organization */
    @JSName("orgs/check-blocked-user")
    var `orgsSlashcheck-blocked-user`: ParametersPathUsernameString
    
    /**
      * Check organization membership for a user
      * @description Check if a user is, publicly or privately, a member of the organization.
      */
    @JSName("orgs/check-membership-for-user")
    var `orgsSlashcheck-membership-for-user`: ParametersPathUsernameStringResponses
    
    /** Check public organization membership for a user */
    @JSName("orgs/check-public-membership-for-user")
    var `orgsSlashcheck-public-membership-for-user`: ParametersPathUsernameStringResponses
    
    /**
      * Convert an organization member to outside collaborator
      * @description When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
      */
    @JSName("orgs/convert-member-to-outside-collaborator")
    var `orgsSlashconvert-member-to-outside-collaborator`: Responses202ContentApplicationjsonRecord404Content36
    
    /**
      * Create an organization invitation
      * @description Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("orgs/create-invitation")
    var `orgsSlashcreate-invitation`: Responses201ContentApplicationjsonInvitationteamsurl
    
    /**
      * Create an organization webhook
      * @description Here's how you can create a hook that posts payloads in JSON format:
      */
    @JSName("orgs/create-webhook")
    var `orgsSlashcreate-webhook`: RequestBodyContentApplicationjsonConfigEvents
    
    /**
      * Delete an organization
      * @description Deletes an organization and all its repositories.
      *
      * The organization login will be unavailable for 90 days after deletion.
      *
      * Please review the Terms of Service regarding account deletion before using this endpoint:
      *
      * https://docs.github.com/site-policy/github-terms/github-terms-of-service
      */
    @JSName("orgs/delete")
    var orgsSlashdelete: Responses202ContentApplicationjsonRecord
    
    /** Delete an organization webhook */
    @JSName("orgs/delete-webhook")
    var `orgsSlashdelete-webhook`: ParametersPathHookidOrgResponses404Content36
    
    /**
      * Enable or disable a security feature for an organization
      * @description Enables or disables the specified security feature for all eligible repositories in an organization.
      *
      * To use this endpoint, you must be an organization owner or be member of a team with the security manager role.
      * A token with the 'write:org' scope is also required.
      *
      * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
      *
      * For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      */
    @JSName("orgs/enable-or-disable-security-product-on-all-org-repos")
    var `orgsSlashenable-or-disable-security-product-on-all-org-repos`: ParametersPathSecurityproduct
    
    /**
      * Get an organization
      * @description To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
      *
      * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
      */
    @JSName("orgs/get")
    var orgsSlashget: Responses200ContentApplicationjsonBillingemail
    
    /** Get an organization membership for the authenticated user */
    @JSName("orgs/get-membership-for-authenticated-user")
    var `orgsSlashget-membership-for-authenticated-user`: Parameters496Responses200ContentApplicationjsonOrganizationOrganizationurl
    
    /**
      * Get organization membership for a user
      * @description In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
      */
    @JSName("orgs/get-membership-for-user")
    var `orgsSlashget-membership-for-user`: Responses200ContentApplicationjsonOrganizationOrganizationurl
    
    /**
      * Get an organization webhook
      * @description Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
      */
    @JSName("orgs/get-webhook")
    var `orgsSlashget-webhook`: ParametersPathHookidOrg
    
    /**
      * Get a webhook configuration for an organization
      * @description Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
      *
      * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
      */
    @JSName("orgs/get-webhook-config-for-org")
    var `orgsSlashget-webhook-config-for-org`: ParametersPathHookidOrgResponses200ContentApplicationjsonContenttype
    
    /**
      * Get a webhook delivery for an organization webhook
      * @description Returns a delivery for a webhook configured in an organization.
      */
    @JSName("orgs/get-webhook-delivery")
    var `orgsSlashget-webhook-delivery`: ParametersPathDeliveryidHookidOrg
    
    /**
      * List organizations
      * @description Lists all organizations, in the order that they were created on GitHub.
      *
      * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
      */
    @JSName("orgs/list")
    var orgsSlashlist: ParametersQuery493
    
    /**
      * List app installations for an organization
      * @description Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
      */
    @JSName("orgs/list-app-installations")
    var `orgsSlashlist-app-installations`: Responses200ContentApplicationjsonInstallationsTotalcount
    
    /**
      * List users blocked by an organization
      * @description List the users blocked by an organization.
      */
    @JSName("orgs/list-blocked-users")
    var `orgsSlashlist-blocked-users`: Responses200Content508
    
    /**
      * List failed organization invitations
      * @description The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
      */
    @JSName("orgs/list-failed-invitations")
    var `orgsSlashlist-failed-invitations`: Responses200Content511
    
    /**
      * List organizations for the authenticated user
      * @description List organizations for the authenticated user.
      *
      * **OAuth scope requirements**
      *
      * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
      */
    @JSName("orgs/list-for-authenticated-user")
    var `orgsSlashlist-for-authenticated-user`: Responses200Content494HeadersLinkString
    
    /**
      * List organizations for a user
      * @description List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
      *
      * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
      */
    @JSName("orgs/list-for-user")
    var `orgsSlashlist-for-user`: Responses670
    
    /**
      * List organization invitation teams
      * @description List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
      */
    @JSName("orgs/list-invitation-teams")
    var `orgsSlashlist-invitation-teams`: ParametersPathInvitationidOrgQuery473
    
    /**
      * List organization members
      * @description List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
      */
    @JSName("orgs/list-members")
    var `orgsSlashlist-members`: ParametersQueryPagePerpageRole
    
    /** List organization memberships for the authenticated user */
    @JSName("orgs/list-memberships-for-authenticated-user")
    var `orgsSlashlist-memberships-for-authenticated-user`: ParametersQuery660
    
    /**
      * List outside collaborators for an organization
      * @description List all users who are outside collaborators of an organization.
      */
    @JSName("orgs/list-outside-collaborators")
    var `orgsSlashlist-outside-collaborators`: ParametersQuery520
    
    /**
      * List repositories a fine-grained personal access token has access to
      * @description Lists the repositories a fine-grained personal access token has access to. Only GitHub Apps can call this API,
      * using the `organization_personal_access_tokens: read` permission.
      *
      * **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
      */
    @JSName("orgs/list-pat-grant-repositories")
    var `orgsSlashlist-pat-grant-repositories`: ParametersPathPatidNumberQuery473
    
    /**
      * List repositories requested to be accessed by a fine-grained personal access token
      * @description Lists the repositories a fine-grained personal access token request is requesting access to. Only GitHub Apps can call this API,
      * using the `organization_personal_access_token_requests: read` permission.
      *
      * **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
      */
    @JSName("orgs/list-pat-grant-request-repositories")
    var `orgsSlashlist-pat-grant-request-repositories`: ParametersPathOrgPatrequestidQuery473
    
    /**
      * List requests to access organization resources with fine-grained personal access tokens
      * @description Lists requests from organization members to access organization resources with a fine-grained personal access token. Only GitHub Apps can call this API,
      * using the `organization_personal_access_token_requests: read` permission.
      *
      * **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
      */
    @JSName("orgs/list-pat-grant-requests")
    var `orgsSlashlist-pat-grant-requests`: ParametersPathOrgString
    
    /**
      * List fine-grained personal access tokens with access to organization resources
      * @description Lists approved fine-grained personal access tokens owned by organization members that can access organization resources. Only GitHub Apps can call this API,
      * using the `organization_personal_access_tokens: read` permission.
      *
      * **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
      */
    @JSName("orgs/list-pat-grants")
    var `orgsSlashlist-pat-grants`: Responses403404422500
    
    /**
      * List pending organization invitations
      * @description The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
      */
    @JSName("orgs/list-pending-invitations")
    var `orgsSlashlist-pending-invitations`: ParametersQueryInvitationsourcePage
    
    /**
      * List public organization members
      * @description Members of an organization can choose to have their membership publicized or not.
      */
    @JSName("orgs/list-public-members")
    var `orgsSlashlist-public-members`: Responses521
    
    /**
      * List security manager teams
      * @description Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      *
      * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `read:org` scope.
      *
      * GitHub Apps must have the `administration` organization read permission to use this endpoint.
      */
    @JSName("orgs/list-security-manager-teams")
    var `orgsSlashlist-security-manager-teams`: Responses200Content528
    
    /**
      * List deliveries for an organization webhook
      * @description Returns a list of webhook deliveries for a webhook configured in an organization.
      */
    @JSName("orgs/list-webhook-deliveries")
    var `orgsSlashlist-webhook-deliveries`: ParametersPathHookidOrgQueryRedelivery
    
    /** List organization webhooks */
    @JSName("orgs/list-webhooks")
    var `orgsSlashlist-webhooks`: Responses200Content512
    
    /**
      * Ping an organization webhook
      * @description This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
      */
    @JSName("orgs/ping-webhook")
    var `orgsSlashping-webhook`: ParametersPathHookidOrgResponses404Content36
    
    /**
      * Redeliver a delivery for an organization webhook
      * @description Redeliver a delivery for a webhook configured in an organization.
      */
    @JSName("orgs/redeliver-webhook-delivery")
    var `orgsSlashredeliver-webhook-delivery`: ParametersPathDeliveryidHookidOrgResponses202400422
    
    /**
      * Remove an organization member
      * @description Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
      */
    @JSName("orgs/remove-member")
    var `orgsSlashremove-member`: Responses517
    
    /**
      * Remove organization membership for a user
      * @description In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
      *
      * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
      */
    @JSName("orgs/remove-membership-for-user")
    var `orgsSlashremove-membership-for-user`: Responses403Content36404Content36
    
    /**
      * Remove outside collaborator from an organization
      * @description Removing a user from this list will remove them from all the organization's repositories.
      */
    @JSName("orgs/remove-outside-collaborator")
    var `orgsSlashremove-outside-collaborator`: ParametersPathUsernameStringResponses422ContentApplicationjsonDocumentationurl
    
    /** Remove public organization membership for the authenticated user */
    @JSName("orgs/remove-public-membership-for-authenticated-user")
    var `orgsSlashremove-public-membership-for-authenticated-user`: ParametersPathUsernameStringResponses
    
    /**
      * Remove a security manager team
      * @description Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."
      *
      * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `admin:org` scope.
      *
      * GitHub Apps must have the `administration` organization read-write permission to use this endpoint.
      */
    @JSName("orgs/remove-security-manager-team")
    var `orgsSlashremove-security-manager-team`: ParametersPathTeamslugString
    
    /**
      * Review a request to access organization resources with a fine-grained personal access token
      * @description Approves or denies a pending request to access organization resources via a fine-grained personal access token. Only GitHub Apps can call this API,
      * using the `organization_personal_access_token_requests: write` permission.
      *
      * **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
      */
    @JSName("orgs/review-pat-grant-request")
    var `orgsSlashreview-pat-grant-request`: ParametersPathOrgPatrequestid
    
    /**
      * Review requests to access organization resources with fine-grained personal access tokens
      * @description Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token. Only GitHub Apps can call this API,
      * using the `organization_personal_access_token_requests: write` permission.
      *
      * **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
      */
    @JSName("orgs/review-pat-grant-requests-in-bulk")
    var `orgsSlashreview-pat-grant-requests-in-bulk`: Parameters496
    
    /**
      * Set organization membership for a user
      * @description Only authenticated organization owners can add a member to the organization or update the member's role.
      *
      * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
      *
      * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
      *
      * **Rate limits**
      *
      * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
      */
    @JSName("orgs/set-membership-for-user")
    var `orgsSlashset-membership-for-user`: Responses200ContentApplicationjsonOrganizationOrganizationurl403Content36
    
    /**
      * Set public organization membership for the authenticated user
      * @description The user can publicize their own membership. (A user cannot publicize the membership for another user.)
      *
      * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("orgs/set-public-membership-for-authenticated-user")
    var `orgsSlashset-public-membership-for-authenticated-user`: Responses517
    
    /** Unblock a user from an organization */
    @JSName("orgs/unblock-user")
    var `orgsSlashunblock-user`: ParametersPathUsernameStringResponses
    
    /**
      * Update an organization
      * @description **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
      *
      * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
      */
    @JSName("orgs/update")
    var orgsSlashupdate: Responses200409
    
    /** Update an organization membership for the authenticated user */
    @JSName("orgs/update-membership-for-authenticated-user")
    var `orgsSlashupdate-membership-for-authenticated-user`: Responses200ContentApplicationjsonOrganizationOrganizationurl403Content36404Content36
    
    /**
      * Update the access a fine-grained personal access token has to organization resources
      * @description Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token's existing access. Limited to revoking a token's existing access. Only GitHub Apps can call this API,
      * using the `organization_personal_access_tokens: write` permission.
      *
      * **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
      */
    @JSName("orgs/update-pat-access")
    var `orgsSlashupdate-pat-access`: ParametersPathPatidNumber
    
    /**
      * Update the access to organization resources via fine-grained personal access tokens
      * @description Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token's existing access. Only GitHub Apps can call this API,
      * using the `organization_personal_access_tokens: write` permission.
      *
      * **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
      */
    @JSName("orgs/update-pat-accesses")
    var `orgsSlashupdate-pat-accesses`: Responses202403404422
    
    /**
      * Update an organization webhook
      * @description Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
      */
    @JSName("orgs/update-webhook")
    var `orgsSlashupdate-webhook`: Responses200513404Content36
    
    /**
      * Update a webhook configuration for an organization
      * @description Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
      *
      * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
      */
    @JSName("orgs/update-webhook-config-for-org")
    var `orgsSlashupdate-webhook-config-for-org`: ParametersPathHookidOrgRequestBody
    
    /**
      * Delete a package for the authenticated user
      * @description Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes.
      * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/delete-package-for-authenticated-user")
    var `packagesSlashdelete-package-for-authenticated-user`: ParametersPathPackagenameStringResponses401Content36403Content36
    
    /**
      * Delete a package for an organization
      * @description Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
      * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
      */
    @JSName("packages/delete-package-for-org")
    var `packagesSlashdelete-package-for-org`: Responses401Content36403Content36
    
    /**
      * Delete a package for a user
      * @description Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
      * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
      */
    @JSName("packages/delete-package-for-user")
    var `packagesSlashdelete-package-for-user`: ParametersPathPackagenamePackagetypeUsernameResponses401Content36403Content36
    
    /**
      * Delete a package version for the authenticated user
      * @description Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes.
      * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/delete-package-version-for-authenticated-user")
    var `packagesSlashdelete-package-version-for-authenticated-user`: ParametersPathPackageversionidNumberResponses401Content36403Content36
    
    /**
      * Delete package version for an organization
      * @description Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
      * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
      */
    @JSName("packages/delete-package-version-for-org")
    var `packagesSlashdelete-package-version-for-org`: ParametersPathOrgPackagenamePackagetypeResponses401Content36403Content36
    
    /**
      * Delete package version for a user
      * @description Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:
      * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
      */
    @JSName("packages/delete-package-version-for-user")
    var `packagesSlashdelete-package-version-for-user`: ParametersPathPackagenamePackagetypePackageversionidUsername
    
    /**
      * List package versions for a package owned by the authenticated user
      * @description Lists package versions for a package owned by the authenticated user.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/get-all-package-versions-for-package-owned-by-authenticated-user")
    var `packagesSlashget-all-package-versions-for-package-owned-by-authenticated-user`: ParametersPathPackagenameStringQuery522
    
    /**
      * List package versions for a package owned by an organization
      * @description Lists package versions for a package owned by an organization.
      *
      * If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/get-all-package-versions-for-package-owned-by-org")
    var `packagesSlashget-all-package-versions-for-package-owned-by-org`: ParametersQuery522
    
    /**
      * List package versions for a package owned by a user
      * @description Lists package versions for a public package owned by a specified user.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/get-all-package-versions-for-package-owned-by-user")
    var `packagesSlashget-all-package-versions-for-package-owned-by-user`: Responses200Content523
    
    /**
      * Get a package for the authenticated user
      * @description Gets a specific package for a package owned by the authenticated user.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/get-package-for-authenticated-user")
    var `packagesSlashget-package-for-authenticated-user`: ParametersPathPackagenameString
    
    /**
      * Get a package for an organization
      * @description Gets a specific package in an organization.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/get-package-for-organization")
    var `packagesSlashget-package-for-organization`: ParametersPathOrgPackagename
    
    /**
      * Get a package for a user
      * @description Gets a specific package metadata for a public package owned by a user.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/get-package-for-user")
    var `packagesSlashget-package-for-user`: ParametersPathPackagenamePackagetypeUsername
    
    /**
      * Get a package version for the authenticated user
      * @description Gets a specific package version for a package owned by the authenticated user.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/get-package-version-for-authenticated-user")
    var `packagesSlashget-package-version-for-authenticated-user`: ParametersPathPackageversionidNumber
    
    /**
      * Get a package version for an organization
      * @description Gets a specific package version in an organization.
      *
      * You must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/get-package-version-for-organization")
    var `packagesSlashget-package-version-for-organization`: ParametersPathOrgPackagenamePackagetype
    
    /**
      * Get a package version for a user
      * @description Gets a specific package version for a public package owned by a specified user.
      *
      * At this time, to use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/get-package-version-for-user")
    var `packagesSlashget-package-version-for-user`: ParametersPathPackagetypePackageversionidUsername
    
    /**
      * Get list of conflicting packages during Docker migration for authenticated-user
      * @description Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict during a Docker migration.
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope.
      */
    @JSName("packages/list-docker-migration-conflicting-packages-for-authenticated-user")
    var `packagesSlashlist-docker-migration-conflicting-packages-for-authenticated-user`: Responses653
    
    /**
      * Get list of conflicting packages during Docker migration for organization
      * @description Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope.
      */
    @JSName("packages/list-docker-migration-conflicting-packages-for-organization")
    var `packagesSlashlist-docker-migration-conflicting-packages-for-organization`: Responses200Content510
    
    /**
      * Get list of conflicting packages during Docker migration for user
      * @description Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope.
      */
    @JSName("packages/list-docker-migration-conflicting-packages-for-user")
    var `packagesSlashlist-docker-migration-conflicting-packages-for-user`: ParametersPath649Responses200Content510
    
    /**
      * List packages for the authenticated user's namespace
      * @description Lists packages owned by the authenticated user within the user's namespace.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/list-packages-for-authenticated-user")
    var `packagesSlashlist-packages-for-authenticated-user`: ParametersQueryPackagetypePagePerpage
    
    /**
      * List packages for an organization
      * @description Lists packages in an organization readable by the user.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/list-packages-for-organization")
    var `packagesSlashlist-packages-for-organization`: ParametersQueryPerpageVisibility
    
    /**
      * List packages for a user
      * @description Lists all packages in a user's namespace for which the requesting user has access.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/list-packages-for-user")
    var `packagesSlashlist-packages-for-user`: ParametersPath649QueryPackagetypePagePerpage
    
    /**
      * Restore a package for the authenticated user
      * @description Restores a package owned by the authenticated user.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/restore-package-for-authenticated-user")
    var `packagesSlashrestore-package-for-authenticated-user`: ParametersPathPackagenameStringQueryToken
    
    /**
      * Restore a package for an organization
      * @description Restores an entire package in an organization.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
      * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
      */
    @JSName("packages/restore-package-for-org")
    var `packagesSlashrestore-package-for-org`: ParametersPathOrgPackagenameQueryToken
    
    /**
      * Restore a package for a user
      * @description Restores an entire package for a user.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
      * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
      */
    @JSName("packages/restore-package-for-user")
    var `packagesSlashrestore-package-for-user`: ParametersPathPackagenamePackagetypeUsernameQueryToken
    
    /**
      * Restore a package version for the authenticated user
      * @description Restores a package version owned by the authenticated user.
      *
      * You can restore a deleted package version under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      */
    @JSName("packages/restore-package-version-for-authenticated-user")
    var `packagesSlashrestore-package-version-for-authenticated-user`: ParametersPathPackageversionidNumberResponses401Content36403Content36
    
    /**
      * Restore package version for an organization
      * @description Restores a specific package version in an organization.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
      * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
      */
    @JSName("packages/restore-package-version-for-org")
    var `packagesSlashrestore-package-version-for-org`: ParametersPathOrgPackagenamePackagetypeResponses401Content36403Content36
    
    /**
      * Restore package version for a user
      * @description Restores a specific package version for a user.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:
      * - If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
      * - If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
      */
    @JSName("packages/restore-package-version-for-user")
    var `packagesSlashrestore-package-version-for-user`: ParametersPathPackagenamePackagetypePackageversionidUsername
    
    /**
      * Add project collaborator
      * @description Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
      */
    @JSName("projects/add-collaborator")
    var `projectsSlashadd-collaborator`: ParametersPathProjectidNumberUsernameString
    
    /** Create a project card */
    @JSName("projects/create-card")
    var `projectsSlashcreate-card`: Responses304401403422503
    
    /** Create a project column */
    @JSName("projects/create-column")
    var `projectsSlashcreate-column`: Responses201ContentApplicationjsonCardsurl
    
    /**
      * Create a user project
      * @description Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
      */
    @JSName("projects/create-for-authenticated-user")
    var `projectsSlashcreate-for-authenticated-user`: Responses201ContentApplicationjsonBodyColumnsurl
    
    /**
      * Create an organization project
      * @description Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
      */
    @JSName("projects/create-for-org")
    var `projectsSlashcreate-for-org`: Responses201401403404
    
    /**
      * Create a repository project
      * @description Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
      */
    @JSName("projects/create-for-repo")
    var `projectsSlashcreate-for-repo`: Parameters540RequestBodyContentApplicationjsonBodyName
    
    /**
      * Delete a project
      * @description Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
      */
    @JSName("projects/delete")
    var projectsSlashdelete: Responses304401403404410
    
    /** Delete a project card */
    @JSName("projects/delete-card")
    var `projectsSlashdelete-card`: Responses401Content36403ContentApplicationjsonErrors
    
    /** Delete a project column */
    @JSName("projects/delete-column")
    var `projectsSlashdelete-column`: ParametersPathColumnidNumberResponses304401Content36
    
    /**
      * Get a project
      * @description Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
      */
    @JSName("projects/get")
    var projectsSlashget: ParametersPathProjectidNumber
    
    /** Get a project card */
    @JSName("projects/get-card")
    var `projectsSlashget-card`: ParametersPathCardidNumber
    
    /** Get a project column */
    @JSName("projects/get-column")
    var `projectsSlashget-column`: ParametersPathColumnidNumber
    
    /**
      * Get project permission for a user
      * @description Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
      */
    @JSName("projects/get-permission-for-user")
    var `projectsSlashget-permission-for-user`: Responses200ContentApplicationjsonPermissionString
    
    /** List project cards */
    @JSName("projects/list-cards")
    var `projectsSlashlist-cards`: ParametersQueryArchivedstatePage
    
    /**
      * List project collaborators
      * @description Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
      */
    @JSName("projects/list-collaborators")
    var `projectsSlashlist-collaborators`: ParametersQueryAffiliationPagePerpage
    
    /** List project columns */
    @JSName("projects/list-columns")
    var `projectsSlashlist-columns`: ParametersPathProjectidNumberQuery473
    
    /**
      * List organization projects
      * @description Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
      */
    @JSName("projects/list-for-org")
    var `projectsSlashlist-for-org`: ParametersQuery524
    
    /**
      * List repository projects
      * @description Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
      */
    @JSName("projects/list-for-repo")
    var `projectsSlashlist-for-repo`: ParametersPathOwnerStringQuery524
    
    /** List user projects */
    @JSName("projects/list-for-user")
    var `projectsSlashlist-for-user`: ParametersPath649Query524
    
    /** Move a project card */
    @JSName("projects/move-card")
    var `projectsSlashmove-card`: Responses401403422503
    
    /** Move a project column */
    @JSName("projects/move-column")
    var `projectsSlashmove-column`: Responses201ContentApplicationjsonRecord304
    
    /**
      * Remove user as a collaborator
      * @description Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
      */
    @JSName("projects/remove-collaborator")
    var `projectsSlashremove-collaborator`: Responses304401Content36403Content36
    
    /**
      * Update a project
      * @description Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
      */
    @JSName("projects/update")
    var projectsSlashupdate: Responses401403410
    
    /** Update an existing project card */
    @JSName("projects/update-card")
    var `projectsSlashupdate-card`: Responses200ContentApplicationjsonArchivedColumnname304
    
    /** Update an existing project column */
    @JSName("projects/update-column")
    var `projectsSlashupdate-column`: Responses200ContentApplicationjsonCardsurl304
    
    /** Check if a pull request has been merged */
    @JSName("pulls/check-if-merged")
    var `pullsSlashcheck-if-merged`: ParametersPathPullnumberRepoResponses
    
    /**
      * Create a pull request
      * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
      */
    @JSName("pulls/create")
    var pullsSlashcreate: Responses201ContentApplicationjsonLocked
    
    /**
      * Create a reply for a review comment
      * @description Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("pulls/create-reply-for-review-comment")
    var `pullsSlashcreate-reply-for-review-comment`: ParametersPathCommentidOwnerPullnumber
    
    /**
      * Create a review for a pull request
      * @description This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      *
      * Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request)."
      *
      * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
      *
      * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
      */
    @JSName("pulls/create-review")
    var `pullsSlashcreate-review`: Responses200ContentApplicationjsonBodytextCommitid
    
    /**
      * Create a review comment for a pull request
      * @description
      * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
      *
      * The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
      *
      * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("pulls/create-review-comment")
    var `pullsSlashcreate-review-comment`: Responses201ContentApplicationjsonInreplytoidHeadersLocation
    
    /** Delete a pending review for a pull request */
    @JSName("pulls/delete-pending-review")
    var `pullsSlashdelete-pending-review`: Responses200ContentApplicationjsonBodytextCommitid404Content36422Content471
    
    /**
      * Delete a review comment for a pull request
      * @description Deletes a review comment.
      */
    @JSName("pulls/delete-review-comment")
    var `pullsSlashdelete-review-comment`: ParametersPathCommentidOwnerRepoResponses404Content36
    
    /**
      * Dismiss a review for a pull request
      * @description **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
      */
    @JSName("pulls/dismiss-review")
    var `pullsSlashdismiss-review`: ParametersPathRepoReviewidRequestBodyContentApplicationjsonEvent
    
    /**
      * Get a pull request
      * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists details of a pull request by providing its number.
      *
      * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
      *
      * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
      *
      * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
      *
      * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
      * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
      * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
      *
      * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
      */
    @JSName("pulls/get")
    var pullsSlashget: ParametersPathPullnumberRepo
    
    /** Get a review for a pull request */
    @JSName("pulls/get-review")
    var `pullsSlashget-review`: ParametersPathRepoReviewid
    
    /**
      * Get a review comment for a pull request
      * @description Provides details for a review comment.
      */
    @JSName("pulls/get-review-comment")
    var `pullsSlashget-review-comment`: Responses200ContentApplicationjsonInreplytoid
    
    /**
      * List pull requests
      * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("pulls/list")
    var pullsSlashlist: ParametersQueryBaseDirection
    
    /**
      * List comments for a pull request review
      * @description List comments for a specific pull request review.
      */
    @JSName("pulls/list-comments-for-review")
    var `pullsSlashlist-comments-for-review`: ParametersPathRepoReviewidQuery473
    
    /**
      * List commits on a pull request
      * @description Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
      */
    @JSName("pulls/list-commits")
    var `pullsSlashlist-commits`: ParametersPathPullnumberRepoQuery473
    
    /**
      * List pull requests files
      * @description **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
      */
    @JSName("pulls/list-files")
    var `pullsSlashlist-files`: Responses200422500503
    
    /**
      * Get all requested reviewers for a pull request
      * @description Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
      */
    @JSName("pulls/list-requested-reviewers")
    var `pullsSlashlist-requested-reviewers`: Responses200ContentApplicationjsonTeamsArrayUsersArray
    
    /**
      * List review comments on a pull request
      * @description Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
      */
    @JSName("pulls/list-review-comments")
    var `pullsSlashlist-review-comments`: ParametersPathPullnumberRepoQueryPerpageSinceSort
    
    /**
      * List review comments in a repository
      * @description Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
      */
    @JSName("pulls/list-review-comments-for-repo")
    var `pullsSlashlist-review-comments-for-repo`: ParametersQueryDirectionPagePerpageSince
    
    /**
      * List reviews for a pull request
      * @description The list of reviews returns in chronological order.
      */
    @JSName("pulls/list-reviews")
    var `pullsSlashlist-reviews`: Responses200Content617
    
    /**
      * Merge a pull request
      * @description This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("pulls/merge")
    var pullsSlashmerge: Responses404405
    
    /** Remove requested reviewers from a pull request */
    @JSName("pulls/remove-requested-reviewers")
    var `pullsSlashremove-requested-reviewers`: Responses200ContentApplicationjsonCreatedatDiffurl
    
    /**
      * Request reviewers for a pull request
      * @description This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("pulls/request-reviewers")
    var `pullsSlashrequest-reviewers`: Responses201ContentApplicationjsonCreatedatDiffurl
    
    /**
      * Submit a review for a pull request
      * @description Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request)."
      */
    @JSName("pulls/submit-review")
    var `pullsSlashsubmit-review`: Responses200ContentApplicationjsonBodytextCommitid403Content36
    
    /**
      * Update a pull request
      * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
      */
    @JSName("pulls/update")
    var pullsSlashupdate: Responses200615
    
    /**
      * Update a pull request branch
      * @description Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
      */
    @JSName("pulls/update-branch")
    var `pullsSlashupdate-branch`: Responses202ContentApplicationjsonUrl403Content36
    
    /**
      * Update a review for a pull request
      * @description Update the review summary comment with new text.
      */
    @JSName("pulls/update-review")
    var `pullsSlashupdate-review`: Responses200ContentApplicationjsonBodytextCommitid422Content471
    
    /**
      * Update a review comment for a pull request
      * @description Enables you to edit a review comment.
      */
    @JSName("pulls/update-review-comment")
    var `pullsSlashupdate-review-comment`: Responses614
    
    /**
      * Get rate limit status for the authenticated user
      * @description **Note:** Accessing this endpoint does not count against your REST API rate limit.
      *
      * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
      */
    @JSName("rate-limit/get")
    var `rate-limitSlashget`: Responses200ContentApplicationjsonResources
    
    /**
      * Create reaction for a commit comment
      * @description Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
      */
    @JSName("reactions/create-for-commit-comment")
    var `reactionsSlashcreate-for-commit-comment`: Responses201ContentApplicationjsonNodeidUser
    
    /**
      * Create reaction for an issue
      * @description Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
      */
    @JSName("reactions/create-for-issue")
    var `reactionsSlashcreate-for-issue`: ParametersPathIssuenumberOwnerRepoRequestBodyContentApplicationjson119
    
    /**
      * Create reaction for an issue comment
      * @description Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
      */
    @JSName("reactions/create-for-issue-comment")
    var `reactionsSlashcreate-for-issue-comment`: Responses201ContentApplicationjsonNodeidUser
    
    /**
      * Create reaction for a pull request review comment
      * @description Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
      */
    @JSName("reactions/create-for-pull-request-review-comment")
    var `reactionsSlashcreate-for-pull-request-review-comment`: Responses201ContentApplicationjsonNodeidUser
    
    /**
      * Create reaction for a release
      * @description Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
      */
    @JSName("reactions/create-for-release")
    var `reactionsSlashcreate-for-release`: ParametersPathOwnerReleaseidRequestBodyContentApplicationjson335
    
    /**
      * Create reaction for a team discussion comment
      * @description Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
      */
    @JSName("reactions/create-for-team-discussion-comment-in-org")
    var `reactionsSlashcreate-for-team-discussion-comment-in-org`: Responses200ContentApplicationjsonNodeidUser
    
    /**
      * Create reaction for a team discussion comment (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
      *
      * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
      */
    @JSName("reactions/create-for-team-discussion-comment-legacy")
    var `reactionsSlashcreate-for-team-discussion-comment-legacy`: Responses647
    
    /**
      * Create reaction for a team discussion
      * @description Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
      */
    @JSName("reactions/create-for-team-discussion-in-org")
    var `reactionsSlashcreate-for-team-discussion-in-org`: ParametersPathDiscussionnumberOrgTeamslugRequestBodyContentApplicationjson119
    
    /**
      * Create reaction for a team discussion (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
      *
      * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
      */
    @JSName("reactions/create-for-team-discussion-legacy")
    var `reactionsSlashcreate-for-team-discussion-legacy`: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjson119
    
    /**
      * Delete a commit comment reaction
      * @description **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
      *
      * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
      */
    @JSName("reactions/delete-for-commit-comment")
    var `reactionsSlashdelete-for-commit-comment`: ParametersPathReactionidRepo
    
    /**
      * Delete an issue reaction
      * @description **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
      *
      * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
      */
    @JSName("reactions/delete-for-issue")
    var `reactionsSlashdelete-for-issue`: ParametersPathIssuenumberOwnerReactionid
    
    /**
      * Delete an issue comment reaction
      * @description **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
      *
      * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
      */
    @JSName("reactions/delete-for-issue-comment")
    var `reactionsSlashdelete-for-issue-comment`: ParametersPathReactionidRepo
    
    /**
      * Delete a pull request comment reaction
      * @description **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
      *
      * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
      */
    @JSName("reactions/delete-for-pull-request-comment")
    var `reactionsSlashdelete-for-pull-request-comment`: ParametersPathReactionidRepo
    
    /**
      * Delete a release reaction
      * @description **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
      *
      * Delete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).
      */
    @JSName("reactions/delete-for-release")
    var `reactionsSlashdelete-for-release`: ParametersPathReleaseidRepo
    
    /**
      * Delete team discussion reaction
      * @description **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
      *
      * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("reactions/delete-for-team-discussion")
    var `reactionsSlashdelete-for-team-discussion`: ParametersPathReactionidTeamslug
    
    /**
      * Delete team discussion comment reaction
      * @description **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
      *
      * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("reactions/delete-for-team-discussion-comment")
    var `reactionsSlashdelete-for-team-discussion-comment`: ParametersPathOrgReactionid
    
    /**
      * List reactions for a commit comment
      * @description List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
      */
    @JSName("reactions/list-for-commit-comment")
    var `reactionsSlashlist-for-commit-comment`: ParametersPathCommentidOwnerRepoQuery532
    
    /**
      * List reactions for an issue
      * @description List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
      */
    @JSName("reactions/list-for-issue")
    var `reactionsSlashlist-for-issue`: ParametersPathIssuenumberOwnerRepoQuery532
    
    /**
      * List reactions for an issue comment
      * @description List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
      */
    @JSName("reactions/list-for-issue-comment")
    var `reactionsSlashlist-for-issue-comment`: ParametersPathCommentidOwnerRepoQuery532
    
    /**
      * List reactions for a pull request review comment
      * @description List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
      */
    @JSName("reactions/list-for-pull-request-review-comment")
    var `reactionsSlashlist-for-pull-request-review-comment`: ParametersPathCommentidOwnerRepoQuery532
    
    /**
      * List reactions for a release
      * @description List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).
      */
    @JSName("reactions/list-for-release")
    var `reactionsSlashlist-for-release`: ParametersQuery623
    
    /**
      * List reactions for a team discussion comment
      * @description List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
      */
    @JSName("reactions/list-for-team-discussion-comment-in-org")
    var `reactionsSlashlist-for-team-discussion-comment-in-org`: ParametersQuery532
    
    /**
      * List reactions for a team discussion comment (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
      *
      * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("reactions/list-for-team-discussion-comment-legacy")
    var `reactionsSlashlist-for-team-discussion-comment-legacy`: ParametersPathCommentnumberDiscussionnumberTeamidQuery532
    
    /**
      * List reactions for a team discussion
      * @description List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
      */
    @JSName("reactions/list-for-team-discussion-in-org")
    var `reactionsSlashlist-for-team-discussion-in-org`: ParametersPathDiscussionnumberOrgTeamslugQuery532
    
    /**
      * List reactions for a team discussion (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
      *
      * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("reactions/list-for-team-discussion-legacy")
    var `reactionsSlashlist-for-team-discussion-legacy`: ParametersPathDiscussionnumberNumberQuery532
    
    /** Accept a repository invitation */
    @JSName("repos/accept-invitation-for-authenticated-user")
    var `reposSlashaccept-invitation-for-authenticated-user`: ParametersPathInvitationidNumber
    
    /**
      * Add app access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
      */
    @JSName("repos/add-app-access-restrictions")
    var `reposSlashadd-app-access-restrictions`: Responses200Content557422Content346
    
    /**
      * Add a repository collaborator
      * @description This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      *
      * Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
      *
      * For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
      *
      * ```
      * Cannot assign {member} permission of {role name}
      * ```
      *
      * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      *
      * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
      *
      * **Updating an existing collaborator's permission level**
      *
      * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
      *
      * **Rate limits**
      *
      * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
      */
    @JSName("repos/add-collaborator")
    var `reposSlashadd-collaborator`: Responses201ContentApplicationjsonInvitee
    
    /**
      * Add status check contexts
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/add-status-check-contexts")
    var `reposSlashadd-status-check-contexts`: Responses200Content29403Content36
    
    /**
      * Add team access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Grants the specified teams push access for this branch. You can also give push access to child teams.
      */
    @JSName("repos/add-team-access-restrictions")
    var `reposSlashadd-team-access-restrictions`: Responses200558422Content346
    
    /**
      * Add user access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Grants the specified people push access for this branch.
      *
      * | Type    | Description                                                                                                                   |
      * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/add-user-access-restrictions")
    var `reposSlashadd-user-access-restrictions`: Responses200Content508422Content346
    
    /**
      * Check if a user is a repository collaborator
      * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
      *
      * Team members will include the members of child teams.
      *
      * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
      * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
      * endpoint.
      */
    @JSName("repos/check-collaborator")
    var `reposSlashcheck-collaborator`: ParametersPathOwnerRepoUsername
    
    /**
      * Check if vulnerability alerts are enabled for a repository
      * @description Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
      */
    @JSName("repos/check-vulnerability-alerts")
    var `reposSlashcheck-vulnerability-alerts`: Parameters540Responses
    
    /**
      * List CODEOWNERS errors
      * @description List any syntax errors that are detected in the CODEOWNERS
      * file.
      *
      * For more information about the correct CODEOWNERS syntax,
      * see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
      */
    @JSName("repos/codeowners-errors")
    var `reposSlashcodeowners-errors`: ParametersPathOwnerStringQuery205
    
    /**
      * Compare two commits
      * @description **Deprecated**: Use `repos.compareCommitsWithBasehead()` (`GET /repos/{owner}/{repo}/compare/{basehead}`) instead. Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
      *
      * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
      *
      * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
      *
      * **Working with large comparisons**
      *
      * To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
      *
      * When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("repos/compare-commits")
    var `reposSlashcompare-commits`: ParametersPathHeadOwner
    
    /**
      * Compare two commits
      * @description Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository's network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
      *
      * This endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
      *
      * The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
      *
      * When calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.
      *
      * **Working with large comparisons**
      *
      * To process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:
      *
      * - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.
      * - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.
      *
      * For more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The `verification` object includes the following fields:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("repos/compare-commits-with-basehead")
    var `reposSlashcompare-commits-with-basehead`: ParametersPathBaseheadOwner
    
    /**
      * Create an autolink reference for a repository
      * @description Users with admin access to the repository can create an autolink.
      */
    @JSName("repos/create-autolink")
    var `reposSlashcreate-autolink`: Responses201ContentApplicationjsonKeyprefix
    
    /**
      * Create a commit comment
      * @description Create a comment for a commit using its `:commit_sha`.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("repos/create-commit-comment")
    var `reposSlashcreate-commit-comment`: Responses201ContentApplicationjsonAuthorassociationBodyHeadersLocation
    
    /**
      * Create commit signature protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
      */
    @JSName("repos/create-commit-signature-protection")
    var `reposSlashcreate-commit-signature-protection`: Responses200ContentApplicationjsonEnabledUrl404Content36
    
    /**
      * Create a commit status
      * @description Users with push access in a repository can create commit statuses for a given SHA.
      *
      * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
      */
    @JSName("repos/create-commit-status")
    var `reposSlashcreate-commit-status`: ParametersPathOwnerRepoSha
    
    /**
      * Create a deploy key
      * @description You can create a read-only deploy key.
      */
    @JSName("repos/create-deploy-key")
    var `reposSlashcreate-deploy-key`: Responses201ContentApplicationjsonAddedby
    
    /**
      * Create a deployment
      * @description Deployments offer a few configurable parameters with certain defaults.
      *
      * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
      * before we merge a pull request.
      *
      * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
      * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
      * makes it easier to track which environments have requested deployments. The default environment is `production`.
      *
      * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
      * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
      * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
      * return a failure response.
      *
      * By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
      * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
      * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
      * not require any contexts or create any commit statuses, the deployment will always succeed.
      *
      * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
      * field that will be passed on when a deployment event is dispatched.
      *
      * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
      * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
      * application with debugging enabled.
      *
      * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
      *
      * #### Merged branch response
      * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
      * a deployment. This auto-merge happens when:
      * *   Auto-merge option is enabled in the repository
      * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
      * *   There are no merge conflicts
      *
      * If there are no new commits in the base branch, a new request to create a deployment should give a successful
      * response.
      *
      * #### Merge conflict response
      * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
      * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
      *
      * #### Failed commit status checks
      * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
      * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
      */
    @JSName("repos/create-deployment")
    var `reposSlashcreate-deployment`: Responses201202422
    
    /**
      * Create a deployment branch policy
      * @description Creates a deployment branch policy for an environment.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
      */
    @JSName("repos/create-deployment-branch-policy")
    var `reposSlashcreate-deployment-branch-policy`: Responses200ContentApplicationjsonNameNodeid
    
    /**
      * Create a custom deployment protection rule on an environment
      * @description Enable a custom deployment protection rule for an environment.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. Enabling a custom protection rule requires admin or owner permissions to the repository. GitHub Apps must have the `actions:write` permission to use this endpoint.
      *
      * For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
      */
    @JSName("repos/create-deployment-protection-rule")
    var `reposSlashcreate-deployment-protection-rule`: Responses201ContentApplicationjsonEnabledId
    
    /**
      * Create a deployment status
      * @description Users with `push` access can create deployment statuses for a given deployment.
      *
      * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
      */
    @JSName("repos/create-deployment-status")
    var `reposSlashcreate-deployment-status`: Responses201ContentApplicationjsonLogurl
    
    /**
      * Create a repository dispatch event
      * @description You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
      *
      * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
      *
      * This endpoint requires write access to the repository by providing either:
      *
      *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
      *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
      *
      * This input example shows how you can use the `client_payload` as a test to debug your workflow.
      */
    @JSName("repos/create-dispatch-event")
    var `reposSlashcreate-dispatch-event`: Parameters540RequestBodyContentApplicationjsonClientpayload
    
    /**
      * Create a repository for the authenticated user
      * @description Creates a new repository for the authenticated user.
      *
      * **OAuth scope requirements**
      *
      * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
      *
      * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
      * *   `repo` scope to create a private repository.
      */
    @JSName("repos/create-for-authenticated-user")
    var `reposSlashcreate-for-authenticated-user`: Responses304400401
    
    /**
      * Create a fork
      * @description Create a fork for the authenticated user.
      *
      * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
      *
      * **Note**: Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.
      */
    @JSName("repos/create-fork")
    var `reposSlashcreate-fork`: Responses202400403
    
    /**
      * Create an organization repository
      * @description Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
      *
      * **OAuth scope requirements**
      *
      * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
      *
      * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
      * *   `repo` scope to create a private repository
      */
    @JSName("repos/create-in-org")
    var `reposSlashcreate-in-org`: Responses201ContentApplicationjsonAllowupdatebranch
    
    /**
      * Create or update an environment
      * @description Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
      *
      * **Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
      *
      * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
      */
    @JSName("repos/create-or-update-environment")
    var `reposSlashcreate-or-update-environment`: Responses422ContentApplicationjsonDocumentationurlMessage
    
    /**
      * Create or update file contents
      * @description Creates a new file or replaces an existing file in a repository. You must authenticate using an access token with the `workflow` scope to use this endpoint.
      *
      * **Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/reference/repos/#delete-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
      */
    @JSName("repos/create-or-update-file-contents")
    var `reposSlashcreate-or-update-file-contents`: Parameters572
    
    /**
      * Create an organization repository ruleset
      * @description Create a repository ruleset for an organization.
      */
    @JSName("repos/create-org-ruleset")
    var `reposSlashcreate-org-ruleset`: RequestBodyContentApplicationjsonBypassactorsConditions
    
    /**
      * Create a GitHub Pages deployment
      * @description Create a GitHub Pages deployment for a repository.
      *
      * Users must have write permissions. GitHub Apps must have the `pages:write` permission to use this endpoint.
      */
    @JSName("repos/create-pages-deployment")
    var `reposSlashcreate-pages-deployment`: Responses400404422
    
    /**
      * Create a GitHub Pages site
      * @description Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
      *
      * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.
      */
    @JSName("repos/create-pages-site")
    var `reposSlashcreate-pages-site`: Responses201409422
    
    /**
      * Create a release
      * @description Users with push access to the repository can create a release.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("repos/create-release")
    var `reposSlashcreate-release`: Responses201ContentApplicationjsonMentionscount
    
    /**
      * Create a repository ruleset
      * @description Create a ruleset for a repository.
      */
    @JSName("repos/create-repo-ruleset")
    var `reposSlashcreate-repo-ruleset`: RequestBodyContentApplicationjsonBypassactorsBypassmode
    
    /**
      * Create a tag protection state for a repository
      * @description This creates a tag protection state for a repository.
      * This endpoint is only available to repository administrators.
      */
    @JSName("repos/create-tag-protection")
    var `reposSlashcreate-tag-protection`: Responses201ContentApplicationjsonCreatedatEnabled
    
    /**
      * Create a repository using a template
      * @description Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
      *
      * **OAuth scope requirements**
      *
      * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
      *
      * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
      * *   `repo` scope to create a private repository
      */
    @JSName("repos/create-using-template")
    var `reposSlashcreate-using-template`: RequestBodyContentApplicationjsonIncludeallbranches
    
    /**
      * Create a repository webhook
      * @description Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
      * share the same `config` as long as those webhooks do not have any `events` that overlap.
      */
    @JSName("repos/create-webhook")
    var `reposSlashcreate-webhook`: Responses201ContentApplicationjsonTesturl
    
    /** Decline a repository invitation */
    @JSName("repos/decline-invitation-for-authenticated-user")
    var `reposSlashdecline-invitation-for-authenticated-user`: ParametersPathInvitationidNumber
    
    /**
      * Delete a repository
      * @description Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
      *
      * If an organization owner has configured the organization to prevent members from deleting organization-owned
      * repositories, you will get a `403 Forbidden` response.
      */
    @JSName("repos/delete")
    var reposSlashdelete: Responses307403
    
    /**
      * Delete access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Disables the ability to restrict who can push to this branch.
      */
    @JSName("repos/delete-access-restrictions")
    var `reposSlashdelete-access-restrictions`: ParametersPathBranchOwnerResponses
    
    /**
      * Delete admin branch protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
      */
    @JSName("repos/delete-admin-branch-protection")
    var `reposSlashdelete-admin-branch-protection`: ParametersPathBranchOwnerResponses404Content36
    
    /**
      * Delete an environment
      * @description You must authenticate using an access token with the repo scope to use this endpoint.
      */
    @JSName("repos/delete-an-environment")
    var `reposSlashdelete-an-environment`: ParametersPathEnvironmentnameOwnerRepoResponses
    
    /**
      * Delete an autolink reference from a repository
      * @description This deletes a single autolink reference by ID that was configured for the given repository.
      *
      * Information about autolinks are only available to repository administrators.
      */
    @JSName("repos/delete-autolink")
    var `reposSlashdelete-autolink`: ParametersPathAutolinkidOwnerResponses404Content36
    
    /**
      * Delete branch protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/delete-branch-protection")
    var `reposSlashdelete-branch-protection`: ParametersPathBranchOwnerResponses517
    
    /** Delete a commit comment */
    @JSName("repos/delete-commit-comment")
    var `reposSlashdelete-commit-comment`: ParametersPathCommentidOwnerRepoResponses404Content36
    
    /**
      * Delete commit signature protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
      */
    @JSName("repos/delete-commit-signature-protection")
    var `reposSlashdelete-commit-signature-protection`: ParametersPathBranchOwnerResponses404Content36
    
    /**
      * Delete a deploy key
      * @description Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
      */
    @JSName("repos/delete-deploy-key")
    var `reposSlashdelete-deploy-key`: ParametersPathKeyidOwnerRepoResponses
    
    /**
      * Delete a deployment
      * @description If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
      *
      * To set a deployment as inactive, you must:
      *
      * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
      * *   Mark the active deployment as inactive by adding any non-successful deployment status.
      *
      * For more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/deployment-statuses#create-a-deployment-status)."
      */
    @JSName("repos/delete-deployment")
    var `reposSlashdelete-deployment`: Responses404Content36422Content471
    
    /**
      * Delete a deployment branch policy
      * @description Deletes a deployment branch policy for an environment.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
      */
    @JSName("repos/delete-deployment-branch-policy")
    var `reposSlashdelete-deployment-branch-policy`: ParametersPathBranchpolicyidEnvironmentnameResponses
    
    /**
      * Delete a file
      * @description Deletes a file in a repository.
      *
      * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
      *
      * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
      *
      * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
      *
      * **Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/reference/repos/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
      */
    @JSName("repos/delete-file")
    var `reposSlashdelete-file`: Responses409422503
    
    /** Delete a repository invitation */
    @JSName("repos/delete-invitation")
    var `reposSlashdelete-invitation`: ParametersPathInvitationidOwnerRepo
    
    /**
      * Delete an organization repository ruleset
      * @description Delete a ruleset for an organization.
      */
    @JSName("repos/delete-org-ruleset")
    var `reposSlashdelete-org-ruleset`: Responses500Content36
    
    /**
      * Delete a GitHub Pages site
      * @description Deletes a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
      *
      * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.
      */
    @JSName("repos/delete-pages-site")
    var `reposSlashdelete-pages-site`: Responses404Content36409Content36
    
    /**
      * Delete pull request review protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/delete-pull-request-review-protection")
    var `reposSlashdelete-pull-request-review-protection`: ParametersPathBranchOwnerResponses404Content36
    
    /**
      * Delete a release
      * @description Users with push access to the repository can delete a release.
      */
    @JSName("repos/delete-release")
    var `reposSlashdelete-release`: ParametersPathOwnerReleaseidResponses
    
    /** Delete a release asset */
    @JSName("repos/delete-release-asset")
    var `reposSlashdelete-release-asset`: ParametersPathAssetidOwnerResponses
    
    /**
      * Delete a repository ruleset
      * @description Delete a ruleset for a repository.
      */
    @JSName("repos/delete-repo-ruleset")
    var `reposSlashdelete-repo-ruleset`: Parameters625Responses500Content36
    
    /**
      * Delete a tag protection state for a repository
      * @description This deletes a tag protection state for a repository.
      * This endpoint is only available to repository administrators.
      */
    @JSName("repos/delete-tag-protection")
    var `reposSlashdelete-tag-protection`: ParametersPathRepoTagprotectionid
    
    /** Delete a repository webhook */
    @JSName("repos/delete-webhook")
    var `reposSlashdelete-webhook`: ParametersPathHookidOwnerRepoResponses404Content36
    
    /**
      * Disable automated security fixes
      * @description Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
      */
    @JSName("repos/disable-automated-security-fixes")
    var `reposSlashdisable-automated-security-fixes`: Parameters540Responses
    
    /**
      * Disable a custom protection rule for an environment
      * @description Disables a custom deployment protection rule for an environment.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. Removing a custom protection rule requires admin or owner permissions to the repository. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Get an app](https://docs.github.com/rest/apps/apps#get-an-app)".
      */
    @JSName("repos/disable-deployment-protection-rule")
    var `reposSlashdisable-deployment-protection-rule`: ParametersPathEnvironmentnameOwnerProtectionruleid
    
    /**
      * Disable Git LFS for a repository
      * @description Disables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.
      */
    @JSName("repos/disable-lfs-for-repo")
    var `reposSlashdisable-lfs-for-repo`: Parameters540Responses
    
    /**
      * Disable vulnerability alerts
      * @description Disables dependency alerts and the dependency graph for a repository.
      * The authenticated user must have admin access to the repository. For more information,
      * see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
      */
    @JSName("repos/disable-vulnerability-alerts")
    var `reposSlashdisable-vulnerability-alerts`: Parameters540Responses
    
    /**
      * Download a repository archive (tar)
      * @description Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
      * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
      * the `Location` header to make a second `GET` request.
      * **Note**: For private repositories, these links are temporary and expire after five minutes.
      */
    @JSName("repos/download-tarball-archive")
    var `reposSlashdownload-tarball-archive`: Parameters582Responses
    
    /**
      * Download a repository archive (zip)
      * @description Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
      * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
      * the `Location` header to make a second `GET` request.
      *
      * **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
      */
    @JSName("repos/download-zipball-archive")
    var `reposSlashdownload-zipball-archive`: Parameters582Responses
    
    /**
      * Enable automated security fixes
      * @description Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
      */
    @JSName("repos/enable-automated-security-fixes")
    var `reposSlashenable-automated-security-fixes`: Parameters540Responses
    
    /**
      * Enable Git LFS for a repository
      * @description Enables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.
      */
    @JSName("repos/enable-lfs-for-repo")
    var `reposSlashenable-lfs-for-repo`: Responses606
    
    /**
      * Enable vulnerability alerts
      * @description Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
      */
    @JSName("repos/enable-vulnerability-alerts")
    var `reposSlashenable-vulnerability-alerts`: Parameters540Responses
    
    /**
      * Generate release notes content for a release
      * @description Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
      */
    @JSName("repos/generate-release-notes")
    var `reposSlashgenerate-release-notes`: Responses200ContentApplicationjsonBodyString
    
    /**
      * Get a repository
      * @description The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
      *
      * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      */
    @JSName("repos/get")
    var reposSlashget: Parameters540
    
    /**
      * Get access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists who has access to this protected branch.
      *
      * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
      */
    @JSName("repos/get-access-restrictions")
    var `reposSlashget-access-restrictions`: Responses200ContentApplicationjsonAppsurl
    
    /**
      * Get admin branch protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/get-admin-branch-protection")
    var `reposSlashget-admin-branch-protection`: Responses200ContentApplicationjsonEnabledUrl
    
    /**
      * Get all deployment protection rules for an environment
      * @description Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. If the repository is private and you want to use a personal access token (classic), you must use an access token with the `repo` scope. GitHub Apps and fine-grained personal access tokens must have the `actions:read` permission to use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
      *
      * For more information about the app that is providing this custom deployment rule, see the [documentation for the `GET /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
      */
    @JSName("repos/get-all-deployment-protection-rules")
    var `reposSlashget-all-deployment-protection-rules`: ParametersPathEnvironmentnameString
    
    /**
      * List environments
      * @description Lists the environments for a repository.
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("repos/get-all-environments")
    var `reposSlashget-all-environments`: Responses200ContentApplicationjsonEnvironmentsTotalcount
    
    /**
      * Get all status check contexts
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/get-all-status-check-contexts")
    var `reposSlashget-all-status-check-contexts`: Responses200Content29404Content36
    
    /** Get all repository topics */
    @JSName("repos/get-all-topics")
    var `reposSlashget-all-topics`: ParametersPathOwnerStringQuery507
    
    /**
      * Get apps with access to the protected branch
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
      */
    @JSName("repos/get-apps-with-access-to-protected-branch")
    var `reposSlashget-apps-with-access-to-protected-branch`: Responses200Content557
    
    /**
      * Get an autolink reference of a repository
      * @description This returns a single autolink reference by ID that was configured for the given repository.
      *
      * Information about autolinks are only available to repository administrators.
      */
    @JSName("repos/get-autolink")
    var `reposSlashget-autolink`: ParametersPathAutolinkidOwner
    
    /** Get a branch */
    @JSName("repos/get-branch")
    var `reposSlashget-branch`: ParametersPathBranchOwner
    
    /**
      * Get branch protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/get-branch-protection")
    var `reposSlashget-branch-protection`: Responses200ContentApplicationjsonAllowforksyncing
    
    /**
      * Get rules for a branch
      * @description Returns all rules that apply to the specified branch.
      */
    @JSName("repos/get-branch-rules")
    var `reposSlashget-branch-rules`: Responses200Content624
    
    /**
      * Get repository clones
      * @description Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
      */
    @JSName("repos/get-clones")
    var `reposSlashget-clones`: ParametersQuery637
    
    /**
      * Get the weekly commit activity
      * @description Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
      */
    @JSName("repos/get-code-frequency-stats")
    var `reposSlashget-code-frequency-stats`: Responses200Content631
    
    /**
      * Get repository permissions for a user
      * @description Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
      */
    @JSName("repos/get-collaborator-permission-level")
    var `reposSlashget-collaborator-permission-level`: Responses200ContentApplicationjsonPermissionRolename
    
    /**
      * Get the combined status for a specific reference
      * @description Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
      *
      *
      * Additionally, a combined `state` is returned. The `state` is one of:
      *
      * *   **failure** if any of the contexts report as `error` or `failure`
      * *   **pending** if there are no statuses or a context is `pending`
      * *   **success** if the latest status for all contexts is `success`
      */
    @JSName("repos/get-combined-status-for-ref")
    var `reposSlashget-combined-status-for-ref`: ParametersPathOwnerRefRepoQuery473
    
    /**
      * Get a commit
      * @description Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
      *
      * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
      *
      * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
      *
      * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("repos/get-commit")
    var `reposSlashget-commit`: ParametersPathOwnerRefRepo
    
    /**
      * Get the last year of commit activity
      * @description Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
      */
    @JSName("repos/get-commit-activity-stats")
    var `reposSlashget-commit-activity-stats`: Responses200Content632
    
    /** Get a commit comment */
    @JSName("repos/get-commit-comment")
    var `reposSlashget-commit-comment`: ParametersPathCommentidOwnerRepo
    
    /**
      * Get commit signature protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
      *
      * **Note**: You must enable branch protection to require signed commits.
      */
    @JSName("repos/get-commit-signature-protection")
    var `reposSlashget-commit-signature-protection`: Responses200ContentApplicationjsonEnabledUrl404Content36
    
    /**
      * Get community profile metrics
      * @description Returns all community profile metrics for a repository. The repository cannot be a fork.
      *
      * The returned metrics include an overall health score, the repository description, the presence of documentation, the
      * detected code of conduct, the detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
      * README, and CONTRIBUTING files.
      *
      * The `health_percentage` score is defined as a percentage of how many of
      * these four documents are present: README, CONTRIBUTING, LICENSE, and
      * CODE_OF_CONDUCT. For example, if all four documents are present, then
      * the `health_percentage` is `100`. If only one is present, then the
      * `health_percentage` is `25`.
      *
      * `content_reports_enabled` is only returned for organization-owned repositories.
      */
    @JSName("repos/get-community-profile-metrics")
    var `reposSlashget-community-profile-metrics`: Responses200ContentApplicationjsonDocumentation
    
    /**
      * Get repository content
      * @description Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
      * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
      *
      * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
      * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
      * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
      * object format.
      *
      * **Notes**:
      * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
      * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
      * API](https://docs.github.com/rest/reference/git#get-a-tree).
      *  *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
      * #### Size limits
      * If the requested file's size is:
      * * 1 MB or smaller: All features of this endpoint are supported.
      * * Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
      *  * Greater than 100 MB: This endpoint is not supported.
      *
      * #### If the content is a directory
      * The response will be an array of objects, one object for each item in the directory.
      * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
      * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
      * In the next major version of the API, the type will be returned as "submodule".
      *
      * #### If the content is a symlink
      * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
      * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
      * describing the symlink itself.
      *
      * #### If the content is a submodule
      * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
      * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
      * the submodule at that specific commit.
      *
      * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
      * github.com URLs (`html_url` and `_links["html"]`) will have null values.
      */
    @JSName("repos/get-content")
    var `reposSlashget-content`: ParametersPathOwnerPathRepo
    
    /**
      * Get all contributor commit activity
      * @description
      * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
      *
      * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
      * *   `a` - Number of additions
      * *   `d` - Number of deletions
      * *   `c` - Number of commits
      */
    @JSName("repos/get-contributors-stats")
    var `reposSlashget-contributors-stats`: Responses200Content633
    
    /**
      * Get a custom deployment protection rule
      * @description Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. If the repository is private and you want to use a personal access token (classic), you must use an access token with the `repo` scope. GitHub Apps and fine-grained personal access tokens must have the `actions:read` permission to use this endpoint. For more information about environments, see "[Using environments for deployment](https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
      *
      * For more information about the app that is providing this custom deployment rule, see [`GET /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).
      */
    @JSName("repos/get-custom-deployment-protection-rule")
    var `reposSlashget-custom-deployment-protection-rule`: ParametersPathProtectionruleidRepo
    
    /** Get a deploy key */
    @JSName("repos/get-deploy-key")
    var `reposSlashget-deploy-key`: ParametersPathKeyidOwnerRepo
    
    /** Get a deployment */
    @JSName("repos/get-deployment")
    var `reposSlashget-deployment`: ParametersPathDeploymentidOwner
    
    /**
      * Get a deployment branch policy
      * @description Gets a deployment branch policy for an environment.
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("repos/get-deployment-branch-policy")
    var `reposSlashget-deployment-branch-policy`: ParametersPathBranchpolicyidEnvironmentname
    
    /**
      * Get a deployment status
      * @description Users with pull access can view a deployment status for a deployment:
      */
    @JSName("repos/get-deployment-status")
    var `reposSlashget-deployment-status`: ParametersPathRepoStatusid
    
    /**
      * Get an environment
      * @description **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
      *
      * Anyone with read access to the repository can use this endpoint. If the
      * repository is private, you must use an access token with the `repo` scope. GitHub
      * Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("repos/get-environment")
    var `reposSlashget-environment`: ParametersPathEnvironmentnameOwnerRepo
    
    /** Get latest Pages build */
    @JSName("repos/get-latest-pages-build")
    var `reposSlashget-latest-pages-build`: Responses200ContentApplicationjsonCommitCreatedat
    
    /**
      * Get the latest release
      * @description View the latest published full release for the repository.
      *
      * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
      */
    @JSName("repos/get-latest-release")
    var `reposSlashget-latest-release`: Responses200621
    
    /**
      * Get an organization repository ruleset
      * @description Get a repository ruleset for an organization.
      */
    @JSName("repos/get-org-ruleset")
    var `reposSlashget-org-ruleset`: ParametersPathOrgRulesetid
    
    /**
      * Get all organization repository rulesets
      * @description Get all the repository rulesets for an organization.
      */
    @JSName("repos/get-org-rulesets")
    var `reposSlashget-org-rulesets`: Responses200Content527
    
    /** Get a GitHub Pages site */
    @JSName("repos/get-pages")
    var `reposSlashget-pages`: Responses200ContentApplicationjsonCustom404
    
    /** Get GitHub Pages build */
    @JSName("repos/get-pages-build")
    var `reposSlashget-pages-build`: ParametersPathBuildidOwner
    
    /**
      * Get a DNS health check for GitHub Pages
      * @description Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
      *
      * The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
      *
      * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administrative:write` and `pages:write` permissions.
      */
    @JSName("repos/get-pages-health-check")
    var `reposSlashget-pages-health-check`: Responses200ContentApplicationjsonAltdomain
    
    /**
      * Get the weekly commit count
      * @description Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
      *
      * The array order is oldest week (index 0) to most recent week.
      */
    @JSName("repos/get-participation-stats")
    var `reposSlashget-participation-stats`: Responses200ContentApplicationjsonAllOwner
    
    /**
      * Get pull request review protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/get-pull-request-review-protection")
    var `reposSlashget-pull-request-review-protection`: Responses200ContentApplicationjsonDismissstalereviews
    
    /**
      * Get the hourly commit count for each day
      * @description Each array contains the day number, hour number, and number of commits:
      *
      * *   `0-6`: Sunday - Saturday
      * *   `0-23`: Hour of day
      * *   Number of commits
      *
      * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
      */
    @JSName("repos/get-punch-card-stats")
    var `reposSlashget-punch-card-stats`: Responses200Content631204
    
    /**
      * Get a repository README
      * @description Gets the preferred README for a repository.
      *
      * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
      */
    @JSName("repos/get-readme")
    var `reposSlashget-readme`: Responses200ContentApplicationjsonSubmodulegiturl
    
    /**
      * Get a repository README for a directory
      * @description Gets the README from a repository directory.
      *
      * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
      */
    @JSName("repos/get-readme-in-directory")
    var `reposSlashget-readme-in-directory`: ParametersPathDirOwner
    
    /**
      * Get a release
      * @description **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
      */
    @JSName("repos/get-release")
    var `reposSlashget-release`: ParametersPathOwnerReleaseid
    
    /**
      * Get a release asset
      * @description To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
      */
    @JSName("repos/get-release-asset")
    var `reposSlashget-release-asset`: ParametersPathAssetidOwner
    
    /**
      * Get a release by tag name
      * @description Get a published release with the specified tag.
      */
    @JSName("repos/get-release-by-tag")
    var `reposSlashget-release-by-tag`: ParametersPathRepoTag
    
    /**
      * Get a repository ruleset
      * @description Get a ruleset for a repository.
      */
    @JSName("repos/get-repo-ruleset")
    var `reposSlashget-repo-ruleset`: ParametersPathOwnerRepoRulesetid
    
    /**
      * Get all repository rulesets
      * @description Get all the rulesets for a repository.
      */
    @JSName("repos/get-repo-rulesets")
    var `reposSlashget-repo-rulesets`: ParametersPathOwnerStringQueryIncludesparents
    
    /**
      * Get status checks protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/get-status-checks-protection")
    var `reposSlashget-status-checks-protection`: Responses200ContentApplicationjsonStrict
    
    /**
      * Get teams with access to the protected branch
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists the teams who have push access to this branch. The list includes child teams.
      */
    @JSName("repos/get-teams-with-access-to-protected-branch")
    var `reposSlashget-teams-with-access-to-protected-branch`: Responses200558
    
    /**
      * Get top referral paths
      * @description Get the top 10 popular contents over the last 14 days.
      */
    @JSName("repos/get-top-paths")
    var `reposSlashget-top-paths`: Responses200Content638
    
    /**
      * Get top referral sources
      * @description Get the top 10 referrers over the last 14 days.
      */
    @JSName("repos/get-top-referrers")
    var `reposSlashget-top-referrers`: Responses200Content639
    
    /**
      * Get users with access to the protected branch
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists the people who have push access to this branch.
      */
    @JSName("repos/get-users-with-access-to-protected-branch")
    var `reposSlashget-users-with-access-to-protected-branch`: Responses200Content508404Content36
    
    /**
      * Get page views
      * @description Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
      */
    @JSName("repos/get-views")
    var `reposSlashget-views`: Responses200ContentApplicationjsonCountUniques
    
    /**
      * Get a repository webhook
      * @description Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
      */
    @JSName("repos/get-webhook")
    var `reposSlashget-webhook`: ParametersPathHookidOwnerRepo
    
    /**
      * Get a webhook configuration for a repository
      * @description Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
      *
      * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
      */
    @JSName("repos/get-webhook-config-for-repo")
    var `reposSlashget-webhook-config-for-repo`: ParametersPathHookidOwnerRepoResponses200ContentApplicationjsonContenttype
    
    /**
      * Get a delivery for a repository webhook
      * @description Returns a delivery for a webhook configured in a repository.
      */
    @JSName("repos/get-webhook-delivery")
    var `reposSlashget-webhook-delivery`: ParametersPathDeliveryidHookidOwnerRepo
    
    /**
      * List all autolinks of a repository
      * @description This returns a list of autolinks configured for the given repository.
      *
      * Information about autolinks are only available to repository administrators.
      */
    @JSName("repos/list-autolinks")
    var `reposSlashlist-autolinks`: ParametersQuery553
    
    /** List branches */
    @JSName("repos/list-branches")
    var `reposSlashlist-branches`: ParametersQueryPerpageProtected
    
    /**
      * List branches for HEAD commit
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
      */
    @JSName("repos/list-branches-for-head-commit")
    var `reposSlashlist-branches-for-head-commit`: ParametersPathCommitshaOwner
    
    /**
      * List repository collaborators
      * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
      * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
      *
      * Team members will include the members of child teams.
      *
      * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
      * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
      * endpoint.
      */
    @JSName("repos/list-collaborators")
    var `reposSlashlist-collaborators`: ParametersQueryPagePermission
    
    /**
      * List commit comments
      * @description Use the `:commit_sha` to specify the commit that will have its comments listed.
      */
    @JSName("repos/list-comments-for-commit")
    var `reposSlashlist-comments-for-commit`: ParametersPathCommitshaOwnerQuery473
    
    /**
      * List commit comments for a repository
      * @description Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
      *
      * Comments are ordered by ascending ID.
      */
    @JSName("repos/list-commit-comments-for-repo")
    var `reposSlashlist-commit-comments-for-repo`: Responses200Content567
    
    /**
      * List commit statuses for a reference
      * @description Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
      *
      * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
      */
    @JSName("repos/list-commit-statuses-for-ref")
    var `reposSlashlist-commit-statuses-for-ref`: Responses200Content571
    
    /**
      * List commits
      * @description **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on their account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("repos/list-commits")
    var `reposSlashlist-commits`: ParametersQueryUntil
    
    /**
      * List repository contributors
      * @description Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.
      *
      * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
      */
    @JSName("repos/list-contributors")
    var `reposSlashlist-contributors`: ParametersQueryAnonPage
    
    /**
      * List custom deployment rule integrations available for an environment
      * @description Gets all custom deployment protection rule integrations that are available for an environment. Anyone with read access to the repository can use this endpoint. If the repository is private and you want to use a personal access token (classic), you must use an access token with the `repo` scope. GitHub Apps and fine-grained personal access tokens must have the `actions:read` permission to use this endpoint.
      *
      * For more information about environments, see "[Using environments for deployment](https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
      *
      * For more information about the app that is providing this custom deployment rule, see "[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)".
      */
    @JSName("repos/list-custom-deployment-rule-integrations")
    var `reposSlashlist-custom-deployment-rule-integrations`: ParametersPathEnvironmentnameStringQuery507
    
    /** List deploy keys */
    @JSName("repos/list-deploy-keys")
    var `reposSlashlist-deploy-keys`: Responses200Content601
    
    /**
      * List deployment branch policies
      * @description Lists the deployment branch policies for an environment.
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("repos/list-deployment-branch-policies")
    var `reposSlashlist-deployment-branch-policies`: ParametersPathEnvironmentnameOwnerRepoQuery473
    
    /**
      * List deployment statuses
      * @description Users with pull access can view deployment statuses for a deployment:
      */
    @JSName("repos/list-deployment-statuses")
    var `reposSlashlist-deployment-statuses`: ParametersPathDeploymentidOwnerQuery473
    
    /**
      * List deployments
      * @description Simple filtering of deployments is available via query parameters:
      */
    @JSName("repos/list-deployments")
    var `reposSlashlist-deployments`: ParametersQueryEnvironmentPage
    
    /**
      * List repositories for the authenticated user
      * @description Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
      *
      * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
      */
    @JSName("repos/list-for-authenticated-user")
    var `reposSlashlist-for-authenticated-user`: ParametersQueryAffiliationBefore
    
    /**
      * List organization repositories
      * @description Lists repositories for the specified organization.
      *
      * **Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      */
    @JSName("repos/list-for-org")
    var `reposSlashlist-for-org`: ParametersQueryPerpageSortType
    
    /**
      * List repositories for a user
      * @description Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
      */
    @JSName("repos/list-for-user")
    var `reposSlashlist-for-user`: ParametersQueryPagePerpageSortType
    
    /** List forks */
    @JSName("repos/list-forks")
    var `reposSlashlist-forks`: ParametersQuery580
    
    /**
      * List repository invitations
      * @description When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
      */
    @JSName("repos/list-invitations")
    var `reposSlashlist-invitations`: Responses200Content593
    
    /**
      * List repository invitations for the authenticated user
      * @description When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
      */
    @JSName("repos/list-invitations-for-authenticated-user")
    var `reposSlashlist-invitations-for-authenticated-user`: Responses200Content593304
    
    /**
      * List repository languages
      * @description Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
      */
    @JSName("repos/list-languages")
    var `reposSlashlist-languages`: Responses200Content605
    
    /** List GitHub Pages builds */
    @JSName("repos/list-pages-builds")
    var `reposSlashlist-pages-builds`: Responses200Content612
    
    /**
      * List public repositories
      * @description Lists all public repositories in the order that they were created.
      *
      * Note:
      * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
      * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.
      */
    @JSName("repos/list-public")
    var `reposSlashlist-public`: Parameters641
    
    /**
      * List pull requests associated with a commit
      * @description Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.
      */
    @JSName("repos/list-pull-requests-associated-with-commit")
    var `reposSlashlist-pull-requests-associated-with-commit`: Responses200Content570
    
    /** List release assets */
    @JSName("repos/list-release-assets")
    var `reposSlashlist-release-assets`: ParametersPathOwnerReleaseidQuery473
    
    /**
      * List releases
      * @description This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
      *
      * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
      */
    @JSName("repos/list-releases")
    var `reposSlashlist-releases`: Responses200Content620
    
    /**
      * List tag protection states for a repository
      * @description This returns the tag protection states of a repository.
      *
      * This information is only available to repository administrators.
      */
    @JSName("repos/list-tag-protection")
    var `reposSlashlist-tag-protection`: Responses200Content636
    
    /** List repository tags */
    @JSName("repos/list-tags")
    var `reposSlashlist-tags`: Responses200Content635
    
    /** List repository teams */
    @JSName("repos/list-teams")
    var `reposSlashlist-teams`: ParametersPathOwnerStringResponses537
    
    /**
      * List deliveries for a repository webhook
      * @description Returns a list of webhook deliveries for a webhook configured in a repository.
      */
    @JSName("repos/list-webhook-deliveries")
    var `reposSlashlist-webhook-deliveries`: ParametersPathHookidOwnerRepoQueryRedelivery
    
    /**
      * List repository webhooks
      * @description Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
      */
    @JSName("repos/list-webhooks")
    var `reposSlashlist-webhooks`: Responses200Content586
    
    /** Merge a branch */
    @JSName("repos/merge")
    var reposSlashmerge: Responses201ContentApplicationjsonAuthorCommentsurl
    
    /**
      * Sync a fork branch with the upstream repository
      * @description Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
      */
    @JSName("repos/merge-upstream")
    var `reposSlashmerge-upstream`: Responses200ContentApplicationjsonBasebranch
    
    /**
      * Ping a repository webhook
      * @description This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
      */
    @JSName("repos/ping-webhook")
    var `reposSlashping-webhook`: ParametersPathHookidOwnerRepoResponses404Content36
    
    /**
      * Redeliver a delivery for a repository webhook
      * @description Redeliver a webhook delivery for a webhook configured in a repository.
      */
    @JSName("repos/redeliver-webhook-delivery")
    var `reposSlashredeliver-webhook-delivery`: ParametersPathDeliveryidHookidOwnerRepoResponses202400422
    
    /**
      * Remove app access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
      */
    @JSName("repos/remove-app-access-restrictions")
    var `reposSlashremove-app-access-restrictions`: Responses200Content557422Content346
    
    /** Remove a repository collaborator */
    @JSName("repos/remove-collaborator")
    var `reposSlashremove-collaborator`: ParametersPathOwnerRepoUsername
    
    /**
      * Remove status check contexts
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/remove-status-check-contexts")
    var `reposSlashremove-status-check-contexts`: Responses200Content29404Content36422Content346
    
    /**
      * Remove status check protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/remove-status-check-protection")
    var `reposSlashremove-status-check-protection`: ParametersPathBranchOwnerResponses
    
    /**
      * Remove team access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
      */
    @JSName("repos/remove-team-access-restrictions")
    var `reposSlashremove-team-access-restrictions`: Responses200558422Content346
    
    /**
      * Remove user access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Removes the ability of a user to push to this branch.
      *
      * | Type    | Description                                                                                                                                   |
      * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/remove-user-access-restrictions")
    var `reposSlashremove-user-access-restrictions`: Responses200Content508422Content346
    
    /**
      * Rename a branch
      * @description Renames a branch in a repository.
      *
      * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
      *
      * The permissions required to use this endpoint depends on whether you are renaming the default branch.
      *
      * To rename a non-default branch:
      *
      * * Users must have push access.
      * * GitHub Apps must have the `contents:write` repository permission.
      *
      * To rename the default branch:
      *
      * * Users must have admin or owner permissions.
      * * GitHub Apps must have the `administration:write` repository permission.
      */
    @JSName("repos/rename-branch")
    var `reposSlashrename-branch`: Responses201ContentApplicationjsonRequiredapprovingreviewcount
    
    /** Replace all repository topics */
    @JSName("repos/replace-all-topics")
    var `reposSlashreplace-all-topics`: Responses200ContentApplicationjsonNames404Content36
    
    /**
      * Request a GitHub Pages build
      * @description You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
      *
      * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
      */
    @JSName("repos/request-pages-build")
    var `reposSlashrequest-pages-build`: Responses201ContentApplicationjsonStatusUrl
    
    /**
      * Set admin branch protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
      */
    @JSName("repos/set-admin-branch-protection")
    var `reposSlashset-admin-branch-protection`: Responses200ContentApplicationjsonEnabledUrl
    
    /**
      * Set app access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
      */
    @JSName("repos/set-app-access-restrictions")
    var `reposSlashset-app-access-restrictions`: Responses200Content557422Content346
    
    /**
      * Set status check contexts
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("repos/set-status-check-contexts")
    var `reposSlashset-status-check-contexts`: Responses200Content29404Content36422Content346
    
    /**
      * Set team access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
      */
    @JSName("repos/set-team-access-restrictions")
    var `reposSlashset-team-access-restrictions`: Responses200558422Content346
    
    /**
      * Set user access restrictions
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
      *
      * | Type    | Description                                                                                                                   |
      * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/set-user-access-restrictions")
    var `reposSlashset-user-access-restrictions`: Responses200Content508422Content346
    
    /**
      * Test the push repository webhook
      * @description This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
      *
      * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
      */
    @JSName("repos/test-push-webhook")
    var `reposSlashtest-push-webhook`: ParametersPathHookidOwnerRepoResponses404Content36
    
    /**
      * Transfer a repository
      * @description A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
      */
    @JSName("repos/transfer")
    var reposSlashtransfer: Responses202ContentApplicationjsonBranchesurl
    
    /**
      * Update a repository
      * @description **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
      */
    @JSName("repos/update")
    var reposSlashupdate: Responses200307403
    
    /**
      * Update branch protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Protecting a branch requires admin or owner permissions to the repository.
      *
      * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
      *
      * **Note**: The list of users, apps, and teams in total is limited to 100 items.
      */
    @JSName("repos/update-branch-protection")
    var `reposSlashupdate-branch-protection`: Responses200ContentApplicationjsonEnforceadmins
    
    /** Update a commit comment */
    @JSName("repos/update-commit-comment")
    var `reposSlashupdate-commit-comment`: Responses200ContentApplicationjsonAuthorassociationBody
    
    /**
      * Update a deployment branch policy
      * @description Updates a deployment branch policy for an environment.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
      */
    @JSName("repos/update-deployment-branch-policy")
    var `reposSlashupdate-deployment-branch-policy`: ParametersPathBranchpolicyidEnvironmentnameRequestBodyContentApplicationjsonName
    
    /**
      * Update information about a GitHub Pages site
      * @description Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
      *
      * To use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.
      */
    @JSName("repos/update-information-about-pages-site")
    var `reposSlashupdate-information-about-pages-site`: Responses400409422
    
    /** Update a repository invitation */
    @JSName("repos/update-invitation")
    var `reposSlashupdate-invitation`: Responses200ContentApplicationjsonInvitee
    
    /**
      * Update an organization repository ruleset
      * @description Update a ruleset for an organization.
      */
    @JSName("repos/update-org-ruleset")
    var `reposSlashupdate-org-ruleset`: Responses200ContentApplicationjsonRules
    
    /**
      * Update pull request review protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
      *
      * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
      */
    @JSName("repos/update-pull-request-review-protection")
    var `reposSlashupdate-pull-request-review-protection`: Responses200ContentApplicationjsonDismissstalereviews422Content346
    
    /**
      * Update a release
      * @description Users with push access to the repository can edit a release.
      */
    @JSName("repos/update-release")
    var `reposSlashupdate-release`: Responses200621404ContentApplicationjsonDocumentationurlMessage
    
    /**
      * Update a release asset
      * @description Users with push access to the repository can edit a release asset.
      */
    @JSName("repos/update-release-asset")
    var `reposSlashupdate-release-asset`: Responses200ContentApplicationjsonDownloadcount
    
    /**
      * Update a repository ruleset
      * @description Update a ruleset for a repository.
      */
    @JSName("repos/update-repo-ruleset")
    var `reposSlashupdate-repo-ruleset`: Parameters625
    
    /**
      * Update status check protection
      * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
      */
    @JSName("repos/update-status-check-protection")
    var `reposSlashupdate-status-check-protection`: Responses200ContentApplicationjsonStrict404Content36
    
    /**
      * Update a repository webhook
      * @description Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
      */
    @JSName("repos/update-webhook")
    var `reposSlashupdate-webhook`: RequestBodyContentApplicationjsonRemoveevents
    
    /**
      * Update a webhook configuration for a repository
      * @description Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
      *
      * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
      */
    @JSName("repos/update-webhook-config-for-repo")
    var `reposSlashupdate-webhook-config-for-repo`: ParametersPathHookidOwnerRepoRequestBody
    
    /**
      * Upload a release asset
      * @description This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
      * the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
      *
      * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
      *
      * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
      *
      * `application/zip`
      *
      * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
      * you'll still need to pass your authentication to be able to upload an asset.
      *
      * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
      *
      * **Notes:**
      * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
      * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
      * *   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release).
      * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
      */
    @JSName("repos/upload-release-asset")
    var `reposSlashupload-release-asset`: ParametersPathOwnerReleaseidQueryLabelName
    
    /**
      * Search code
      * @description Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
      *
      * `q=addClass+in:file+language:js+repo:jquery/jquery`
      *
      * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
      *
      * #### Considerations for code search
      *
      * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
      *
      * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
      * *   Only files smaller than 384 KB are searchable.
      * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
      * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
      *
      * This endpoint requires you to authenticate and limits you to 10 requests per minute.
      */
    @JSName("search/code")
    var searchSlashcode: ParametersQueryPerpageQSort
    
    /**
      * Search commits
      * @description Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
      * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
      *
      * `q=repo:octocat/Spoon-Knife+css`
      */
    @JSName("search/commits")
    var searchSlashcommits: ParametersQueryOrderPagePerpageQ
    
    /**
      * Search issues and pull requests
      * @description Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
      * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
      *
      * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
      *
      * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
      *
      * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
      */
    @JSName("search/issues-and-pull-requests")
    var `searchSlashissues-and-pull-requests`: ParametersQueryPagePerpageQSort
    
    /**
      * Search labels
      * @description Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
      *
      * `q=bug+defect+enhancement&repository_id=64778136`
      *
      * The labels that best match the query appear first in the search results.
      */
    @JSName("search/labels")
    var searchSlashlabels: ParametersQueryQRepositoryid
    
    /**
      * Search repositories
      * @description Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
      *
      * `q=tetris+language:assembly&sort=stars&order=desc`
      *
      * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
      */
    @JSName("search/repos")
    var searchSlashrepos: ParametersQueryOrderPagePerpageQSort
    
    /**
      * Search topics
      * @description Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
      *
      * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
      *
      * `q=ruby+is:featured`
      *
      * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
      */
    @JSName("search/topics")
    var searchSlashtopics: ParametersQueryQString
    
    /**
      * Search users
      * @description Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you're looking for a list of popular users, you might try this query:
      *
      * `q=tom+repos:%3E42+followers:%3E1000`
      *
      * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
      */
    @JSName("search/users")
    var searchSlashusers: ParametersQueryPerpageQString
    
    /**
      * Get a secret scanning alert
      * @description Gets a single secret scanning alert detected in an eligible repository.
      * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
      */
    @JSName("secret-scanning/get-alert")
    var `secret-scanningSlashget-alert`: Responses200304503
    
    /**
      * List secret scanning alerts for an enterprise
      * @description Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
      * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
      */
    @JSName("secret-scanning/list-alerts-for-enterprise")
    var `secret-scanningSlashlist-alerts-for-enterprise`: ParametersQuerySecrettype
    
    /**
      * List secret scanning alerts for an organization
      * @description Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
      * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
      */
    @JSName("secret-scanning/list-alerts-for-org")
    var `secret-scanningSlashlist-alerts-for-org`: ParametersQueryBeforeDirection
    
    /**
      * List secret scanning alerts for a repository
      * @description Lists secret scanning alerts for an eligible repository, from newest to oldest.
      * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
      */
    @JSName("secret-scanning/list-alerts-for-repo")
    var `secret-scanningSlashlist-alerts-for-repo`: ParametersPathOwnerStringQueryBeforeDirection
    
    /**
      * List locations for a secret scanning alert
      * @description Lists all locations for a given secret scanning alert for an eligible repository.
      * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
      */
    @JSName("secret-scanning/list-locations-for-alert")
    var `secret-scanningSlashlist-locations-for-alert`: ParametersPathAlertnumberOwnerRepoQuery507
    
    /**
      * Update a secret scanning alert
      * @description Updates the status of a secret scanning alert in an eligible repository.
      * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
      */
    @JSName("secret-scanning/update-alert")
    var `secret-scanningSlashupdate-alert`: RequestBodyContentApplicationjsonResolutionResolutioncomment
    
    /**
      * Privately report a security vulnerability
      * @description Report a security vulnerability to the maintainers of the repository.
      * See "[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)" for more information about private vulnerability reporting.
      */
    @JSName("security-advisories/create-private-vulnerability-report")
    var `security-advisoriesSlashcreate-private-vulnerability-report`: RequestBodyContentApplicationjsonCvssvectorstringCweids
    
    /**
      * Create a repository security advisory
      * @description Creates a new repository security advisory.
      * You must authenticate using an access token with the `repo` scope or `repository_advisories:write` permission to use this endpoint.
      *
      * In order to create a draft repository security advisory, you must be a security manager or administrator of that repository.
      */
    @JSName("security-advisories/create-repository-advisory")
    var `security-advisoriesSlashcreate-repository-advisory`: RequestBodyContentApplicationjsonVulnerabilities
    
    /**
      * Get a repository security advisory
      * @description Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
      * You can access any published security advisory on a public repository.
      * You must authenticate using an access token with the `repo` scope or `repository_advisories:read` permission
      * in order to get a published security advisory in a private repository, or any unpublished security advisory that you have access to.
      *
      * You can access an unpublished security advisory from a repository if you are a security manager or administrator of that repository, or if you are a
      * collaborator on the security advisory.
      */
    @JSName("security-advisories/get-repository-advisory")
    var `security-advisoriesSlashget-repository-advisory`: ParametersPathGhsaidOwner
    
    /**
      * List repository security advisories
      * @description Lists security advisories in a repository.
      * You must authenticate using an access token with the `repo` scope or `repository_advisories:read` permission
      * in order to get published security advisories in a private repository, or any unpublished security advisories that you have access to.
      *
      * You can access unpublished security advisories from a repository if you are a security manager or administrator of that repository, or if you are a collaborator on any security advisory.
      */
    @JSName("security-advisories/list-repository-advisories")
    var `security-advisoriesSlashlist-repository-advisories`: ParametersQueryDirectionPerpage
    
    /**
      * Update a repository security advisory
      * @description Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
      * You must authenticate using an access token with the `repo` scope or `repository_advisories:write` permission to use this endpoint.
      *
      * In order to update any security advisory, you must be a security manager or administrator of that repository,
      * or a collaborator on the repository security advisory.
      */
    @JSName("security-advisories/update-repository-advisory")
    var `security-advisoriesSlashupdate-repository-advisory`: RequestBodyContentApplicationjsonCreditsCveid
    
    /**
      * Add team member (Legacy)
      * @deprecated
      * @description The "Add team member" endpoint (described below) is deprecated.
      *
      * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      *
      * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("teams/add-member-legacy")
    var `teamsSlashadd-member-legacy`: ParametersPathTeamidNumberUsernameStringResponses517
    
    /**
      * Add or update team membership for a user
      * @description Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      *
      * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
      *
      * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      */
    @JSName("teams/add-or-update-membership-for-user-in-org")
    var `teamsSlashadd-or-update-membership-for-user-in-org`: Responses200ContentApplicationjsonRoleState
    
    /**
      * Add or update team membership for a user (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      *
      * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
      *
      * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
      */
    @JSName("teams/add-or-update-membership-for-user-legacy")
    var `teamsSlashadd-or-update-membership-for-user-legacy`: ParametersPathTeamidNumberUsernameStringRequestBody
    
    /**
      * Add or update team project permissions
      * @description Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      */
    @JSName("teams/add-or-update-project-permissions-in-org")
    var `teamsSlashadd-or-update-project-permissions-in-org`: ParametersPathOrgProjectidRequestBody
    
    /**
      * Add or update team project permissions (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
      *
      * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
      */
    @JSName("teams/add-or-update-project-permissions-legacy")
    var `teamsSlashadd-or-update-project-permissions-legacy`: Responses403ContentApplicationjsonDocumentationurl404Content36
    
    /**
      * Add or update team repository permissions
      * @description To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      *
      * For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
      */
    @JSName("teams/add-or-update-repo-permissions-in-org")
    var `teamsSlashadd-or-update-repo-permissions-in-org`: ParametersPathOrgOwnerRequestBody
    
    /**
      * Add or update team repository permissions (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
      *
      * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
      *
      * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("teams/add-or-update-repo-permissions-legacy")
    var `teamsSlashadd-or-update-repo-permissions-legacy`: Responses403Content36422Content346
    
    /**
      * Check team permissions for a project
      * @description Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      */
    @JSName("teams/check-permissions-for-project-in-org")
    var `teamsSlashcheck-permissions-for-project-in-org`: ParametersPathOrgProjectid
    
    /**
      * Check team permissions for a project (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
      *
      * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
      */
    @JSName("teams/check-permissions-for-project-legacy")
    var `teamsSlashcheck-permissions-for-project-legacy`: ParametersPathProjectidNumberTeamidNumber
    
    /**
      * Check team permissions for a repository
      * @description Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
      *
      * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
      *
      * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      */
    @JSName("teams/check-permissions-for-repo-in-org")
    var `teamsSlashcheck-permissions-for-repo-in-org`: ParametersPathOrgOwner
    
    /**
      * Check team permissions for a repository (Legacy)
      * @deprecated
      * @description **Note**: Repositories inherited through a parent team will also be checked.
      *
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
      *
      * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
      */
    @JSName("teams/check-permissions-for-repo-legacy")
    var `teamsSlashcheck-permissions-for-repo-legacy`: ParametersPathOwnerRepoTeamid
    
    /**
      * Create a team
      * @description To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
      *
      * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
      */
    @JSName("teams/create")
    var teamsSlashcreate: Responses201ContentApplicationjsonReposcount
    
    /**
      * Create a discussion comment
      * @description Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
      */
    @JSName("teams/create-discussion-comment-in-org")
    var `teamsSlashcreate-discussion-comment-in-org`: Responses201ContentApplicationjsonLasteditedat
    
    /**
      * Create a discussion comment (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
      *
      * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("teams/create-discussion-comment-legacy")
    var `teamsSlashcreate-discussion-comment-legacy`: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjsonBody
    
    /**
      * Create a discussion
      * @description Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
      */
    @JSName("teams/create-discussion-in-org")
    var `teamsSlashcreate-discussion-in-org`: Responses201ContentApplicationjsonCommentscount
    
    /**
      * Create a discussion (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
      *
      * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("teams/create-discussion-legacy")
    var `teamsSlashcreate-discussion-legacy`: ParametersPathTeamidNumberRequestBodyContentApplicationjsonPrivate
    
    /**
      * Delete a discussion comment
      * @description Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
      */
    @JSName("teams/delete-discussion-comment-in-org")
    var `teamsSlashdelete-discussion-comment-in-org`: ParametersPathCommentnumberDiscussionnumberOrgResponses
    
    /**
      * Delete a discussion comment (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
      *
      * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/delete-discussion-comment-legacy")
    var `teamsSlashdelete-discussion-comment-legacy`: ParametersPathCommentnumberDiscussionnumberTeamidResponses
    
    /**
      * Delete a discussion
      * @description Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
      */
    @JSName("teams/delete-discussion-in-org")
    var `teamsSlashdelete-discussion-in-org`: ParametersPathDiscussionnumberOrgTeamslugResponses
    
    /**
      * Delete a discussion (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
      *
      * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/delete-discussion-legacy")
    var `teamsSlashdelete-discussion-legacy`: ParametersPathDiscussionnumberNumberResponses
    
    /**
      * Delete a team
      * @description To delete a team, the authenticated user must be an organization owner or team maintainer.
      *
      * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
      */
    @JSName("teams/delete-in-org")
    var `teamsSlashdelete-in-org`: ParametersPathTeamslugString
    
    /**
      * Delete a team (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
      *
      * To delete a team, the authenticated user must be an organization owner or team maintainer.
      *
      * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
      */
    @JSName("teams/delete-legacy")
    var `teamsSlashdelete-legacy`: ParametersPathTeamidNumberResponses404Content36422Content346
    
    /**
      * Get a team by name
      * @description Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
      */
    @JSName("teams/get-by-name")
    var `teamsSlashget-by-name`: Responses200ContentApplicationjsonReposcount
    
    /**
      * Get a discussion comment
      * @description Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
      */
    @JSName("teams/get-discussion-comment-in-org")
    var `teamsSlashget-discussion-comment-in-org`: ParametersPathCommentnumberDiscussionnumberOrg
    
    /**
      * Get a discussion comment (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
      *
      * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/get-discussion-comment-legacy")
    var `teamsSlashget-discussion-comment-legacy`: ParametersPathCommentnumberDiscussionnumberTeamid
    
    /**
      * Get a discussion
      * @description Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
      */
    @JSName("teams/get-discussion-in-org")
    var `teamsSlashget-discussion-in-org`: ParametersPathDiscussionnumberOrgTeamslug
    
    /**
      * Get a discussion (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
      *
      * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/get-discussion-legacy")
    var `teamsSlashget-discussion-legacy`: ParametersPathDiscussionnumberNumber
    
    /**
      * Get a team (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
      */
    @JSName("teams/get-legacy")
    var `teamsSlashget-legacy`: ParametersPathTeamidNumber
    
    /**
      * Get team member (Legacy)
      * @deprecated
      * @description The "Get team member" endpoint (described below) is deprecated.
      *
      * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
      *
      * To list members in a team, the team must be visible to the authenticated user.
      */
    @JSName("teams/get-member-legacy")
    var `teamsSlashget-member-legacy`: ParametersPathTeamidNumberUsernameString
    
    /**
      * Get team membership for a user
      * @description Team members will include the members of child teams.
      *
      * To get a user's membership with a team, the team must be visible to the authenticated user.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      *
      * **Note:**
      * The response contains the `state` of the membership and the member's `role`.
      *
      * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
      */
    @JSName("teams/get-membership-for-user-in-org")
    var `teamsSlashget-membership-for-user-in-org`: ParametersPathTeamslugUsername
    
    /**
      * Get team membership for a user (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
      *
      * Team members will include the members of child teams.
      *
      * To get a user's membership with a team, the team must be visible to the authenticated user.
      *
      * **Note:**
      * The response contains the `state` of the membership and the member's `role`.
      *
      * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
      */
    @JSName("teams/get-membership-for-user-legacy")
    var `teamsSlashget-membership-for-user-legacy`: Responses200ContentApplicationjsonRoleState404Content36
    
    /**
      * List teams
      * @description Lists all teams in an organization that are visible to the authenticated user.
      */
    @JSName("teams/list")
    var teamsSlashlist: Responses200Content516403Content36
    
    /**
      * List child teams
      * @description Lists the child teams of the team specified by `{team_slug}`.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
      */
    @JSName("teams/list-child-in-org")
    var `teamsSlashlist-child-in-org`: Responses537
    
    /**
      * List child teams (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
      */
    @JSName("teams/list-child-legacy")
    var `teamsSlashlist-child-legacy`: Responses200Content516403Content36404Content36
    
    /**
      * List discussion comments
      * @description List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
      */
    @JSName("teams/list-discussion-comments-in-org")
    var `teamsSlashlist-discussion-comments-in-org`: ParametersQuery530
    
    /**
      * List discussion comments (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
      *
      * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/list-discussion-comments-legacy")
    var `teamsSlashlist-discussion-comments-legacy`: ParametersPathDiscussionnumberNumberQuery530
    
    /**
      * List discussions
      * @description List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
      */
    @JSName("teams/list-discussions-in-org")
    var `teamsSlashlist-discussions-in-org`: ParametersQueryPerpagePinned
    
    /**
      * List discussions (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
      *
      * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/list-discussions-legacy")
    var `teamsSlashlist-discussions-legacy`: ParametersPathTeamidNumberQuery530
    
    /**
      * List teams for the authenticated user
      * @description List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/). When using a fine-grained personal access token, the resource owner of the token [must be a single organization](https://docs.github.com/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token#fine-grained-personal-access-tokens), and have at least read-only member organization permissions. The response payload only contains the teams from a single organization when using a fine-grained personal access token.
      */
    @JSName("teams/list-for-authenticated-user")
    var `teamsSlashlist-for-authenticated-user`: Responses200Content667
    
    /**
      * List team members
      * @description Team members will include the members of child teams.
      *
      * To list members in a team, the team must be visible to the authenticated user.
      */
    @JSName("teams/list-members-in-org")
    var `teamsSlashlist-members-in-org`: ParametersQuery535
    
    /**
      * List team members (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
      *
      * Team members will include the members of child teams.
      */
    @JSName("teams/list-members-legacy")
    var `teamsSlashlist-members-legacy`: ParametersPathTeamidNumberQuery535
    
    /**
      * List pending team invitations
      * @description The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
      */
    @JSName("teams/list-pending-invitations-in-org")
    var `teamsSlashlist-pending-invitations-in-org`: ParametersPathTeamslugStringQuery473
    
    /**
      * List pending team invitations (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
      *
      * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
      */
    @JSName("teams/list-pending-invitations-legacy")
    var `teamsSlashlist-pending-invitations-legacy`: ParametersPathTeamidNumberQuery473
    
    /**
      * List team projects
      * @description Lists the organization projects for a team.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
      */
    @JSName("teams/list-projects-in-org")
    var `teamsSlashlist-projects-in-org`: Responses200Content536
    
    /**
      * List team projects (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
      *
      * Lists the organization projects for a team.
      */
    @JSName("teams/list-projects-legacy")
    var `teamsSlashlist-projects-legacy`: Responses200Content536404Content36
    
    /**
      * List team repositories
      * @description Lists a team's repositories visible to the authenticated user.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
      */
    @JSName("teams/list-repos-in-org")
    var `teamsSlashlist-repos-in-org`: Responses526
    
    /**
      * List team repositories (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
      */
    @JSName("teams/list-repos-legacy")
    var `teamsSlashlist-repos-legacy`: Responses200Content497
    
    /**
      * Remove team member (Legacy)
      * @deprecated
      * @description The "Remove team member" endpoint (described below) is deprecated.
      *
      * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      */
    @JSName("teams/remove-member-legacy")
    var `teamsSlashremove-member-legacy`: ParametersPathTeamidNumberUsernameString
    
    /**
      * Remove team membership for a user
      * @description To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      */
    @JSName("teams/remove-membership-for-user-in-org")
    var `teamsSlashremove-membership-for-user-in-org`: ParametersPathTeamslugUsernameResponses
    
    /**
      * Remove team membership for a user (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      */
    @JSName("teams/remove-membership-for-user-legacy")
    var `teamsSlashremove-membership-for-user-legacy`: ParametersPathTeamidNumberUsernameString
    
    /**
      * Remove a project from a team
      * @description Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      */
    @JSName("teams/remove-project-in-org")
    var `teamsSlashremove-project-in-org`: ParametersPathOrgProjectidResponses
    
    /**
      * Remove a project from a team (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
      *
      * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
      */
    @JSName("teams/remove-project-legacy")
    var `teamsSlashremove-project-legacy`: ParametersPathProjectidNumberTeamidNumberResponses404Content36422Content346
    
    /**
      * Remove a repository from a team
      * @description If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      */
    @JSName("teams/remove-repo-in-org")
    var `teamsSlashremove-repo-in-org`: ParametersPathOrgOwnerResponses
    
    /**
      * Remove a repository from a team (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
      *
      * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
      */
    @JSName("teams/remove-repo-legacy")
    var `teamsSlashremove-repo-legacy`: ParametersPathOwnerRepoTeamidResponses
    
    /**
      * Update a discussion comment
      * @description Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
      */
    @JSName("teams/update-discussion-comment-in-org")
    var `teamsSlashupdate-discussion-comment-in-org`: Responses200ContentApplicationjsonLasteditedat
    
    /**
      * Update a discussion comment (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
      *
      * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/update-discussion-comment-legacy")
    var `teamsSlashupdate-discussion-comment-legacy`: ParametersPathCommentnumberDiscussionnumberTeamidRequestBodyContentApplicationjsonBody
    
    /**
      * Update a discussion
      * @description Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
      */
    @JSName("teams/update-discussion-in-org")
    var `teamsSlashupdate-discussion-in-org`: Responses200ContentApplicationjsonCommentscount
    
    /**
      * Update a discussion (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
      *
      * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/update-discussion-legacy")
    var `teamsSlashupdate-discussion-legacy`: ParametersPathDiscussionnumberNumberRequestBody
    
    /**
      * Update a team
      * @description To edit a team, the authenticated user must either be an organization owner or a team maintainer.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
      */
    @JSName("teams/update-in-org")
    var `teamsSlashupdate-in-org`: Responses200201403
    
    /**
      * Update a team (Legacy)
      * @deprecated
      * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
      *
      * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
      *
      * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
      */
    @JSName("teams/update-legacy")
    var `teamsSlashupdate-legacy`: ParametersPathTeamidNumberRequestBodyContentApplicationjsonParentteamid
    
    /**
      * Add an email address for the authenticated user
      * @description This endpoint is accessible with the `user` scope.
      */
    @JSName("users/add-email-for-authenticated-user")
    var `usersSlashadd-email-for-authenticated-user`: Responses201Content654
    
    /**
      * Add social accounts for the authenticated user
      * @description Add one or more social accounts to the authenticated user's profile. This endpoint is accessible with the `user` scope.
      */
    @JSName("users/add-social-account-for-authenticated-user")
    var `usersSlashadd-social-account-for-authenticated-user`: Responses201665
    
    /** Block a user */
    @JSName("users/block")
    var usersSlashblock: ParametersPath649Responses304401Content36403Content36
    
    /** Check if a user is blocked by the authenticated user */
    @JSName("users/check-blocked")
    var `usersSlashcheck-blocked`: ParametersPath649
    
    /** Check if a user follows another user */
    @JSName("users/check-following-for-user")
    var `usersSlashcheck-following-for-user`: ParametersPathTargetuserUsername
    
    /** Check if a person is followed by the authenticated user */
    @JSName("users/check-person-is-followed-by-authenticated")
    var `usersSlashcheck-person-is-followed-by-authenticated`: ParametersPath649
    
    /**
      * Create a GPG key for the authenticated user
      * @description Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("users/create-gpg-key-for-authenticated-user")
    var `usersSlashcreate-gpg-key-for-authenticated-user`: Responses201ContentApplicationjsonCanencryptcomms
    
    /**
      * Create a public SSH key for the authenticated user
      * @description Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("users/create-public-ssh-key-for-authenticated-user")
    var `usersSlashcreate-public-ssh-key-for-authenticated-user`: Responses201ContentApplicationjsonIdKey
    
    /**
      * Create a SSH signing key for the authenticated user
      * @description Creates an SSH signing key for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `write:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
      */
    @JSName("users/create-ssh-signing-key-for-authenticated-user")
    var `usersSlashcreate-ssh-signing-key-for-authenticated-user`: Responses201ContentApplicationjsonCreatedatIdKey
    
    /**
      * Delete an email address for the authenticated user
      * @description This endpoint is accessible with the `user` scope.
      */
    @JSName("users/delete-email-for-authenticated-user")
    var `usersSlashdelete-email-for-authenticated-user`: RequestBodyResponses304401Content36403Content36
    
    /**
      * Delete a GPG key for the authenticated user
      * @description Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("users/delete-gpg-key-for-authenticated-user")
    var `usersSlashdelete-gpg-key-for-authenticated-user`: ParametersPathGpgkeyidNumberResponses304401Content36403Content36
    
    /**
      * Delete a public SSH key for the authenticated user
      * @description Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("users/delete-public-ssh-key-for-authenticated-user")
    var `usersSlashdelete-public-ssh-key-for-authenticated-user`: ParametersPathKeyidNumberResponses401Content36403Content36404Content36
    
    /**
      * Delete social accounts for the authenticated user
      * @description Deletes one or more social accounts from the authenticated user's profile. This endpoint is accessible with the `user` scope.
      */
    @JSName("users/delete-social-account-for-authenticated-user")
    var `usersSlashdelete-social-account-for-authenticated-user`: RequestBodyContentApplicationjsonAccounturlsResponses304401Content36403Content36
    
    /**
      * Delete an SSH signing key for the authenticated user
      * @description Deletes an SSH signing key from the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `admin:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
      */
    @JSName("users/delete-ssh-signing-key-for-authenticated-user")
    var `usersSlashdelete-ssh-signing-key-for-authenticated-user`: ParametersPathSshsigningkeyidNumberResponses401Content36403Content36404Content36
    
    /**
      * Follow a user
      * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      *
      * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
      */
    @JSName("users/follow")
    var usersSlashfollow: Responses401Content36403Content36404Content36
    
    /**
      * Get the authenticated user
      * @description If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
      *
      * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
      */
    @JSName("users/get-authenticated")
    var `usersSlashget-authenticated`: Responses200Content648
    
    /**
      * Get a user
      * @description Provides publicly available information about someone with a GitHub account.
      *
      * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
      *
      * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
      *
      * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
      */
    @JSName("users/get-by-username")
    var `usersSlashget-by-username`: Responses200Content648404Content36
    
    /**
      * Get contextual information for a user
      * @description Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
      *
      * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
      *
      * ```shell
      *  curl -u username:token
      *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
      * ```
      */
    @JSName("users/get-context-for-user")
    var `usersSlashget-context-for-user`: ParametersPath649QuerySubjectid
    
    /**
      * Get a GPG key for the authenticated user
      * @description View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("users/get-gpg-key-for-authenticated-user")
    var `usersSlashget-gpg-key-for-authenticated-user`: ParametersPathGpgkeyidNumber
    
    /**
      * Get a public SSH key for the authenticated user
      * @description View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("users/get-public-ssh-key-for-authenticated-user")
    var `usersSlashget-public-ssh-key-for-authenticated-user`: ParametersPathKeyidNumber
    
    /**
      * Get an SSH signing key for the authenticated user
      * @description Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
      */
    @JSName("users/get-ssh-signing-key-for-authenticated-user")
    var `usersSlashget-ssh-signing-key-for-authenticated-user`: ParametersPathSshsigningkeyidNumber
    
    /**
      * List users
      * @description Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
      *
      * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
      */
    @JSName("users/list")
    var usersSlashlist: Responses200Content508Headers25
    
    /**
      * List users blocked by the authenticated user
      * @description List the users you've blocked on your personal account.
      */
    @JSName("users/list-blocked-by-authenticated-user")
    var `usersSlashlist-blocked-by-authenticated-user`: Responses200Content508304
    
    /**
      * List email addresses for the authenticated user
      * @description Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
      */
    @JSName("users/list-emails-for-authenticated-user")
    var `usersSlashlist-emails-for-authenticated-user`: Responses200Content654HeadersLinkString
    
    /**
      * List the people the authenticated user follows
      * @description Lists the people who the authenticated user follows.
      */
    @JSName("users/list-followed-by-authenticated-user")
    var `usersSlashlist-followed-by-authenticated-user`: Responses200Content508HeadersLinkString304401Content36
    
    /**
      * List followers of the authenticated user
      * @description Lists the people following the authenticated user.
      */
    @JSName("users/list-followers-for-authenticated-user")
    var `usersSlashlist-followers-for-authenticated-user`: Responses200Content508HeadersLinkString304401Content36
    
    /**
      * List followers of a user
      * @description Lists the people following the specified user.
      */
    @JSName("users/list-followers-for-user")
    var `usersSlashlist-followers-for-user`: ParametersPath649Query473Responses521
    
    /**
      * List the people a user follows
      * @description Lists the people who the specified user follows.
      */
    @JSName("users/list-following-for-user")
    var `usersSlashlist-following-for-user`: ParametersPath649Query473Responses521
    
    /**
      * List GPG keys for the authenticated user
      * @description Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("users/list-gpg-keys-for-authenticated-user")
    var `usersSlashlist-gpg-keys-for-authenticated-user`: Responses200Content655
    
    /**
      * List GPG keys for a user
      * @description Lists the GPG keys for a user. This information is accessible by anyone.
      */
    @JSName("users/list-gpg-keys-for-user")
    var `usersSlashlist-gpg-keys-for-user`: Responses668
    
    /**
      * List public email addresses for the authenticated user
      * @description Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
      */
    @JSName("users/list-public-emails-for-authenticated-user")
    var `usersSlashlist-public-emails-for-authenticated-user`: Responses200Content654HeadersLinkString
    
    /**
      * List public keys for a user
      * @description Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
      */
    @JSName("users/list-public-keys-for-user")
    var `usersSlashlist-public-keys-for-user`: Responses200Content669
    
    /**
      * List public SSH keys for the authenticated user
      * @description Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("users/list-public-ssh-keys-for-authenticated-user")
    var `usersSlashlist-public-ssh-keys-for-authenticated-user`: Responses200Content658
    
    /**
      * List social accounts for the authenticated user
      * @description Lists all of your social accounts.
      */
    @JSName("users/list-social-accounts-for-authenticated-user")
    var `usersSlashlist-social-accounts-for-authenticated-user`: Responses200Content664
    
    /**
      * List social accounts for a user
      * @description Lists social media accounts for a user. This endpoint is accessible by anyone.
      */
    @JSName("users/list-social-accounts-for-user")
    var `usersSlashlist-social-accounts-for-user`: Responses671
    
    /**
      * List SSH signing keys for the authenticated user
      * @description Lists the SSH signing keys for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."
      */
    @JSName("users/list-ssh-signing-keys-for-authenticated-user")
    var `usersSlashlist-ssh-signing-keys-for-authenticated-user`: Responses200Content666
    
    /**
      * List SSH signing keys for a user
      * @description Lists the SSH signing keys for a user. This operation is accessible by anyone.
      */
    @JSName("users/list-ssh-signing-keys-for-user")
    var `usersSlashlist-ssh-signing-keys-for-user`: Responses672
    
    /**
      * Set primary email visibility for the authenticated user
      * @description Sets the visibility for your primary email addresses.
      */
    @JSName("users/set-primary-email-visibility-for-authenticated-user")
    var `usersSlashset-primary-email-visibility-for-authenticated-user`: Responses200Content654
    
    /** Unblock a user */
    @JSName("users/unblock")
    var usersSlashunblock: Responses401Content36403Content36404Content36
    
    /**
      * Unfollow a user
      * @description Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
      */
    @JSName("users/unfollow")
    var usersSlashunfollow: Responses401Content36403Content36404Content36
    
    /**
      * Update the authenticated user
      * @description **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
      */
    @JSName("users/update-authenticated")
    var `usersSlashupdate-authenticated`: Responses200ContentApplicationjsonBusinessplus
  }
  object operations {
    
    inline def apply(
      `actionsSlashadd-custom-labels-to-self-hosted-runner-for-org`: Responses200ContentApplicationjsonLabelsArray404Content36,
      `actionsSlashadd-custom-labels-to-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunneridRequestBodyContentApplicationjsonLabels,
      `actionsSlashadd-selected-repo-to-org-secret`: ParametersPathOrgRepositoryidSecretname,
      `actionsSlashadd-selected-repo-to-org-variable`: ParametersPathNameStringOrgStringRepositoryidNumber,
      `actionsSlashadd-selected-repo-to-required-workflow`: ParametersPathRepositoryidRequiredworkflowid,
      `actionsSlashapprove-workflow-run`: Responses201ContentApplicationjsonRecord,
      `actionsSlashcancel-workflow-run`: Responses409Content36,
      `actionsSlashcreate-environment-variable`: Parameters642RequestBodyContentApplicationjsonNameValue,
      `actionsSlashcreate-or-update-environment-secret`: ParametersPathSecretnameStringRequestBodyContentApplicationjsonEncryptedvalueString,
      `actionsSlashcreate-or-update-org-secret`: Responses506,
      `actionsSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjson163,
      `actionsSlashcreate-org-variable`: Parameters496RequestBodyContentApplicationjsonValue,
      `actionsSlashcreate-registration-token-for-org`: Responses201ContentApplicationjsonExpiresatPermissions,
      `actionsSlashcreate-registration-token-for-repo`: Parameters540Responses201ContentApplicationjsonExpiresatPermissions,
      `actionsSlashcreate-remove-token-for-org`: Responses201ContentApplicationjsonExpiresatPermissions,
      `actionsSlashcreate-remove-token-for-repo`: Parameters540Responses201ContentApplicationjsonExpiresatPermissions,
      `actionsSlashcreate-repo-variable`: Parameters540RequestBodyContentApplicationjsonNameValue,
      `actionsSlashcreate-required-workflow`: Responses201ContentApplicationjsonNamePath,
      `actionsSlashcreate-workflow-dispatch`: ParametersPathRepoWorkflowidRequestBodyContentApplicationjsonInputs,
      `actionsSlashdelete-actions-cache-by-id`: ParametersPathCacheidOwner,
      `actionsSlashdelete-actions-cache-by-key`: ParametersQueryKeyStringRef,
      `actionsSlashdelete-artifact`: ParametersPathArtifactidOwnerResponses,
      `actionsSlashdelete-environment-secret`: ParametersPathSecretnameStringResponses,
      `actionsSlashdelete-environment-variable`: ParametersPathEnvironmentnameStringNameString,
      `actionsSlashdelete-org-secret`: ParametersPathOrgSecretnameResponses,
      `actionsSlashdelete-org-variable`: ParametersPathNameStringOrgStringResponses,
      `actionsSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses,
      `actionsSlashdelete-repo-variable`: ParametersPathNameStringOwnerStringResponses,
      `actionsSlashdelete-required-workflow`: ParametersPathOrgRequiredworkflowidResponses,
      `actionsSlashdelete-self-hosted-runner-from-org`: ParametersPathOrgRunneridResponses,
      `actionsSlashdelete-self-hosted-runner-from-repo`: ParametersPathOwnerRepoRunneridResponses,
      `actionsSlashdelete-workflow-run`: Parameters544,
      `actionsSlashdelete-workflow-run-logs`: Responses403Content36500Content36,
      `actionsSlashdisable-selected-repository-github-actions-organization`: ParametersPathOrgStringRepositoryidNumber,
      `actionsSlashdisable-workflow`: ParametersPathRepoWorkflowidResponses,
      `actionsSlashdownload-artifact`: ParametersPathArchiveformatArtifactid,
      `actionsSlashdownload-job-logs-for-workflow-run`: ParametersPathJobidOwnerResponses,
      `actionsSlashdownload-workflow-run-attempt-logs`: Parameters546,
      `actionsSlashdownload-workflow-run-logs`: Parameters544,
      `actionsSlashenable-selected-repository-github-actions-organization`: ParametersPathOrgStringRepositoryidNumber,
      `actionsSlashenable-workflow`: ParametersPathRepoWorkflowidResponses,
      `actionsSlashget-actions-cache-list`: ParametersQueryDirectionKey,
      `actionsSlashget-actions-cache-usage`: Responses200ContentApplicationjsonActivecachescount,
      `actionsSlashget-actions-cache-usage-by-repo-for-org`: ParametersPathOrgStringQuery473,
      `actionsSlashget-actions-cache-usage-for-org`: Responses200ContentApplicationjsonTotalactivecachescount,
      `actionsSlashget-allowed-actions-organization`: Responses200ContentApplicationjsonGithubownedallowed,
      `actionsSlashget-allowed-actions-repository`: Parameters540Responses200ContentApplicationjsonGithubownedallowed,
      `actionsSlashget-artifact`: ParametersPathArtifactidOwner,
      `actionsSlashget-custom-oidc-sub-claim-for-repo`: Responses200ContentApplicationjsonIncludeclaimkeys,
      `actionsSlashget-environment-public-key`: Parameters642,
      `actionsSlashget-environment-secret`: ParametersPathSecretnameString,
      `actionsSlashget-environment-variable`: ParametersPathEnvironmentnameNameRepositoryid,
      `actionsSlashget-github-actions-default-workflow-permissions-organization`: Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions,
      `actionsSlashget-github-actions-default-workflow-permissions-repository`: Parameters540Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions,
      `actionsSlashget-github-actions-permissions-organization`: Responses200ContentApplicationjsonAllowedactionsEnabledrepositories,
      `actionsSlashget-github-actions-permissions-repository`: Responses200ContentApplicationjsonAllowedactionsEnabled,
      `actionsSlashget-job-for-workflow-run`: ParametersPathJobidOwner,
      `actionsSlashget-org-public-key`: Responses200ContentApplicationjsonCreatedatId,
      `actionsSlashget-org-secret`: ParametersPathOrgSecretname,
      `actionsSlashget-org-variable`: ParametersPathNameStringOrgString,
      `actionsSlashget-pending-deployments-for-run`: Responses200Content550,
      `actionsSlashget-repo-public-key`: Parameters540Responses200ContentApplicationjsonCreatedatId,
      `actionsSlashget-repo-required-workflow`: ParametersPathRepoRequiredworkflowidforrepo,
      `actionsSlashget-repo-required-workflow-usage`: Responses200ContentApplicationjsonBillable,
      `actionsSlashget-repo-secret`: ParametersPathOwnerRepoSecretname,
      `actionsSlashget-repo-variable`: ParametersPathNameStringOwnerString,
      `actionsSlashget-required-workflow`: ParametersPathOrgRequiredworkflowid,
      `actionsSlashget-reviews-for-run`: Responses200Content545,
      `actionsSlashget-self-hosted-runner-for-org`: ParametersPathOrgRunnerid,
      `actionsSlashget-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunnerid,
      `actionsSlashget-workflow`: ParametersPathRepoWorkflowid,
      `actionsSlashget-workflow-access-to-repository`: Responses200ContentApplicationjsonAccesslevel,
      `actionsSlashget-workflow-run`: ParametersPathRepoRunid,
      `actionsSlashget-workflow-run-attempt`: ParametersPathAttemptnumberOwner,
      `actionsSlashget-workflow-run-usage`: Responses200ContentApplicationjsonRundurationms,
      `actionsSlashget-workflow-usage`: Responses552,
      `actionsSlashlist-artifacts-for-repo`: ParametersQueryNamePagePerpage,
      `actionsSlashlist-environment-secrets`: ParametersPathEnvironmentnameStringRepositoryidNumber,
      `actionsSlashlist-environment-variables`: ParametersPathEnvironmentnameStringRepositoryidNumberResponses200ContentApplicationjsonTotalcountNumberVariablesArray,
      `actionsSlashlist-jobs-for-workflow-run`: ParametersQuery548,
      `actionsSlashlist-jobs-for-workflow-run-attempt`: ParametersPathAttemptnumberOwnerQuery473,
      `actionsSlashlist-labels-for-self-hosted-runner-for-org`: Responses200ContentApplicationjsonLabelsArray,
      `actionsSlashlist-labels-for-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunneridResponses200ContentApplicationjsonLabelsArray,
      `actionsSlashlist-org-secrets`: Responses200ContentApplicationjson505,
      `actionsSlashlist-org-variables`: Responses200ContentApplicationjsonVariablesArray,
      `actionsSlashlist-repo-organization-secrets`: Responses200ContentApplicationjson542,
      `actionsSlashlist-repo-organization-variables`: Responses200ContentApplicationjsonTotalcountNumberVariablesArray,
      `actionsSlashlist-repo-required-workflows`: ParametersPathRepoString,
      `actionsSlashlist-repo-secrets`: Responses200ContentApplicationjson542,
      `actionsSlashlist-repo-variables`: Responses200ContentApplicationjsonTotalcountNumberVariablesArray,
      `actionsSlashlist-repo-workflows`: Responses200ContentApplicationjsonTotalcountWorkflows,
      `actionsSlashlist-required-workflow-runs`: ParametersPathOwnerRepoRequiredworkflowidforrepo,
      `actionsSlashlist-required-workflows`: Responses200ContentApplicationjsonRequiredworkflowsArray,
      `actionsSlashlist-runner-applications-for-org`: Responses200Content504,
      `actionsSlashlist-runner-applications-for-repo`: Parameters540Responses200Content504,
      `actionsSlashlist-selected-repos-for-org-secret`: ParametersQuery507,
      `actionsSlashlist-selected-repos-for-org-variable`: ParametersPathNameStringOrgStringQuery507,
      `actionsSlashlist-selected-repositories-enabled-github-actions-organization`: Responses200ContentApplicationjsonRepositoriesArray,
      `actionsSlashlist-selected-repositories-required-workflow`: ParametersPathOrgRequiredworkflowidResponses200ContentApplicationjsonRepositoriesArray,
      `actionsSlashlist-self-hosted-runners-for-org`: Responses200ContentApplicationjsonRunnersTotalcount,
      `actionsSlashlist-self-hosted-runners-for-repo`: ParametersPathOwnerStringResponses200ContentApplicationjsonRunnersTotalcount,
      `actionsSlashlist-workflow-run-artifacts`: ParametersPathRepoRunidQuery473,
      `actionsSlashlist-workflow-runs`: ParametersPathRepoWorkflowidQueryActorBranch,
      `actionsSlashlist-workflow-runs-for-repo`: ParametersQueryActorBranch,
      `actionsSlashre-run-job-for-workflow-run`: Responses201ContentApplicationjsonRecord403Content36,
      `actionsSlashre-run-workflow`: Parameters544RequestBody,
      `actionsSlashre-run-workflow-failed-jobs`: Parameters544RequestBody,
      `actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-org`: Responses200ContentApplicationjsonLabelsArray,
      `actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunneridResponses200ContentApplicationjsonLabelsArray,
      `actionsSlashremove-custom-label-from-self-hosted-runner-for-org`: ParametersPathNameOrgRunnerid,
      `actionsSlashremove-custom-label-from-self-hosted-runner-for-repo`: ParametersPathNameOwnerRepoRunnerid,
      `actionsSlashremove-selected-repo-from-org-secret`: ParametersPathOrgRepositoryidSecretname,
      `actionsSlashremove-selected-repo-from-org-variable`: ParametersPathNameStringOrgStringRepositoryidNumber,
      `actionsSlashremove-selected-repo-from-required-workflow`: ParametersPathRepositoryidRequiredworkflowid,
      `actionsSlashreview-custom-gates-for-run`: RequestBodyContent547,
      `actionsSlashreview-pending-deployments-for-run`: Responses200Content551,
      `actionsSlashset-allowed-actions-organization`: Parameters496RequestBody,
      `actionsSlashset-allowed-actions-repository`: Parameters540RequestBody,
      `actionsSlashset-custom-labels-for-self-hosted-runner-for-org`: Responses200ContentApplicationjsonLabelsArray404Content36,
      `actionsSlashset-custom-labels-for-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunneridRequestBodyContentApplicationjsonLabels,
      `actionsSlashset-custom-oidc-sub-claim-for-repo`: Responses201400404,
      `actionsSlashset-github-actions-default-workflow-permissions-organization`: Parameters496RequestBodyResponses,
      `actionsSlashset-github-actions-default-workflow-permissions-repository`: RequestBodyContentApplicationjson502,
      `actionsSlashset-github-actions-permissions-organization`: RequestBodyContentApplicationjson501,
      `actionsSlashset-github-actions-permissions-repository`: RequestBodyContentApplicationjsonAllowedactionsEnabledBoolean,
      `actionsSlashset-selected-repos-for-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids,
      `actionsSlashset-selected-repos-for-org-variable`: ParametersPathNameStringOrgStringRequestBodyContentApplicationjsonSelectedrepositoryids,
      `actionsSlashset-selected-repos-to-required-workflow`: ParametersPathOrgRequiredworkflowidRequestBodyContentApplicationjsonSelectedrepositoryids,
      `actionsSlashset-selected-repositories-enabled-github-actions-organization`: Parameters496RequestBodyContentApplicationjsonSelectedrepositoryids,
      `actionsSlashset-workflow-access-to-repository`: RequestBodyContentApplicationjsonAccesslevel,
      `actionsSlashupdate-environment-variable`: ParametersPathEnvironmentnameStringNameStringRequestBodyContentApplicationjson165,
      `actionsSlashupdate-org-variable`: ParametersPathNameStringOrgStringRequestBodyContentApplicationjsonVisibility,
      `actionsSlashupdate-repo-variable`: ParametersPathNameStringOwnerStringRequestBodyContentApplicationjson165,
      `actionsSlashupdate-required-workflow`: Responses422Content471,
      `activitySlashcheck-repo-is-starred-by-authenticated-user`: Responses403Content36404ContentApplicationjsonDocumentationurlMessage,
      `activitySlashdelete-repo-subscription`: Parameters540Responses,
      `activitySlashdelete-thread-subscription`: Responses304401Content36,
      `activitySlashget-feeds`: Responses200ContentApplicationjsonCurrentuserorganizationurl,
      `activitySlashget-repo-subscription`: Responses200ContentApplicationjsonCreatedatIgnored,
      `activitySlashget-thread`: ParametersPathThreadidNumber,
      `activitySlashget-thread-subscription-for-authenticated-user`: Responses200ContentApplicationjsonRepositoryurl,
      `activitySlashlist-events-for-authenticated-user`: ParametersPath649Query473,
      `activitySlashlist-notifications-for-authenticated-user`: ParametersQueryAllBefore,
      `activitySlashlist-org-events-for-authenticated-user`: ParametersPathOrgStringUsernameString,
      `activitySlashlist-public-events`: Responses304403503,
      `activitySlashlist-public-events-for-repo-network`: ParametersPathOwnerString,
      `activitySlashlist-public-events-for-user`: ParametersPath649Query473,
      `activitySlashlist-public-org-events`: Responses200Content480,
      `activitySlashlist-received-events-for-user`: ParametersPath649Query473,
      `activitySlashlist-received-public-events-for-user`: ParametersPath649Query473,
      `activitySlashlist-repo-events`: ParametersPathOwnerStringResponses200Content480,
      `activitySlashlist-repo-notifications-for-authenticated-user`: ParametersQueryBeforePage,
      `activitySlashlist-repos-starred-by-authenticated-user`: ParametersQueryDirectionPagePerpageSort,
      `activitySlashlist-repos-starred-by-user`: ParametersPath649QueryDirectionPagePerpageSort,
      `activitySlashlist-repos-watched-by-user`: ParametersPath649Query473Responses526,
      `activitySlashlist-stargazers-for-repo`: Responses200Content630,
      `activitySlashlist-watched-repos-for-authenticated-user`: Responses200Content497304,
      `activitySlashlist-watchers-for-repo`: ParametersPathOwnerStringResponses521,
      `activitySlashmark-notifications-as-read`: Responses202304401403,
      `activitySlashmark-repo-notifications-as-read`: RequestBodyResponses202ContentApplicationjsonUrl,
      `activitySlashmark-thread-as-read`: Responses492,
      `activitySlashset-repo-subscription`: Responses634,
      `activitySlashset-thread-subscription`: ParametersPathThreadidNumberRequestBody,
      `activitySlashstar-repo-for-authenticated-user`: Parameters540Responses401Content36403Content36404Content36,
      `activitySlashunstar-repo-for-authenticated-user`: Parameters540Responses401Content36403Content36404Content36,
      `appsSlashadd-repo-to-installation-for-authenticated-user`: ParametersPathInstallationidNumberRepositoryidNumber,
      `appsSlashcheck-token`: RequestBodyContentApplicationjsonAccesstoken,
      `appsSlashcreate-from-manifest`: ParametersPath,
      `appsSlashcreate-installation-access-token`: Responses201401403,
      `appsSlashdelete-authorization`: ParametersPathClientidString,
      `appsSlashdelete-installation`: Responses404Content36,
      `appsSlashdelete-token`: ParametersPathClientidString,
      `appsSlashget-authenticated`: Responses200ContentApplicationjsonExternalurl,
      `appsSlashget-by-slug`: ParametersPathAppslugString,
      `appsSlashget-installation`: ParametersPathInstallationidNumber,
      `appsSlashget-org-installation`: Responses514,
      `appsSlashget-repo-installation`: Responses301Content36,
      `appsSlashget-subscription-plan-for-account`: ParametersPathAccountidNumber,
      `appsSlashget-subscription-plan-for-account-stubbed`: Responses200ContentApplicationjsonMarketplacependingchange401Content36,
      `appsSlashget-user-installation`: ParametersPath649Responses514,
      `appsSlashget-webhook-config-for-app`: Responses200ContentApplicationjsonContenttype,
      `appsSlashget-webhook-delivery`: ParametersPathDeliveryidNumber,
      `appsSlashlist-accounts-for-plan`: ParametersPathPlanidNumber,
      `appsSlashlist-accounts-for-plan-stubbed`: Responses200Content490,
      `appsSlashlist-installation-repos-for-authenticated-user`: ParametersPathInstallationidNumberQuery473,
      `appsSlashlist-installation-requests-for-authenticated-app`: ParametersQuery473,
      `appsSlashlist-installations`: ParametersQueryOutdatedPage,
      `appsSlashlist-installations-for-authenticated-user`: Responses200ContentApplicationjsonInstallationsTotalcount304,
      `appsSlashlist-plans`: Responses200Content489,
      `appsSlashlist-plans-stubbed`: Responses200Content489401Content36,
      `appsSlashlist-repos-accessible-to-installation`: Responses200ContentApplicationjsonRepositoryselectionTotalcount,
      `appsSlashlist-subscriptions-for-authenticated-user`: Responses200304401404,
      `appsSlashlist-subscriptions-for-authenticated-user-stubbed`: Responses200Content659,
      `appsSlashlist-webhook-deliveries`: ParametersQueryRedelivery,
      `appsSlashredeliver-webhook-delivery`: Responses202400422,
      `appsSlashremove-repo-from-installation-for-authenticated-user`: ParametersPathInstallationidNumberRepositoryidNumber,
      `appsSlashreset-token`: Responses200ContentApplicationjsonFingerprint422Content346,
      `appsSlashrevoke-installation-access-token`: `31`,
      `appsSlashscope-token`: RequestBodyContentApplicationjsonTargetid,
      `appsSlashsuspend-installation`: Responses404Content36,
      `appsSlashunsuspend-installation`: Responses404Content36,
      `appsSlashupdate-webhook-config-for-app`: RequestBodyContentApplicationjsonContenttypeInsecuressl,
      `billingSlashget-github-actions-billing-org`: Responses200ContentApplicationjsonIncludedminutes,
      `billingSlashget-github-actions-billing-user`: ParametersPath649Responses200ContentApplicationjsonIncludedminutes,
      `billingSlashget-github-packages-billing-org`: Responses200ContentApplicationjsonIncludedgigabytesbandwidth,
      `billingSlashget-github-packages-billing-user`: ParametersPath649Responses200ContentApplicationjsonIncludedgigabytesbandwidth,
      `billingSlashget-shared-storage-billing-org`: Responses200ContentApplicationjsonDaysleftinbillingcycle,
      `billingSlashget-shared-storage-billing-user`: ParametersPath649Responses200ContentApplicationjsonDaysleftinbillingcycle,
      checksSlashcreate: Responses201ContentApplicationjsonOutput,
      `checksSlashcreate-suite`: Responses200ContentApplicationjsonRunsrerequestable,
      checksSlashget: ParametersPathCheckrunidOwner,
      `checksSlashget-suite`: ParametersPathChecksuiteidOwner,
      `checksSlashlist-annotations`: ParametersPathCheckrunidOwnerQuery473,
      `checksSlashlist-for-ref`: ParametersQueryPerpageStatus,
      `checksSlashlist-for-suite`: ParametersQueryChecknameFilter,
      `checksSlashlist-suites-for-ref`: ParametersQueryAppidChecknamePage,
      `checksSlashrerequest-run`: Responses403ContentApplicationjsonDocumentationurlMessage,
      `checksSlashrerequest-suite`: ParametersPathChecksuiteidOwnerResponses506,
      `checksSlashset-suites-preferences`: Responses200ContentApplicationjsonPreferencesRepository,
      checksSlashupdate: Responses200ContentApplicationjsonOutput,
      `code-scanningSlashdelete-analysis`: ParametersPathAnalysisidOwnerQueryConfirmdelete,
      `code-scanningSlashget-alert`: ParametersPathAlertnumberOwnerRepo,
      `code-scanningSlashget-analysis`: ParametersPathAnalysisidOwner,
      `code-scanningSlashget-codeql-database`: ParametersPathLanguageOwner,
      `code-scanningSlashget-default-setup`: Responses200ContentApplicationjsonLanguages,
      `code-scanningSlashget-sarif`: ParametersPathOwnerRepoSarifid,
      `code-scanningSlashlist-alert-instances`: ParametersQueryPagePerpageRef,
      `code-scanningSlashlist-alerts-for-org`: ParametersQueryToolname,
      `code-scanningSlashlist-alerts-for-repo`: ParametersQueryRefSort,
      `code-scanningSlashlist-codeql-databases`: Responses200Content564,
      `code-scanningSlashlist-recent-analyses`: ParametersQueryRefSarifid,
      `code-scanningSlashupdate-alert`: RequestBodyContentApplicationjsonDismissedreasonState,
      `code-scanningSlashupdate-default-setup`: RequestBodyContentApplicationjsonQuerysuite,
      `code-scanningSlashupload-sarif`: RequestBodyContentApplicationjsonSarif,
      `codes-of-conductSlashget-all-codes-of-conduct`: Responses200Content477,
      `codes-of-conductSlashget-conduct-code`: Responses200ContentApplicationjsonBodyHtmlurl,
      `codespacesSlashadd-repository-for-secret-for-authenticated-user`: ParametersPathRepositoryidNumberSecretnameString,
      `codespacesSlashadd-selected-repo-to-org-secret`: Responses404Content36422Content346,
      `codespacesSlashcodespace-machines-for-authenticated-user`: Responses200ContentApplicationjsonMachinesTotalcount,
      `codespacesSlashcreate-for-authenticated-user`: RequestBodyContent372Responses201202401,
      `codespacesSlashcreate-or-update-org-secret`: Responses201ContentApplicationjsonRecord404Content36,
      `codespacesSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjson163,
      `codespacesSlashcreate-or-update-secret-for-authenticated-user`: ParametersPath652RequestBodyContentApplicationjsonKeyidSelectedrepositoryids,
      `codespacesSlashcreate-with-pr-for-authenticated-user`: Responses201202401,
      `codespacesSlashcreate-with-repo-for-authenticated-user`: Responses201202400,
      `codespacesSlashdelete-codespaces-billing-users`: Parameters496RequestBodyContentApplicationjsonSelectedusernamesArray,
      `codespacesSlashdelete-for-authenticated-user`: Responses202304401403404,
      `codespacesSlashdelete-from-organization`: ParametersPathCodespacenameOrg,
      `codespacesSlashdelete-org-secret`: ParametersPathOrgSecretnameResponses404Content36,
      `codespacesSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses,
      `codespacesSlashdelete-secret-for-authenticated-user`: ParametersPath652Responses,
      `codespacesSlashexport-for-authenticated-user`: Responses202401403404,
      `codespacesSlashget-codespaces-for-user-in-org`: ParametersPathUsernameStringQuery473,
      `codespacesSlashget-export-details-for-authenticated-user`: ParametersPathCodespacenameExportid
    ): operations = {
      val __obj = js.Dynamic.literal()
      __obj.updateDynamic("actions/add-custom-labels-to-self-hosted-runner-for-org")(`actionsSlashadd-custom-labels-to-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/add-custom-labels-to-self-hosted-runner-for-repo")(`actionsSlashadd-custom-labels-to-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/add-selected-repo-to-org-secret")(`actionsSlashadd-selected-repo-to-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/add-selected-repo-to-org-variable")(`actionsSlashadd-selected-repo-to-org-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/add-selected-repo-to-required-workflow")(`actionsSlashadd-selected-repo-to-required-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/approve-workflow-run")(`actionsSlashapprove-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/cancel-workflow-run")(`actionsSlashcancel-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-environment-variable")(`actionsSlashcreate-environment-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-or-update-environment-secret")(`actionsSlashcreate-or-update-environment-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-or-update-org-secret")(`actionsSlashcreate-or-update-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-or-update-repo-secret")(`actionsSlashcreate-or-update-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-org-variable")(`actionsSlashcreate-org-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-registration-token-for-org")(`actionsSlashcreate-registration-token-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-registration-token-for-repo")(`actionsSlashcreate-registration-token-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-remove-token-for-org")(`actionsSlashcreate-remove-token-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-remove-token-for-repo")(`actionsSlashcreate-remove-token-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-repo-variable")(`actionsSlashcreate-repo-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-required-workflow")(`actionsSlashcreate-required-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-workflow-dispatch")(`actionsSlashcreate-workflow-dispatch`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-actions-cache-by-id")(`actionsSlashdelete-actions-cache-by-id`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-actions-cache-by-key")(`actionsSlashdelete-actions-cache-by-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-artifact")(`actionsSlashdelete-artifact`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-environment-secret")(`actionsSlashdelete-environment-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-environment-variable")(`actionsSlashdelete-environment-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-org-secret")(`actionsSlashdelete-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-org-variable")(`actionsSlashdelete-org-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-repo-secret")(`actionsSlashdelete-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-repo-variable")(`actionsSlashdelete-repo-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-required-workflow")(`actionsSlashdelete-required-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-self-hosted-runner-from-org")(`actionsSlashdelete-self-hosted-runner-from-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-self-hosted-runner-from-repo")(`actionsSlashdelete-self-hosted-runner-from-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-workflow-run")(`actionsSlashdelete-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-workflow-run-logs")(`actionsSlashdelete-workflow-run-logs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/disable-selected-repository-github-actions-organization")(`actionsSlashdisable-selected-repository-github-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/disable-workflow")(`actionsSlashdisable-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/download-artifact")(`actionsSlashdownload-artifact`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/download-job-logs-for-workflow-run")(`actionsSlashdownload-job-logs-for-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/download-workflow-run-attempt-logs")(`actionsSlashdownload-workflow-run-attempt-logs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/download-workflow-run-logs")(`actionsSlashdownload-workflow-run-logs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/enable-selected-repository-github-actions-organization")(`actionsSlashenable-selected-repository-github-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/enable-workflow")(`actionsSlashenable-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-actions-cache-list")(`actionsSlashget-actions-cache-list`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-actions-cache-usage")(`actionsSlashget-actions-cache-usage`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-actions-cache-usage-by-repo-for-org")(`actionsSlashget-actions-cache-usage-by-repo-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-actions-cache-usage-for-org")(`actionsSlashget-actions-cache-usage-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-allowed-actions-organization")(`actionsSlashget-allowed-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-allowed-actions-repository")(`actionsSlashget-allowed-actions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-artifact")(`actionsSlashget-artifact`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-custom-oidc-sub-claim-for-repo")(`actionsSlashget-custom-oidc-sub-claim-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-environment-public-key")(`actionsSlashget-environment-public-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-environment-secret")(`actionsSlashget-environment-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-environment-variable")(`actionsSlashget-environment-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-github-actions-default-workflow-permissions-organization")(`actionsSlashget-github-actions-default-workflow-permissions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-github-actions-default-workflow-permissions-repository")(`actionsSlashget-github-actions-default-workflow-permissions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-github-actions-permissions-organization")(`actionsSlashget-github-actions-permissions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-github-actions-permissions-repository")(`actionsSlashget-github-actions-permissions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-job-for-workflow-run")(`actionsSlashget-job-for-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-org-public-key")(`actionsSlashget-org-public-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-org-secret")(`actionsSlashget-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-org-variable")(`actionsSlashget-org-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-pending-deployments-for-run")(`actionsSlashget-pending-deployments-for-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-repo-public-key")(`actionsSlashget-repo-public-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-repo-required-workflow")(`actionsSlashget-repo-required-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-repo-required-workflow-usage")(`actionsSlashget-repo-required-workflow-usage`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-repo-secret")(`actionsSlashget-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-repo-variable")(`actionsSlashget-repo-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-required-workflow")(`actionsSlashget-required-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-reviews-for-run")(`actionsSlashget-reviews-for-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-self-hosted-runner-for-org")(`actionsSlashget-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-self-hosted-runner-for-repo")(`actionsSlashget-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow")(`actionsSlashget-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-access-to-repository")(`actionsSlashget-workflow-access-to-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-run")(`actionsSlashget-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-run-attempt")(`actionsSlashget-workflow-run-attempt`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-run-usage")(`actionsSlashget-workflow-run-usage`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-usage")(`actionsSlashget-workflow-usage`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-artifacts-for-repo")(`actionsSlashlist-artifacts-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-environment-secrets")(`actionsSlashlist-environment-secrets`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-environment-variables")(`actionsSlashlist-environment-variables`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-jobs-for-workflow-run")(`actionsSlashlist-jobs-for-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-jobs-for-workflow-run-attempt")(`actionsSlashlist-jobs-for-workflow-run-attempt`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-labels-for-self-hosted-runner-for-org")(`actionsSlashlist-labels-for-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-labels-for-self-hosted-runner-for-repo")(`actionsSlashlist-labels-for-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-org-secrets")(`actionsSlashlist-org-secrets`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-org-variables")(`actionsSlashlist-org-variables`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-repo-organization-secrets")(`actionsSlashlist-repo-organization-secrets`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-repo-organization-variables")(`actionsSlashlist-repo-organization-variables`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-repo-required-workflows")(`actionsSlashlist-repo-required-workflows`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-repo-secrets")(`actionsSlashlist-repo-secrets`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-repo-variables")(`actionsSlashlist-repo-variables`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-repo-workflows")(`actionsSlashlist-repo-workflows`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-required-workflow-runs")(`actionsSlashlist-required-workflow-runs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-required-workflows")(`actionsSlashlist-required-workflows`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-runner-applications-for-org")(`actionsSlashlist-runner-applications-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-runner-applications-for-repo")(`actionsSlashlist-runner-applications-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-selected-repos-for-org-secret")(`actionsSlashlist-selected-repos-for-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-selected-repos-for-org-variable")(`actionsSlashlist-selected-repos-for-org-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-selected-repositories-enabled-github-actions-organization")(`actionsSlashlist-selected-repositories-enabled-github-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-selected-repositories-required-workflow")(`actionsSlashlist-selected-repositories-required-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-self-hosted-runners-for-org")(`actionsSlashlist-self-hosted-runners-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-self-hosted-runners-for-repo")(`actionsSlashlist-self-hosted-runners-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-workflow-run-artifacts")(`actionsSlashlist-workflow-run-artifacts`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-workflow-runs")(`actionsSlashlist-workflow-runs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-workflow-runs-for-repo")(`actionsSlashlist-workflow-runs-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/re-run-job-for-workflow-run")(`actionsSlashre-run-job-for-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/re-run-workflow")(`actionsSlashre-run-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/re-run-workflow-failed-jobs")(`actionsSlashre-run-workflow-failed-jobs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-all-custom-labels-from-self-hosted-runner-for-org")(`actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-all-custom-labels-from-self-hosted-runner-for-repo")(`actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-custom-label-from-self-hosted-runner-for-org")(`actionsSlashremove-custom-label-from-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-custom-label-from-self-hosted-runner-for-repo")(`actionsSlashremove-custom-label-from-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-selected-repo-from-org-secret")(`actionsSlashremove-selected-repo-from-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-selected-repo-from-org-variable")(`actionsSlashremove-selected-repo-from-org-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-selected-repo-from-required-workflow")(`actionsSlashremove-selected-repo-from-required-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/review-custom-gates-for-run")(`actionsSlashreview-custom-gates-for-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/review-pending-deployments-for-run")(`actionsSlashreview-pending-deployments-for-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-allowed-actions-organization")(`actionsSlashset-allowed-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-allowed-actions-repository")(`actionsSlashset-allowed-actions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-custom-labels-for-self-hosted-runner-for-org")(`actionsSlashset-custom-labels-for-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-custom-labels-for-self-hosted-runner-for-repo")(`actionsSlashset-custom-labels-for-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-custom-oidc-sub-claim-for-repo")(`actionsSlashset-custom-oidc-sub-claim-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-github-actions-default-workflow-permissions-organization")(`actionsSlashset-github-actions-default-workflow-permissions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-github-actions-default-workflow-permissions-repository")(`actionsSlashset-github-actions-default-workflow-permissions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-github-actions-permissions-organization")(`actionsSlashset-github-actions-permissions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-github-actions-permissions-repository")(`actionsSlashset-github-actions-permissions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-selected-repos-for-org-secret")(`actionsSlashset-selected-repos-for-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-selected-repos-for-org-variable")(`actionsSlashset-selected-repos-for-org-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-selected-repos-to-required-workflow")(`actionsSlashset-selected-repos-to-required-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-selected-repositories-enabled-github-actions-organization")(`actionsSlashset-selected-repositories-enabled-github-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-workflow-access-to-repository")(`actionsSlashset-workflow-access-to-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/update-environment-variable")(`actionsSlashupdate-environment-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/update-org-variable")(`actionsSlashupdate-org-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/update-repo-variable")(`actionsSlashupdate-repo-variable`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/update-required-workflow")(`actionsSlashupdate-required-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/check-repo-is-starred-by-authenticated-user")(`activitySlashcheck-repo-is-starred-by-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/delete-repo-subscription")(`activitySlashdelete-repo-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/delete-thread-subscription")(`activitySlashdelete-thread-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/get-feeds")(`activitySlashget-feeds`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/get-repo-subscription")(`activitySlashget-repo-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/get-thread")(`activitySlashget-thread`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/get-thread-subscription-for-authenticated-user")(`activitySlashget-thread-subscription-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-events-for-authenticated-user")(`activitySlashlist-events-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-notifications-for-authenticated-user")(`activitySlashlist-notifications-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-org-events-for-authenticated-user")(`activitySlashlist-org-events-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-public-events")(`activitySlashlist-public-events`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-public-events-for-repo-network")(`activitySlashlist-public-events-for-repo-network`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-public-events-for-user")(`activitySlashlist-public-events-for-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-public-org-events")(`activitySlashlist-public-org-events`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-received-events-for-user")(`activitySlashlist-received-events-for-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-received-public-events-for-user")(`activitySlashlist-received-public-events-for-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repo-events")(`activitySlashlist-repo-events`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repo-notifications-for-authenticated-user")(`activitySlashlist-repo-notifications-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repos-starred-by-authenticated-user")(`activitySlashlist-repos-starred-by-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repos-starred-by-user")(`activitySlashlist-repos-starred-by-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repos-watched-by-user")(`activitySlashlist-repos-watched-by-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-stargazers-for-repo")(`activitySlashlist-stargazers-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-watched-repos-for-authenticated-user")(`activitySlashlist-watched-repos-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-watchers-for-repo")(`activitySlashlist-watchers-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/mark-notifications-as-read")(`activitySlashmark-notifications-as-read`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/mark-repo-notifications-as-read")(`activitySlashmark-repo-notifications-as-read`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/mark-thread-as-read")(`activitySlashmark-thread-as-read`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/set-repo-subscription")(`activitySlashset-repo-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/set-thread-subscription")(`activitySlashset-thread-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/star-repo-for-authenticated-user")(`activitySlashstar-repo-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/unstar-repo-for-authenticated-user")(`activitySlashunstar-repo-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/add-repo-to-installation-for-authenticated-user")(`appsSlashadd-repo-to-installation-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/check-token")(`appsSlashcheck-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/create-from-manifest")(`appsSlashcreate-from-manifest`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/create-installation-access-token")(`appsSlashcreate-installation-access-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/delete-authorization")(`appsSlashdelete-authorization`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/delete-installation")(`appsSlashdelete-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/delete-token")(`appsSlashdelete-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-authenticated")(`appsSlashget-authenticated`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-by-slug")(`appsSlashget-by-slug`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-installation")(`appsSlashget-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-org-installation")(`appsSlashget-org-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-repo-installation")(`appsSlashget-repo-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-subscription-plan-for-account")(`appsSlashget-subscription-plan-for-account`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-subscription-plan-for-account-stubbed")(`appsSlashget-subscription-plan-for-account-stubbed`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-user-installation")(`appsSlashget-user-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-webhook-config-for-app")(`appsSlashget-webhook-config-for-app`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-webhook-delivery")(`appsSlashget-webhook-delivery`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-accounts-for-plan")(`appsSlashlist-accounts-for-plan`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-accounts-for-plan-stubbed")(`appsSlashlist-accounts-for-plan-stubbed`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-installation-repos-for-authenticated-user")(`appsSlashlist-installation-repos-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-installation-requests-for-authenticated-app")(`appsSlashlist-installation-requests-for-authenticated-app`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-installations")(`appsSlashlist-installations`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-installations-for-authenticated-user")(`appsSlashlist-installations-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-plans")(`appsSlashlist-plans`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-plans-stubbed")(`appsSlashlist-plans-stubbed`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-repos-accessible-to-installation")(`appsSlashlist-repos-accessible-to-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-subscriptions-for-authenticated-user")(`appsSlashlist-subscriptions-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-subscriptions-for-authenticated-user-stubbed")(`appsSlashlist-subscriptions-for-authenticated-user-stubbed`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-webhook-deliveries")(`appsSlashlist-webhook-deliveries`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/redeliver-webhook-delivery")(`appsSlashredeliver-webhook-delivery`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/remove-repo-from-installation-for-authenticated-user")(`appsSlashremove-repo-from-installation-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/reset-token")(`appsSlashreset-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/revoke-installation-access-token")(`appsSlashrevoke-installation-access-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/scope-token")(`appsSlashscope-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/suspend-installation")(`appsSlashsuspend-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/unsuspend-installation")(`appsSlashunsuspend-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/update-webhook-config-for-app")(`appsSlashupdate-webhook-config-for-app`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-actions-billing-org")(`billingSlashget-github-actions-billing-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-actions-billing-user")(`billingSlashget-github-actions-billing-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-packages-billing-org")(`billingSlashget-github-packages-billing-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-packages-billing-user")(`billingSlashget-github-packages-billing-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-shared-storage-billing-org")(`billingSlashget-shared-storage-billing-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-shared-storage-billing-user")(`billingSlashget-shared-storage-billing-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/create")(checksSlashcreate.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/create-suite")(`checksSlashcreate-suite`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/get")(checksSlashget.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/get-suite")(`checksSlashget-suite`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/list-annotations")(`checksSlashlist-annotations`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/list-for-ref")(`checksSlashlist-for-ref`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/list-for-suite")(`checksSlashlist-for-suite`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/list-suites-for-ref")(`checksSlashlist-suites-for-ref`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/rerequest-run")(`checksSlashrerequest-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/rerequest-suite")(`checksSlashrerequest-suite`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/set-suites-preferences")(`checksSlashset-suites-preferences`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/update")(checksSlashupdate.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/delete-analysis")(`code-scanningSlashdelete-analysis`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/get-alert")(`code-scanningSlashget-alert`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/get-analysis")(`code-scanningSlashget-analysis`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/get-codeql-database")(`code-scanningSlashget-codeql-database`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/get-default-setup")(`code-scanningSlashget-default-setup`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/get-sarif")(`code-scanningSlashget-sarif`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-alert-instances")(`code-scanningSlashlist-alert-instances`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-alerts-for-org")(`code-scanningSlashlist-alerts-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-alerts-for-repo")(`code-scanningSlashlist-alerts-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-codeql-databases")(`code-scanningSlashlist-codeql-databases`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-recent-analyses")(`code-scanningSlashlist-recent-analyses`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/update-alert")(`code-scanningSlashupdate-alert`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/update-default-setup")(`code-scanningSlashupdate-default-setup`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/upload-sarif")(`code-scanningSlashupload-sarif`.asInstanceOf[js.Any])
      __obj.updateDynamic("codes-of-conduct/get-all-codes-of-conduct")(`codes-of-conductSlashget-all-codes-of-conduct`.asInstanceOf[js.Any])
      __obj.updateDynamic("codes-of-conduct/get-conduct-code")(`codes-of-conductSlashget-conduct-code`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/add-repository-for-secret-for-authenticated-user")(`codespacesSlashadd-repository-for-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/add-selected-repo-to-org-secret")(`codespacesSlashadd-selected-repo-to-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/codespace-machines-for-authenticated-user")(`codespacesSlashcodespace-machines-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-for-authenticated-user")(`codespacesSlashcreate-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-or-update-org-secret")(`codespacesSlashcreate-or-update-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-or-update-repo-secret")(`codespacesSlashcreate-or-update-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-or-update-secret-for-authenticated-user")(`codespacesSlashcreate-or-update-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-with-pr-for-authenticated-user")(`codespacesSlashcreate-with-pr-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-with-repo-for-authenticated-user")(`codespacesSlashcreate-with-repo-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-codespaces-billing-users")(`codespacesSlashdelete-codespaces-billing-users`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-for-authenticated-user")(`codespacesSlashdelete-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-from-organization")(`codespacesSlashdelete-from-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-org-secret")(`codespacesSlashdelete-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-repo-secret")(`codespacesSlashdelete-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-secret-for-authenticated-user")(`codespacesSlashdelete-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/export-for-authenticated-user")(`codespacesSlashexport-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/get-codespaces-for-user-in-org")(`codespacesSlashget-codespaces-for-user-in-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/get-export-details-for-authenticated-user")(`codespacesSlashget-export-details-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.asInstanceOf[operations]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: operations] (val x: Self) extends AnyVal {
      
      inline def `setActionsSlashadd-custom-labels-to-self-hosted-runner-for-org`(value: Responses200ContentApplicationjsonLabelsArray404Content36): Self = StObject.set(x, "actions/add-custom-labels-to-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashadd-custom-labels-to-self-hosted-runner-for-repo`(value: ParametersPathOwnerRepoRunneridRequestBodyContentApplicationjsonLabels): Self = StObject.set(x, "actions/add-custom-labels-to-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashadd-selected-repo-to-org-secret`(value: ParametersPathOrgRepositoryidSecretname): Self = StObject.set(x, "actions/add-selected-repo-to-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashadd-selected-repo-to-org-variable`(value: ParametersPathNameStringOrgStringRepositoryidNumber): Self = StObject.set(x, "actions/add-selected-repo-to-org-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashadd-selected-repo-to-required-workflow`(value: ParametersPathRepositoryidRequiredworkflowid): Self = StObject.set(x, "actions/add-selected-repo-to-required-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashapprove-workflow-run`(value: Responses201ContentApplicationjsonRecord): Self = StObject.set(x, "actions/approve-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcancel-workflow-run`(value: Responses409Content36): Self = StObject.set(x, "actions/cancel-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-environment-variable`(value: Parameters642RequestBodyContentApplicationjsonNameValue): Self = StObject.set(x, "actions/create-environment-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-or-update-environment-secret`(value: ParametersPathSecretnameStringRequestBodyContentApplicationjsonEncryptedvalueString): Self = StObject.set(x, "actions/create-or-update-environment-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-or-update-org-secret`(value: Responses506): Self = StObject.set(x, "actions/create-or-update-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-or-update-repo-secret`(value: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjson163): Self = StObject.set(x, "actions/create-or-update-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-org-variable`(value: Parameters496RequestBodyContentApplicationjsonValue): Self = StObject.set(x, "actions/create-org-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-registration-token-for-org`(value: Responses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "actions/create-registration-token-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-registration-token-for-repo`(value: Parameters540Responses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "actions/create-registration-token-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-remove-token-for-org`(value: Responses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "actions/create-remove-token-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-remove-token-for-repo`(value: Parameters540Responses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "actions/create-remove-token-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-repo-variable`(value: Parameters540RequestBodyContentApplicationjsonNameValue): Self = StObject.set(x, "actions/create-repo-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-required-workflow`(value: Responses201ContentApplicationjsonNamePath): Self = StObject.set(x, "actions/create-required-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-workflow-dispatch`(value: ParametersPathRepoWorkflowidRequestBodyContentApplicationjsonInputs): Self = StObject.set(x, "actions/create-workflow-dispatch", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-actions-cache-by-id`(value: ParametersPathCacheidOwner): Self = StObject.set(x, "actions/delete-actions-cache-by-id", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-actions-cache-by-key`(value: ParametersQueryKeyStringRef): Self = StObject.set(x, "actions/delete-actions-cache-by-key", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-artifact`(value: ParametersPathArtifactidOwnerResponses): Self = StObject.set(x, "actions/delete-artifact", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-environment-secret`(value: ParametersPathSecretnameStringResponses): Self = StObject.set(x, "actions/delete-environment-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-environment-variable`(value: ParametersPathEnvironmentnameStringNameString): Self = StObject.set(x, "actions/delete-environment-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-org-secret`(value: ParametersPathOrgSecretnameResponses): Self = StObject.set(x, "actions/delete-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-org-variable`(value: ParametersPathNameStringOrgStringResponses): Self = StObject.set(x, "actions/delete-org-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-repo-secret`(value: ParametersPathOwnerRepoSecretnameResponses): Self = StObject.set(x, "actions/delete-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-repo-variable`(value: ParametersPathNameStringOwnerStringResponses): Self = StObject.set(x, "actions/delete-repo-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-required-workflow`(value: ParametersPathOrgRequiredworkflowidResponses): Self = StObject.set(x, "actions/delete-required-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-self-hosted-runner-from-org`(value: ParametersPathOrgRunneridResponses): Self = StObject.set(x, "actions/delete-self-hosted-runner-from-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-self-hosted-runner-from-repo`(value: ParametersPathOwnerRepoRunneridResponses): Self = StObject.set(x, "actions/delete-self-hosted-runner-from-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-workflow-run`(value: Parameters544): Self = StObject.set(x, "actions/delete-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-workflow-run-logs`(value: Responses403Content36500Content36): Self = StObject.set(x, "actions/delete-workflow-run-logs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdisable-selected-repository-github-actions-organization`(value: ParametersPathOrgStringRepositoryidNumber): Self = StObject.set(x, "actions/disable-selected-repository-github-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdisable-workflow`(value: ParametersPathRepoWorkflowidResponses): Self = StObject.set(x, "actions/disable-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdownload-artifact`(value: ParametersPathArchiveformatArtifactid): Self = StObject.set(x, "actions/download-artifact", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdownload-job-logs-for-workflow-run`(value: ParametersPathJobidOwnerResponses): Self = StObject.set(x, "actions/download-job-logs-for-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdownload-workflow-run-attempt-logs`(value: Parameters546): Self = StObject.set(x, "actions/download-workflow-run-attempt-logs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdownload-workflow-run-logs`(value: Parameters544): Self = StObject.set(x, "actions/download-workflow-run-logs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashenable-selected-repository-github-actions-organization`(value: ParametersPathOrgStringRepositoryidNumber): Self = StObject.set(x, "actions/enable-selected-repository-github-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashenable-workflow`(value: ParametersPathRepoWorkflowidResponses): Self = StObject.set(x, "actions/enable-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-actions-cache-list`(value: ParametersQueryDirectionKey): Self = StObject.set(x, "actions/get-actions-cache-list", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-actions-cache-usage`(value: Responses200ContentApplicationjsonActivecachescount): Self = StObject.set(x, "actions/get-actions-cache-usage", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-actions-cache-usage-by-repo-for-org`(value: ParametersPathOrgStringQuery473): Self = StObject.set(x, "actions/get-actions-cache-usage-by-repo-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-actions-cache-usage-for-org`(value: Responses200ContentApplicationjsonTotalactivecachescount): Self = StObject.set(x, "actions/get-actions-cache-usage-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-allowed-actions-organization`(value: Responses200ContentApplicationjsonGithubownedallowed): Self = StObject.set(x, "actions/get-allowed-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-allowed-actions-repository`(value: Parameters540Responses200ContentApplicationjsonGithubownedallowed): Self = StObject.set(x, "actions/get-allowed-actions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-artifact`(value: ParametersPathArtifactidOwner): Self = StObject.set(x, "actions/get-artifact", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-custom-oidc-sub-claim-for-repo`(value: Responses200ContentApplicationjsonIncludeclaimkeys): Self = StObject.set(x, "actions/get-custom-oidc-sub-claim-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-environment-public-key`(value: Parameters642): Self = StObject.set(x, "actions/get-environment-public-key", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-environment-secret`(value: ParametersPathSecretnameString): Self = StObject.set(x, "actions/get-environment-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-environment-variable`(value: ParametersPathEnvironmentnameNameRepositoryid): Self = StObject.set(x, "actions/get-environment-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-github-actions-default-workflow-permissions-organization`(value: Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions): Self = StObject.set(x, "actions/get-github-actions-default-workflow-permissions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-github-actions-default-workflow-permissions-repository`(
        value: Parameters540Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
      ): Self = StObject.set(x, "actions/get-github-actions-default-workflow-permissions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-github-actions-permissions-organization`(value: Responses200ContentApplicationjsonAllowedactionsEnabledrepositories): Self = StObject.set(x, "actions/get-github-actions-permissions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-github-actions-permissions-repository`(value: Responses200ContentApplicationjsonAllowedactionsEnabled): Self = StObject.set(x, "actions/get-github-actions-permissions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-job-for-workflow-run`(value: ParametersPathJobidOwner): Self = StObject.set(x, "actions/get-job-for-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-org-public-key`(value: Responses200ContentApplicationjsonCreatedatId): Self = StObject.set(x, "actions/get-org-public-key", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-org-secret`(value: ParametersPathOrgSecretname): Self = StObject.set(x, "actions/get-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-org-variable`(value: ParametersPathNameStringOrgString): Self = StObject.set(x, "actions/get-org-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-pending-deployments-for-run`(value: Responses200Content550): Self = StObject.set(x, "actions/get-pending-deployments-for-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-repo-public-key`(value: Parameters540Responses200ContentApplicationjsonCreatedatId): Self = StObject.set(x, "actions/get-repo-public-key", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-repo-required-workflow`(value: ParametersPathRepoRequiredworkflowidforrepo): Self = StObject.set(x, "actions/get-repo-required-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-repo-required-workflow-usage`(value: Responses200ContentApplicationjsonBillable): Self = StObject.set(x, "actions/get-repo-required-workflow-usage", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-repo-secret`(value: ParametersPathOwnerRepoSecretname): Self = StObject.set(x, "actions/get-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-repo-variable`(value: ParametersPathNameStringOwnerString): Self = StObject.set(x, "actions/get-repo-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-required-workflow`(value: ParametersPathOrgRequiredworkflowid): Self = StObject.set(x, "actions/get-required-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-reviews-for-run`(value: Responses200Content545): Self = StObject.set(x, "actions/get-reviews-for-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-self-hosted-runner-for-org`(value: ParametersPathOrgRunnerid): Self = StObject.set(x, "actions/get-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-self-hosted-runner-for-repo`(value: ParametersPathOwnerRepoRunnerid): Self = StObject.set(x, "actions/get-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow`(value: ParametersPathRepoWorkflowid): Self = StObject.set(x, "actions/get-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-access-to-repository`(value: Responses200ContentApplicationjsonAccesslevel): Self = StObject.set(x, "actions/get-workflow-access-to-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-run`(value: ParametersPathRepoRunid): Self = StObject.set(x, "actions/get-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-run-attempt`(value: ParametersPathAttemptnumberOwner): Self = StObject.set(x, "actions/get-workflow-run-attempt", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-run-usage`(value: Responses200ContentApplicationjsonRundurationms): Self = StObject.set(x, "actions/get-workflow-run-usage", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-usage`(value: Responses552): Self = StObject.set(x, "actions/get-workflow-usage", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-artifacts-for-repo`(value: ParametersQueryNamePagePerpage): Self = StObject.set(x, "actions/list-artifacts-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-environment-secrets`(value: ParametersPathEnvironmentnameStringRepositoryidNumber): Self = StObject.set(x, "actions/list-environment-secrets", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-environment-variables`(
        value: ParametersPathEnvironmentnameStringRepositoryidNumberResponses200ContentApplicationjsonTotalcountNumberVariablesArray
      ): Self = StObject.set(x, "actions/list-environment-variables", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-jobs-for-workflow-run`(value: ParametersQuery548): Self = StObject.set(x, "actions/list-jobs-for-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-jobs-for-workflow-run-attempt`(value: ParametersPathAttemptnumberOwnerQuery473): Self = StObject.set(x, "actions/list-jobs-for-workflow-run-attempt", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-labels-for-self-hosted-runner-for-org`(value: Responses200ContentApplicationjsonLabelsArray): Self = StObject.set(x, "actions/list-labels-for-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-labels-for-self-hosted-runner-for-repo`(value: ParametersPathOwnerRepoRunneridResponses200ContentApplicationjsonLabelsArray): Self = StObject.set(x, "actions/list-labels-for-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-org-secrets`(value: Responses200ContentApplicationjson505): Self = StObject.set(x, "actions/list-org-secrets", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-org-variables`(value: Responses200ContentApplicationjsonVariablesArray): Self = StObject.set(x, "actions/list-org-variables", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-repo-organization-secrets`(value: Responses200ContentApplicationjson542): Self = StObject.set(x, "actions/list-repo-organization-secrets", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-repo-organization-variables`(value: Responses200ContentApplicationjsonTotalcountNumberVariablesArray): Self = StObject.set(x, "actions/list-repo-organization-variables", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-repo-required-workflows`(value: ParametersPathRepoString): Self = StObject.set(x, "actions/list-repo-required-workflows", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-repo-secrets`(value: Responses200ContentApplicationjson542): Self = StObject.set(x, "actions/list-repo-secrets", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-repo-variables`(value: Responses200ContentApplicationjsonTotalcountNumberVariablesArray): Self = StObject.set(x, "actions/list-repo-variables", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-repo-workflows`(value: Responses200ContentApplicationjsonTotalcountWorkflows): Self = StObject.set(x, "actions/list-repo-workflows", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-required-workflow-runs`(value: ParametersPathOwnerRepoRequiredworkflowidforrepo): Self = StObject.set(x, "actions/list-required-workflow-runs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-required-workflows`(value: Responses200ContentApplicationjsonRequiredworkflowsArray): Self = StObject.set(x, "actions/list-required-workflows", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-runner-applications-for-org`(value: Responses200Content504): Self = StObject.set(x, "actions/list-runner-applications-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-runner-applications-for-repo`(value: Parameters540Responses200Content504): Self = StObject.set(x, "actions/list-runner-applications-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-selected-repos-for-org-secret`(value: ParametersQuery507): Self = StObject.set(x, "actions/list-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-selected-repos-for-org-variable`(value: ParametersPathNameStringOrgStringQuery507): Self = StObject.set(x, "actions/list-selected-repos-for-org-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-selected-repositories-enabled-github-actions-organization`(value: Responses200ContentApplicationjsonRepositoriesArray): Self = StObject.set(x, "actions/list-selected-repositories-enabled-github-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-selected-repositories-required-workflow`(value: ParametersPathOrgRequiredworkflowidResponses200ContentApplicationjsonRepositoriesArray): Self = StObject.set(x, "actions/list-selected-repositories-required-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-self-hosted-runners-for-org`(value: Responses200ContentApplicationjsonRunnersTotalcount): Self = StObject.set(x, "actions/list-self-hosted-runners-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-self-hosted-runners-for-repo`(value: ParametersPathOwnerStringResponses200ContentApplicationjsonRunnersTotalcount): Self = StObject.set(x, "actions/list-self-hosted-runners-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-workflow-run-artifacts`(value: ParametersPathRepoRunidQuery473): Self = StObject.set(x, "actions/list-workflow-run-artifacts", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-workflow-runs`(value: ParametersPathRepoWorkflowidQueryActorBranch): Self = StObject.set(x, "actions/list-workflow-runs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-workflow-runs-for-repo`(value: ParametersQueryActorBranch): Self = StObject.set(x, "actions/list-workflow-runs-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashre-run-job-for-workflow-run`(value: Responses201ContentApplicationjsonRecord403Content36): Self = StObject.set(x, "actions/re-run-job-for-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashre-run-workflow`(value: Parameters544RequestBody): Self = StObject.set(x, "actions/re-run-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashre-run-workflow-failed-jobs`(value: Parameters544RequestBody): Self = StObject.set(x, "actions/re-run-workflow-failed-jobs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-all-custom-labels-from-self-hosted-runner-for-org`(value: Responses200ContentApplicationjsonLabelsArray): Self = StObject.set(x, "actions/remove-all-custom-labels-from-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-all-custom-labels-from-self-hosted-runner-for-repo`(value: ParametersPathOwnerRepoRunneridResponses200ContentApplicationjsonLabelsArray): Self = StObject.set(x, "actions/remove-all-custom-labels-from-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-custom-label-from-self-hosted-runner-for-org`(value: ParametersPathNameOrgRunnerid): Self = StObject.set(x, "actions/remove-custom-label-from-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-custom-label-from-self-hosted-runner-for-repo`(value: ParametersPathNameOwnerRepoRunnerid): Self = StObject.set(x, "actions/remove-custom-label-from-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-selected-repo-from-org-secret`(value: ParametersPathOrgRepositoryidSecretname): Self = StObject.set(x, "actions/remove-selected-repo-from-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-selected-repo-from-org-variable`(value: ParametersPathNameStringOrgStringRepositoryidNumber): Self = StObject.set(x, "actions/remove-selected-repo-from-org-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-selected-repo-from-required-workflow`(value: ParametersPathRepositoryidRequiredworkflowid): Self = StObject.set(x, "actions/remove-selected-repo-from-required-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashreview-custom-gates-for-run`(value: RequestBodyContent547): Self = StObject.set(x, "actions/review-custom-gates-for-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashreview-pending-deployments-for-run`(value: Responses200Content551): Self = StObject.set(x, "actions/review-pending-deployments-for-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-allowed-actions-organization`(value: Parameters496RequestBody): Self = StObject.set(x, "actions/set-allowed-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-allowed-actions-repository`(value: Parameters540RequestBody): Self = StObject.set(x, "actions/set-allowed-actions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-custom-labels-for-self-hosted-runner-for-org`(value: Responses200ContentApplicationjsonLabelsArray404Content36): Self = StObject.set(x, "actions/set-custom-labels-for-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-custom-labels-for-self-hosted-runner-for-repo`(value: ParametersPathOwnerRepoRunneridRequestBodyContentApplicationjsonLabels): Self = StObject.set(x, "actions/set-custom-labels-for-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-custom-oidc-sub-claim-for-repo`(value: Responses201400404): Self = StObject.set(x, "actions/set-custom-oidc-sub-claim-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-github-actions-default-workflow-permissions-organization`(value: Parameters496RequestBodyResponses): Self = StObject.set(x, "actions/set-github-actions-default-workflow-permissions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-github-actions-default-workflow-permissions-repository`(value: RequestBodyContentApplicationjson502): Self = StObject.set(x, "actions/set-github-actions-default-workflow-permissions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-github-actions-permissions-organization`(value: RequestBodyContentApplicationjson501): Self = StObject.set(x, "actions/set-github-actions-permissions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-github-actions-permissions-repository`(value: RequestBodyContentApplicationjsonAllowedactionsEnabledBoolean): Self = StObject.set(x, "actions/set-github-actions-permissions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-selected-repos-for-org-secret`(value: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids): Self = StObject.set(x, "actions/set-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-selected-repos-for-org-variable`(value: ParametersPathNameStringOrgStringRequestBodyContentApplicationjsonSelectedrepositoryids): Self = StObject.set(x, "actions/set-selected-repos-for-org-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-selected-repos-to-required-workflow`(value: ParametersPathOrgRequiredworkflowidRequestBodyContentApplicationjsonSelectedrepositoryids): Self = StObject.set(x, "actions/set-selected-repos-to-required-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-selected-repositories-enabled-github-actions-organization`(value: Parameters496RequestBodyContentApplicationjsonSelectedrepositoryids): Self = StObject.set(x, "actions/set-selected-repositories-enabled-github-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-workflow-access-to-repository`(value: RequestBodyContentApplicationjsonAccesslevel): Self = StObject.set(x, "actions/set-workflow-access-to-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashupdate-environment-variable`(value: ParametersPathEnvironmentnameStringNameStringRequestBodyContentApplicationjson165): Self = StObject.set(x, "actions/update-environment-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashupdate-org-variable`(value: ParametersPathNameStringOrgStringRequestBodyContentApplicationjsonVisibility): Self = StObject.set(x, "actions/update-org-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashupdate-repo-variable`(value: ParametersPathNameStringOwnerStringRequestBodyContentApplicationjson165): Self = StObject.set(x, "actions/update-repo-variable", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashupdate-required-workflow`(value: Responses422Content471): Self = StObject.set(x, "actions/update-required-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashcheck-repo-is-starred-by-authenticated-user`(value: Responses403Content36404ContentApplicationjsonDocumentationurlMessage): Self = StObject.set(x, "activity/check-repo-is-starred-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashdelete-repo-subscription`(value: Parameters540Responses): Self = StObject.set(x, "activity/delete-repo-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashdelete-thread-subscription`(value: Responses304401Content36): Self = StObject.set(x, "activity/delete-thread-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashget-feeds`(value: Responses200ContentApplicationjsonCurrentuserorganizationurl): Self = StObject.set(x, "activity/get-feeds", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashget-repo-subscription`(value: Responses200ContentApplicationjsonCreatedatIgnored): Self = StObject.set(x, "activity/get-repo-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashget-thread`(value: ParametersPathThreadidNumber): Self = StObject.set(x, "activity/get-thread", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashget-thread-subscription-for-authenticated-user`(value: Responses200ContentApplicationjsonRepositoryurl): Self = StObject.set(x, "activity/get-thread-subscription-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-events-for-authenticated-user`(value: ParametersPath649Query473): Self = StObject.set(x, "activity/list-events-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-notifications-for-authenticated-user`(value: ParametersQueryAllBefore): Self = StObject.set(x, "activity/list-notifications-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-org-events-for-authenticated-user`(value: ParametersPathOrgStringUsernameString): Self = StObject.set(x, "activity/list-org-events-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-public-events`(value: Responses304403503): Self = StObject.set(x, "activity/list-public-events", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-public-events-for-repo-network`(value: ParametersPathOwnerString): Self = StObject.set(x, "activity/list-public-events-for-repo-network", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-public-events-for-user`(value: ParametersPath649Query473): Self = StObject.set(x, "activity/list-public-events-for-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-public-org-events`(value: Responses200Content480): Self = StObject.set(x, "activity/list-public-org-events", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-received-events-for-user`(value: ParametersPath649Query473): Self = StObject.set(x, "activity/list-received-events-for-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-received-public-events-for-user`(value: ParametersPath649Query473): Self = StObject.set(x, "activity/list-received-public-events-for-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repo-events`(value: ParametersPathOwnerStringResponses200Content480): Self = StObject.set(x, "activity/list-repo-events", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repo-notifications-for-authenticated-user`(value: ParametersQueryBeforePage): Self = StObject.set(x, "activity/list-repo-notifications-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repos-starred-by-authenticated-user`(value: ParametersQueryDirectionPagePerpageSort): Self = StObject.set(x, "activity/list-repos-starred-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repos-starred-by-user`(value: ParametersPath649QueryDirectionPagePerpageSort): Self = StObject.set(x, "activity/list-repos-starred-by-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repos-watched-by-user`(value: ParametersPath649Query473Responses526): Self = StObject.set(x, "activity/list-repos-watched-by-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-stargazers-for-repo`(value: Responses200Content630): Self = StObject.set(x, "activity/list-stargazers-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-watched-repos-for-authenticated-user`(value: Responses200Content497304): Self = StObject.set(x, "activity/list-watched-repos-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-watchers-for-repo`(value: ParametersPathOwnerStringResponses521): Self = StObject.set(x, "activity/list-watchers-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashmark-notifications-as-read`(value: Responses202304401403): Self = StObject.set(x, "activity/mark-notifications-as-read", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashmark-repo-notifications-as-read`(value: RequestBodyResponses202ContentApplicationjsonUrl): Self = StObject.set(x, "activity/mark-repo-notifications-as-read", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashmark-thread-as-read`(value: Responses492): Self = StObject.set(x, "activity/mark-thread-as-read", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashset-repo-subscription`(value: Responses634): Self = StObject.set(x, "activity/set-repo-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashset-thread-subscription`(value: ParametersPathThreadidNumberRequestBody): Self = StObject.set(x, "activity/set-thread-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashstar-repo-for-authenticated-user`(value: Parameters540Responses401Content36403Content36404Content36): Self = StObject.set(x, "activity/star-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashunstar-repo-for-authenticated-user`(value: Parameters540Responses401Content36403Content36404Content36): Self = StObject.set(x, "activity/unstar-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashadd-repo-to-installation-for-authenticated-user`(value: ParametersPathInstallationidNumberRepositoryidNumber): Self = StObject.set(x, "apps/add-repo-to-installation-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashcheck-token`(value: RequestBodyContentApplicationjsonAccesstoken): Self = StObject.set(x, "apps/check-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashcreate-from-manifest`(value: ParametersPath): Self = StObject.set(x, "apps/create-from-manifest", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashcreate-installation-access-token`(value: Responses201401403): Self = StObject.set(x, "apps/create-installation-access-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashdelete-authorization`(value: ParametersPathClientidString): Self = StObject.set(x, "apps/delete-authorization", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashdelete-installation`(value: Responses404Content36): Self = StObject.set(x, "apps/delete-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashdelete-token`(value: ParametersPathClientidString): Self = StObject.set(x, "apps/delete-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-authenticated`(value: Responses200ContentApplicationjsonExternalurl): Self = StObject.set(x, "apps/get-authenticated", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-by-slug`(value: ParametersPathAppslugString): Self = StObject.set(x, "apps/get-by-slug", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-installation`(value: ParametersPathInstallationidNumber): Self = StObject.set(x, "apps/get-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-org-installation`(value: Responses514): Self = StObject.set(x, "apps/get-org-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-repo-installation`(value: Responses301Content36): Self = StObject.set(x, "apps/get-repo-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-subscription-plan-for-account`(value: ParametersPathAccountidNumber): Self = StObject.set(x, "apps/get-subscription-plan-for-account", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-subscription-plan-for-account-stubbed`(value: Responses200ContentApplicationjsonMarketplacependingchange401Content36): Self = StObject.set(x, "apps/get-subscription-plan-for-account-stubbed", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-user-installation`(value: ParametersPath649Responses514): Self = StObject.set(x, "apps/get-user-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-webhook-config-for-app`(value: Responses200ContentApplicationjsonContenttype): Self = StObject.set(x, "apps/get-webhook-config-for-app", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-webhook-delivery`(value: ParametersPathDeliveryidNumber): Self = StObject.set(x, "apps/get-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-accounts-for-plan`(value: ParametersPathPlanidNumber): Self = StObject.set(x, "apps/list-accounts-for-plan", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-accounts-for-plan-stubbed`(value: Responses200Content490): Self = StObject.set(x, "apps/list-accounts-for-plan-stubbed", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-installation-repos-for-authenticated-user`(value: ParametersPathInstallationidNumberQuery473): Self = StObject.set(x, "apps/list-installation-repos-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-installation-requests-for-authenticated-app`(value: ParametersQuery473): Self = StObject.set(x, "apps/list-installation-requests-for-authenticated-app", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-installations`(value: ParametersQueryOutdatedPage): Self = StObject.set(x, "apps/list-installations", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-installations-for-authenticated-user`(value: Responses200ContentApplicationjsonInstallationsTotalcount304): Self = StObject.set(x, "apps/list-installations-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-plans`(value: Responses200Content489): Self = StObject.set(x, "apps/list-plans", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-plans-stubbed`(value: Responses200Content489401Content36): Self = StObject.set(x, "apps/list-plans-stubbed", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-repos-accessible-to-installation`(value: Responses200ContentApplicationjsonRepositoryselectionTotalcount): Self = StObject.set(x, "apps/list-repos-accessible-to-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-subscriptions-for-authenticated-user`(value: Responses200304401404): Self = StObject.set(x, "apps/list-subscriptions-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-subscriptions-for-authenticated-user-stubbed`(value: Responses200Content659): Self = StObject.set(x, "apps/list-subscriptions-for-authenticated-user-stubbed", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-webhook-deliveries`(value: ParametersQueryRedelivery): Self = StObject.set(x, "apps/list-webhook-deliveries", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashredeliver-webhook-delivery`(value: Responses202400422): Self = StObject.set(x, "apps/redeliver-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashremove-repo-from-installation-for-authenticated-user`(value: ParametersPathInstallationidNumberRepositoryidNumber): Self = StObject.set(x, "apps/remove-repo-from-installation-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashreset-token`(value: Responses200ContentApplicationjsonFingerprint422Content346): Self = StObject.set(x, "apps/reset-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashrevoke-installation-access-token`(value: `31`): Self = StObject.set(x, "apps/revoke-installation-access-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashscope-token`(value: RequestBodyContentApplicationjsonTargetid): Self = StObject.set(x, "apps/scope-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashsuspend-installation`(value: Responses404Content36): Self = StObject.set(x, "apps/suspend-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashunsuspend-installation`(value: Responses404Content36): Self = StObject.set(x, "apps/unsuspend-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashupdate-webhook-config-for-app`(value: RequestBodyContentApplicationjsonContenttypeInsecuressl): Self = StObject.set(x, "apps/update-webhook-config-for-app", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-actions-billing-org`(value: Responses200ContentApplicationjsonIncludedminutes): Self = StObject.set(x, "billing/get-github-actions-billing-org", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-actions-billing-user`(value: ParametersPath649Responses200ContentApplicationjsonIncludedminutes): Self = StObject.set(x, "billing/get-github-actions-billing-user", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-packages-billing-org`(value: Responses200ContentApplicationjsonIncludedgigabytesbandwidth): Self = StObject.set(x, "billing/get-github-packages-billing-org", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-packages-billing-user`(value: ParametersPath649Responses200ContentApplicationjsonIncludedgigabytesbandwidth): Self = StObject.set(x, "billing/get-github-packages-billing-user", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-shared-storage-billing-org`(value: Responses200ContentApplicationjsonDaysleftinbillingcycle): Self = StObject.set(x, "billing/get-shared-storage-billing-org", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-shared-storage-billing-user`(value: ParametersPath649Responses200ContentApplicationjsonDaysleftinbillingcycle): Self = StObject.set(x, "billing/get-shared-storage-billing-user", value.asInstanceOf[js.Any])
      
      inline def setChecksSlashcreate(value: Responses201ContentApplicationjsonOutput): Self = StObject.set(x, "checks/create", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashcreate-suite`(value: Responses200ContentApplicationjsonRunsrerequestable): Self = StObject.set(x, "checks/create-suite", value.asInstanceOf[js.Any])
      
      inline def setChecksSlashget(value: ParametersPathCheckrunidOwner): Self = StObject.set(x, "checks/get", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashget-suite`(value: ParametersPathChecksuiteidOwner): Self = StObject.set(x, "checks/get-suite", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashlist-annotations`(value: ParametersPathCheckrunidOwnerQuery473): Self = StObject.set(x, "checks/list-annotations", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashlist-for-ref`(value: ParametersQueryPerpageStatus): Self = StObject.set(x, "checks/list-for-ref", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashlist-for-suite`(value: ParametersQueryChecknameFilter): Self = StObject.set(x, "checks/list-for-suite", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashlist-suites-for-ref`(value: ParametersQueryAppidChecknamePage): Self = StObject.set(x, "checks/list-suites-for-ref", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashrerequest-run`(value: Responses403ContentApplicationjsonDocumentationurlMessage): Self = StObject.set(x, "checks/rerequest-run", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashrerequest-suite`(value: ParametersPathChecksuiteidOwnerResponses506): Self = StObject.set(x, "checks/rerequest-suite", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashset-suites-preferences`(value: Responses200ContentApplicationjsonPreferencesRepository): Self = StObject.set(x, "checks/set-suites-preferences", value.asInstanceOf[js.Any])
      
      inline def setChecksSlashupdate(value: Responses200ContentApplicationjsonOutput): Self = StObject.set(x, "checks/update", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashdelete-analysis`(value: ParametersPathAnalysisidOwnerQueryConfirmdelete): Self = StObject.set(x, "code-scanning/delete-analysis", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashget-alert`(value: ParametersPathAlertnumberOwnerRepo): Self = StObject.set(x, "code-scanning/get-alert", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashget-analysis`(value: ParametersPathAnalysisidOwner): Self = StObject.set(x, "code-scanning/get-analysis", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashget-codeql-database`(value: ParametersPathLanguageOwner): Self = StObject.set(x, "code-scanning/get-codeql-database", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashget-default-setup`(value: Responses200ContentApplicationjsonLanguages): Self = StObject.set(x, "code-scanning/get-default-setup", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashget-sarif`(value: ParametersPathOwnerRepoSarifid): Self = StObject.set(x, "code-scanning/get-sarif", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-alert-instances`(value: ParametersQueryPagePerpageRef): Self = StObject.set(x, "code-scanning/list-alert-instances", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-alerts-for-org`(value: ParametersQueryToolname): Self = StObject.set(x, "code-scanning/list-alerts-for-org", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-alerts-for-repo`(value: ParametersQueryRefSort): Self = StObject.set(x, "code-scanning/list-alerts-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-codeql-databases`(value: Responses200Content564): Self = StObject.set(x, "code-scanning/list-codeql-databases", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-recent-analyses`(value: ParametersQueryRefSarifid): Self = StObject.set(x, "code-scanning/list-recent-analyses", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashupdate-alert`(value: RequestBodyContentApplicationjsonDismissedreasonState): Self = StObject.set(x, "code-scanning/update-alert", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashupdate-default-setup`(value: RequestBodyContentApplicationjsonQuerysuite): Self = StObject.set(x, "code-scanning/update-default-setup", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashupload-sarif`(value: RequestBodyContentApplicationjsonSarif): Self = StObject.set(x, "code-scanning/upload-sarif", value.asInstanceOf[js.Any])
      
      inline def `setCodes-of-conductSlashget-all-codes-of-conduct`(value: Responses200Content477): Self = StObject.set(x, "codes-of-conduct/get-all-codes-of-conduct", value.asInstanceOf[js.Any])
      
      inline def `setCodes-of-conductSlashget-conduct-code`(value: Responses200ContentApplicationjsonBodyHtmlurl): Self = StObject.set(x, "codes-of-conduct/get-conduct-code", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashadd-repository-for-secret-for-authenticated-user`(value: ParametersPathRepositoryidNumberSecretnameString): Self = StObject.set(x, "codespaces/add-repository-for-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashadd-selected-repo-to-org-secret`(value: Responses404Content36422Content346): Self = StObject.set(x, "codespaces/add-selected-repo-to-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcodespace-machines-for-authenticated-user`(value: Responses200ContentApplicationjsonMachinesTotalcount): Self = StObject.set(x, "codespaces/codespace-machines-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-for-authenticated-user`(value: RequestBodyContent372Responses201202401): Self = StObject.set(x, "codespaces/create-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-or-update-org-secret`(value: Responses201ContentApplicationjsonRecord404Content36): Self = StObject.set(x, "codespaces/create-or-update-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-or-update-repo-secret`(value: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjson163): Self = StObject.set(x, "codespaces/create-or-update-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-or-update-secret-for-authenticated-user`(value: ParametersPath652RequestBodyContentApplicationjsonKeyidSelectedrepositoryids): Self = StObject.set(x, "codespaces/create-or-update-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-with-pr-for-authenticated-user`(value: Responses201202401): Self = StObject.set(x, "codespaces/create-with-pr-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-with-repo-for-authenticated-user`(value: Responses201202400): Self = StObject.set(x, "codespaces/create-with-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-codespaces-billing-users`(value: Parameters496RequestBodyContentApplicationjsonSelectedusernamesArray): Self = StObject.set(x, "codespaces/delete-codespaces-billing-users", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-for-authenticated-user`(value: Responses202304401403404): Self = StObject.set(x, "codespaces/delete-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-from-organization`(value: ParametersPathCodespacenameOrg): Self = StObject.set(x, "codespaces/delete-from-organization", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-org-secret`(value: ParametersPathOrgSecretnameResponses404Content36): Self = StObject.set(x, "codespaces/delete-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-repo-secret`(value: ParametersPathOwnerRepoSecretnameResponses): Self = StObject.set(x, "codespaces/delete-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-secret-for-authenticated-user`(value: ParametersPath652Responses): Self = StObject.set(x, "codespaces/delete-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashexport-for-authenticated-user`(value: Responses202401403404): Self = StObject.set(x, "codespaces/export-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-codespaces-for-user-in-org`(value: ParametersPathUsernameStringQuery473): Self = StObject.set(x, "codespaces/get-codespaces-for-user-in-org", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-export-details-for-authenticated-user`(value: ParametersPathCodespacenameExportid): Self = StObject.set(x, "codespaces/get-export-details-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-for-authenticated-user`(value: ParametersPathCodespacenameString): Self = StObject.set(x, "codespaces/get-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-org-public-key`(value: Responses200ContentApplicationjsonCreatedatId): Self = StObject.set(x, "codespaces/get-org-public-key", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-org-secret`(value: Responses200HeadersLinkString): Self = StObject.set(x, "codespaces/get-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-public-key-for-authenticated-user`(value: `651`): Self = StObject.set(x, "codespaces/get-public-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-repo-public-key`(value: Parameters540Responses200ContentApplicationjsonCreatedatId): Self = StObject.set(x, "codespaces/get-repo-public-key", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-repo-secret`(value: ParametersPathOwnerRepoSecretname): Self = StObject.set(x, "codespaces/get-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-secret-for-authenticated-user`(value: ParametersPath652): Self = StObject.set(x, "codespaces/get-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-devcontainers-in-repository-for-authenticated-user`(value: Responses400401403): Self = StObject.set(x, "codespaces/list-devcontainers-in-repository-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-for-authenticated-user`(value: ParametersQueryPagePerpageRepositoryid): Self = StObject.set(x, "codespaces/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-in-organization`(value: Responses200304401403404500): Self = StObject.set(x, "codespaces/list-in-organization", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-in-repository-for-authenticated-user`(value: Responses200ContentApplicationjsonCodespacesTotalcount): Self = StObject.set(x, "codespaces/list-in-repository-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-org-secrets`(value: Responses200ContentApplicationjson505): Self = StObject.set(x, "codespaces/list-org-secrets", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-repo-secrets`(value: Responses200ContentApplicationjson542): Self = StObject.set(x, "codespaces/list-repo-secrets", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-repositories-for-secret-for-authenticated-user`(value: Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber401Content36): Self = StObject.set(x, "codespaces/list-repositories-for-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-secrets-for-authenticated-user`(value: Responses200ContentApplicationjson650): Self = StObject.set(x, "codespaces/list-secrets-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-selected-repos-for-org-secret`(value: Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber404Content36): Self = StObject.set(x, "codespaces/list-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashpre-flight-with-repo-for-authenticated-user`(value: ParametersPathOwnerStringQueryClientipRef): Self = StObject.set(x, "codespaces/pre-flight-with-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashpublish-for-authenticated-user`(value: Responses201401403404422): Self = StObject.set(x, "codespaces/publish-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashremove-repository-for-secret-for-authenticated-user`(value: ParametersPathRepositoryidNumberSecretnameString): Self = StObject.set(x, "codespaces/remove-repository-for-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashremove-selected-repo-from-org-secret`(value: Responses404Content36422Content346): Self = StObject.set(x, "codespaces/remove-selected-repo-from-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashrepo-machines-for-authenticated-user`(value: ParametersPathOwnerStringQueryClientipLocation): Self = StObject.set(x, "codespaces/repo-machines-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashset-codespaces-billing`(value: Responses304404422500): Self = StObject.set(x, "codespaces/set-codespaces-billing", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashset-codespaces-billing-users`(value: Parameters496RequestBodyContentApplicationjsonSelectedusernamesArray): Self = StObject.set(x, "codespaces/set-codespaces-billing-users", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashset-repositories-for-secret-for-authenticated-user`(value: Responses404Content36500Content36): Self = StObject.set(x, "codespaces/set-repositories-for-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashset-selected-repos-for-org-secret`(value: RequestBodyContentApplicationjsonSelectedrepositoryidsResponses404Content36): Self = StObject.set(x, "codespaces/set-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashstart-for-authenticated-user`(value: Responses401402): Self = StObject.set(x, "codespaces/start-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashstop-for-authenticated-user`(value: Responses200ContentApplicationjsonIdletimeoutnotice401Content36403Content36): Self = StObject.set(x, "codespaces/stop-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashstop-in-organization`(value: Responses200ContentApplicationjsonIdletimeoutnotice): Self = StObject.set(x, "codespaces/stop-in-organization", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashupdate-for-authenticated-user`(value: Responses200ContentApplicationjsonIdletimeoutnotice401Content36): Self = StObject.set(x, "codespaces/update-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashadd-selected-repo-to-org-secret`(value: ParametersPathOrgRepositoryidSecretname): Self = StObject.set(x, "dependabot/add-selected-repo-to-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashcreate-or-update-org-secret`(value: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid): Self = StObject.set(x, "dependabot/create-or-update-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashcreate-or-update-repo-secret`(value: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjson163): Self = StObject.set(x, "dependabot/create-or-update-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashdelete-org-secret`(value: ParametersPathOrgSecretnameResponses): Self = StObject.set(x, "dependabot/delete-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashdelete-repo-secret`(value: ParametersPathOwnerRepoSecretnameResponses): Self = StObject.set(x, "dependabot/delete-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashget-alert`(value: Responses200ContentApplicationjsonSecurityadvisory): Self = StObject.set(x, "dependabot/get-alert", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashget-org-public-key`(value: Responses200ContentApplicationjsonKeyKeyid): Self = StObject.set(x, "dependabot/get-org-public-key", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashget-org-secret`(value: ParametersPathOrgSecretname): Self = StObject.set(x, "dependabot/get-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashget-repo-public-key`(value: Parameters540Responses200ContentApplicationjsonKeyKeyid): Self = StObject.set(x, "dependabot/get-repo-public-key", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashget-repo-secret`(value: ParametersPathOwnerRepoSecretname): Self = StObject.set(x, "dependabot/get-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashlist-alerts-for-enterprise`(value: ParametersPathEnterpriseString): Self = StObject.set(x, "dependabot/list-alerts-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashlist-alerts-for-org`(value: ParametersQueryFirst): Self = StObject.set(x, "dependabot/list-alerts-for-org", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashlist-alerts-for-repo`(value: ParametersQueryLast): Self = StObject.set(x, "dependabot/list-alerts-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashlist-org-secrets`(value: Responses200ContentApplicationjson505): Self = StObject.set(x, "dependabot/list-org-secrets", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashlist-repo-secrets`(value: Responses200ContentApplicationjson542): Self = StObject.set(x, "dependabot/list-repo-secrets", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashlist-selected-repos-for-org-secret`(value: ParametersQuery507): Self = StObject.set(x, "dependabot/list-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashremove-selected-repo-from-org-secret`(value: ParametersPathOrgRepositoryidSecretname): Self = StObject.set(x, "dependabot/remove-selected-repo-from-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashset-selected-repos-for-org-secret`(value: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids): Self = StObject.set(x, "dependabot/set-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashupdate-alert`(value: Responses200400403404): Self = StObject.set(x, "dependabot/update-alert", value.asInstanceOf[js.Any])
      
      inline def `setDependency-graphSlashcreate-repository-snapshot`(value: RequestBodyContentApplicationjsonJob): Self = StObject.set(x, "dependency-graph/create-repository-snapshot", value.asInstanceOf[js.Any])
      
      inline def `setDependency-graphSlashdiff-range`(value: ParametersQuery575): Self = StObject.set(x, "dependency-graph/diff-range", value.asInstanceOf[js.Any])
      
      inline def `setDependency-graphSlashexport-sbom`(value: Responses200ContentApplicationjsonSbom): Self = StObject.set(x, "dependency-graph/export-sbom", value.asInstanceOf[js.Any])
      
      inline def setEmojisSlashget(value: Responses200Content13304): Self = StObject.set(x, "emojis/get", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashcheck-is-starred`(value: Responses403Content36404ContentApplicationjsonRecord): Self = StObject.set(x, "gists/check-is-starred", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashcreate(value: Responses201304403404): Self = StObject.set(x, "gists/create", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashcreate-comment`(value: Responses201ContentApplicationjsonNodeidUpdatedat): Self = StObject.set(x, "gists/create-comment", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashdelete(value: Responses304403Content36): Self = StObject.set(x, "gists/delete", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashdelete-comment`(value: ParametersPathCommentidGistidResponses304403Content36): Self = StObject.set(x, "gists/delete-comment", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashfork(value: Responses201304403404422): Self = StObject.set(x, "gists/fork", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashget(value: ParametersPathGistidString): Self = StObject.set(x, "gists/get", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashget-comment`(value: ParametersPathCommentidGistid): Self = StObject.set(x, "gists/get-comment", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashget-revision`(value: ParametersPathGistidSha): Self = StObject.set(x, "gists/get-revision", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashlist(value: ParametersQueryPagePerpageSince): Self = StObject.set(x, "gists/list", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-comments`(value: ParametersPathGistidStringQuery473): Self = StObject.set(x, "gists/list-comments", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-commits`(value: Responses200Content485): Self = StObject.set(x, "gists/list-commits", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-for-user`(value: ParametersPath649QueryPagePerpageSince): Self = StObject.set(x, "gists/list-for-user", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-forks`(value: Responses200Content486): Self = StObject.set(x, "gists/list-forks", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-public`(value: Responses200304403422): Self = StObject.set(x, "gists/list-public", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-starred`(value: Responses401Content36): Self = StObject.set(x, "gists/list-starred", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashstar(value: Responses304403Content36): Self = StObject.set(x, "gists/star", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashunstar(value: Responses304403Content36): Self = StObject.set(x, "gists/unstar", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashupdate(value: Responses200482404Content36): Self = StObject.set(x, "gists/update", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashupdate-comment`(value: Responses200484404Content36): Self = StObject.set(x, "gists/update-comment", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-blob`(value: Responses201403404409): Self = StObject.set(x, "git/create-blob", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-commit`(value: Responses201ContentApplicationjsonAuthorCommitter): Self = StObject.set(x, "git/create-commit", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-ref`(value: Responses201ContentApplicationjsonNodeidObjectHeadersLocation): Self = StObject.set(x, "git/create-ref", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-tag`(value: Responses201ContentApplicationjsonMessageNodeid): Self = StObject.set(x, "git/create-tag", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-tree`(value: Responses201ContentApplicationjsonTruncated): Self = StObject.set(x, "git/create-tree", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashdelete-ref`(value: Parameters582Responses476): Self = StObject.set(x, "git/delete-ref", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-blob`(value: ParametersPathFileshaOwner): Self = StObject.set(x, "git/get-blob", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-commit`(value: Responses200581): Self = StObject.set(x, "git/get-commit", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-ref`(value: Responses200ContentApplicationjsonNodeidObject): Self = StObject.set(x, "git/get-ref", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-tag`(value: ParametersPathRepoTagsha): Self = StObject.set(x, "git/get-tag", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-tree`(value: ParametersPathRepoTreesha): Self = StObject.set(x, "git/get-tree", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashlist-matching-refs`(value: Parameters582): Self = StObject.set(x, "git/list-matching-refs", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashupdate-ref`(value: Responses200ContentApplicationjsonNodeidObject422Content346): Self = StObject.set(x, "git/update-ref", value.asInstanceOf[js.Any])
      
      inline def `setGitignoreSlashget-all-templates`(value: Responses200Content29304): Self = StObject.set(x, "gitignore/get-all-templates", value.asInstanceOf[js.Any])
      
      inline def `setGitignoreSlashget-template`(value: Responses200ContentApplicationjsonNameSource): Self = StObject.set(x, "gitignore/get-template", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashget-restrictions-for-authenticated-user`(value: `656`): Self = StObject.set(x, "interactions/get-restrictions-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashget-restrictions-for-org`(value: Responses200Content515): Self = StObject.set(x, "interactions/get-restrictions-for-org", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashget-restrictions-for-repo`(value: Parameters540Responses200Content515): Self = StObject.set(x, "interactions/get-restrictions-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashremove-restrictions-for-authenticated-user`(value: `31`): Self = StObject.set(x, "interactions/remove-restrictions-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashremove-restrictions-for-org`(value: Parameters496Responses): Self = StObject.set(x, "interactions/remove-restrictions-for-org", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashremove-restrictions-for-repo`(value: Parameters540Responses): Self = StObject.set(x, "interactions/remove-restrictions-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashset-restrictions-for-authenticated-user`(value: Responses200ContentApplicationjsonOrigin): Self = StObject.set(x, "interactions/set-restrictions-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashset-restrictions-for-org`(value: RequestBodyContentApplicationjsonExpiryLimit): Self = StObject.set(x, "interactions/set-restrictions-for-org", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashset-restrictions-for-repo`(value: Responses592): Self = StObject.set(x, "interactions/set-restrictions-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashadd-assignees`(value: Responses201596): Self = StObject.set(x, "issues/add-assignees", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashadd-labels`(value: Responses301404410422): Self = StObject.set(x, "issues/add-labels", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashcheck-user-can-be-assigned`(value: ParametersPathAssigneeOwner): Self = StObject.set(x, "issues/check-user-can-be-assigned", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashcheck-user-can-be-assigned-to-issue`(value: ParametersPathAssigneeIssuenumberOwner): Self = StObject.set(x, "issues/check-user-can-be-assigned-to-issue", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashcreate(value: Responses410422503): Self = StObject.set(x, "issues/create", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashcreate-comment`(value: Responses201403404410): Self = StObject.set(x, "issues/create-comment", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashcreate-label`(value: Responses201ContentApplicationjsonDefaultDescription): Self = StObject.set(x, "issues/create-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashcreate-milestone`(value: Responses201ContentApplicationjsonClosedissues): Self = StObject.set(x, "issues/create-milestone", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashdelete-comment`(value: ParametersPathCommentidOwnerRepoResponses): Self = StObject.set(x, "issues/delete-comment", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashdelete-label`(value: ParametersPathNameStringOwnerStringResponses): Self = StObject.set(x, "issues/delete-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashdelete-milestone`(value: ParametersPathMilestonenumberOwnerResponses404Content36): Self = StObject.set(x, "issues/delete-milestone", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashget(value: ParametersPathIssuenumberOwnerRepo): Self = StObject.set(x, "issues/get", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashget-comment`(value: Responses200ContentApplicationjsonBodytext): Self = StObject.set(x, "issues/get-comment", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashget-event`(value: ParametersPathEventidOwner): Self = StObject.set(x, "issues/get-event", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashget-label`(value: Responses200603): Self = StObject.set(x, "issues/get-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashget-milestone`(value: ParametersPathMilestonenumberOwner): Self = StObject.set(x, "issues/get-milestone", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashlist(value: ParametersQueryOrgs): Self = StObject.set(x, "issues/list", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-assignees`(value: Responses200Content508HeadersLinkString404Content36): Self = StObject.set(x, "issues/list-assignees", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-comments`(value: ParametersPathIssuenumberOwnerRepoQueryPagePerpageSince): Self = StObject.set(x, "issues/list-comments", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-comments-for-repo`(value: ParametersQueryPerpageSinceSort): Self = StObject.set(x, "issues/list-comments-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-events`(value: ParametersPathIssuenumberOwnerRepoQuery473): Self = StObject.set(x, "issues/list-events", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-events-for-repo`(value: Responses200Content595): Self = StObject.set(x, "issues/list-events-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-events-for-timeline`(value: Responses200Content600): Self = StObject.set(x, "issues/list-events-for-timeline", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-for-authenticated-user`(value: Parameters657): Self = StObject.set(x, "issues/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-for-org`(value: ParametersQueryDirectionFilter): Self = StObject.set(x, "issues/list-for-org", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-for-repo`(value: ParametersQueryMentioned): Self = StObject.set(x, "issues/list-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-labels-for-milestone`(value: ParametersPathMilestonenumberOwnerQuery473): Self = StObject.set(x, "issues/list-labels-for-milestone", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-labels-for-repo`(value: Responses200Content598404Content36): Self = StObject.set(x, "issues/list-labels-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-labels-on-issue`(value: Responses200Content598): Self = StObject.set(x, "issues/list-labels-on-issue", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-milestones`(value: ParametersQueryPerpageSortState): Self = StObject.set(x, "issues/list-milestones", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashlock(value: Responses404Content36410Content36): Self = StObject.set(x, "issues/lock", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashremove-all-labels`(value: Responses301Content36404Content36): Self = StObject.set(x, "issues/remove-all-labels", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashremove-assignees`(value: Responses200596): Self = StObject.set(x, "issues/remove-assignees", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashremove-label`(value: ParametersPathIssuenumberNameOwner): Self = StObject.set(x, "issues/remove-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashset-labels`(value: Responses301404410422): Self = StObject.set(x, "issues/set-labels", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashunlock(value: ParametersPathIssuenumberOwnerRepoResponses403Content36404Content36): Self = StObject.set(x, "issues/unlock", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashupdate(value: Responses301403404): Self = StObject.set(x, "issues/update", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashupdate-comment`(value: Responses200ContentApplicationjsonBodytext422Content346): Self = StObject.set(x, "issues/update-comment", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashupdate-label`(value: Responses604): Self = StObject.set(x, "issues/update-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashupdate-milestone`(value: Responses609): Self = StObject.set(x, "issues/update-milestone", value.asInstanceOf[js.Any])
      
      inline def setLicensesSlashget(value: Responses200ContentApplicationjsonImplementation): Self = StObject.set(x, "licenses/get", value.asInstanceOf[js.Any])
      
      inline def `setLicensesSlashget-all-commonly-used`(value: ParametersQueryFeaturedPage): Self = StObject.set(x, "licenses/get-all-commonly-used", value.asInstanceOf[js.Any])
      
      inline def `setLicensesSlashget-for-repo`(value: Responses200ContentApplicationjsonDownloadurlEncoding): Self = StObject.set(x, "licenses/get-for-repo", value.asInstanceOf[js.Any])
      
      inline def setMarkdownSlashrender(value: Responses200HeadersContentType): Self = StObject.set(x, "markdown/render", value.asInstanceOf[js.Any])
      
      inline def `setMarkdownSlashrender-raw`(value: Responses200HeadersXCommonMarkerVersionString): Self = StObject.set(x, "markdown/render-raw", value.asInstanceOf[js.Any])
      
      inline def setMetaSlashget(value: Responses200ContentApplicationjsonApi): Self = StObject.set(x, "meta/get", value.asInstanceOf[js.Any])
      
      inline def `setMetaSlashget-all-versions`(value: `674`): Self = StObject.set(x, "meta/get-all-versions", value.asInstanceOf[js.Any])
      
      inline def `setMetaSlashget-octocat`(value: ParametersQueryS): Self = StObject.set(x, "meta/get-octocat", value.asInstanceOf[js.Any])
      
      inline def `setMetaSlashget-zen`(value: Responses200ContentTextplainString): Self = StObject.set(x, "meta/get-zen", value.asInstanceOf[js.Any])
      
      inline def setMetaSlashroot(value: Responses200ContentApplicationjsonAuthorizationsurl): Self = StObject.set(x, "meta/root", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashcancel-import`(value: Responses503Content36): Self = StObject.set(x, "migrations/cancel-import", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashdelete-archive-for-authenticated-user`(value: Parameters662Responses401Content36403Content36404Content36): Self = StObject.set(x, "migrations/delete-archive-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashdelete-archive-for-org`(value: Parameters519): Self = StObject.set(x, "migrations/delete-archive-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashdownload-archive-for-org`(value: Parameters519): Self = StObject.set(x, "migrations/download-archive-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-archive-for-authenticated-user`(value: Parameters662): Self = StObject.set(x, "migrations/get-archive-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-commit-authors`(value: ParametersQuery589): Self = StObject.set(x, "migrations/get-commit-authors", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-import-status`(value: Responses200ContentApplicationjsonAuthorscount): Self = StObject.set(x, "migrations/get-import-status", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-large-files`(value: Responses200Content591): Self = StObject.set(x, "migrations/get-large-files", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-status-for-authenticated-user`(value: ParametersPathMigrationidNumber): Self = StObject.set(x, "migrations/get-status-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-status-for-org`(value: ParametersPathMigrationidOrg): Self = StObject.set(x, "migrations/get-status-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashlist-for-authenticated-user`(value: Responses200Content518304): Self = StObject.set(x, "migrations/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashlist-for-org`(value: ParametersQueryExcludePage): Self = StObject.set(x, "migrations/list-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashlist-repos-for-authenticated-user`(value: ParametersPathMigrationidNumberQuery473): Self = StObject.set(x, "migrations/list-repos-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashlist-repos-for-org`(value: ParametersPathMigrationidOrgQuery473): Self = StObject.set(x, "migrations/list-repos-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashmap-commit-author`(value: ParametersPathAuthoridOwner): Self = StObject.set(x, "migrations/map-commit-author", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashset-lfs-preference`(value: Responses200ContentApplicationjsonAuthorscount422Content346): Self = StObject.set(x, "migrations/set-lfs-preference", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashstart-for-authenticated-user`(value: Responses201ContentApplicationjsonExcludeownerprojects304): Self = StObject.set(x, "migrations/start-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashstart-for-org`(value: Responses201ContentApplicationjsonExcludeownerprojects): Self = StObject.set(x, "migrations/start-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashstart-import`(value: Responses201404422503): Self = StObject.set(x, "migrations/start-import", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashunlock-repo-for-authenticated-user`(value: ParametersPathReponameString): Self = StObject.set(x, "migrations/unlock-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashunlock-repo-for-org`(value: ParametersPathOrgReponame): Self = StObject.set(x, "migrations/unlock-repo-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashupdate-import`(value: Responses200ContentApplicationjsonAuthorscount503Content36): Self = StObject.set(x, "migrations/update-import", value.asInstanceOf[js.Any])
      
      inline def `setOidcSlashget-oidc-custom-sub-template-for-org`(value: Responses200ContentApplicationjsonIncludeclaimkeysArray): Self = StObject.set(x, "oidc/get-oidc-custom-sub-template-for-org", value.asInstanceOf[js.Any])
      
      inline def `setOidcSlashupdate-oidc-custom-sub-template-for-org`(value: RequestBodyContentApplicationjsonIncludeclaimkeysArray): Self = StObject.set(x, "oidc/update-oidc-custom-sub-template-for-org", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashadd-security-manager-team`(value: ParametersPathTeamslugString): Self = StObject.set(x, "orgs/add-security-manager-team", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashblock-user`(value: Responses476): Self = StObject.set(x, "orgs/block-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcancel-invitation`(value: ParametersPathInvitationidOrg): Self = StObject.set(x, "orgs/cancel-invitation", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcheck-blocked-user`(value: ParametersPathUsernameString): Self = StObject.set(x, "orgs/check-blocked-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcheck-membership-for-user`(value: ParametersPathUsernameStringResponses): Self = StObject.set(x, "orgs/check-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcheck-public-membership-for-user`(value: ParametersPathUsernameStringResponses): Self = StObject.set(x, "orgs/check-public-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashconvert-member-to-outside-collaborator`(value: Responses202ContentApplicationjsonRecord404Content36): Self = StObject.set(x, "orgs/convert-member-to-outside-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcreate-invitation`(value: Responses201ContentApplicationjsonInvitationteamsurl): Self = StObject.set(x, "orgs/create-invitation", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcreate-webhook`(value: RequestBodyContentApplicationjsonConfigEvents): Self = StObject.set(x, "orgs/create-webhook", value.asInstanceOf[js.Any])
      
      inline def setOrgsSlashdelete(value: Responses202ContentApplicationjsonRecord): Self = StObject.set(x, "orgs/delete", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashdelete-webhook`(value: ParametersPathHookidOrgResponses404Content36): Self = StObject.set(x, "orgs/delete-webhook", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashenable-or-disable-security-product-on-all-org-repos`(value: ParametersPathSecurityproduct): Self = StObject.set(x, "orgs/enable-or-disable-security-product-on-all-org-repos", value.asInstanceOf[js.Any])
      
      inline def setOrgsSlashget(value: Responses200ContentApplicationjsonBillingemail): Self = StObject.set(x, "orgs/get", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-membership-for-authenticated-user`(value: Parameters496Responses200ContentApplicationjsonOrganizationOrganizationurl): Self = StObject.set(x, "orgs/get-membership-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-membership-for-user`(value: Responses200ContentApplicationjsonOrganizationOrganizationurl): Self = StObject.set(x, "orgs/get-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-webhook`(value: ParametersPathHookidOrg): Self = StObject.set(x, "orgs/get-webhook", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-webhook-config-for-org`(value: ParametersPathHookidOrgResponses200ContentApplicationjsonContenttype): Self = StObject.set(x, "orgs/get-webhook-config-for-org", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-webhook-delivery`(value: ParametersPathDeliveryidHookidOrg): Self = StObject.set(x, "orgs/get-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def setOrgsSlashlist(value: ParametersQuery493): Self = StObject.set(x, "orgs/list", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-app-installations`(value: Responses200ContentApplicationjsonInstallationsTotalcount): Self = StObject.set(x, "orgs/list-app-installations", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-blocked-users`(value: Responses200Content508): Self = StObject.set(x, "orgs/list-blocked-users", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-failed-invitations`(value: Responses200Content511): Self = StObject.set(x, "orgs/list-failed-invitations", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-for-authenticated-user`(value: Responses200Content494HeadersLinkString): Self = StObject.set(x, "orgs/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-for-user`(value: Responses670): Self = StObject.set(x, "orgs/list-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-invitation-teams`(value: ParametersPathInvitationidOrgQuery473): Self = StObject.set(x, "orgs/list-invitation-teams", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-members`(value: ParametersQueryPagePerpageRole): Self = StObject.set(x, "orgs/list-members", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-memberships-for-authenticated-user`(value: ParametersQuery660): Self = StObject.set(x, "orgs/list-memberships-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-outside-collaborators`(value: ParametersQuery520): Self = StObject.set(x, "orgs/list-outside-collaborators", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-pat-grant-repositories`(value: ParametersPathPatidNumberQuery473): Self = StObject.set(x, "orgs/list-pat-grant-repositories", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-pat-grant-request-repositories`(value: ParametersPathOrgPatrequestidQuery473): Self = StObject.set(x, "orgs/list-pat-grant-request-repositories", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-pat-grant-requests`(value: ParametersPathOrgString): Self = StObject.set(x, "orgs/list-pat-grant-requests", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-pat-grants`(value: Responses403404422500): Self = StObject.set(x, "orgs/list-pat-grants", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-pending-invitations`(value: ParametersQueryInvitationsourcePage): Self = StObject.set(x, "orgs/list-pending-invitations", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-public-members`(value: Responses521): Self = StObject.set(x, "orgs/list-public-members", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-security-manager-teams`(value: Responses200Content528): Self = StObject.set(x, "orgs/list-security-manager-teams", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-webhook-deliveries`(value: ParametersPathHookidOrgQueryRedelivery): Self = StObject.set(x, "orgs/list-webhook-deliveries", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-webhooks`(value: Responses200Content512): Self = StObject.set(x, "orgs/list-webhooks", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashping-webhook`(value: ParametersPathHookidOrgResponses404Content36): Self = StObject.set(x, "orgs/ping-webhook", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashredeliver-webhook-delivery`(value: ParametersPathDeliveryidHookidOrgResponses202400422): Self = StObject.set(x, "orgs/redeliver-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-member`(value: Responses517): Self = StObject.set(x, "orgs/remove-member", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-membership-for-user`(value: Responses403Content36404Content36): Self = StObject.set(x, "orgs/remove-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-outside-collaborator`(value: ParametersPathUsernameStringResponses422ContentApplicationjsonDocumentationurl): Self = StObject.set(x, "orgs/remove-outside-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-public-membership-for-authenticated-user`(value: ParametersPathUsernameStringResponses): Self = StObject.set(x, "orgs/remove-public-membership-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-security-manager-team`(value: ParametersPathTeamslugString): Self = StObject.set(x, "orgs/remove-security-manager-team", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashreview-pat-grant-request`(value: ParametersPathOrgPatrequestid): Self = StObject.set(x, "orgs/review-pat-grant-request", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashreview-pat-grant-requests-in-bulk`(value: Parameters496): Self = StObject.set(x, "orgs/review-pat-grant-requests-in-bulk", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashset-membership-for-user`(value: Responses200ContentApplicationjsonOrganizationOrganizationurl403Content36): Self = StObject.set(x, "orgs/set-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashset-public-membership-for-authenticated-user`(value: Responses517): Self = StObject.set(x, "orgs/set-public-membership-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashunblock-user`(value: ParametersPathUsernameStringResponses): Self = StObject.set(x, "orgs/unblock-user", value.asInstanceOf[js.Any])
      
      inline def setOrgsSlashupdate(value: Responses200409): Self = StObject.set(x, "orgs/update", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashupdate-membership-for-authenticated-user`(value: Responses200ContentApplicationjsonOrganizationOrganizationurl403Content36404Content36): Self = StObject.set(x, "orgs/update-membership-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashupdate-pat-access`(value: ParametersPathPatidNumber): Self = StObject.set(x, "orgs/update-pat-access", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashupdate-pat-accesses`(value: Responses202403404422): Self = StObject.set(x, "orgs/update-pat-accesses", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashupdate-webhook`(value: Responses200513404Content36): Self = StObject.set(x, "orgs/update-webhook", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashupdate-webhook-config-for-org`(value: ParametersPathHookidOrgRequestBody): Self = StObject.set(x, "orgs/update-webhook-config-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-for-authenticated-user`(value: ParametersPathPackagenameStringResponses401Content36403Content36): Self = StObject.set(x, "packages/delete-package-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-for-org`(value: Responses401Content36403Content36): Self = StObject.set(x, "packages/delete-package-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-for-user`(value: ParametersPathPackagenamePackagetypeUsernameResponses401Content36403Content36): Self = StObject.set(x, "packages/delete-package-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-version-for-authenticated-user`(value: ParametersPathPackageversionidNumberResponses401Content36403Content36): Self = StObject.set(x, "packages/delete-package-version-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-version-for-org`(value: ParametersPathOrgPackagenamePackagetypeResponses401Content36403Content36): Self = StObject.set(x, "packages/delete-package-version-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-version-for-user`(value: ParametersPathPackagenamePackagetypePackageversionidUsername): Self = StObject.set(x, "packages/delete-package-version-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-all-package-versions-for-package-owned-by-authenticated-user`(value: ParametersPathPackagenameStringQuery522): Self = StObject.set(x, "packages/get-all-package-versions-for-package-owned-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-all-package-versions-for-package-owned-by-org`(value: ParametersQuery522): Self = StObject.set(x, "packages/get-all-package-versions-for-package-owned-by-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-all-package-versions-for-package-owned-by-user`(value: Responses200Content523): Self = StObject.set(x, "packages/get-all-package-versions-for-package-owned-by-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-for-authenticated-user`(value: ParametersPathPackagenameString): Self = StObject.set(x, "packages/get-package-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-for-organization`(value: ParametersPathOrgPackagename): Self = StObject.set(x, "packages/get-package-for-organization", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-for-user`(value: ParametersPathPackagenamePackagetypeUsername): Self = StObject.set(x, "packages/get-package-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-version-for-authenticated-user`(value: ParametersPathPackageversionidNumber): Self = StObject.set(x, "packages/get-package-version-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-version-for-organization`(value: ParametersPathOrgPackagenamePackagetype): Self = StObject.set(x, "packages/get-package-version-for-organization", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-version-for-user`(value: ParametersPathPackagetypePackageversionidUsername): Self = StObject.set(x, "packages/get-package-version-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashlist-docker-migration-conflicting-packages-for-authenticated-user`(value: Responses653): Self = StObject.set(x, "packages/list-docker-migration-conflicting-packages-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashlist-docker-migration-conflicting-packages-for-organization`(value: Responses200Content510): Self = StObject.set(x, "packages/list-docker-migration-conflicting-packages-for-organization", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashlist-docker-migration-conflicting-packages-for-user`(value: ParametersPath649Responses200Content510): Self = StObject.set(x, "packages/list-docker-migration-conflicting-packages-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashlist-packages-for-authenticated-user`(value: ParametersQueryPackagetypePagePerpage): Self = StObject.set(x, "packages/list-packages-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashlist-packages-for-organization`(value: ParametersQueryPerpageVisibility): Self = StObject.set(x, "packages/list-packages-for-organization", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashlist-packages-for-user`(value: ParametersPath649QueryPackagetypePagePerpage): Self = StObject.set(x, "packages/list-packages-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-for-authenticated-user`(value: ParametersPathPackagenameStringQueryToken): Self = StObject.set(x, "packages/restore-package-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-for-org`(value: ParametersPathOrgPackagenameQueryToken): Self = StObject.set(x, "packages/restore-package-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-for-user`(value: ParametersPathPackagenamePackagetypeUsernameQueryToken): Self = StObject.set(x, "packages/restore-package-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-version-for-authenticated-user`(value: ParametersPathPackageversionidNumberResponses401Content36403Content36): Self = StObject.set(x, "packages/restore-package-version-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-version-for-org`(value: ParametersPathOrgPackagenamePackagetypeResponses401Content36403Content36): Self = StObject.set(x, "packages/restore-package-version-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-version-for-user`(value: ParametersPathPackagenamePackagetypePackageversionidUsername): Self = StObject.set(x, "packages/restore-package-version-for-user", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashadd-collaborator`(value: ParametersPathProjectidNumberUsernameString): Self = StObject.set(x, "projects/add-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-card`(value: Responses304401403422503): Self = StObject.set(x, "projects/create-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-column`(value: Responses201ContentApplicationjsonCardsurl): Self = StObject.set(x, "projects/create-column", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-for-authenticated-user`(value: Responses201ContentApplicationjsonBodyColumnsurl): Self = StObject.set(x, "projects/create-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-for-org`(value: Responses201401403404): Self = StObject.set(x, "projects/create-for-org", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-for-repo`(value: Parameters540RequestBodyContentApplicationjsonBodyName): Self = StObject.set(x, "projects/create-for-repo", value.asInstanceOf[js.Any])
      
      inline def setProjectsSlashdelete(value: Responses304401403404410): Self = StObject.set(x, "projects/delete", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashdelete-card`(value: Responses401Content36403ContentApplicationjsonErrors): Self = StObject.set(x, "projects/delete-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashdelete-column`(value: ParametersPathColumnidNumberResponses304401Content36): Self = StObject.set(x, "projects/delete-column", value.asInstanceOf[js.Any])
      
      inline def setProjectsSlashget(value: ParametersPathProjectidNumber): Self = StObject.set(x, "projects/get", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashget-card`(value: ParametersPathCardidNumber): Self = StObject.set(x, "projects/get-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashget-column`(value: ParametersPathColumnidNumber): Self = StObject.set(x, "projects/get-column", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashget-permission-for-user`(value: Responses200ContentApplicationjsonPermissionString): Self = StObject.set(x, "projects/get-permission-for-user", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-cards`(value: ParametersQueryArchivedstatePage): Self = StObject.set(x, "projects/list-cards", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-collaborators`(value: ParametersQueryAffiliationPagePerpage): Self = StObject.set(x, "projects/list-collaborators", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-columns`(value: ParametersPathProjectidNumberQuery473): Self = StObject.set(x, "projects/list-columns", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-for-org`(value: ParametersQuery524): Self = StObject.set(x, "projects/list-for-org", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-for-repo`(value: ParametersPathOwnerStringQuery524): Self = StObject.set(x, "projects/list-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-for-user`(value: ParametersPath649Query524): Self = StObject.set(x, "projects/list-for-user", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashmove-card`(value: Responses401403422503): Self = StObject.set(x, "projects/move-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashmove-column`(value: Responses201ContentApplicationjsonRecord304): Self = StObject.set(x, "projects/move-column", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashremove-collaborator`(value: Responses304401Content36403Content36): Self = StObject.set(x, "projects/remove-collaborator", value.asInstanceOf[js.Any])
      
      inline def setProjectsSlashupdate(value: Responses401403410): Self = StObject.set(x, "projects/update", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashupdate-card`(value: Responses200ContentApplicationjsonArchivedColumnname304): Self = StObject.set(x, "projects/update-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashupdate-column`(value: Responses200ContentApplicationjsonCardsurl304): Self = StObject.set(x, "projects/update-column", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashcheck-if-merged`(value: ParametersPathPullnumberRepoResponses): Self = StObject.set(x, "pulls/check-if-merged", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashcreate(value: Responses201ContentApplicationjsonLocked): Self = StObject.set(x, "pulls/create", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashcreate-reply-for-review-comment`(value: ParametersPathCommentidOwnerPullnumber): Self = StObject.set(x, "pulls/create-reply-for-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashcreate-review`(value: Responses200ContentApplicationjsonBodytextCommitid): Self = StObject.set(x, "pulls/create-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashcreate-review-comment`(value: Responses201ContentApplicationjsonInreplytoidHeadersLocation): Self = StObject.set(x, "pulls/create-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashdelete-pending-review`(value: Responses200ContentApplicationjsonBodytextCommitid404Content36422Content471): Self = StObject.set(x, "pulls/delete-pending-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashdelete-review-comment`(value: ParametersPathCommentidOwnerRepoResponses404Content36): Self = StObject.set(x, "pulls/delete-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashdismiss-review`(value: ParametersPathRepoReviewidRequestBodyContentApplicationjsonEvent): Self = StObject.set(x, "pulls/dismiss-review", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashget(value: ParametersPathPullnumberRepo): Self = StObject.set(x, "pulls/get", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashget-review`(value: ParametersPathRepoReviewid): Self = StObject.set(x, "pulls/get-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashget-review-comment`(value: Responses200ContentApplicationjsonInreplytoid): Self = StObject.set(x, "pulls/get-review-comment", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashlist(value: ParametersQueryBaseDirection): Self = StObject.set(x, "pulls/list", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-comments-for-review`(value: ParametersPathRepoReviewidQuery473): Self = StObject.set(x, "pulls/list-comments-for-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-commits`(value: ParametersPathPullnumberRepoQuery473): Self = StObject.set(x, "pulls/list-commits", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-files`(value: Responses200422500503): Self = StObject.set(x, "pulls/list-files", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-requested-reviewers`(value: Responses200ContentApplicationjsonTeamsArrayUsersArray): Self = StObject.set(x, "pulls/list-requested-reviewers", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-review-comments`(value: ParametersPathPullnumberRepoQueryPerpageSinceSort): Self = StObject.set(x, "pulls/list-review-comments", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-review-comments-for-repo`(value: ParametersQueryDirectionPagePerpageSince): Self = StObject.set(x, "pulls/list-review-comments-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-reviews`(value: Responses200Content617): Self = StObject.set(x, "pulls/list-reviews", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashmerge(value: Responses404405): Self = StObject.set(x, "pulls/merge", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashremove-requested-reviewers`(value: Responses200ContentApplicationjsonCreatedatDiffurl): Self = StObject.set(x, "pulls/remove-requested-reviewers", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashrequest-reviewers`(value: Responses201ContentApplicationjsonCreatedatDiffurl): Self = StObject.set(x, "pulls/request-reviewers", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashsubmit-review`(value: Responses200ContentApplicationjsonBodytextCommitid403Content36): Self = StObject.set(x, "pulls/submit-review", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashupdate(value: Responses200615): Self = StObject.set(x, "pulls/update", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashupdate-branch`(value: Responses202ContentApplicationjsonUrl403Content36): Self = StObject.set(x, "pulls/update-branch", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashupdate-review`(value: Responses200ContentApplicationjsonBodytextCommitid422Content471): Self = StObject.set(x, "pulls/update-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashupdate-review-comment`(value: Responses614): Self = StObject.set(x, "pulls/update-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setRate-limitSlashget`(value: Responses200ContentApplicationjsonResources): Self = StObject.set(x, "rate-limit/get", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-commit-comment`(value: Responses201ContentApplicationjsonNodeidUser): Self = StObject.set(x, "reactions/create-for-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-issue`(value: ParametersPathIssuenumberOwnerRepoRequestBodyContentApplicationjson119): Self = StObject.set(x, "reactions/create-for-issue", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-issue-comment`(value: Responses201ContentApplicationjsonNodeidUser): Self = StObject.set(x, "reactions/create-for-issue-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-pull-request-review-comment`(value: Responses201ContentApplicationjsonNodeidUser): Self = StObject.set(x, "reactions/create-for-pull-request-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-release`(value: ParametersPathOwnerReleaseidRequestBodyContentApplicationjson335): Self = StObject.set(x, "reactions/create-for-release", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-team-discussion-comment-in-org`(value: Responses200ContentApplicationjsonNodeidUser): Self = StObject.set(x, "reactions/create-for-team-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-team-discussion-comment-legacy`(value: Responses647): Self = StObject.set(x, "reactions/create-for-team-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-team-discussion-in-org`(value: ParametersPathDiscussionnumberOrgTeamslugRequestBodyContentApplicationjson119): Self = StObject.set(x, "reactions/create-for-team-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-team-discussion-legacy`(value: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjson119): Self = StObject.set(x, "reactions/create-for-team-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-commit-comment`(value: ParametersPathReactionidRepo): Self = StObject.set(x, "reactions/delete-for-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-issue`(value: ParametersPathIssuenumberOwnerReactionid): Self = StObject.set(x, "reactions/delete-for-issue", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-issue-comment`(value: ParametersPathReactionidRepo): Self = StObject.set(x, "reactions/delete-for-issue-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-pull-request-comment`(value: ParametersPathReactionidRepo): Self = StObject.set(x, "reactions/delete-for-pull-request-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-release`(value: ParametersPathReleaseidRepo): Self = StObject.set(x, "reactions/delete-for-release", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-team-discussion`(value: ParametersPathReactionidTeamslug): Self = StObject.set(x, "reactions/delete-for-team-discussion", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-team-discussion-comment`(value: ParametersPathOrgReactionid): Self = StObject.set(x, "reactions/delete-for-team-discussion-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-commit-comment`(value: ParametersPathCommentidOwnerRepoQuery532): Self = StObject.set(x, "reactions/list-for-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-issue`(value: ParametersPathIssuenumberOwnerRepoQuery532): Self = StObject.set(x, "reactions/list-for-issue", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-issue-comment`(value: ParametersPathCommentidOwnerRepoQuery532): Self = StObject.set(x, "reactions/list-for-issue-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-pull-request-review-comment`(value: ParametersPathCommentidOwnerRepoQuery532): Self = StObject.set(x, "reactions/list-for-pull-request-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-release`(value: ParametersQuery623): Self = StObject.set(x, "reactions/list-for-release", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-team-discussion-comment-in-org`(value: ParametersQuery532): Self = StObject.set(x, "reactions/list-for-team-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-team-discussion-comment-legacy`(value: ParametersPathCommentnumberDiscussionnumberTeamidQuery532): Self = StObject.set(x, "reactions/list-for-team-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-team-discussion-in-org`(value: ParametersPathDiscussionnumberOrgTeamslugQuery532): Self = StObject.set(x, "reactions/list-for-team-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-team-discussion-legacy`(value: ParametersPathDiscussionnumberNumberQuery532): Self = StObject.set(x, "reactions/list-for-team-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashaccept-invitation-for-authenticated-user`(value: ParametersPathInvitationidNumber): Self = StObject.set(x, "repos/accept-invitation-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-app-access-restrictions`(value: Responses200Content557422Content346): Self = StObject.set(x, "repos/add-app-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-collaborator`(value: Responses201ContentApplicationjsonInvitee): Self = StObject.set(x, "repos/add-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-status-check-contexts`(value: Responses200Content29403Content36): Self = StObject.set(x, "repos/add-status-check-contexts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-team-access-restrictions`(value: Responses200558422Content346): Self = StObject.set(x, "repos/add-team-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-user-access-restrictions`(value: Responses200Content508422Content346): Self = StObject.set(x, "repos/add-user-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcheck-collaborator`(value: ParametersPathOwnerRepoUsername): Self = StObject.set(x, "repos/check-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcheck-vulnerability-alerts`(value: Parameters540Responses): Self = StObject.set(x, "repos/check-vulnerability-alerts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcodeowners-errors`(value: ParametersPathOwnerStringQuery205): Self = StObject.set(x, "repos/codeowners-errors", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcompare-commits`(value: ParametersPathHeadOwner): Self = StObject.set(x, "repos/compare-commits", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcompare-commits-with-basehead`(value: ParametersPathBaseheadOwner): Self = StObject.set(x, "repos/compare-commits-with-basehead", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-autolink`(value: Responses201ContentApplicationjsonKeyprefix): Self = StObject.set(x, "repos/create-autolink", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-commit-comment`(value: Responses201ContentApplicationjsonAuthorassociationBodyHeadersLocation): Self = StObject.set(x, "repos/create-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-commit-signature-protection`(value: Responses200ContentApplicationjsonEnabledUrl404Content36): Self = StObject.set(x, "repos/create-commit-signature-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-commit-status`(value: ParametersPathOwnerRepoSha): Self = StObject.set(x, "repos/create-commit-status", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-deploy-key`(value: Responses201ContentApplicationjsonAddedby): Self = StObject.set(x, "repos/create-deploy-key", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-deployment`(value: Responses201202422): Self = StObject.set(x, "repos/create-deployment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-deployment-branch-policy`(value: Responses200ContentApplicationjsonNameNodeid): Self = StObject.set(x, "repos/create-deployment-branch-policy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-deployment-protection-rule`(value: Responses201ContentApplicationjsonEnabledId): Self = StObject.set(x, "repos/create-deployment-protection-rule", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-deployment-status`(value: Responses201ContentApplicationjsonLogurl): Self = StObject.set(x, "repos/create-deployment-status", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-dispatch-event`(value: Parameters540RequestBodyContentApplicationjsonClientpayload): Self = StObject.set(x, "repos/create-dispatch-event", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-for-authenticated-user`(value: Responses304400401): Self = StObject.set(x, "repos/create-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-fork`(value: Responses202400403): Self = StObject.set(x, "repos/create-fork", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-in-org`(value: Responses201ContentApplicationjsonAllowupdatebranch): Self = StObject.set(x, "repos/create-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-or-update-environment`(value: Responses422ContentApplicationjsonDocumentationurlMessage): Self = StObject.set(x, "repos/create-or-update-environment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-or-update-file-contents`(value: Parameters572): Self = StObject.set(x, "repos/create-or-update-file-contents", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-org-ruleset`(value: RequestBodyContentApplicationjsonBypassactorsConditions): Self = StObject.set(x, "repos/create-org-ruleset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-pages-deployment`(value: Responses400404422): Self = StObject.set(x, "repos/create-pages-deployment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-pages-site`(value: Responses201409422): Self = StObject.set(x, "repos/create-pages-site", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-release`(value: Responses201ContentApplicationjsonMentionscount): Self = StObject.set(x, "repos/create-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-repo-ruleset`(value: RequestBodyContentApplicationjsonBypassactorsBypassmode): Self = StObject.set(x, "repos/create-repo-ruleset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-tag-protection`(value: Responses201ContentApplicationjsonCreatedatEnabled): Self = StObject.set(x, "repos/create-tag-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-using-template`(value: RequestBodyContentApplicationjsonIncludeallbranches): Self = StObject.set(x, "repos/create-using-template", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-webhook`(value: Responses201ContentApplicationjsonTesturl): Self = StObject.set(x, "repos/create-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdecline-invitation-for-authenticated-user`(value: ParametersPathInvitationidNumber): Self = StObject.set(x, "repos/decline-invitation-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setReposSlashdelete(value: Responses307403): Self = StObject.set(x, "repos/delete", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-access-restrictions`(value: ParametersPathBranchOwnerResponses): Self = StObject.set(x, "repos/delete-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-admin-branch-protection`(value: ParametersPathBranchOwnerResponses404Content36): Self = StObject.set(x, "repos/delete-admin-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-an-environment`(value: ParametersPathEnvironmentnameOwnerRepoResponses): Self = StObject.set(x, "repos/delete-an-environment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-autolink`(value: ParametersPathAutolinkidOwnerResponses404Content36): Self = StObject.set(x, "repos/delete-autolink", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-branch-protection`(value: ParametersPathBranchOwnerResponses517): Self = StObject.set(x, "repos/delete-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-commit-comment`(value: ParametersPathCommentidOwnerRepoResponses404Content36): Self = StObject.set(x, "repos/delete-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-commit-signature-protection`(value: ParametersPathBranchOwnerResponses404Content36): Self = StObject.set(x, "repos/delete-commit-signature-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-deploy-key`(value: ParametersPathKeyidOwnerRepoResponses): Self = StObject.set(x, "repos/delete-deploy-key", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-deployment`(value: Responses404Content36422Content471): Self = StObject.set(x, "repos/delete-deployment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-deployment-branch-policy`(value: ParametersPathBranchpolicyidEnvironmentnameResponses): Self = StObject.set(x, "repos/delete-deployment-branch-policy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-file`(value: Responses409422503): Self = StObject.set(x, "repos/delete-file", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-invitation`(value: ParametersPathInvitationidOwnerRepo): Self = StObject.set(x, "repos/delete-invitation", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-org-ruleset`(value: Responses500Content36): Self = StObject.set(x, "repos/delete-org-ruleset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-pages-site`(value: Responses404Content36409Content36): Self = StObject.set(x, "repos/delete-pages-site", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-pull-request-review-protection`(value: ParametersPathBranchOwnerResponses404Content36): Self = StObject.set(x, "repos/delete-pull-request-review-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-release`(value: ParametersPathOwnerReleaseidResponses): Self = StObject.set(x, "repos/delete-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-release-asset`(value: ParametersPathAssetidOwnerResponses): Self = StObject.set(x, "repos/delete-release-asset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-repo-ruleset`(value: Parameters625Responses500Content36): Self = StObject.set(x, "repos/delete-repo-ruleset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-tag-protection`(value: ParametersPathRepoTagprotectionid): Self = StObject.set(x, "repos/delete-tag-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-webhook`(value: ParametersPathHookidOwnerRepoResponses404Content36): Self = StObject.set(x, "repos/delete-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdisable-automated-security-fixes`(value: Parameters540Responses): Self = StObject.set(x, "repos/disable-automated-security-fixes", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdisable-deployment-protection-rule`(value: ParametersPathEnvironmentnameOwnerProtectionruleid): Self = StObject.set(x, "repos/disable-deployment-protection-rule", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdisable-lfs-for-repo`(value: Parameters540Responses): Self = StObject.set(x, "repos/disable-lfs-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdisable-vulnerability-alerts`(value: Parameters540Responses): Self = StObject.set(x, "repos/disable-vulnerability-alerts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdownload-tarball-archive`(value: Parameters582Responses): Self = StObject.set(x, "repos/download-tarball-archive", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdownload-zipball-archive`(value: Parameters582Responses): Self = StObject.set(x, "repos/download-zipball-archive", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashenable-automated-security-fixes`(value: Parameters540Responses): Self = StObject.set(x, "repos/enable-automated-security-fixes", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashenable-lfs-for-repo`(value: Responses606): Self = StObject.set(x, "repos/enable-lfs-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashenable-vulnerability-alerts`(value: Parameters540Responses): Self = StObject.set(x, "repos/enable-vulnerability-alerts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashgenerate-release-notes`(value: Responses200ContentApplicationjsonBodyString): Self = StObject.set(x, "repos/generate-release-notes", value.asInstanceOf[js.Any])
      
      inline def setReposSlashget(value: Parameters540): Self = StObject.set(x, "repos/get", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-access-restrictions`(value: Responses200ContentApplicationjsonAppsurl): Self = StObject.set(x, "repos/get-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-admin-branch-protection`(value: Responses200ContentApplicationjsonEnabledUrl): Self = StObject.set(x, "repos/get-admin-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-all-deployment-protection-rules`(value: ParametersPathEnvironmentnameString): Self = StObject.set(x, "repos/get-all-deployment-protection-rules", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-all-environments`(value: Responses200ContentApplicationjsonEnvironmentsTotalcount): Self = StObject.set(x, "repos/get-all-environments", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-all-status-check-contexts`(value: Responses200Content29404Content36): Self = StObject.set(x, "repos/get-all-status-check-contexts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-all-topics`(value: ParametersPathOwnerStringQuery507): Self = StObject.set(x, "repos/get-all-topics", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-apps-with-access-to-protected-branch`(value: Responses200Content557): Self = StObject.set(x, "repos/get-apps-with-access-to-protected-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-autolink`(value: ParametersPathAutolinkidOwner): Self = StObject.set(x, "repos/get-autolink", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-branch`(value: ParametersPathBranchOwner): Self = StObject.set(x, "repos/get-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-branch-protection`(value: Responses200ContentApplicationjsonAllowforksyncing): Self = StObject.set(x, "repos/get-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-branch-rules`(value: Responses200Content624): Self = StObject.set(x, "repos/get-branch-rules", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-clones`(value: ParametersQuery637): Self = StObject.set(x, "repos/get-clones", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-code-frequency-stats`(value: Responses200Content631): Self = StObject.set(x, "repos/get-code-frequency-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-collaborator-permission-level`(value: Responses200ContentApplicationjsonPermissionRolename): Self = StObject.set(x, "repos/get-collaborator-permission-level", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-combined-status-for-ref`(value: ParametersPathOwnerRefRepoQuery473): Self = StObject.set(x, "repos/get-combined-status-for-ref", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-commit`(value: ParametersPathOwnerRefRepo): Self = StObject.set(x, "repos/get-commit", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-commit-activity-stats`(value: Responses200Content632): Self = StObject.set(x, "repos/get-commit-activity-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-commit-comment`(value: ParametersPathCommentidOwnerRepo): Self = StObject.set(x, "repos/get-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-commit-signature-protection`(value: Responses200ContentApplicationjsonEnabledUrl404Content36): Self = StObject.set(x, "repos/get-commit-signature-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-community-profile-metrics`(value: Responses200ContentApplicationjsonDocumentation): Self = StObject.set(x, "repos/get-community-profile-metrics", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-content`(value: ParametersPathOwnerPathRepo): Self = StObject.set(x, "repos/get-content", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-contributors-stats`(value: Responses200Content633): Self = StObject.set(x, "repos/get-contributors-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-custom-deployment-protection-rule`(value: ParametersPathProtectionruleidRepo): Self = StObject.set(x, "repos/get-custom-deployment-protection-rule", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-deploy-key`(value: ParametersPathKeyidOwnerRepo): Self = StObject.set(x, "repos/get-deploy-key", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-deployment`(value: ParametersPathDeploymentidOwner): Self = StObject.set(x, "repos/get-deployment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-deployment-branch-policy`(value: ParametersPathBranchpolicyidEnvironmentname): Self = StObject.set(x, "repos/get-deployment-branch-policy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-deployment-status`(value: ParametersPathRepoStatusid): Self = StObject.set(x, "repos/get-deployment-status", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-environment`(value: ParametersPathEnvironmentnameOwnerRepo): Self = StObject.set(x, "repos/get-environment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-latest-pages-build`(value: Responses200ContentApplicationjsonCommitCreatedat): Self = StObject.set(x, "repos/get-latest-pages-build", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-latest-release`(value: Responses200621): Self = StObject.set(x, "repos/get-latest-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-org-ruleset`(value: ParametersPathOrgRulesetid): Self = StObject.set(x, "repos/get-org-ruleset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-org-rulesets`(value: Responses200Content527): Self = StObject.set(x, "repos/get-org-rulesets", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-pages`(value: Responses200ContentApplicationjsonCustom404): Self = StObject.set(x, "repos/get-pages", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-pages-build`(value: ParametersPathBuildidOwner): Self = StObject.set(x, "repos/get-pages-build", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-pages-health-check`(value: Responses200ContentApplicationjsonAltdomain): Self = StObject.set(x, "repos/get-pages-health-check", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-participation-stats`(value: Responses200ContentApplicationjsonAllOwner): Self = StObject.set(x, "repos/get-participation-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-pull-request-review-protection`(value: Responses200ContentApplicationjsonDismissstalereviews): Self = StObject.set(x, "repos/get-pull-request-review-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-punch-card-stats`(value: Responses200Content631204): Self = StObject.set(x, "repos/get-punch-card-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-readme`(value: Responses200ContentApplicationjsonSubmodulegiturl): Self = StObject.set(x, "repos/get-readme", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-readme-in-directory`(value: ParametersPathDirOwner): Self = StObject.set(x, "repos/get-readme-in-directory", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-release`(value: ParametersPathOwnerReleaseid): Self = StObject.set(x, "repos/get-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-release-asset`(value: ParametersPathAssetidOwner): Self = StObject.set(x, "repos/get-release-asset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-release-by-tag`(value: ParametersPathRepoTag): Self = StObject.set(x, "repos/get-release-by-tag", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-repo-ruleset`(value: ParametersPathOwnerRepoRulesetid): Self = StObject.set(x, "repos/get-repo-ruleset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-repo-rulesets`(value: ParametersPathOwnerStringQueryIncludesparents): Self = StObject.set(x, "repos/get-repo-rulesets", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-status-checks-protection`(value: Responses200ContentApplicationjsonStrict): Self = StObject.set(x, "repos/get-status-checks-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-teams-with-access-to-protected-branch`(value: Responses200558): Self = StObject.set(x, "repos/get-teams-with-access-to-protected-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-top-paths`(value: Responses200Content638): Self = StObject.set(x, "repos/get-top-paths", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-top-referrers`(value: Responses200Content639): Self = StObject.set(x, "repos/get-top-referrers", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-users-with-access-to-protected-branch`(value: Responses200Content508404Content36): Self = StObject.set(x, "repos/get-users-with-access-to-protected-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-views`(value: Responses200ContentApplicationjsonCountUniques): Self = StObject.set(x, "repos/get-views", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-webhook`(value: ParametersPathHookidOwnerRepo): Self = StObject.set(x, "repos/get-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-webhook-config-for-repo`(value: ParametersPathHookidOwnerRepoResponses200ContentApplicationjsonContenttype): Self = StObject.set(x, "repos/get-webhook-config-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-webhook-delivery`(value: ParametersPathDeliveryidHookidOwnerRepo): Self = StObject.set(x, "repos/get-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-autolinks`(value: ParametersQuery553): Self = StObject.set(x, "repos/list-autolinks", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-branches`(value: ParametersQueryPerpageProtected): Self = StObject.set(x, "repos/list-branches", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-branches-for-head-commit`(value: ParametersPathCommitshaOwner): Self = StObject.set(x, "repos/list-branches-for-head-commit", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-collaborators`(value: ParametersQueryPagePermission): Self = StObject.set(x, "repos/list-collaborators", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-comments-for-commit`(value: ParametersPathCommitshaOwnerQuery473): Self = StObject.set(x, "repos/list-comments-for-commit", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-commit-comments-for-repo`(value: Responses200Content567): Self = StObject.set(x, "repos/list-commit-comments-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-commit-statuses-for-ref`(value: Responses200Content571): Self = StObject.set(x, "repos/list-commit-statuses-for-ref", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-commits`(value: ParametersQueryUntil): Self = StObject.set(x, "repos/list-commits", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-contributors`(value: ParametersQueryAnonPage): Self = StObject.set(x, "repos/list-contributors", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-custom-deployment-rule-integrations`(value: ParametersPathEnvironmentnameStringQuery507): Self = StObject.set(x, "repos/list-custom-deployment-rule-integrations", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-deploy-keys`(value: Responses200Content601): Self = StObject.set(x, "repos/list-deploy-keys", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-deployment-branch-policies`(value: ParametersPathEnvironmentnameOwnerRepoQuery473): Self = StObject.set(x, "repos/list-deployment-branch-policies", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-deployment-statuses`(value: ParametersPathDeploymentidOwnerQuery473): Self = StObject.set(x, "repos/list-deployment-statuses", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-deployments`(value: ParametersQueryEnvironmentPage): Self = StObject.set(x, "repos/list-deployments", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-for-authenticated-user`(value: ParametersQueryAffiliationBefore): Self = StObject.set(x, "repos/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-for-org`(value: ParametersQueryPerpageSortType): Self = StObject.set(x, "repos/list-for-org", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-for-user`(value: ParametersQueryPagePerpageSortType): Self = StObject.set(x, "repos/list-for-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-forks`(value: ParametersQuery580): Self = StObject.set(x, "repos/list-forks", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-invitations`(value: Responses200Content593): Self = StObject.set(x, "repos/list-invitations", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-invitations-for-authenticated-user`(value: Responses200Content593304): Self = StObject.set(x, "repos/list-invitations-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-languages`(value: Responses200Content605): Self = StObject.set(x, "repos/list-languages", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-pages-builds`(value: Responses200Content612): Self = StObject.set(x, "repos/list-pages-builds", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-public`(value: Parameters641): Self = StObject.set(x, "repos/list-public", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-pull-requests-associated-with-commit`(value: Responses200Content570): Self = StObject.set(x, "repos/list-pull-requests-associated-with-commit", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-release-assets`(value: ParametersPathOwnerReleaseidQuery473): Self = StObject.set(x, "repos/list-release-assets", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-releases`(value: Responses200Content620): Self = StObject.set(x, "repos/list-releases", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-tag-protection`(value: Responses200Content636): Self = StObject.set(x, "repos/list-tag-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-tags`(value: Responses200Content635): Self = StObject.set(x, "repos/list-tags", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-teams`(value: ParametersPathOwnerStringResponses537): Self = StObject.set(x, "repos/list-teams", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-webhook-deliveries`(value: ParametersPathHookidOwnerRepoQueryRedelivery): Self = StObject.set(x, "repos/list-webhook-deliveries", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-webhooks`(value: Responses200Content586): Self = StObject.set(x, "repos/list-webhooks", value.asInstanceOf[js.Any])
      
      inline def setReposSlashmerge(value: Responses201ContentApplicationjsonAuthorCommentsurl): Self = StObject.set(x, "repos/merge", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashmerge-upstream`(value: Responses200ContentApplicationjsonBasebranch): Self = StObject.set(x, "repos/merge-upstream", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashping-webhook`(value: ParametersPathHookidOwnerRepoResponses404Content36): Self = StObject.set(x, "repos/ping-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashredeliver-webhook-delivery`(value: ParametersPathDeliveryidHookidOwnerRepoResponses202400422): Self = StObject.set(x, "repos/redeliver-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-app-access-restrictions`(value: Responses200Content557422Content346): Self = StObject.set(x, "repos/remove-app-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-collaborator`(value: ParametersPathOwnerRepoUsername): Self = StObject.set(x, "repos/remove-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-status-check-contexts`(value: Responses200Content29404Content36422Content346): Self = StObject.set(x, "repos/remove-status-check-contexts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-status-check-protection`(value: ParametersPathBranchOwnerResponses): Self = StObject.set(x, "repos/remove-status-check-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-team-access-restrictions`(value: Responses200558422Content346): Self = StObject.set(x, "repos/remove-team-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-user-access-restrictions`(value: Responses200Content508422Content346): Self = StObject.set(x, "repos/remove-user-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashrename-branch`(value: Responses201ContentApplicationjsonRequiredapprovingreviewcount): Self = StObject.set(x, "repos/rename-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashreplace-all-topics`(value: Responses200ContentApplicationjsonNames404Content36): Self = StObject.set(x, "repos/replace-all-topics", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashrequest-pages-build`(value: Responses201ContentApplicationjsonStatusUrl): Self = StObject.set(x, "repos/request-pages-build", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-admin-branch-protection`(value: Responses200ContentApplicationjsonEnabledUrl): Self = StObject.set(x, "repos/set-admin-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-app-access-restrictions`(value: Responses200Content557422Content346): Self = StObject.set(x, "repos/set-app-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-status-check-contexts`(value: Responses200Content29404Content36422Content346): Self = StObject.set(x, "repos/set-status-check-contexts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-team-access-restrictions`(value: Responses200558422Content346): Self = StObject.set(x, "repos/set-team-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-user-access-restrictions`(value: Responses200Content508422Content346): Self = StObject.set(x, "repos/set-user-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashtest-push-webhook`(value: ParametersPathHookidOwnerRepoResponses404Content36): Self = StObject.set(x, "repos/test-push-webhook", value.asInstanceOf[js.Any])
      
      inline def setReposSlashtransfer(value: Responses202ContentApplicationjsonBranchesurl): Self = StObject.set(x, "repos/transfer", value.asInstanceOf[js.Any])
      
      inline def setReposSlashupdate(value: Responses200307403): Self = StObject.set(x, "repos/update", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-branch-protection`(value: Responses200ContentApplicationjsonEnforceadmins): Self = StObject.set(x, "repos/update-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-commit-comment`(value: Responses200ContentApplicationjsonAuthorassociationBody): Self = StObject.set(x, "repos/update-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-deployment-branch-policy`(value: ParametersPathBranchpolicyidEnvironmentnameRequestBodyContentApplicationjsonName): Self = StObject.set(x, "repos/update-deployment-branch-policy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-information-about-pages-site`(value: Responses400409422): Self = StObject.set(x, "repos/update-information-about-pages-site", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-invitation`(value: Responses200ContentApplicationjsonInvitee): Self = StObject.set(x, "repos/update-invitation", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-org-ruleset`(value: Responses200ContentApplicationjsonRules): Self = StObject.set(x, "repos/update-org-ruleset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-pull-request-review-protection`(value: Responses200ContentApplicationjsonDismissstalereviews422Content346): Self = StObject.set(x, "repos/update-pull-request-review-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-release`(value: Responses200621404ContentApplicationjsonDocumentationurlMessage): Self = StObject.set(x, "repos/update-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-release-asset`(value: Responses200ContentApplicationjsonDownloadcount): Self = StObject.set(x, "repos/update-release-asset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-repo-ruleset`(value: Parameters625): Self = StObject.set(x, "repos/update-repo-ruleset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-status-check-protection`(value: Responses200ContentApplicationjsonStrict404Content36): Self = StObject.set(x, "repos/update-status-check-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-webhook`(value: RequestBodyContentApplicationjsonRemoveevents): Self = StObject.set(x, "repos/update-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-webhook-config-for-repo`(value: ParametersPathHookidOwnerRepoRequestBody): Self = StObject.set(x, "repos/update-webhook-config-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupload-release-asset`(value: ParametersPathOwnerReleaseidQueryLabelName): Self = StObject.set(x, "repos/upload-release-asset", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashcode(value: ParametersQueryPerpageQSort): Self = StObject.set(x, "search/code", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashcommits(value: ParametersQueryOrderPagePerpageQ): Self = StObject.set(x, "search/commits", value.asInstanceOf[js.Any])
      
      inline def `setSearchSlashissues-and-pull-requests`(value: ParametersQueryPagePerpageQSort): Self = StObject.set(x, "search/issues-and-pull-requests", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashlabels(value: ParametersQueryQRepositoryid): Self = StObject.set(x, "search/labels", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashrepos(value: ParametersQueryOrderPagePerpageQSort): Self = StObject.set(x, "search/repos", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashtopics(value: ParametersQueryQString): Self = StObject.set(x, "search/topics", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashusers(value: ParametersQueryPerpageQString): Self = StObject.set(x, "search/users", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashget-alert`(value: Responses200304503): Self = StObject.set(x, "secret-scanning/get-alert", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashlist-alerts-for-enterprise`(value: ParametersQuerySecrettype): Self = StObject.set(x, "secret-scanning/list-alerts-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashlist-alerts-for-org`(value: ParametersQueryBeforeDirection): Self = StObject.set(x, "secret-scanning/list-alerts-for-org", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashlist-alerts-for-repo`(value: ParametersPathOwnerStringQueryBeforeDirection): Self = StObject.set(x, "secret-scanning/list-alerts-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashlist-locations-for-alert`(value: ParametersPathAlertnumberOwnerRepoQuery507): Self = StObject.set(x, "secret-scanning/list-locations-for-alert", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashupdate-alert`(value: RequestBodyContentApplicationjsonResolutionResolutioncomment): Self = StObject.set(x, "secret-scanning/update-alert", value.asInstanceOf[js.Any])
      
      inline def `setSecurity-advisoriesSlashcreate-private-vulnerability-report`(value: RequestBodyContentApplicationjsonCvssvectorstringCweids): Self = StObject.set(x, "security-advisories/create-private-vulnerability-report", value.asInstanceOf[js.Any])
      
      inline def `setSecurity-advisoriesSlashcreate-repository-advisory`(value: RequestBodyContentApplicationjsonVulnerabilities): Self = StObject.set(x, "security-advisories/create-repository-advisory", value.asInstanceOf[js.Any])
      
      inline def `setSecurity-advisoriesSlashget-repository-advisory`(value: ParametersPathGhsaidOwner): Self = StObject.set(x, "security-advisories/get-repository-advisory", value.asInstanceOf[js.Any])
      
      inline def `setSecurity-advisoriesSlashlist-repository-advisories`(value: ParametersQueryDirectionPerpage): Self = StObject.set(x, "security-advisories/list-repository-advisories", value.asInstanceOf[js.Any])
      
      inline def `setSecurity-advisoriesSlashupdate-repository-advisory`(value: RequestBodyContentApplicationjsonCreditsCveid): Self = StObject.set(x, "security-advisories/update-repository-advisory", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-member-legacy`(value: ParametersPathTeamidNumberUsernameStringResponses517): Self = StObject.set(x, "teams/add-member-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-membership-for-user-in-org`(value: Responses200ContentApplicationjsonRoleState): Self = StObject.set(x, "teams/add-or-update-membership-for-user-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-membership-for-user-legacy`(value: ParametersPathTeamidNumberUsernameStringRequestBody): Self = StObject.set(x, "teams/add-or-update-membership-for-user-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-project-permissions-in-org`(value: ParametersPathOrgProjectidRequestBody): Self = StObject.set(x, "teams/add-or-update-project-permissions-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-project-permissions-legacy`(value: Responses403ContentApplicationjsonDocumentationurl404Content36): Self = StObject.set(x, "teams/add-or-update-project-permissions-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-repo-permissions-in-org`(value: ParametersPathOrgOwnerRequestBody): Self = StObject.set(x, "teams/add-or-update-repo-permissions-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-repo-permissions-legacy`(value: Responses403Content36422Content346): Self = StObject.set(x, "teams/add-or-update-repo-permissions-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcheck-permissions-for-project-in-org`(value: ParametersPathOrgProjectid): Self = StObject.set(x, "teams/check-permissions-for-project-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcheck-permissions-for-project-legacy`(value: ParametersPathProjectidNumberTeamidNumber): Self = StObject.set(x, "teams/check-permissions-for-project-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcheck-permissions-for-repo-in-org`(value: ParametersPathOrgOwner): Self = StObject.set(x, "teams/check-permissions-for-repo-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcheck-permissions-for-repo-legacy`(value: ParametersPathOwnerRepoTeamid): Self = StObject.set(x, "teams/check-permissions-for-repo-legacy", value.asInstanceOf[js.Any])
      
      inline def setTeamsSlashcreate(value: Responses201ContentApplicationjsonReposcount): Self = StObject.set(x, "teams/create", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-discussion-comment-in-org`(value: Responses201ContentApplicationjsonLasteditedat): Self = StObject.set(x, "teams/create-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-discussion-comment-legacy`(value: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjsonBody): Self = StObject.set(x, "teams/create-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-discussion-in-org`(value: Responses201ContentApplicationjsonCommentscount): Self = StObject.set(x, "teams/create-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-discussion-legacy`(value: ParametersPathTeamidNumberRequestBodyContentApplicationjsonPrivate): Self = StObject.set(x, "teams/create-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-discussion-comment-in-org`(value: ParametersPathCommentnumberDiscussionnumberOrgResponses): Self = StObject.set(x, "teams/delete-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-discussion-comment-legacy`(value: ParametersPathCommentnumberDiscussionnumberTeamidResponses): Self = StObject.set(x, "teams/delete-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-discussion-in-org`(value: ParametersPathDiscussionnumberOrgTeamslugResponses): Self = StObject.set(x, "teams/delete-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-discussion-legacy`(value: ParametersPathDiscussionnumberNumberResponses): Self = StObject.set(x, "teams/delete-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-in-org`(value: ParametersPathTeamslugString): Self = StObject.set(x, "teams/delete-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-legacy`(value: ParametersPathTeamidNumberResponses404Content36422Content346): Self = StObject.set(x, "teams/delete-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-by-name`(value: Responses200ContentApplicationjsonReposcount): Self = StObject.set(x, "teams/get-by-name", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-discussion-comment-in-org`(value: ParametersPathCommentnumberDiscussionnumberOrg): Self = StObject.set(x, "teams/get-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-discussion-comment-legacy`(value: ParametersPathCommentnumberDiscussionnumberTeamid): Self = StObject.set(x, "teams/get-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-discussion-in-org`(value: ParametersPathDiscussionnumberOrgTeamslug): Self = StObject.set(x, "teams/get-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-discussion-legacy`(value: ParametersPathDiscussionnumberNumber): Self = StObject.set(x, "teams/get-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-legacy`(value: ParametersPathTeamidNumber): Self = StObject.set(x, "teams/get-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-member-legacy`(value: ParametersPathTeamidNumberUsernameString): Self = StObject.set(x, "teams/get-member-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-membership-for-user-in-org`(value: ParametersPathTeamslugUsername): Self = StObject.set(x, "teams/get-membership-for-user-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-membership-for-user-legacy`(value: Responses200ContentApplicationjsonRoleState404Content36): Self = StObject.set(x, "teams/get-membership-for-user-legacy", value.asInstanceOf[js.Any])
      
      inline def setTeamsSlashlist(value: Responses200Content516403Content36): Self = StObject.set(x, "teams/list", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-child-in-org`(value: Responses537): Self = StObject.set(x, "teams/list-child-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-child-legacy`(value: Responses200Content516403Content36404Content36): Self = StObject.set(x, "teams/list-child-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-discussion-comments-in-org`(value: ParametersQuery530): Self = StObject.set(x, "teams/list-discussion-comments-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-discussion-comments-legacy`(value: ParametersPathDiscussionnumberNumberQuery530): Self = StObject.set(x, "teams/list-discussion-comments-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-discussions-in-org`(value: ParametersQueryPerpagePinned): Self = StObject.set(x, "teams/list-discussions-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-discussions-legacy`(value: ParametersPathTeamidNumberQuery530): Self = StObject.set(x, "teams/list-discussions-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-for-authenticated-user`(value: Responses200Content667): Self = StObject.set(x, "teams/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-members-in-org`(value: ParametersQuery535): Self = StObject.set(x, "teams/list-members-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-members-legacy`(value: ParametersPathTeamidNumberQuery535): Self = StObject.set(x, "teams/list-members-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-pending-invitations-in-org`(value: ParametersPathTeamslugStringQuery473): Self = StObject.set(x, "teams/list-pending-invitations-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-pending-invitations-legacy`(value: ParametersPathTeamidNumberQuery473): Self = StObject.set(x, "teams/list-pending-invitations-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-projects-in-org`(value: Responses200Content536): Self = StObject.set(x, "teams/list-projects-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-projects-legacy`(value: Responses200Content536404Content36): Self = StObject.set(x, "teams/list-projects-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-repos-in-org`(value: Responses526): Self = StObject.set(x, "teams/list-repos-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-repos-legacy`(value: Responses200Content497): Self = StObject.set(x, "teams/list-repos-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-member-legacy`(value: ParametersPathTeamidNumberUsernameString): Self = StObject.set(x, "teams/remove-member-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-membership-for-user-in-org`(value: ParametersPathTeamslugUsernameResponses): Self = StObject.set(x, "teams/remove-membership-for-user-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-membership-for-user-legacy`(value: ParametersPathTeamidNumberUsernameString): Self = StObject.set(x, "teams/remove-membership-for-user-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-project-in-org`(value: ParametersPathOrgProjectidResponses): Self = StObject.set(x, "teams/remove-project-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-project-legacy`(value: ParametersPathProjectidNumberTeamidNumberResponses404Content36422Content346): Self = StObject.set(x, "teams/remove-project-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-repo-in-org`(value: ParametersPathOrgOwnerResponses): Self = StObject.set(x, "teams/remove-repo-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-repo-legacy`(value: ParametersPathOwnerRepoTeamidResponses): Self = StObject.set(x, "teams/remove-repo-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-discussion-comment-in-org`(value: Responses200ContentApplicationjsonLasteditedat): Self = StObject.set(x, "teams/update-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-discussion-comment-legacy`(value: ParametersPathCommentnumberDiscussionnumberTeamidRequestBodyContentApplicationjsonBody): Self = StObject.set(x, "teams/update-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-discussion-in-org`(value: Responses200ContentApplicationjsonCommentscount): Self = StObject.set(x, "teams/update-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-discussion-legacy`(value: ParametersPathDiscussionnumberNumberRequestBody): Self = StObject.set(x, "teams/update-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-in-org`(value: Responses200201403): Self = StObject.set(x, "teams/update-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-legacy`(value: ParametersPathTeamidNumberRequestBodyContentApplicationjsonParentteamid): Self = StObject.set(x, "teams/update-legacy", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashadd-email-for-authenticated-user`(value: Responses201Content654): Self = StObject.set(x, "users/add-email-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashadd-social-account-for-authenticated-user`(value: Responses201665): Self = StObject.set(x, "users/add-social-account-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashblock(value: ParametersPath649Responses304401Content36403Content36): Self = StObject.set(x, "users/block", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcheck-blocked`(value: ParametersPath649): Self = StObject.set(x, "users/check-blocked", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcheck-following-for-user`(value: ParametersPathTargetuserUsername): Self = StObject.set(x, "users/check-following-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcheck-person-is-followed-by-authenticated`(value: ParametersPath649): Self = StObject.set(x, "users/check-person-is-followed-by-authenticated", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcreate-gpg-key-for-authenticated-user`(value: Responses201ContentApplicationjsonCanencryptcomms): Self = StObject.set(x, "users/create-gpg-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcreate-public-ssh-key-for-authenticated-user`(value: Responses201ContentApplicationjsonIdKey): Self = StObject.set(x, "users/create-public-ssh-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcreate-ssh-signing-key-for-authenticated-user`(value: Responses201ContentApplicationjsonCreatedatIdKey): Self = StObject.set(x, "users/create-ssh-signing-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashdelete-email-for-authenticated-user`(value: RequestBodyResponses304401Content36403Content36): Self = StObject.set(x, "users/delete-email-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashdelete-gpg-key-for-authenticated-user`(value: ParametersPathGpgkeyidNumberResponses304401Content36403Content36): Self = StObject.set(x, "users/delete-gpg-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashdelete-public-ssh-key-for-authenticated-user`(value: ParametersPathKeyidNumberResponses401Content36403Content36404Content36): Self = StObject.set(x, "users/delete-public-ssh-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashdelete-social-account-for-authenticated-user`(value: RequestBodyContentApplicationjsonAccounturlsResponses304401Content36403Content36): Self = StObject.set(x, "users/delete-social-account-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashdelete-ssh-signing-key-for-authenticated-user`(value: ParametersPathSshsigningkeyidNumberResponses401Content36403Content36404Content36): Self = StObject.set(x, "users/delete-ssh-signing-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashfollow(value: Responses401Content36403Content36404Content36): Self = StObject.set(x, "users/follow", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-authenticated`(value: Responses200Content648): Self = StObject.set(x, "users/get-authenticated", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-by-username`(value: Responses200Content648404Content36): Self = StObject.set(x, "users/get-by-username", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-context-for-user`(value: ParametersPath649QuerySubjectid): Self = StObject.set(x, "users/get-context-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-gpg-key-for-authenticated-user`(value: ParametersPathGpgkeyidNumber): Self = StObject.set(x, "users/get-gpg-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-public-ssh-key-for-authenticated-user`(value: ParametersPathKeyidNumber): Self = StObject.set(x, "users/get-public-ssh-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-ssh-signing-key-for-authenticated-user`(value: ParametersPathSshsigningkeyidNumber): Self = StObject.set(x, "users/get-ssh-signing-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashlist(value: Responses200Content508Headers25): Self = StObject.set(x, "users/list", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-blocked-by-authenticated-user`(value: Responses200Content508304): Self = StObject.set(x, "users/list-blocked-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-emails-for-authenticated-user`(value: Responses200Content654HeadersLinkString): Self = StObject.set(x, "users/list-emails-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-followed-by-authenticated-user`(value: Responses200Content508HeadersLinkString304401Content36): Self = StObject.set(x, "users/list-followed-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-followers-for-authenticated-user`(value: Responses200Content508HeadersLinkString304401Content36): Self = StObject.set(x, "users/list-followers-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-followers-for-user`(value: ParametersPath649Query473Responses521): Self = StObject.set(x, "users/list-followers-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-following-for-user`(value: ParametersPath649Query473Responses521): Self = StObject.set(x, "users/list-following-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-gpg-keys-for-authenticated-user`(value: Responses200Content655): Self = StObject.set(x, "users/list-gpg-keys-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-gpg-keys-for-user`(value: Responses668): Self = StObject.set(x, "users/list-gpg-keys-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-public-emails-for-authenticated-user`(value: Responses200Content654HeadersLinkString): Self = StObject.set(x, "users/list-public-emails-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-public-keys-for-user`(value: Responses200Content669): Self = StObject.set(x, "users/list-public-keys-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-public-ssh-keys-for-authenticated-user`(value: Responses200Content658): Self = StObject.set(x, "users/list-public-ssh-keys-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-social-accounts-for-authenticated-user`(value: Responses200Content664): Self = StObject.set(x, "users/list-social-accounts-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-social-accounts-for-user`(value: Responses671): Self = StObject.set(x, "users/list-social-accounts-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-ssh-signing-keys-for-authenticated-user`(value: Responses200Content666): Self = StObject.set(x, "users/list-ssh-signing-keys-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-ssh-signing-keys-for-user`(value: Responses672): Self = StObject.set(x, "users/list-ssh-signing-keys-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashset-primary-email-visibility-for-authenticated-user`(value: Responses200Content654): Self = StObject.set(x, "users/set-primary-email-visibility-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashunblock(value: Responses401Content36403Content36404Content36): Self = StObject.set(x, "users/unblock", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashunfollow(value: Responses401Content36403Content36404Content36): Self = StObject.set(x, "users/unfollow", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashupdate-authenticated`(value: Responses200ContentApplicationjsonBusinessplus): Self = StObject.set(x, "users/update-authenticated", value.asInstanceOf[js.Any])
    }
  }
  
  trait paths extends StObject {
    
    @JSName("/")
    var Slash: Get
    
    @JSName("/app")
    var Slashapp: GetResponses200Content0
    
    @JSName("/app-manifests/{code}/conversions")
    var `Slashapp-manifestsSlashLeftcurlybracketcodeRightcurlybracketSlashconversions`: Post
    
    @JSName("/app/hook/config")
    var SlashappSlashhookSlashconfig: Patch
    
    @JSName("/app/hook/deliveries")
    var SlashappSlashhookSlashdeliveries: GetParametersResponses
    
    @JSName("/app/hook/deliveries/{delivery_id}")
    var SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryid
    
    @JSName("/app/hook/deliveries/{delivery_id}/attempts")
    var SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostResponses202
    
    @JSName("/app/installation-requests")
    var `SlashappSlashinstallation-requests`: GetParametersQueryPage
    
    @JSName("/app/installations")
    var SlashappSlashinstallations: GetParametersQueryOutdated
    
    @JSName("/app/installations/{installation_id}")
    var SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracket: Delete
    
    @JSName("/app/installations/{installation_id}/access_tokens")
    var SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashaccess_tokens: PostParametersRequestBody
    
    @JSName("/app/installations/{installation_id}/suspended")
    var SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashsuspended: Put
    
    @JSName("/applications/{client_id}/grant")
    var SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashgrant: DeleteRequestBodyResponses
    
    @JSName("/applications/{client_id}/token")
    var SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtoken: DeletePatch
    
    @JSName("/applications/{client_id}/token/scoped")
    var SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtokenSlashscoped: PostRequestBodyContentApplicationjsonRepositories
    
    @JSName("/apps/{app_slug}")
    var SlashappsSlashLeftcurlybracketapp_slugRightcurlybracket: GetParametersPathAppslug
    
    @JSName("/codes_of_conduct")
    var Slashcodes_of_conduct: GetResponses200304
    
    @JSName("/codes_of_conduct/{key}")
    var Slashcodes_of_conductSlashLeftcurlybracketkeyRightcurlybracket: GetParametersPathKey
    
    @JSName("/emojis")
    var Slashemojis: GetResponses200Content13
    
    @JSName("/enterprises/{enterprise}/dependabot/alerts")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashdependabotSlashalerts: GetParametersPathQuery
    
    @JSName("/enterprises/{enterprise}/secret-scanning/alerts")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersPathEnterprise
    
    @JSName("/events")
    var Slashevents: GetResponses403503
    
    @JSName("/feeds")
    var Slashfeeds: GetResponses200Content17
    
    @JSName("/gists")
    var Slashgists: GetPost
    
    @JSName("/gists/{gist_id}")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracket: DeleteGet
    
    @JSName("/gists/{gist_id}/{sha}")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashLeftcurlybracketshaRightcurlybracket: GetParametersPathSha
    
    @JSName("/gists/{gist_id}/comments")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcomments: GetParametersPathGistidQueryPage
    
    @JSName("/gists/{gist_id}/comments/{comment_id}")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: GetPatch
    
    @JSName("/gists/{gist_id}/commits")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommits: GetResponses200Content26
    
    @JSName("/gists/{gist_id}/forks")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashforks: GetResponses200Content27
    
    @JSName("/gists/{gist_id}/star")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashstar: GetPut
    
    @JSName("/gists/public")
    var SlashgistsSlashpublic: GetResponses403422
    
    @JSName("/gists/starred")
    var SlashgistsSlashstarred: GetResponses304401
    
    @JSName("/gitignore/templates")
    var SlashgitignoreSlashtemplates: GetResponses200Content29
    
    @JSName("/gitignore/templates/{name}")
    var SlashgitignoreSlashtemplatesSlashLeftcurlybracketnameRightcurlybracket: GetParametersPathName
    
    @JSName("/installation/repositories")
    var SlashinstallationSlashrepositories: GetResponses401403
    
    @JSName("/installation/token")
    var SlashinstallationSlashtoken: Delete31
    
    @JSName("/issues")
    var Slashissues: GetParametersQueryCollab
    
    @JSName("/licenses")
    var Slashlicenses: GetParametersQueryFeatured
    
    @JSName("/licenses/{license}")
    var SlashlicensesSlashLeftcurlybracketlicenseRightcurlybracket: GetParametersPathLicense
    
    @JSName("/markdown")
    var Slashmarkdown: PostRequestBodyContentApplicationjsonContext
    
    @JSName("/markdown/raw")
    var SlashmarkdownSlashraw: PostResponses200HeadersXCommonMarkerVersion
    
    @JSName("/marketplace_listing/accounts/{account_id}")
    var Slashmarketplace_listingSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket: GetParametersPathAccountid
    
    @JSName("/marketplace_listing/plans")
    var Slashmarketplace_listingSlashplans: GetResponses401404
    
    @JSName("/marketplace_listing/plans/{plan_id}/accounts")
    var Slashmarketplace_listingSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts: GetParametersPathPlanid
    
    @JSName("/marketplace_listing/stubbed/accounts/{account_id}")
    var Slashmarketplace_listingSlashstubbedSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket: GetResponses200Content35
    
    @JSName("/marketplace_listing/stubbed/plans")
    var Slashmarketplace_listingSlashstubbedSlashplans: GetResponses200Content37
    
    @JSName("/marketplace_listing/stubbed/plans/{plan_id}/accounts")
    var Slashmarketplace_listingSlashstubbedSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts: GetResponses200Content38
    
    @JSName("/meta")
    var Slashmeta: GetResponses200Content39
    
    @JSName("/networks/{owner}/{repo}/events")
    var SlashnetworksSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents: GetParametersPathOwner
    
    @JSName("/notifications")
    var Slashnotifications: GetParametersQueryAll
    
    @JSName("/notifications/threads/{thread_id}")
    var SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracket: GetParametersPathThreadid
    
    @JSName("/notifications/threads/{thread_id}/subscription")
    var SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracketSlashsubscription: DeleteGetPut
    
    @JSName("/octocat")
    var Slashoctocat: GetParametersQueryS
    
    @JSName("/organizations")
    var Slashorganizations: GetParametersQuerySince
    
    @JSName("/organizations/{org}/personal-access-token-requests")
    var `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requests`: GetParametersPathOrg
    
    @JSName("/organizations/{org}/personal-access-token-requests/{pat_request_id}")
    var `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requestsSlashLeftcurlybracketpat_request_idRightcurlybracket`: PostParametersPathPatrequestid
    
    @JSName("/organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories")
    var `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requestsSlashLeftcurlybracketpat_request_idRightcurlybracketSlashrepositories`: GetParametersPathPatrequestidQueryPage
    
    @JSName("/organizations/{org}/personal-access-tokens")
    var `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokens`: GetResponses422500
    
    @JSName("/organizations/{org}/personal-access-tokens/{pat_id}")
    var `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokensSlashLeftcurlybracketpat_idRightcurlybracket`: PostParametersPathPatid
    
    @JSName("/organizations/{org}/personal-access-tokens/{pat_id}/repositories")
    var `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokensSlashLeftcurlybracketpat_idRightcurlybracketSlashrepositories`: GetParametersPathOrgPatid
    
    @JSName("/orgs/{org}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracket: DeleteGetPatch
    
    @JSName("/orgs/{org}/{security_product}/{enablement}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketsecurity_productRightcurlybracketSlashLeftcurlybracketenablementRightcurlybracket: PostParametersPathEnablement
    
    @JSName("/orgs/{org}/actions/cache/usage")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage: GetResponses200Content53
    
    @JSName("/orgs/{org}/actions/cache/usage-by-repository")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage-by-repository`: GetParametersPathOrgQueryPage
    
    @JSName("/orgs/{org}/actions/oidc/customization/sub")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub: GetResponses200Content54
    
    @JSName("/orgs/{org}/actions/permissions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissions: GetResponses200Content56
    
    @JSName("/orgs/{org}/actions/permissions/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositories: GetResponses200ContentApplicationjsonTotalcount
    
    @JSName("/orgs/{org}/actions/permissions/repositories/{repository_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeletePut
    
    @JSName("/orgs/{org}/actions/permissions/selected-actions")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetResponses200Content57
    
    @JSName("/orgs/{org}/actions/permissions/workflow")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetResponses200Content58
    
    @JSName("/orgs/{org}/actions/required_workflows")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflows: GetResponses200ContentApplicationjsonRequiredworkflows
    
    @JSName("/orgs/{org}/actions/required_workflows/{required_workflow_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracket: DeleteParametersPathRequiredworkflowidResponses
    
    @JSName("/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracketSlashrepositories: GetParametersPathRequiredworkflowidResponses200ContentApplicationjsonTotalcount
    
    @JSName("/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathOrgRepositoryid
    
    @JSName("/orgs/{org}/actions/runners")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunners: GetResponses200ContentApplicationjsonRunners
    
    @JSName("/orgs/{org}/actions/runners/{runner_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathRunneridResponses
    
    @JSName("/orgs/{org}/actions/runners/{runner_id}/labels")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: PostPut
    
    @JSName("/orgs/{org}/actions/runners/{runner_id}/labels/{name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOrg
    
    @JSName("/orgs/{org}/actions/runners/downloads")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetResponses200Content61
    
    @JSName("/orgs/{org}/actions/runners/registration-token")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostResponses201Content62
    
    @JSName("/orgs/{org}/actions/runners/remove-token")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostResponses201Content62
    
    @JSName("/orgs/{org}/actions/secrets")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecrets: GetResponses200ContentApplicationjsonSecrets
    
    @JSName("/orgs/{org}/actions/secrets/{secret_name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathSecretnameResponses
    
    @JSName("/orgs/{org}/actions/secrets/{secret_name}/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetParametersQueryPagePerpage
    
    @JSName("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidSecretname
    
    @JSName("/orgs/{org}/actions/secrets/public-key")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`: GetResponses200Content66
    
    @JSName("/orgs/{org}/actions/variables")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariables: GetParametersQuery68
    
    @JSName("/orgs/{org}/actions/variables/{name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPath69Responses
    
    @JSName("/orgs/{org}/actions/variables/{name}/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracketSlashrepositories: GetParametersPath69QueryPagePerpage
    
    @JSName("/orgs/{org}/actions/variables/{name}/repositories/{repository_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathNameOrgRepositoryid
    
    @JSName("/orgs/{org}/blocks")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocks: GetResponses200Content71
    
    @JSName("/orgs/{org}/blocks/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocksSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathUsernameResponses
    
    @JSName("/orgs/{org}/code-scanning/alerts")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcode-scanningSlashalerts`: GetParametersQuerySeverity
    
    @JSName("/orgs/{org}/codespaces")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespaces: GetResponses401403404
    
    @JSName("/orgs/{org}/codespaces/billing")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashbilling: PutRequestBodyContentApplicationjsonSelectedusernames
    
    @JSName("/orgs/{org}/codespaces/billing/selected_users")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashbillingSlashselected_users: DeletePost
    
    @JSName("/orgs/{org}/codespaces/secrets")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecrets: GetResponses200ContentApplicationjsonSecretsTotalcount
    
    @JSName("/orgs/{org}/codespaces/secrets/{secret_name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathSecretnameResponses7
    
    @JSName("/orgs/{org}/codespaces/secrets/{secret_name}/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetResponses200ContentApplicationjsonRepositoriesTotalcount404
    
    @JSName("/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteResponses75
    
    @JSName("/orgs/{org}/codespaces/secrets/public-key")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashpublic-key`: GetResponses200Content73
    
    @JSName("/orgs/{org}/dependabot/alerts")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashalerts: GetParametersQueryAfter
    
    @JSName("/orgs/{org}/dependabot/secrets")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecrets: GetResponses200ContentApplicationjsonSecretsArray
    
    @JSName("/orgs/{org}/dependabot/secrets/{secret_name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: GetResponses200Content77
    
    @JSName("/orgs/{org}/dependabot/secrets/{secret_name}/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetParametersQueryPagePerpage
    
    @JSName("/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidSecretname
    
    @JSName("/orgs/{org}/dependabot/secrets/public-key")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`: GetResponses200Content76
    
    @JSName("/orgs/{org}/docker/conflicts")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdockerSlashconflicts: GetResponses200401403
    
    @JSName("/orgs/{org}/events")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashevents: GetResponses200Content16
    
    @JSName("/orgs/{org}/failed_invitations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfailed_invitations: GetResponses200Content79
    
    @JSName("/orgs/{org}/hooks")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooks: GetResponses200Content80
    
    @JSName("/orgs/{org}/hooks/{hook_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket: DeleteParametersPathHookidResponses7
    
    @JSName("/orgs/{org}/hooks/{hook_id}/config")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig: GetParametersPathHookidResponses200Content2
    
    @JSName("/orgs/{org}/hooks/{hook_id}/deliveries")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries: GetParametersQueryCursor
    
    @JSName("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryidHookid
    
    @JSName("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostParametersPathDeliveryidHookidResponses202
    
    @JSName("/orgs/{org}/hooks/{hook_id}/pings")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings: PostParametersPathHookidResponses7
    
    @JSName("/orgs/{org}/installation")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallation: GetResponses200Content6
    
    @JSName("/orgs/{org}/installations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallations: GetResponses200ContentApplicationjsonInstallations
    
    @JSName("/orgs/{org}/interaction-limits")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinteraction-limits`: DeleteParameters47Responses
    
    @JSName("/orgs/{org}/invitations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitations: GetParametersQueryInvitationsource
    
    @JSName("/orgs/{org}/invitations/{invitation_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket: DeleteParametersPathInvitationid
    
    @JSName("/orgs/{org}/invitations/{invitation_id}/teams")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracketSlashteams: GetParametersPathInvitationidQueryPage
    
    @JSName("/orgs/{org}/issues")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashissues: GetParametersQueryFilter
    
    @JSName("/orgs/{org}/members")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembers: GetParametersQueryRole
    
    @JSName("/orgs/{org}/members/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses88
    
    @JSName("/orgs/{org}/members/{username}/codespaces")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespaces: GetParametersPathUsernameQueryPage
    
    @JSName("/orgs/{org}/members/{username}/codespaces/{codespace_name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket: DeleteParametersPathCodespacename
    
    @JSName("/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop: PostResponses403404500
    
    @JSName("/orgs/{org}/memberships/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses92
    
    @JSName("/orgs/{org}/migrations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrations: GetParametersQueryExclude
    
    @JSName("/orgs/{org}/migrations/{migration_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket: GetParametersPathMigrationid
    
    @JSName("/orgs/{org}/migrations/{migration_id}/archive")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive: DeleteParameters96
    
    @JSName("/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock: DeleteParametersPathReponame
    
    @JSName("/orgs/{org}/migrations/{migration_id}/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories: GetParametersPathMigrationidQueryPage
    
    @JSName("/orgs/{org}/outside_collaborators")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaborators: GetParametersQueryFilterPage
    
    @JSName("/orgs/{org}/outside_collaborators/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses422ContentApplicationjsonDocumentationurl
    
    @JSName("/orgs/{org}/packages")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackages: GetParametersQueryPackagetype
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket: DeleteResponses99
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}/restore")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore: PostParametersQueryToken
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}/versions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions: GetParametersQueryState
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket: DeleteParametersPathPackageversionidResponses99
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore: PostParametersPathPackageversionidResponses99
    
    @JSName("/orgs/{org}/projects")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashprojects: GetParametersQueryPerpageState
    
    @JSName("/orgs/{org}/public_members")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_members: GetResponses97
    
    @JSName("/orgs/{org}/public_members/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_membersSlashLeftcurlybracketusernameRightcurlybracket: GetParametersPathUsernameResponses
    
    @JSName("/orgs/{org}/repos")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrepos: GetParametersQuerySort
    
    @JSName("/orgs/{org}/rulesets")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrulesets: GetResponses200404500
    
    @JSName("/orgs/{org}/rulesets/{ruleset_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrulesetsSlashLeftcurlybracketruleset_idRightcurlybracket: DeleteResponses108
    
    @JSName("/orgs/{org}/secret-scanning/alerts")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersQueryResolution
    
    @JSName("/orgs/{org}/security-managers")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managers`: GetResponses200Content109
    
    @JSName("/orgs/{org}/security-managers/teams/{team_slug}")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managersSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket`: DeleteParametersPathTeamslug
    
    @JSName("/orgs/{org}/settings/billing/actions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashactions: GetResponses200Content110
    
    @JSName("/orgs/{org}/settings/billing/packages")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashpackages: GetResponses200Content111
    
    @JSName("/orgs/{org}/settings/billing/shared-storage")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`: GetResponses200Content112
    
    @JSName("/orgs/{org}/teams")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteams: GetResponses200Content87403
    
    @JSName("/orgs/{org}/teams/{team_slug}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket: GetResponses200Content113
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussions: GetParametersQueryPinned
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket: DeleteParametersPathDiscussionnumberResponses
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments: GetParametersQueryDirectionPage
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket: DeleteParametersPathCommentnumberResponses
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions: GetParametersQueryContentPage
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathReactionid
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions: GetParametersPathDiscussionnumberQueryContentPage
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathDiscussionnumberOrg
    
    @JSName("/orgs/{org}/teams/{team_slug}/invitations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashinvitations: GetParametersPathTeamslugQueryPage
    
    @JSName("/orgs/{org}/teams/{team_slug}/members")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembers: GetParametersQueryPerpageRole
    
    @JSName("/orgs/{org}/teams/{team_slug}/memberships/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathOrgTeamslugResponses
    
    @JSName("/orgs/{org}/teams/{team_slug}/projects")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojects: GetResponses200Content124
    
    @JSName("/orgs/{org}/teams/{team_slug}/projects/{project_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteParametersPathProjectidResponses
    
    @JSName("/orgs/{org}/teams/{team_slug}/repos")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashrepos: GetResponses104
    
    @JSName("/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteParametersPathRepoResponses
    
    @JSName("/orgs/{org}/teams/{team_slug}/teams")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteams: GetResponses129
    
    @JSName("/projects/{project_id}")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteResponses404410
    
    @JSName("/projects/{project_id}/collaborators")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaborators: GetParametersQueryAffiliation
    
    @JSName("/projects/{project_id}/collaborators/{username}")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses135
    
    @JSName("/projects/{project_id}/collaborators/{username}/permission")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission: GetResponses200304401403404422
    
    @JSName("/projects/{project_id}/columns")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcolumns: GetParametersPath134QueryPage
    
    @JSName("/projects/columns/{column_id}")
    var SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracket: DeleteParametersPath131Responses44
    
    @JSName("/projects/columns/{column_id}/cards")
    var SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashcards: GetParametersQueryArchivedstate
    
    @JSName("/projects/columns/{column_id}/moves")
    var SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashmoves: PostRequestBodyContentApplicationjsonPosition
    
    @JSName("/projects/columns/cards/{card_id}")
    var SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracket: DeleteResponses403ContentApplicationjsonErrors
    
    @JSName("/projects/columns/cards/{card_id}/moves")
    var SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracketSlashmoves: PostRequestBodyContentApplicationjsonColumnid
    
    @JSName("/rate_limit")
    var Slashrate_limit: GetResponses200Content138
    
    @JSName("/repos/{org}/{repo}/actions/required_workflows")
    var SlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflows: GetParametersPathOrgRepo
    
    @JSName("/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}")
    var SlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracket: GetParametersPathRequiredworkflowidforrepo
    
    @JSName("/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing")
    var SlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracketSlashtiming: GetResponses200Content140
    
    @JSName("/repos/{owner}/{repo}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteResponses307
    
    @JSName("/repos/{owner}/{repo}/actions/artifacts")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifacts: GetParametersQueryNamePage
    
    @JSName("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracket: DeleteParametersPathArtifactidResponses
    
    @JSName("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracketSlashLeftcurlybracketarchive_formatRightcurlybracket: GetParametersPathArchiveformat
    
    @JSName("/repos/{owner}/{repo}/actions/cache/usage")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcacheSlashusage: GetResponses200Content145
    
    @JSName("/repos/{owner}/{repo}/actions/caches")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcaches: DeleteParametersQueryKeyRef
    
    @JSName("/repos/{owner}/{repo}/actions/caches/{cache_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcachesSlashLeftcurlybracketcache_idRightcurlybracket: DeleteParametersPathCacheid
    
    @JSName("/repos/{owner}/{repo}/actions/jobs/{job_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracket: GetParametersPathJobid
    
    @JSName("/repos/{owner}/{repo}/actions/jobs/{job_id}/logs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashlogs: GetParametersPathJobidResponses
    
    @JSName("/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashrerun: PostResponses201Content55403
    
    @JSName("/repos/{owner}/{repo}/actions/oidc/customization/sub")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub: GetResponses400404
    
    @JSName("/repos/{owner}/{repo}/actions/organization-secrets")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashorganization-secrets`: GetResponses200ContentApplicationjsonTotalcountNumber
    
    @JSName("/repos/{owner}/{repo}/actions/organization-variables")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashorganization-variables`: GetParametersPathOwnerQuery68
    
    @JSName("/repos/{owner}/{repo}/actions/permissions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissions: GetResponses200Content151
    
    @JSName("/repos/{owner}/{repo}/actions/permissions/access")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashaccess: GetResponses200Content152
    
    @JSName("/repos/{owner}/{repo}/actions/permissions/selected-actions")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetParameters141Responses200Content57
    
    @JSName("/repos/{owner}/{repo}/actions/permissions/workflow")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetParameters141Responses200Content58
    
    @JSName("/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracketSlashruns: GetParametersPathOwnerRepo
    
    @JSName("/repos/{owner}/{repo}/actions/runners")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunners: GetParametersPathOwnerResponses200ContentApplicationjsonRunners
    
    @JSName("/repos/{owner}/{repo}/actions/runners/{runner_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathRepoRunneridResponses
    
    @JSName("/repos/{owner}/{repo}/actions/runners/{runner_id}/labels")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: DeleteGetPost
    
    @JSName("/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOwner
    
    @JSName("/repos/{owner}/{repo}/actions/runners/downloads")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetParameters141Responses200Content61
    
    @JSName("/repos/{owner}/{repo}/actions/runners/registration-token")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostParameters141Responses201Content62
    
    @JSName("/repos/{owner}/{repo}/actions/runners/remove-token")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostParameters141Responses201Content62
    
    @JSName("/repos/{owner}/{repo}/actions/runs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashruns: GetParametersQueryActor
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracket: DeleteParameters154
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/approvals")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprovals: GetResponses200Content155
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/approve")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprove: PostResponses201403
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashartifacts: GetParametersPathRunidQueryPage
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracket: GetParametersPathAttemptnumber
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashjobs: GetParametersPathAttemptnumberQueryPage
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashlogs: GetParameters156
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/cancel")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashcancel: PostResponses202409
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashdeployment_protection_rule: PostRequestBodyContent157
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/jobs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashjobs: GetParametersQueryFilterPagePerpage
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/logs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashlogs: DeleteResponses403500
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashpending_deployments: GetResponses200Content159
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/rerun")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun: PostResponses201Content55
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun-failed-jobs`: PostResponses201Content55
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/timing")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashtiming: GetResponses200Content161
    
    @JSName("/repos/{owner}/{repo}/actions/secrets")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecrets: GetResponses200ContentApplicationjsonTotalcountNumber
    
    @JSName("/repos/{owner}/{repo}/actions/secrets/{secret_name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathRepoSecretnameResponses
    
    @JSName("/repos/{owner}/{repo}/actions/secrets/public-key")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`: GetParameters141Responses200Content66
    
    @JSName("/repos/{owner}/{repo}/actions/variables")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashvariables: PostRequestBodyContentApplicationjsonNameValue
    
    @JSName("/repos/{owner}/{repo}/actions/variables/{name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOwnerRepoResponses
    
    @JSName("/repos/{owner}/{repo}/actions/workflows")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflows: GetResponses200ContentApplicationjsonWorkflows
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracket: GetParametersPathWorkflowid
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdisable: PutParametersPathWorkflowidResponses
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdispatches: PostRequestBodyContentApplicationjsonInputs
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashenable: PutParametersPathWorkflowidResponses
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashruns: GetParametersPathWorkflowidQueryActor
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashtiming: GetResponses167
    
    @JSName("/repos/{owner}/{repo}/assignees")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassignees: GetResponses200HeadersLink404
    
    @JSName("/repos/{owner}/{repo}/assignees/{assignee}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket: GetParametersPathAssignee
    
    @JSName("/repos/{owner}/{repo}/autolinks")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinks: GetParametersQuery168
    
    @JSName("/repos/{owner}/{repo}/autolinks/{autolink_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinksSlashLeftcurlybracketautolink_idRightcurlybracket: DeleteParametersPathAutolinkidResponses7
    
    @JSName("/repos/{owner}/{repo}/automated-security-fixes")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautomated-security-fixes`: DeleteParameters141Responses
    
    @JSName("/repos/{owner}/{repo}/branches")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranches: GetParametersQueryProtected
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracket: GetParametersPathBranch
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotection: DeleteParametersPathBranchResponses88
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashenforce_admins: DeleteParametersPathBranchResponses7
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_pull_request_reviews: GetResponses200Content177
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_signatures: GetResponses200Content176404
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checks: DeleteParametersPathBranchResponses
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checksSlashcontexts: GetPostPut
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictions: GetResponses200Content179
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashapps: DeleteGetPostPut
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashteams: DeleteResponses200181422
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashusers: DeleteResponses200Content71422
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/rename")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashrename: PostRequestBodyContentApplicationjsonNewname
    
    @JSName("/repos/{owner}/{repo}/check-runs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runs`: PostRequestBodyContent182
    
    @JSName("/repos/{owner}/{repo}/check-runs/{check_run_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracket`: GetParametersPathCheckrunid
    
    @JSName("/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracketSlashannotations`: GetParametersPathCheckrunidQueryPage
    
    @JSName("/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracketSlashrerequest`: PostResponses201403404422
    
    @JSName("/repos/{owner}/{repo}/check-suites")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suites`: PostRequestBodyContentApplicationjsonHeadsha
    
    @JSName("/repos/{owner}/{repo}/check-suites/{check_suite_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracket`: GetParametersPathChecksuiteid
    
    @JSName("/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracketSlashcheck-runs`: GetParametersQueryCheckname
    
    @JSName("/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracketSlashrerequest`: PostParametersPathChecksuiteidResponses201Content55
    
    @JSName("/repos/{owner}/{repo}/check-suites/preferences")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashpreferences`: PatchRequestBodyContentApplicationjsonAutotriggerchecks
    
    @JSName("/repos/{owner}/{repo}/code-scanning/alerts")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalerts`: GetParametersQueryToolguid
    
    @JSName("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket`: GetParametersPathAlertnumber
    
    @JSName("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracketSlashinstances`: GetParametersQueryPerpageRef
    
    @JSName("/repos/{owner}/{repo}/code-scanning/analyses")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashanalyses`: GetParametersQuerySarifid
    
    @JSName("/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashanalysesSlashLeftcurlybracketanalysis_idRightcurlybracket`: DeleteParametersQueryConfirmdelete
    
    @JSName("/repos/{owner}/{repo}/code-scanning/codeql/databases")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashcodeqlSlashdatabases`: GetResponses200Content194
    
    @JSName("/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashcodeqlSlashdatabasesSlashLeftcurlybracketlanguageRightcurlybracket`: GetParametersPathLanguage
    
    @JSName("/repos/{owner}/{repo}/code-scanning/default-setup")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashdefault-setup`: GetResponses200Content196
    
    @JSName("/repos/{owner}/{repo}/code-scanning/sarifs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashsarifs`: PostRequestBodyContentApplicationjsonCheckouturi
    
    @JSName("/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashsarifsSlashLeftcurlybracketsarif_idRightcurlybracket`: GetParametersPathRepoSarifid
    
    @JSName("/repos/{owner}/{repo}/codeowners/errors")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodeownersSlasherrors: GetParametersQuery205
    
    @JSName("/repos/{owner}/{repo}/codespaces")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespaces: GetResponses401403404500
    
    @JSName("/repos/{owner}/{repo}/codespaces/devcontainers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashdevcontainers: GetResponses400401
    
    @JSName("/repos/{owner}/{repo}/codespaces/machines")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashmachines: GetParametersQueryClientipLocation
    
    @JSName("/repos/{owner}/{repo}/codespaces/new")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashnew: GetParametersQueryClientipRef
    
    @JSName("/repos/{owner}/{repo}/codespaces/secrets")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecrets: GetResponses200ContentApplicationjsonSecretsArrayTotalcountNumber
    
    @JSName("/repos/{owner}/{repo}/codespaces/secrets/{secret_name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: GetResponses200Content208
    
    @JSName("/repos/{owner}/{repo}/codespaces/secrets/public-key")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecretsSlashpublic-key`: GetParameters141Responses200Content73
    
    @JSName("/repos/{owner}/{repo}/collaborators")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaborators: GetParametersQueryAffiliationPage
    
    @JSName("/repos/{owner}/{repo}/collaborators/{username}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathRepoUsername
    
    @JSName("/repos/{owner}/{repo}/collaborators/{username}/permission")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission: GetResponses200Content211
    
    @JSName("/repos/{owner}/{repo}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcomments: GetResponses200Content212
    
    @JSName("/repos/{owner}/{repo}/comments/{comment_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: DeleteParametersPathCommentidOwnerResponses7
    
    @JSName("/repos/{owner}/{repo}/comments/{comment_id}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions: GetParametersPathCommentidOwnerQueryContentPage
    
    @JSName("/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathOwnerReactionid
    
    @JSName("/repos/{owner}/{repo}/commits")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommits: GetParametersQueryAuthor
    
    @JSName("/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashbranches-where-head`: GetParametersPathCommitsha
    
    @JSName("/repos/{owner}/{repo}/commits/{commit_sha}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashcomments: GetParametersPathCommitshaQueryPage
    
    @JSName("/repos/{owner}/{repo}/commits/{commit_sha}/pulls")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashpulls: GetResponses200Content216
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracket: GetParametersPathOwnerRef
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}/check-runs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashcheck-runs`: GetParametersQueryAppidCheckname
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}/check-suites")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashcheck-suites`: GetParametersQueryChecknamePage
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}/status")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashstatus: GetParametersPathOwnerRefQueryPage
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}/statuses")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashstatuses: GetResponses200Content219
    
    @JSName("/repos/{owner}/{repo}/community/profile")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommunitySlashprofile: GetResponses200Content220
    
    @JSName("/repos/{owner}/{repo}/compare/{base}...{head}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcompareSlashLeftcurlybracketbaseRightcurlybracketDotDotDotLeftcurlybracketheadRightcurlybracket: GetParametersPathBaseHead_
    
    @JSName("/repos/{owner}/{repo}/compare/{basehead}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcompareSlashLeftcurlybracketbaseheadRightcurlybracket: GetParametersPathBasehead
    
    @JSName("/repos/{owner}/{repo}/contents/{path}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcontentsSlashLeftcurlybracketpathRightcurlybracket: DeleteRequestBodyContentApplicationjsonAuthorBranch
    
    @JSName("/repos/{owner}/{repo}/contributors")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcontributors: GetParametersQueryAnon
    
    @JSName("/repos/{owner}/{repo}/dependabot/alerts")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashalerts: GetParametersQueryEcosystem
    
    @JSName("/repos/{owner}/{repo}/dependabot/alerts/{alert_number}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket: GetParametersPathAlertnumberOwner
    
    @JSName("/repos/{owner}/{repo}/dependabot/secrets")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecrets: GetResponses200ContentApplicationjson227
    
    @JSName("/repos/{owner}/{repo}/dependabot/secrets/{secret_name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: GetResponses200Content228
    
    @JSName("/repos/{owner}/{repo}/dependabot/secrets/public-key")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`: GetParameters141Responses200Content76
    
    @JSName("/repos/{owner}/{repo}/dependency-graph/compare/{basehead}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashcompareSlashLeftcurlybracketbaseheadRightcurlybracket`: GetParametersQuery229
    
    @JSName("/repos/{owner}/{repo}/dependency-graph/sbom")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashsbom`: GetResponses200Content231
    
    @JSName("/repos/{owner}/{repo}/dependency-graph/snapshots")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashsnapshots`: PostRequestBodyContent232
    
    @JSName("/repos/{owner}/{repo}/deployments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeployments: GetParametersQueryEnvironment
    
    @JSName("/repos/{owner}/{repo}/deployments/{deployment_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracket: DeleteResponses234
    
    @JSName("/repos/{owner}/{repo}/deployments/{deployment_id}/statuses")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracketSlashstatuses: GetParametersPathDeploymentidQueryPage
    
    @JSName("/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracketSlashstatusesSlashLeftcurlybracketstatus_idRightcurlybracket: GetParametersPathStatusid
    
    @JSName("/repos/{owner}/{repo}/dispatches")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdispatches: PostRequestBodyContentApplicationjsonClientpayload
    
    @JSName("/repos/{owner}/{repo}/environments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironments: GetResponses200ContentApplicationjsonEnvironments
    
    @JSName("/repos/{owner}/{repo}/environments/{environment_name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracket: DeleteParametersPathEnvironmentnameResponses
    
    @JSName("/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment-branch-policies`: GetParametersPathEnvironmentnameQueryPage
    
    @JSName("/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment-branch-policiesSlashLeftcurlybracketbranch_policy_idRightcurlybracket`: DeleteParametersPathBranchpolicyidResponses
    
    @JSName("/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment_protection_rules: GetParametersPathEnvironmentnameOwner
    
    @JSName("/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment_protection_rulesSlashLeftcurlybracketprotection_rule_idRightcurlybracket: DeleteParametersPathOwnerProtectionruleid
    
    @JSName("/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment_protection_rulesSlashapps: GetParametersPathEnvironmentnameOwnerQueryPagePerpage
    
    @JSName("/repos/{owner}/{repo}/events")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents: GetParametersPathOwnerResponses200Content16
    
    @JSName("/repos/{owner}/{repo}/forks")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashforks: GetParametersQueryPerpageSort
    
    @JSName("/repos/{owner}/{repo}/git/blobs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashblobs: PostRequestBodyContentApplicationjsonEncoding
    
    @JSName("/repos/{owner}/{repo}/git/blobs/{file_sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashblobsSlashLeftcurlybracketfile_shaRightcurlybracket: GetParametersPathFilesha
    
    @JSName("/repos/{owner}/{repo}/git/commits")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashcommits: PostRequestBodyContentApplicationjsonParents
    
    @JSName("/repos/{owner}/{repo}/git/commits/{commit_sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracket: GetResponses200247
    
    @JSName("/repos/{owner}/{repo}/git/matching-refs/{ref}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashmatching-refsSlashLeftcurlybracketrefRightcurlybracket`: GetParameters248
    
    @JSName("/repos/{owner}/{repo}/git/ref/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefSlashLeftcurlybracketrefRightcurlybracket: GetResponses200Content250
    
    @JSName("/repos/{owner}/{repo}/git/refs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefs: PostRequestBodyContentApplicationjsonRefSha
    
    @JSName("/repos/{owner}/{repo}/git/refs/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefsSlashLeftcurlybracketrefRightcurlybracket: DeleteParameters248Responses9
    
    @JSName("/repos/{owner}/{repo}/git/tags")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtags: PostRequestBodyContentApplicationjsonObject
    
    @JSName("/repos/{owner}/{repo}/git/tags/{tag_sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtagsSlashLeftcurlybrackettag_shaRightcurlybracket: GetParametersPathTagsha
    
    @JSName("/repos/{owner}/{repo}/git/trees")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtrees: PostRequestBodyContentApplicationjsonBasetree
    
    @JSName("/repos/{owner}/{repo}/git/trees/{tree_sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtreesSlashLeftcurlybrackettree_shaRightcurlybracket: GetParametersPathTreesha
    
    @JSName("/repos/{owner}/{repo}/hooks")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooks: GetResponses200Content255
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket: DeleteParametersPathHookidOwnerResponses7
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/config")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig: GetParametersPathHookidOwnerResponses200Content2
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/deliveries")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries: GetParametersPathHookidOwnerQueryCursor
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryidHookidOwner
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostParametersPathDeliveryidHookidOwnerResponses202
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/pings")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings: PostParametersPathHookidOwnerResponses7
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/tests")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashtests: PostParametersPathHookidOwnerResponses7
    
    @JSName("/repos/{owner}/{repo}/import")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimport: PatchPut
    
    @JSName("/repos/{owner}/{repo}/import/authors")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashauthors: GetParametersQuery262
    
    @JSName("/repos/{owner}/{repo}/import/authors/{author_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashauthorsSlashLeftcurlybracketauthor_idRightcurlybracket: PatchParametersPathAuthorid
    
    @JSName("/repos/{owner}/{repo}/import/large_files")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashlarge_files: GetResponses200Content266
    
    @JSName("/repos/{owner}/{repo}/import/lfs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashlfs: PatchRequestBodyContentApplicationjsonUselfs
    
    @JSName("/repos/{owner}/{repo}/installation")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinstallation: GetResponses200301404
    
    @JSName("/repos/{owner}/{repo}/interaction-limits")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinteraction-limits`: GetParameters141Responses200Content83
    
    @JSName("/repos/{owner}/{repo}/invitations")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinvitations: GetResponses200Content268
    
    @JSName("/repos/{owner}/{repo}/invitations/{invitation_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket: DeleteParametersPathInvitationidOwner
    
    @JSName("/repos/{owner}/{repo}/issues")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissues: GetParametersQueryCreator
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracket: GetParametersPathIssuenumber
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/assignees")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashassignees: DeleteRequestBodyContentApplicationjsonAssigneesArray
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket: GetParametersPathAssigneeIssuenumber
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashcomments: GetParametersPathIssuenumberQueryPerpage
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/events")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashevents: GetParametersPathIssuenumberQueryPage
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/labels")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlabels: DeleteResponses283
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathIssuenumberName
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/lock")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlock: DeleteParametersPathIssuenumberResponses92
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashreactions: GetParametersPathIssuenumberQueryContentPage
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathIssuenumberOwner
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/timeline")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashtimeline: GetResponses200Content285
    
    @JSName("/repos/{owner}/{repo}/issues/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcomments: GetParametersQueryPerpageSince
    
    @JSName("/repos/{owner}/{repo}/issues/comments/{comment_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: DeleteParametersPathCommentidOwnerResponses
    
    @JSName("/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions: GetParametersPathCommentidOwnerQueryContentPage
    
    @JSName("/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathOwnerReactionid
    
    @JSName("/repos/{owner}/{repo}/issues/events")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashevents: GetResponses200Content273
    
    @JSName("/repos/{owner}/{repo}/issues/events/{event_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlasheventsSlashLeftcurlybracketevent_idRightcurlybracket: GetParametersPathEventid
    
    @JSName("/repos/{owner}/{repo}/keys")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashkeys: GetResponses200Content286
    
    @JSName("/repos/{owner}/{repo}/keys/{key_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashkeysSlashLeftcurlybracketkey_idRightcurlybracket: DeleteParametersPathKeyidOwnerResponses
    
    @JSName("/repos/{owner}/{repo}/labels")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlabels: GetResponses200Content278
    
    @JSName("/repos/{owner}/{repo}/labels/{name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameStringResponses
    
    @JSName("/repos/{owner}/{repo}/languages")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlanguages: GetResponses200Content292
    
    @JSName("/repos/{owner}/{repo}/lfs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlfs: PutResponses293
    
    @JSName("/repos/{owner}/{repo}/license")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlicense: GetResponses200Content294
    
    @JSName("/repos/{owner}/{repo}/merge-upstream")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmerge-upstream`: PostRequestBodyContentApplicationjsonBranchString
    
    @JSName("/repos/{owner}/{repo}/merges")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmerges: PostRequestBodyContentApplicationjsonBase
    
    @JSName("/repos/{owner}/{repo}/milestones")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestones: GetParametersQuerySortState
    
    @JSName("/repos/{owner}/{repo}/milestones/{milestone_number}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestonesSlashLeftcurlybracketmilestone_numberRightcurlybracket: DeleteParametersPathMilestonenumberResponses7
    
    @JSName("/repos/{owner}/{repo}/milestones/{milestone_number}/labels")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestonesSlashLeftcurlybracketmilestone_numberRightcurlybracketSlashlabels: GetParametersPathMilestonenumberQueryPage
    
    @JSName("/repos/{owner}/{repo}/notifications")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashnotifications: GetParametersQueryParticipating
    
    @JSName("/repos/{owner}/{repo}/pages")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpages: DeleteResponses404409422
    
    @JSName("/repos/{owner}/{repo}/pages/builds")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuilds: GetResponses200Content308
    
    @JSName("/repos/{owner}/{repo}/pages/builds/{build_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuildsSlashLeftcurlybracketbuild_idRightcurlybracket: GetParametersPathBuildid
    
    @JSName("/repos/{owner}/{repo}/pages/builds/latest")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuildsSlashlatest: GetResponses200Content310
    
    @JSName("/repos/{owner}/{repo}/pages/deployment")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashdeployment: PostRequestBodyContentApplicationjsonArtifacturl
    
    @JSName("/repos/{owner}/{repo}/pages/health")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashhealth: GetResponses200202404
    
    @JSName("/repos/{owner}/{repo}/projects")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashprojects: GetParametersPathOwnerQueryPerpageState
    
    @JSName("/repos/{owner}/{repo}/pulls")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpulls: GetParametersQueryHead
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracket: GetParametersPathPullnumber
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/codespaces")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcodespaces: PostRequestBodyContent318
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcomments: GetParametersPathPullnumberQueryPerpageSince
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreplies: PostParametersPathOwnerPullnumber
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/commits")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcommits: GetParametersPathPullnumberQueryPage
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/files")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashfiles: GetResponses200422500
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/merge")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashmerge: GetParametersPathPullnumberResponses
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashrequested_reviewers: DeleteRequestBodyContentApplicationjsonTeamreviewers
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviews: GetResponses200Content324
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracket: DeleteResponses200Content325404422
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashcomments: GetParametersPathReviewidQueryPage
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashdismissals: PutRequestBodyContentApplicationjsonEvent
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashevents: PostRequestBodyContentApplicationjsonBodyEvent
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/update-branch")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashupdate-branch`: PutResponses202403422
    
    @JSName("/repos/{owner}/{repo}/pulls/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcomments: GetParametersQuerySinceSort
    
    @JSName("/repos/{owner}/{repo}/pulls/comments/{comment_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: GetResponses200Content315
    
    @JSName("/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions: GetParametersPathCommentidOwnerQueryContentPage
    
    @JSName("/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathOwnerReactionid
    
    @JSName("/repos/{owner}/{repo}/readme")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreadme: GetResponses200Content328
    
    @JSName("/repos/{owner}/{repo}/readme/{dir}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreadmeSlashLeftcurlybracketdirRightcurlybracket: GetParametersPathDir
    
    @JSName("/repos/{owner}/{repo}/releases")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleases: GetResponses200Content329
    
    @JSName("/repos/{owner}/{repo}/releases/{release_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracket: DeleteParametersPathReleaseidResponses
    
    @JSName("/repos/{owner}/{repo}/releases/{release_id}/assets")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashassets: GetParametersPathReleaseidQueryPage
    
    @JSName("/repos/{owner}/{repo}/releases/{release_id}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashreactions: GetParametersQueryContentPagePerpage
    
    @JSName("/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathReactionidReleaseid
    
    @JSName("/repos/{owner}/{repo}/releases/assets/{asset_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashassetsSlashLeftcurlybracketasset_idRightcurlybracket: DeleteParametersPathAssetidResponses
    
    @JSName("/repos/{owner}/{repo}/releases/generate-notes")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashgenerate-notes`: PostRequestBodyContentApplicationjsonConfigurationfilepath
    
    @JSName("/repos/{owner}/{repo}/releases/latest")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashlatest: GetResponses200333
    
    @JSName("/repos/{owner}/{repo}/releases/tags/{tag}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashtagsSlashLeftcurlybrackettagRightcurlybracket: GetParametersPathTag
    
    @JSName("/repos/{owner}/{repo}/rules/branches/{branch}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashrulesSlashbranchesSlashLeftcurlybracketbranchRightcurlybracket: GetResponses200Content336
    
    @JSName("/repos/{owner}/{repo}/rulesets")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashrulesets: GetParametersQueryIncludesparents
    
    @JSName("/repos/{owner}/{repo}/rulesets/{ruleset_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashrulesetsSlashLeftcurlybracketruleset_idRightcurlybracket: DeleteParameters337Responses108
    
    @JSName("/repos/{owner}/{repo}/secret-scanning/alerts")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersPathOwnerQueryResolution
    
    @JSName("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket`: GetResponses304503
    
    @JSName("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracketSlashlocations`: GetParametersPathAlertnumberQueryPagePerpage
    
    @JSName("/repos/{owner}/{repo}/security-advisories")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecurity-advisories`: GetParametersQueryAfterBefore
    
    @JSName("/repos/{owner}/{repo}/security-advisories/{ghsa_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecurity-advisoriesSlashLeftcurlybracketghsa_idRightcurlybracket`: GetParametersPathGhsaid
    
    @JSName("/repos/{owner}/{repo}/security-advisories/reports")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecurity-advisoriesSlashreports`: PostRequestBodyContent344
    
    @JSName("/repos/{owner}/{repo}/stargazers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstargazers: GetResponses200Content347
    
    @JSName("/repos/{owner}/{repo}/stats/code_frequency")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcode_frequency: GetResponses202204
    
    @JSName("/repos/{owner}/{repo}/stats/commit_activity")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcommit_activity: GetResponses200202204
    
    @JSName("/repos/{owner}/{repo}/stats/contributors")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcontributors: GetResponses200Content350
    
    @JSName("/repos/{owner}/{repo}/stats/participation")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashparticipation: GetResponses200Content351
    
    @JSName("/repos/{owner}/{repo}/stats/punch_card")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashpunch_card: GetResponses200204
    
    @JSName("/repos/{owner}/{repo}/statuses/{sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatusesSlashLeftcurlybracketshaRightcurlybracket: PostParametersPathRepoSha
    
    @JSName("/repos/{owner}/{repo}/subscribers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsubscribers: GetParametersPathOwnerResponses97
    
    @JSName("/repos/{owner}/{repo}/subscription")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsubscription: GetResponses200Content353
    
    @JSName("/repos/{owner}/{repo}/tags")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtags: GetResponses200Content355
    
    @JSName("/repos/{owner}/{repo}/tags/protection")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtagsSlashprotection: GetResponses200Content356
    
    @JSName("/repos/{owner}/{repo}/tags/protection/{tag_protection_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtagsSlashprotectionSlashLeftcurlybrackettag_protection_idRightcurlybracket: DeleteParametersPathTagprotectionid
    
    @JSName("/repos/{owner}/{repo}/tarball/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtarballSlashLeftcurlybracketrefRightcurlybracket: GetParameters248Responses
    
    @JSName("/repos/{owner}/{repo}/teams")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashteams: GetParametersPathOwnerResponses129
    
    @JSName("/repos/{owner}/{repo}/topics")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtopics: GetParametersPathOwnerQueryPagePerpage
    
    @JSName("/repos/{owner}/{repo}/traffic/clones")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashclones: GetParametersQueryPer
    
    @JSName("/repos/{owner}/{repo}/traffic/popular/paths")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashpopularSlashpaths: GetResponses200Content360
    
    @JSName("/repos/{owner}/{repo}/traffic/popular/referrers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashpopularSlashreferrers: GetResponses200Content361
    
    @JSName("/repos/{owner}/{repo}/traffic/views")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashviews: GetResponses200Content362
    
    @JSName("/repos/{owner}/{repo}/transfer")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtransfer: PostRequestBodyContentApplicationjsonNewowner
    
    @JSName("/repos/{owner}/{repo}/vulnerability-alerts")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashvulnerability-alerts`: GetParameters141Responses
    
    @JSName("/repos/{owner}/{repo}/zipball/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashzipballSlashLeftcurlybracketrefRightcurlybracket: GetParameters248Responses
    
    @JSName("/repos/{template_owner}/{template_repo}/generate")
    var SlashreposSlashLeftcurlybrackettemplate_ownerRightcurlybracketSlashLeftcurlybrackettemplate_repoRightcurlybracketSlashgenerate: PostParametersPathTemplateowner
    
    @JSName("/repositories")
    var Slashrepositories: GetParametersQuery364
    
    @JSName("/repositories/{repository_id}/environments/{environment_name}/secrets")
    var SlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecrets: GetParametersPathEnvironmentnameRepositoryid
    
    @JSName("/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}")
    var SlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathEnvironmentnameRepositoryidSecretnameResponses
    
    @JSName("/repositories/{repository_id}/environments/{environment_name}/secrets/public-key")
    var `SlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecretsSlashpublic-key`: GetParameters365
    
    @JSName("/repositories/{repository_id}/environments/{environment_name}/variables")
    var SlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashvariables: GetParametersPathEnvironmentnameRepositoryidQuery68
    
    @JSName("/repositories/{repository_id}/environments/{environment_name}/variables/{name}")
    var SlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashvariablesSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameRepositoryid
    
    @JSName("/search/code")
    var SlashsearchSlashcode: GetParametersQueryOrder
    
    @JSName("/search/commits")
    var SlashsearchSlashcommits: GetParametersQueryQ
    
    @JSName("/search/issues")
    var SlashsearchSlashissues: GetParametersQueryOrderPage
    
    @JSName("/search/labels")
    var SlashsearchSlashlabels: GetParametersQueryPerpageQ
    
    @JSName("/search/repositories")
    var SlashsearchSlashrepositories: GetParametersQueryQSort
    
    @JSName("/search/topics")
    var SlashsearchSlashtopics: GetParametersQueryPagePerpageQ
    
    @JSName("/search/users")
    var SlashsearchSlashusers: GetParametersQueryOrderPagePerpage
    
    @JSName("/teams/{team_id}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracket: DeleteParametersPathTeamidResponses75
    
    @JSName("/teams/{team_id}/discussions")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussions: GetParametersPathTeamidQueryDirectionPage
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket: DeleteParametersPathDiscussionnumberTeamidResponses
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}/comments")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments: GetParametersPathDiscussionnumberTeamidQueryDirectionPage
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket: DeleteParametersPathCommentnumberDiscussionnumberResponses
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions: GetParametersPathCommentnumberDiscussionnumberQueryContentPage
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}/reactions")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions: GetParametersPathDiscussionnumberTeamidQueryContentPage
    
    @JSName("/teams/{team_id}/invitations")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashinvitations: GetParametersPathTeamidQueryPage
    
    @JSName("/teams/{team_id}/members")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembers: GetParametersPathTeamidQueryPerpageRole
    
    @JSName("/teams/{team_id}/members/{username}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathTeamidUsername
    
    @JSName("/teams/{team_id}/memberships/{username}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: GetResponses200Content122404
    
    @JSName("/teams/{team_id}/projects")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashprojects: GetResponses200Content124404
    
    @JSName("/teams/{team_id}/projects/{project_id}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteParametersPathProjectidTeamidResponses75
    
    @JSName("/teams/{team_id}/repos")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashrepos: GetResponses200Content48
    
    @JSName("/teams/{team_id}/repos/{owner}/{repo}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteParametersPathRepoTeamidResponses
    
    @JSName("/teams/{team_id}/teams")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashteams: GetResponses200Content87403404
    
    @JSName("/user")
    var Slashuser: GetResponses200Content368
    
    @JSName("/user/blocks")
    var SlashuserSlashblocks: GetResponses200Content71304
    
    @JSName("/user/blocks/{username}")
    var SlashuserSlashblocksSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses371
    
    @JSName("/user/codespaces")
    var SlashuserSlashcodespaces: GetParametersQueryPerpageRepositoryid
    
    @JSName("/user/codespaces/{codespace_name}")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket: DeleteResponses202304401
    
    @JSName("/user/codespaces/{codespace_name}/exports")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashexports: PostResponses202401403
    
    @JSName("/user/codespaces/{codespace_name}/exports/{export_id}")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashexportsSlashLeftcurlybracketexport_idRightcurlybracket: GetParametersPathExportid
    
    @JSName("/user/codespaces/{codespace_name}/machines")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashmachines: GetResponses304401403404500
    
    @JSName("/user/codespaces/{codespace_name}/publish")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashpublish: PostRequestBodyContentApplicationjsonNamePrivate
    
    @JSName("/user/codespaces/{codespace_name}/start")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstart: PostResponses402
    
    @JSName("/user/codespaces/{codespace_name}/stop")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop: PostResponses200Content89401
    
    @JSName("/user/codespaces/secrets")
    var SlashuserSlashcodespacesSlashsecrets: GetResponses200ContentApplicationjson373
    
    @JSName("/user/codespaces/secrets/{secret_name}")
    var SlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPath375Responses
    
    @JSName("/user/codespaces/secrets/{secret_name}/repositories")
    var SlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetResponses200401403404500
    
    @JSName("/user/codespaces/secrets/{secret_name}/repositories/{repository_id}")
    var SlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidNumber
    
    @JSName("/user/codespaces/secrets/public-key")
    var `SlashuserSlashcodespacesSlashsecretsSlashpublic-key`: GetResponses200Content374
    
    @JSName("/user/docker/conflicts")
    var SlashuserSlashdockerSlashconflicts: GetResponses200Content78
    
    @JSName("/user/email/visibility")
    var SlashuserSlashemailSlashvisibility: PatchRequestBodyContentApplicationjson381
    
    @JSName("/user/emails")
    var SlashuserSlashemails: DeleteRequestBodyResponses135
    
    @JSName("/user/followers")
    var SlashuserSlashfollowers: GetResponses200HeadersLink304
    
    @JSName("/user/following")
    var SlashuserSlashfollowing: GetResponses200HeadersLink304
    
    @JSName("/user/following/{username}")
    var SlashuserSlashfollowingSlashLeftcurlybracketusernameRightcurlybracket: GetParametersPath370
    
    @JSName("/user/gpg_keys")
    var SlashuserSlashgpg_keys: GetResponses200Content383
    
    @JSName("/user/gpg_keys/{gpg_key_id}")
    var SlashuserSlashgpg_keysSlashLeftcurlybracketgpg_key_idRightcurlybracket: DeleteParametersPathGpgkeyidResponses135
    
    @JSName("/user/installations")
    var SlashuserSlashinstallations: GetResponses200ContentApplicationjsonInstallations304
    
    @JSName("/user/installations/{installation_id}/repositories")
    var SlashuserSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashrepositories: GetParametersPathInstallationidQueryPage
    
    @JSName("/user/installations/{installation_id}/repositories/{repository_id}")
    var SlashuserSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathInstallationidRepositoryid
    
    @JSName("/user/interaction-limits")
    var `SlashuserSlashinteraction-limits`: Get385
    
    @JSName("/user/issues")
    var SlashuserSlashissues: GetParameters386
    
    @JSName("/user/keys")
    var SlashuserSlashkeys: GetResponses200Content387
    
    @JSName("/user/keys/{key_id}")
    var SlashuserSlashkeysSlashLeftcurlybracketkey_idRightcurlybracket: DeleteParametersPath389Responses371
    
    @JSName("/user/marketplace_purchases")
    var SlashuserSlashmarketplace_purchases: GetResponses304401404
    
    @JSName("/user/marketplace_purchases/stubbed")
    var SlashuserSlashmarketplace_purchasesSlashstubbed: GetResponses200Content390
    
    @JSName("/user/memberships/orgs")
    var SlashuserSlashmembershipsSlashorgs: GetParametersQueryPagePerpageState
    
    @JSName("/user/memberships/orgs/{org}")
    var SlashuserSlashmembershipsSlashorgsSlashLeftcurlybracketorgRightcurlybracket: GetParameters47Responses200Content90
    
    @JSName("/user/migrations")
    var SlashuserSlashmigrations: GetResponses200Content93304
    
    @JSName("/user/migrations/{migration_id}")
    var SlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket: GetParametersPath394
    
    @JSName("/user/migrations/{migration_id}/archive")
    var SlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive: DeleteParameters395Responses371
    
    @JSName("/user/migrations/{migration_id}/repos/{repo_name}/lock")
    var SlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock: DeleteParametersPathMigrationidReponame
    
    @JSName("/user/migrations/{migration_id}/repositories")
    var SlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories: GetParametersPath394QueryPage
    
    @JSName("/user/orgs")
    var SlashuserSlashorgs: GetResponses200Content45HeadersLink
    
    @JSName("/user/packages")
    var SlashuserSlashpackages: GetParametersQueryPackagetypePage
    
    @JSName("/user/packages/{package_type}/{package_name}")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket: DeleteParametersPathPackagenamePackagetypeResponses99
    
    @JSName("/user/packages/{package_type}/{package_name}/restore")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore: PostParametersPathPackagenamePackagetypeQueryToken
    
    @JSName("/user/packages/{package_type}/{package_name}/versions")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions: GetParametersPathPackagenamePackagetypeQueryState
    
    @JSName("/user/packages/{package_type}/{package_name}/versions/{package_version_id}")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket: DeleteParametersPathPackagetypePackageversionidResponses99
    
    @JSName("/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore: PostParametersPathPackagetypePackageversionidResponses99
    
    @JSName("/user/projects")
    var SlashuserSlashprojects: PostRequestBodyContentApplicationjsonBodyNameString
    
    @JSName("/user/public_emails")
    var SlashuserSlashpublic_emails: GetResponses200Content382HeadersLink
    
    @JSName("/user/repos")
    var SlashuserSlashrepos: GetParametersQueryType
    
    @JSName("/user/repository_invitations")
    var SlashuserSlashrepository_invitations: GetResponses200Content268304
    
    @JSName("/user/repository_invitations/{invitation_id}")
    var SlashuserSlashrepository_invitationsSlashLeftcurlybracketinvitation_idRightcurlybracket: DeleteParametersPath397
    
    @JSName("/user/social_accounts")
    var SlashuserSlashsocial_accounts: DeleteRequestBodyContentApplicationjsonAccounturlsResponses135
    
    @JSName("/user/ssh_signing_keys")
    var SlashuserSlashssh_signing_keys: GetResponses200Content406
    
    @JSName("/user/ssh_signing_keys/{ssh_signing_key_id}")
    var SlashuserSlashssh_signing_keysSlashLeftcurlybracketssh_signing_key_idRightcurlybracket: DeleteParametersPathSshsigningkeyidResponses371
    
    @JSName("/user/starred")
    var SlashuserSlashstarred: GetParametersQueryDirectionPagePerpage
    
    @JSName("/user/starred/{owner}/{repo}")
    var SlashuserSlashstarredSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteParameters141Responses371
    
    @JSName("/user/subscriptions")
    var SlashuserSlashsubscriptions: GetResponses200Content48304
    
    @JSName("/user/teams")
    var SlashuserSlashteams: GetResponses200Content408
    
    @JSName("/users")
    var Slashusers: GetParametersQuery411
    
    @JSName("/users/{username}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracket: GetResponses200Content368404
    
    @JSName("/users/{username}/docker/conflicts")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashdockerSlashconflicts: GetParametersPath370Responses200401403
    
    @JSName("/users/{username}/events")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashevents: GetParametersPath370QueryPage
    
    @JSName("/users/{username}/events/orgs/{org}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlasheventsSlashorgsSlashLeftcurlybracketorgRightcurlybracket: GetParametersPathOrgUsername
    
    @JSName("/users/{username}/events/public")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlasheventsSlashpublic: GetParametersPath370QueryPage
    
    @JSName("/users/{username}/followers")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowers: GetParametersPath370QueryPageResponses97
    
    @JSName("/users/{username}/following")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowing: GetParametersPath370QueryPageResponses97
    
    @JSName("/users/{username}/following/{target_user}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowingSlashLeftcurlybrackettarget_userRightcurlybracket: GetParametersPathTargetuser
    
    @JSName("/users/{username}/gists")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashgists: GetParametersPath370QueryPerpage
    
    @JSName("/users/{username}/gpg_keys")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashgpg_keys: GetResponses412
    
    @JSName("/users/{username}/hovercard")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashhovercard: GetParametersQuerySubjectid
    
    @JSName("/users/{username}/installation")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashinstallation: GetParametersPath370Responses200Content6
    
    @JSName("/users/{username}/keys")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashkeys: GetResponses200Content414
    
    @JSName("/users/{username}/orgs")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashorgs: GetResponses415
    
    @JSName("/users/{username}/packages")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackages: GetParametersPath370QueryPackagetypePage
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket: DeleteParametersPathPackagetypeUsernameResponses99
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}/restore")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore: PostParametersPathPackagetypeUsernameQueryToken
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}/versions")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions: GetResponses200401403404
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket: DeleteParametersPathPackagenamePackagetypePackageversionid
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore: PostParametersPathPackagenamePackagetypePackageversionid
    
    @JSName("/users/{username}/projects")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashprojects: GetParametersPath370QueryPerpageState
    
    @JSName("/users/{username}/received_events")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashreceived_events: GetParametersPath370QueryPage
    
    @JSName("/users/{username}/received_events/public")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashreceived_eventsSlashpublic: GetParametersPath370QueryPage
    
    @JSName("/users/{username}/repos")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashrepos: GetParametersQuerySortType
    
    @JSName("/users/{username}/settings/billing/actions")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashactions: GetParametersPath370Responses200Content110
    
    @JSName("/users/{username}/settings/billing/packages")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashpackages: GetParametersPath370Responses200Content111
    
    @JSName("/users/{username}/settings/billing/shared-storage")
    var `SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`: GetParametersPath370Responses200Content112
    
    @JSName("/users/{username}/social_accounts")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsocial_accounts: GetResponses416
    
    @JSName("/users/{username}/ssh_signing_keys")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashssh_signing_keys: GetResponses417
    
    @JSName("/users/{username}/starred")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashstarred: GetParametersPath370QueryDirectionPagePerpage
    
    @JSName("/users/{username}/subscriptions")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsubscriptions: GetParametersPath370QueryPageResponses104
    
    @JSName("/versions")
    var Slashversions: Get419
    
    @JSName("/zen")
    var Slashzen: GetResponses200ContentTextplainString
  }
  object paths {
    
    inline def apply(
      Slash: Get,
      Slashapp: GetResponses200Content0,
      `Slashapp-manifestsSlashLeftcurlybracketcodeRightcurlybracketSlashconversions`: Post,
      SlashappSlashhookSlashconfig: Patch,
      SlashappSlashhookSlashdeliveries: GetParametersResponses,
      SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryid,
      SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostResponses202,
      `SlashappSlashinstallation-requests`: GetParametersQueryPage,
      SlashappSlashinstallations: GetParametersQueryOutdated,
      SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracket: Delete,
      SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashaccess_tokens: PostParametersRequestBody,
      SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashsuspended: Put,
      SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashgrant: DeleteRequestBodyResponses,
      SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtoken: DeletePatch,
      SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtokenSlashscoped: PostRequestBodyContentApplicationjsonRepositories,
      SlashappsSlashLeftcurlybracketapp_slugRightcurlybracket: GetParametersPathAppslug,
      Slashcodes_of_conduct: GetResponses200304,
      Slashcodes_of_conductSlashLeftcurlybracketkeyRightcurlybracket: GetParametersPathKey,
      Slashemojis: GetResponses200Content13,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashdependabotSlashalerts: GetParametersPathQuery,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersPathEnterprise,
      Slashevents: GetResponses403503,
      Slashfeeds: GetResponses200Content17,
      Slashgists: GetPost,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracket: DeleteGet,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashLeftcurlybracketshaRightcurlybracket: GetParametersPathSha,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcomments: GetParametersPathGistidQueryPage,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: GetPatch,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommits: GetResponses200Content26,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashforks: GetResponses200Content27,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashstar: GetPut,
      SlashgistsSlashpublic: GetResponses403422,
      SlashgistsSlashstarred: GetResponses304401,
      SlashgitignoreSlashtemplates: GetResponses200Content29,
      SlashgitignoreSlashtemplatesSlashLeftcurlybracketnameRightcurlybracket: GetParametersPathName,
      SlashinstallationSlashrepositories: GetResponses401403,
      SlashinstallationSlashtoken: Delete31,
      Slashissues: GetParametersQueryCollab,
      Slashlicenses: GetParametersQueryFeatured,
      SlashlicensesSlashLeftcurlybracketlicenseRightcurlybracket: GetParametersPathLicense,
      Slashmarkdown: PostRequestBodyContentApplicationjsonContext,
      SlashmarkdownSlashraw: PostResponses200HeadersXCommonMarkerVersion,
      Slashmarketplace_listingSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket: GetParametersPathAccountid,
      Slashmarketplace_listingSlashplans: GetResponses401404,
      Slashmarketplace_listingSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts: GetParametersPathPlanid,
      Slashmarketplace_listingSlashstubbedSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket: GetResponses200Content35,
      Slashmarketplace_listingSlashstubbedSlashplans: GetResponses200Content37,
      Slashmarketplace_listingSlashstubbedSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts: GetResponses200Content38,
      Slashmeta: GetResponses200Content39,
      SlashnetworksSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents: GetParametersPathOwner,
      Slashnotifications: GetParametersQueryAll,
      SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracket: GetParametersPathThreadid,
      SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracketSlashsubscription: DeleteGetPut,
      Slashoctocat: GetParametersQueryS,
      Slashorganizations: GetParametersQuerySince,
      `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requests`: GetParametersPathOrg,
      `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requestsSlashLeftcurlybracketpat_request_idRightcurlybracket`: PostParametersPathPatrequestid,
      `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requestsSlashLeftcurlybracketpat_request_idRightcurlybracketSlashrepositories`: GetParametersPathPatrequestidQueryPage,
      `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokens`: GetResponses422500,
      `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokensSlashLeftcurlybracketpat_idRightcurlybracket`: PostParametersPathPatid,
      `SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokensSlashLeftcurlybracketpat_idRightcurlybracketSlashrepositories`: GetParametersPathOrgPatid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracket: DeleteGetPatch,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketsecurity_productRightcurlybracketSlashLeftcurlybracketenablementRightcurlybracket: PostParametersPathEnablement,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage: GetResponses200Content53,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage-by-repository`: GetParametersPathOrgQueryPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub: GetResponses200Content54,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissions: GetResponses200Content56,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositories: GetResponses200ContentApplicationjsonTotalcount,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeletePut,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetResponses200Content57,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetResponses200Content58,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflows: GetResponses200ContentApplicationjsonRequiredworkflows,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracket: DeleteParametersPathRequiredworkflowidResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracketSlashrepositories: GetParametersPathRequiredworkflowidResponses200ContentApplicationjsonTotalcount,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathOrgRepositoryid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunners: GetResponses200ContentApplicationjsonRunners,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathRunneridResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: PostPut,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOrg,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetResponses200Content61,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostResponses201Content62,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostResponses201Content62,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecrets: GetResponses200ContentApplicationjsonSecrets,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathSecretnameResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetParametersQueryPagePerpage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidSecretname,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`: GetResponses200Content66,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariables: GetParametersQuery68,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPath69Responses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracketSlashrepositories: GetParametersPath69QueryPagePerpage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathNameOrgRepositoryid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocks: GetResponses200Content71,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocksSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathUsernameResponses,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcode-scanningSlashalerts`: GetParametersQuerySeverity,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespaces: GetResponses401403404,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashbilling: PutRequestBodyContentApplicationjsonSelectedusernames,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashbillingSlashselected_users: DeletePost,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecrets: GetResponses200ContentApplicationjsonSecretsTotalcount,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathSecretnameResponses7,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetResponses200ContentApplicationjsonRepositoriesTotalcount404,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteResponses75,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashpublic-key`: GetResponses200Content73,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashalerts: GetParametersQueryAfter,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecrets: GetResponses200ContentApplicationjsonSecretsArray,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: GetResponses200Content77,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetParametersQueryPagePerpage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidSecretname,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`: GetResponses200Content76,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdockerSlashconflicts: GetResponses200401403,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashevents: GetResponses200Content16,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfailed_invitations: GetResponses200Content79,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooks: GetResponses200Content80,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket: DeleteParametersPathHookidResponses7,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig: GetParametersPathHookidResponses200Content2,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries: GetParametersQueryCursor,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryidHookid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostParametersPathDeliveryidHookidResponses202,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings: PostParametersPathHookidResponses7,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallation: GetResponses200Content6,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallations: GetResponses200ContentApplicationjsonInstallations,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinteraction-limits`: DeleteParameters47Responses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitations: GetParametersQueryInvitationsource,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket: DeleteParametersPathInvitationid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracketSlashteams: GetParametersPathInvitationidQueryPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashissues: GetParametersQueryFilter,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembers: GetParametersQueryRole,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses88,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespaces: GetParametersPathUsernameQueryPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket: DeleteParametersPathCodespacename,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop: PostResponses403404500,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses92,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrations: GetParametersQueryExclude,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket: GetParametersPathMigrationid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive: DeleteParameters96,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock: DeleteParametersPathReponame,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories: GetParametersPathMigrationidQueryPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaborators: GetParametersQueryFilterPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses422ContentApplicationjsonDocumentationurl,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackages: GetParametersQueryPackagetype,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket: DeleteResponses99,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore: PostParametersQueryToken,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions: GetParametersQueryState,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket: DeleteParametersPathPackageversionidResponses99,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore: PostParametersPathPackageversionidResponses99,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashprojects: GetParametersQueryPerpageState,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_members: GetResponses97,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_membersSlashLeftcurlybracketusernameRightcurlybracket: GetParametersPathUsernameResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrepos: GetParametersQuerySort,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrulesets: GetResponses200404500,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrulesetsSlashLeftcurlybracketruleset_idRightcurlybracket: DeleteResponses108,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersQueryResolution,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managers`: GetResponses200Content109,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managersSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket`: DeleteParametersPathTeamslug,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashactions: GetResponses200Content110,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashpackages: GetResponses200Content111,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`: GetResponses200Content112,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteams: GetResponses200Content87403,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket: GetResponses200Content113,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussions: GetParametersQueryPinned,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket: DeleteParametersPathDiscussionnumberResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments: GetParametersQueryDirectionPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket: DeleteParametersPathCommentnumberResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions: GetParametersQueryContentPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathReactionid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions: GetParametersPathDiscussionnumberQueryContentPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathDiscussionnumberOrg,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashinvitations: GetParametersPathTeamslugQueryPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembers: GetParametersQueryPerpageRole,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathOrgTeamslugResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojects: GetResponses200Content124,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteParametersPathProjectidResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashrepos: GetResponses104,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteParametersPathRepoResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteams: GetResponses129,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteResponses404410,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaborators: GetParametersQueryAffiliation,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses135,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission: GetResponses200304401403404422,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcolumns: GetParametersPath134QueryPage,
      SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracket: DeleteParametersPath131Responses44,
      SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashcards: GetParametersQueryArchivedstate,
      SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashmoves: PostRequestBodyContentApplicationjsonPosition,
      SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracket: DeleteResponses403ContentApplicationjsonErrors,
      SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracketSlashmoves: PostRequestBodyContentApplicationjsonColumnid,
      Slashrate_limit: GetResponses200Content138,
      SlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflows: GetParametersPathOrgRepo,
      SlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracket: GetParametersPathRequiredworkflowidforrepo,
      SlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracketSlashtiming: GetResponses200Content140,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteResponses307,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifacts: GetParametersQueryNamePage,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracket: DeleteParametersPathArtifactidResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracketSlashLeftcurlybracketarchive_formatRightcurlybracket: GetParametersPathArchiveformat,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcacheSlashusage: GetResponses200Content145,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcaches: DeleteParametersQueryKeyRef,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcachesSlashLeftcurlybracketcache_idRightcurlybracket: DeleteParametersPathCacheid,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracket: GetParametersPathJobid,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashlogs: GetParametersPathJobidResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashrerun: PostResponses201Content55403,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub: GetResponses400404,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashorganization-secrets`: GetResponses200ContentApplicationjsonTotalcountNumber,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashorganization-variables`: GetParametersPathOwnerQuery68,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissions: GetResponses200Content151,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashaccess: GetResponses200Content152,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetParameters141Responses200Content57,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetParameters141Responses200Content58,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracketSlashruns: GetParametersPathOwnerRepo,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunners: GetParametersPathOwnerResponses200ContentApplicationjsonRunners,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathRepoRunneridResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: DeleteGetPost,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOwner,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetParameters141Responses200Content61,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostParameters141Responses201Content62,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostParameters141Responses201Content62,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashruns: GetParametersQueryActor,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracket: DeleteParameters154,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprovals: GetResponses200Content155,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprove: PostResponses201403,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashartifacts: GetParametersPathRunidQueryPage,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracket: GetParametersPathAttemptnumber,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashjobs: GetParametersPathAttemptnumberQueryPage,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashlogs: GetParameters156,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashcancel: PostResponses202409,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashdeployment_protection_rule: PostRequestBodyContent157,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashjobs: GetParametersQueryFilterPagePerpage,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashlogs: DeleteResponses403500,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashpending_deployments: GetResponses200Content159,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun: PostResponses201Content55,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun-failed-jobs`: PostResponses201Content55,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashtiming: GetResponses200Content161,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecrets: GetResponses200ContentApplicationjsonTotalcountNumber,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathRepoSecretnameResponses,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`: GetParameters141Responses200Content66,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashvariables: PostRequestBodyContentApplicationjsonNameValue,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOwnerRepoResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflows: GetResponses200ContentApplicationjsonWorkflows,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracket: GetParametersPathWorkflowid,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdisable: PutParametersPathWorkflowidResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdispatches: PostRequestBodyContentApplicationjsonInputs,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashenable: PutParametersPathWorkflowidResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashruns: GetParametersPathWorkflowidQueryActor,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashtiming: GetResponses167,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassignees: GetResponses200HeadersLink404,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket: GetParametersPathAssignee,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinks: GetParametersQuery168,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinksSlashLeftcurlybracketautolink_idRightcurlybracket: DeleteParametersPathAutolinkidResponses7,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautomated-security-fixes`: DeleteParameters141Responses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranches: GetParametersQueryProtected,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracket: GetParametersPathBranch,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotection: DeleteParametersPathBranchResponses88,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashenforce_admins: DeleteParametersPathBranchResponses7,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_pull_request_reviews: GetResponses200Content177,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_signatures: GetResponses200Content176404,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checks: DeleteParametersPathBranchResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checksSlashcontexts: GetPostPut
    ): paths = {
      val __obj = js.Dynamic.literal()
      __obj.updateDynamic("/")(Slash.asInstanceOf[js.Any])
      __obj.updateDynamic("/app")(Slashapp.asInstanceOf[js.Any])
      __obj.updateDynamic("/app-manifests/{code}/conversions")(`Slashapp-manifestsSlashLeftcurlybracketcodeRightcurlybracketSlashconversions`.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/hook/config")(SlashappSlashhookSlashconfig.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/hook/deliveries")(SlashappSlashhookSlashdeliveries.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/hook/deliveries/{delivery_id}")(SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/hook/deliveries/{delivery_id}/attempts")(SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/installation-requests")(`SlashappSlashinstallation-requests`.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/installations")(SlashappSlashinstallations.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/installations/{installation_id}")(SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/installations/{installation_id}/access_tokens")(SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashaccess_tokens.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/installations/{installation_id}/suspended")(SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashsuspended.asInstanceOf[js.Any])
      __obj.updateDynamic("/applications/{client_id}/grant")(SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashgrant.asInstanceOf[js.Any])
      __obj.updateDynamic("/applications/{client_id}/token")(SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtoken.asInstanceOf[js.Any])
      __obj.updateDynamic("/applications/{client_id}/token/scoped")(SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtokenSlashscoped.asInstanceOf[js.Any])
      __obj.updateDynamic("/apps/{app_slug}")(SlashappsSlashLeftcurlybracketapp_slugRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/codes_of_conduct")(Slashcodes_of_conduct.asInstanceOf[js.Any])
      __obj.updateDynamic("/codes_of_conduct/{key}")(Slashcodes_of_conductSlashLeftcurlybracketkeyRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/emojis")(Slashemojis.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/dependabot/alerts")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashdependabotSlashalerts.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/secret-scanning/alerts")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsecret-scanningSlashalerts`.asInstanceOf[js.Any])
      __obj.updateDynamic("/events")(Slashevents.asInstanceOf[js.Any])
      __obj.updateDynamic("/feeds")(Slashfeeds.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists")(Slashgists.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/{sha}")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashLeftcurlybracketshaRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/comments")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcomments.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/comments/{comment_id}")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/commits")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommits.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/forks")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashforks.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/star")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashstar.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/public")(SlashgistsSlashpublic.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/starred")(SlashgistsSlashstarred.asInstanceOf[js.Any])
      __obj.updateDynamic("/gitignore/templates")(SlashgitignoreSlashtemplates.asInstanceOf[js.Any])
      __obj.updateDynamic("/gitignore/templates/{name}")(SlashgitignoreSlashtemplatesSlashLeftcurlybracketnameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/installation/repositories")(SlashinstallationSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/installation/token")(SlashinstallationSlashtoken.asInstanceOf[js.Any])
      __obj.updateDynamic("/issues")(Slashissues.asInstanceOf[js.Any])
      __obj.updateDynamic("/licenses")(Slashlicenses.asInstanceOf[js.Any])
      __obj.updateDynamic("/licenses/{license}")(SlashlicensesSlashLeftcurlybracketlicenseRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/markdown")(Slashmarkdown.asInstanceOf[js.Any])
      __obj.updateDynamic("/markdown/raw")(SlashmarkdownSlashraw.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/accounts/{account_id}")(Slashmarketplace_listingSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/plans")(Slashmarketplace_listingSlashplans.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/plans/{plan_id}/accounts")(Slashmarketplace_listingSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/stubbed/accounts/{account_id}")(Slashmarketplace_listingSlashstubbedSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/stubbed/plans")(Slashmarketplace_listingSlashstubbedSlashplans.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/stubbed/plans/{plan_id}/accounts")(Slashmarketplace_listingSlashstubbedSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts.asInstanceOf[js.Any])
      __obj.updateDynamic("/meta")(Slashmeta.asInstanceOf[js.Any])
      __obj.updateDynamic("/networks/{owner}/{repo}/events")(SlashnetworksSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents.asInstanceOf[js.Any])
      __obj.updateDynamic("/notifications")(Slashnotifications.asInstanceOf[js.Any])
      __obj.updateDynamic("/notifications/threads/{thread_id}")(SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/notifications/threads/{thread_id}/subscription")(SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracketSlashsubscription.asInstanceOf[js.Any])
      __obj.updateDynamic("/octocat")(Slashoctocat.asInstanceOf[js.Any])
      __obj.updateDynamic("/organizations")(Slashorganizations.asInstanceOf[js.Any])
      __obj.updateDynamic("/organizations/{org}/personal-access-token-requests")(`SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requests`.asInstanceOf[js.Any])
      __obj.updateDynamic("/organizations/{org}/personal-access-token-requests/{pat_request_id}")(`SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requestsSlashLeftcurlybracketpat_request_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories")(`SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requestsSlashLeftcurlybracketpat_request_idRightcurlybracketSlashrepositories`.asInstanceOf[js.Any])
      __obj.updateDynamic("/organizations/{org}/personal-access-tokens")(`SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokens`.asInstanceOf[js.Any])
      __obj.updateDynamic("/organizations/{org}/personal-access-tokens/{pat_id}")(`SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokensSlashLeftcurlybracketpat_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/organizations/{org}/personal-access-tokens/{pat_id}/repositories")(`SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokensSlashLeftcurlybracketpat_idRightcurlybracketSlashrepositories`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/{security_product}/{enablement}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketsecurity_productRightcurlybracketSlashLeftcurlybracketenablementRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/cache/usage")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/cache/usage-by-repository")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage-by-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/oidc/customization/sub")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions/repositories/{repository_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions/selected-actions")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions/workflow")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashworkflow.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/required_workflows")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflows.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/required_workflows/{required_workflow_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracketSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunners.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/{runner_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/{runner_id}/labels")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/{runner_id}/labels/{name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/downloads")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashdownloads.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/registration-token")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/remove-token")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashremove-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecrets.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets/{secret_name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets/{secret_name}/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets/public-key")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/variables")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariables.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/variables/{name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/variables/{name}/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracketSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/variables/{name}/repositories/{repository_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/blocks")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocks.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/blocks/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocksSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/code-scanning/alerts")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcode-scanningSlashalerts`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/codespaces")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespaces.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/codespaces/billing")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashbilling.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/codespaces/billing/selected_users")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashbillingSlashselected_users.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/codespaces/secrets")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecrets.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/codespaces/secrets/{secret_name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/codespaces/secrets/{secret_name}/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/codespaces/secrets/public-key")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashpublic-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/alerts")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashalerts.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecrets.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets/{secret_name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets/{secret_name}/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets/public-key")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/docker/conflicts")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdockerSlashconflicts.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/events")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashevents.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/failed_invitations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfailed_invitations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooks.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/config")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/deliveries")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/pings")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/installation")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallation.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/installations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/interaction-limits")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinteraction-limits`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/invitations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/invitations/{invitation_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/invitations/{invitation_id}/teams")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracketSlashteams.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/issues")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashissues.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/members")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembers.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/members/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/members/{username}/codespaces")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespaces.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/members/{username}/codespaces/{codespace_name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/memberships/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations/{migration_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations/{migration_id}/archive")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations/{migration_id}/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/outside_collaborators")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaborators.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/outside_collaborators/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaboratorsSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackages.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}/restore")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}/versions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/projects")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashprojects.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/public_members")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_members.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/public_members/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_membersSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/repos")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrepos.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/rulesets")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrulesets.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/rulesets/{ruleset_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrulesetsSlashLeftcurlybracketruleset_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/secret-scanning/alerts")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecret-scanningSlashalerts`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/security-managers")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managers`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/security-managers/teams/{team_slug}")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managersSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/settings/billing/actions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashactions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/settings/billing/packages")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashpackages.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/settings/billing/shared-storage")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteams.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/invitations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashinvitations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/members")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembers.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/memberships/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/projects")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojects.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/projects/{project_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/repos")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashrepos.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/teams")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteams.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}/collaborators")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaborators.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}/collaborators/{username}")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}/collaborators/{username}/permission")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}/columns")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcolumns.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/{column_id}")(SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/{column_id}/cards")(SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashcards.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/{column_id}/moves")(SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashmoves.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/cards/{card_id}")(SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/cards/{card_id}/moves")(SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracketSlashmoves.asInstanceOf[js.Any])
      __obj.updateDynamic("/rate_limit")(Slashrate_limit.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{org}/{repo}/actions/required_workflows")(SlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflows.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}")(SlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing")(SlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracketSlashtiming.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/artifacts")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifacts.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracketSlashLeftcurlybracketarchive_formatRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/cache/usage")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcacheSlashusage.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/caches")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcaches.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/caches/{cache_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcachesSlashLeftcurlybracketcache_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/jobs/{job_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/jobs/{job_id}/logs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashlogs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashrerun.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/oidc/customization/sub")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/organization-secrets")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashorganization-secrets`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/organization-variables")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashorganization-variables`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/permissions")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissions.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/permissions/access")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashaccess.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/permissions/selected-actions")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/permissions/workflow")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashworkflow.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracketSlashruns.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunners.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/{runner_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/{runner_id}/labels")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/downloads")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashdownloads.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/registration-token")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/remove-token")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashremove-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashruns.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/approvals")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprovals.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/approve")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprove.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashartifacts.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashjobs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashlogs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/cancel")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashcancel.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashdeployment_protection_rule.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/jobs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashjobs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/logs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashlogs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashpending_deployments.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/rerun")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun-failed-jobs`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/timing")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashtiming.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/secrets")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecrets.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/secrets/{secret_name}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/secrets/public-key")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/variables")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashvariables.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/variables/{name}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflows.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdisable.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdispatches.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashenable.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashruns.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashtiming.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/assignees")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassignees.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/assignees/{assignee}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/autolinks")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinks.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/autolinks/{autolink_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinksSlashLeftcurlybracketautolink_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/automated-security-fixes")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautomated-security-fixes`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/branches")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranches.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/branches/{branch}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/branches/{branch}/protection")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotection.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashenforce_admins.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_pull_request_reviews.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_signatures.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checks.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checksSlashcontexts.asInstanceOf[js.Any])
      __obj.asInstanceOf[paths]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: paths] (val x: Self) extends AnyVal {
      
      inline def setSlash(value: Get): Self = StObject.set(x, "/", value.asInstanceOf[js.Any])
      
      inline def setSlashapp(value: GetResponses200Content0): Self = StObject.set(x, "/app", value.asInstanceOf[js.Any])
      
      inline def `setSlashapp-manifestsSlashLeftcurlybracketcodeRightcurlybracketSlashconversions`(value: Post): Self = StObject.set(x, "/app-manifests/{code}/conversions", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashhookSlashconfig(value: Patch): Self = StObject.set(x, "/app/hook/config", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashhookSlashdeliveries(value: GetParametersResponses): Self = StObject.set(x, "/app/hook/deliveries", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket(value: GetParametersPathDeliveryid): Self = StObject.set(x, "/app/hook/deliveries/{delivery_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts(value: PostResponses202): Self = StObject.set(x, "/app/hook/deliveries/{delivery_id}/attempts", value.asInstanceOf[js.Any])
      
      inline def `setSlashappSlashinstallation-requests`(value: GetParametersQueryPage): Self = StObject.set(x, "/app/installation-requests", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashinstallations(value: GetParametersQueryOutdated): Self = StObject.set(x, "/app/installations", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracket(value: Delete): Self = StObject.set(x, "/app/installations/{installation_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashaccess_tokens(value: PostParametersRequestBody): Self = StObject.set(x, "/app/installations/{installation_id}/access_tokens", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashsuspended(value: Put): Self = StObject.set(x, "/app/installations/{installation_id}/suspended", value.asInstanceOf[js.Any])
      
      inline def setSlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashgrant(value: DeleteRequestBodyResponses): Self = StObject.set(x, "/applications/{client_id}/grant", value.asInstanceOf[js.Any])
      
      inline def setSlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtoken(value: DeletePatch): Self = StObject.set(x, "/applications/{client_id}/token", value.asInstanceOf[js.Any])
      
      inline def setSlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtokenSlashscoped(value: PostRequestBodyContentApplicationjsonRepositories): Self = StObject.set(x, "/applications/{client_id}/token/scoped", value.asInstanceOf[js.Any])
      
      inline def setSlashappsSlashLeftcurlybracketapp_slugRightcurlybracket(value: GetParametersPathAppslug): Self = StObject.set(x, "/apps/{app_slug}", value.asInstanceOf[js.Any])
      
      inline def setSlashcodes_of_conduct(value: GetResponses200304): Self = StObject.set(x, "/codes_of_conduct", value.asInstanceOf[js.Any])
      
      inline def setSlashcodes_of_conductSlashLeftcurlybracketkeyRightcurlybracket(value: GetParametersPathKey): Self = StObject.set(x, "/codes_of_conduct/{key}", value.asInstanceOf[js.Any])
      
      inline def setSlashemojis(value: GetResponses200Content13): Self = StObject.set(x, "/emojis", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashdependabotSlashalerts(value: GetParametersPathQuery): Self = StObject.set(x, "/enterprises/{enterprise}/dependabot/alerts", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsecret-scanningSlashalerts`(value: GetParametersPathEnterprise): Self = StObject.set(x, "/enterprises/{enterprise}/secret-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def setSlashevents(value: GetResponses403503): Self = StObject.set(x, "/events", value.asInstanceOf[js.Any])
      
      inline def setSlashfeeds(value: GetResponses200Content17): Self = StObject.set(x, "/feeds", value.asInstanceOf[js.Any])
      
      inline def setSlashgists(value: GetPost): Self = StObject.set(x, "/gists", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracket(value: DeleteGet): Self = StObject.set(x, "/gists/{gist_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashLeftcurlybracketshaRightcurlybracket(value: GetParametersPathSha): Self = StObject.set(x, "/gists/{gist_id}/{sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcomments(value: GetParametersPathGistidQueryPage): Self = StObject.set(x, "/gists/{gist_id}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket(value: GetPatch): Self = StObject.set(x, "/gists/{gist_id}/comments/{comment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommits(value: GetResponses200Content26): Self = StObject.set(x, "/gists/{gist_id}/commits", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashforks(value: GetResponses200Content27): Self = StObject.set(x, "/gists/{gist_id}/forks", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashstar(value: GetPut): Self = StObject.set(x, "/gists/{gist_id}/star", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashpublic(value: GetResponses403422): Self = StObject.set(x, "/gists/public", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashstarred(value: GetResponses304401): Self = StObject.set(x, "/gists/starred", value.asInstanceOf[js.Any])
      
      inline def setSlashgitignoreSlashtemplates(value: GetResponses200Content29): Self = StObject.set(x, "/gitignore/templates", value.asInstanceOf[js.Any])
      
      inline def setSlashgitignoreSlashtemplatesSlashLeftcurlybracketnameRightcurlybracket(value: GetParametersPathName): Self = StObject.set(x, "/gitignore/templates/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashinstallationSlashrepositories(value: GetResponses401403): Self = StObject.set(x, "/installation/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashinstallationSlashtoken(value: Delete31): Self = StObject.set(x, "/installation/token", value.asInstanceOf[js.Any])
      
      inline def setSlashissues(value: GetParametersQueryCollab): Self = StObject.set(x, "/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashlicenses(value: GetParametersQueryFeatured): Self = StObject.set(x, "/licenses", value.asInstanceOf[js.Any])
      
      inline def setSlashlicensesSlashLeftcurlybracketlicenseRightcurlybracket(value: GetParametersPathLicense): Self = StObject.set(x, "/licenses/{license}", value.asInstanceOf[js.Any])
      
      inline def setSlashmarkdown(value: PostRequestBodyContentApplicationjsonContext): Self = StObject.set(x, "/markdown", value.asInstanceOf[js.Any])
      
      inline def setSlashmarkdownSlashraw(value: PostResponses200HeadersXCommonMarkerVersion): Self = StObject.set(x, "/markdown/raw", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket(value: GetParametersPathAccountid): Self = StObject.set(x, "/marketplace_listing/accounts/{account_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashplans(value: GetResponses401404): Self = StObject.set(x, "/marketplace_listing/plans", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts(value: GetParametersPathPlanid): Self = StObject.set(x, "/marketplace_listing/plans/{plan_id}/accounts", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashstubbedSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket(value: GetResponses200Content35): Self = StObject.set(x, "/marketplace_listing/stubbed/accounts/{account_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashstubbedSlashplans(value: GetResponses200Content37): Self = StObject.set(x, "/marketplace_listing/stubbed/plans", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashstubbedSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts(value: GetResponses200Content38): Self = StObject.set(x, "/marketplace_listing/stubbed/plans/{plan_id}/accounts", value.asInstanceOf[js.Any])
      
      inline def setSlashmeta(value: GetResponses200Content39): Self = StObject.set(x, "/meta", value.asInstanceOf[js.Any])
      
      inline def setSlashnetworksSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents(value: GetParametersPathOwner): Self = StObject.set(x, "/networks/{owner}/{repo}/events", value.asInstanceOf[js.Any])
      
      inline def setSlashnotifications(value: GetParametersQueryAll): Self = StObject.set(x, "/notifications", value.asInstanceOf[js.Any])
      
      inline def setSlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracket(value: GetParametersPathThreadid): Self = StObject.set(x, "/notifications/threads/{thread_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracketSlashsubscription(value: DeleteGetPut): Self = StObject.set(x, "/notifications/threads/{thread_id}/subscription", value.asInstanceOf[js.Any])
      
      inline def setSlashoctocat(value: GetParametersQueryS): Self = StObject.set(x, "/octocat", value.asInstanceOf[js.Any])
      
      inline def setSlashorganizations(value: GetParametersQuerySince): Self = StObject.set(x, "/organizations", value.asInstanceOf[js.Any])
      
      inline def `setSlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requests`(value: GetParametersPathOrg): Self = StObject.set(x, "/organizations/{org}/personal-access-token-requests", value.asInstanceOf[js.Any])
      
      inline def `setSlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requestsSlashLeftcurlybracketpat_request_idRightcurlybracket`(value: PostParametersPathPatrequestid): Self = StObject.set(x, "/organizations/{org}/personal-access-token-requests/{pat_request_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-token-requestsSlashLeftcurlybracketpat_request_idRightcurlybracketSlashrepositories`(value: GetParametersPathPatrequestidQueryPage): Self = StObject.set(x, "/organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def `setSlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokens`(value: GetResponses422500): Self = StObject.set(x, "/organizations/{org}/personal-access-tokens", value.asInstanceOf[js.Any])
      
      inline def `setSlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokensSlashLeftcurlybracketpat_idRightcurlybracket`(value: PostParametersPathPatid): Self = StObject.set(x, "/organizations/{org}/personal-access-tokens/{pat_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashpersonal-access-tokensSlashLeftcurlybracketpat_idRightcurlybracketSlashrepositories`(value: GetParametersPathOrgPatid): Self = StObject.set(x, "/organizations/{org}/personal-access-tokens/{pat_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracket(value: DeleteGetPatch): Self = StObject.set(x, "/orgs/{org}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketsecurity_productRightcurlybracketSlashLeftcurlybracketenablementRightcurlybracket(value: PostParametersPathEnablement): Self = StObject.set(x, "/orgs/{org}/{security_product}/{enablement}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage(value: GetResponses200Content53): Self = StObject.set(x, "/orgs/{org}/actions/cache/usage", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage-by-repository`(value: GetParametersPathOrgQueryPage): Self = StObject.set(x, "/orgs/{org}/actions/cache/usage-by-repository", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub(value: GetResponses200Content54): Self = StObject.set(x, "/orgs/{org}/actions/oidc/customization/sub", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissions(value: GetResponses200Content56): Self = StObject.set(x, "/orgs/{org}/actions/permissions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositories(value: GetResponses200ContentApplicationjsonTotalcount): Self = StObject.set(x, "/orgs/{org}/actions/permissions/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeletePut): Self = StObject.set(x, "/orgs/{org}/actions/permissions/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`(value: GetResponses200Content57): Self = StObject.set(x, "/orgs/{org}/actions/permissions/selected-actions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashworkflow(value: GetResponses200Content58): Self = StObject.set(x, "/orgs/{org}/actions/permissions/workflow", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflows(value: GetResponses200ContentApplicationjsonRequiredworkflows): Self = StObject.set(x, "/orgs/{org}/actions/required_workflows", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracket(value: DeleteParametersPathRequiredworkflowidResponses): Self = StObject.set(x, "/orgs/{org}/actions/required_workflows/{required_workflow_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracketSlashrepositories(value: GetParametersPathRequiredworkflowidResponses200ContentApplicationjsonTotalcount): Self = StObject.set(x, "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathOrgRepositoryid): Self = StObject.set(x, "/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunners(value: GetResponses200ContentApplicationjsonRunners): Self = StObject.set(x, "/orgs/{org}/actions/runners", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket(value: DeleteParametersPathRunneridResponses): Self = StObject.set(x, "/orgs/{org}/actions/runners/{runner_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels(value: PostPut): Self = StObject.set(x, "/orgs/{org}/actions/runners/{runner_id}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathNameOrg): Self = StObject.set(x, "/orgs/{org}/actions/runners/{runner_id}/labels/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashdownloads(value: GetResponses200Content61): Self = StObject.set(x, "/orgs/{org}/actions/runners/downloads", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`(value: PostResponses201Content62): Self = StObject.set(x, "/orgs/{org}/actions/runners/registration-token", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashremove-token`(value: PostResponses201Content62): Self = StObject.set(x, "/orgs/{org}/actions/runners/remove-token", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecrets(value: GetResponses200ContentApplicationjsonSecrets): Self = StObject.set(x, "/orgs/{org}/actions/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: DeleteParametersPathSecretnameResponses): Self = StObject.set(x, "/orgs/{org}/actions/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories(value: GetParametersQueryPagePerpage): Self = StObject.set(x, "/orgs/{org}/actions/secrets/{secret_name}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathRepositoryidSecretname): Self = StObject.set(x, "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`(value: GetResponses200Content66): Self = StObject.set(x, "/orgs/{org}/actions/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariables(value: GetParametersQuery68): Self = StObject.set(x, "/orgs/{org}/actions/variables", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPath69Responses): Self = StObject.set(x, "/orgs/{org}/actions/variables/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracketSlashrepositories(value: GetParametersPath69QueryPagePerpage): Self = StObject.set(x, "/orgs/{org}/actions/variables/{name}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathNameOrgRepositoryid): Self = StObject.set(x, "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocks(value: GetResponses200Content71): Self = StObject.set(x, "/orgs/{org}/blocks", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocksSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteParametersPathUsernameResponses): Self = StObject.set(x, "/orgs/{org}/blocks/{username}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcode-scanningSlashalerts`(value: GetParametersQuerySeverity): Self = StObject.set(x, "/orgs/{org}/code-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespaces(value: GetResponses401403404): Self = StObject.set(x, "/orgs/{org}/codespaces", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashbilling(value: PutRequestBodyContentApplicationjsonSelectedusernames): Self = StObject.set(x, "/orgs/{org}/codespaces/billing", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashbillingSlashselected_users(value: DeletePost): Self = StObject.set(x, "/orgs/{org}/codespaces/billing/selected_users", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecrets(value: GetResponses200ContentApplicationjsonSecretsTotalcount): Self = StObject.set(x, "/orgs/{org}/codespaces/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: DeleteParametersPathSecretnameResponses7): Self = StObject.set(x, "/orgs/{org}/codespaces/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories(value: GetResponses200ContentApplicationjsonRepositoriesTotalcount404): Self = StObject.set(x, "/orgs/{org}/codespaces/secrets/{secret_name}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteResponses75): Self = StObject.set(x, "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespacesSlashsecretsSlashpublic-key`(value: GetResponses200Content73): Self = StObject.set(x, "/orgs/{org}/codespaces/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashalerts(value: GetParametersQueryAfter): Self = StObject.set(x, "/orgs/{org}/dependabot/alerts", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecrets(value: GetResponses200ContentApplicationjsonSecretsArray): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: GetResponses200Content77): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories(value: GetParametersQueryPagePerpage): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets/{secret_name}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathRepositoryidSecretname): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`(value: GetResponses200Content76): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdockerSlashconflicts(value: GetResponses200401403): Self = StObject.set(x, "/orgs/{org}/docker/conflicts", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashevents(value: GetResponses200Content16): Self = StObject.set(x, "/orgs/{org}/events", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfailed_invitations(value: GetResponses200Content79): Self = StObject.set(x, "/orgs/{org}/failed_invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooks(value: GetResponses200Content80): Self = StObject.set(x, "/orgs/{org}/hooks", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket(value: DeleteParametersPathHookidResponses7): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig(value: GetParametersPathHookidResponses200Content2): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/config", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries(value: GetParametersQueryCursor): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/deliveries", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket(value: GetParametersPathDeliveryidHookid): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts(value: PostParametersPathDeliveryidHookidResponses202): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings(value: PostParametersPathHookidResponses7): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/pings", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallation(value: GetResponses200Content6): Self = StObject.set(x, "/orgs/{org}/installation", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallations(value: GetResponses200ContentApplicationjsonInstallations): Self = StObject.set(x, "/orgs/{org}/installations", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinteraction-limits`(value: DeleteParameters47Responses): Self = StObject.set(x, "/orgs/{org}/interaction-limits", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitations(value: GetParametersQueryInvitationsource): Self = StObject.set(x, "/orgs/{org}/invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket(value: DeleteParametersPathInvitationid): Self = StObject.set(x, "/orgs/{org}/invitations/{invitation_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracketSlashteams(value: GetParametersPathInvitationidQueryPage): Self = StObject.set(x, "/orgs/{org}/invitations/{invitation_id}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashissues(value: GetParametersQueryFilter): Self = StObject.set(x, "/orgs/{org}/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembers(value: GetParametersQueryRole): Self = StObject.set(x, "/orgs/{org}/members", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses88): Self = StObject.set(x, "/orgs/{org}/members/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespaces(value: GetParametersPathUsernameQueryPage): Self = StObject.set(x, "/orgs/{org}/members/{username}/codespaces", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket(value: DeleteParametersPathCodespacename): Self = StObject.set(x, "/orgs/{org}/members/{username}/codespaces/{codespace_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop(value: PostResponses403404500): Self = StObject.set(x, "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses92): Self = StObject.set(x, "/orgs/{org}/memberships/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrations(value: GetParametersQueryExclude): Self = StObject.set(x, "/orgs/{org}/migrations", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket(value: GetParametersPathMigrationid): Self = StObject.set(x, "/orgs/{org}/migrations/{migration_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive(value: DeleteParameters96): Self = StObject.set(x, "/orgs/{org}/migrations/{migration_id}/archive", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock(value: DeleteParametersPathReponame): Self = StObject.set(x, "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories(value: GetParametersPathMigrationidQueryPage): Self = StObject.set(x, "/orgs/{org}/migrations/{migration_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaborators(value: GetParametersQueryFilterPage): Self = StObject.set(x, "/orgs/{org}/outside_collaborators", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaboratorsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses422ContentApplicationjsonDocumentationurl): Self = StObject.set(x, "/orgs/{org}/outside_collaborators/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackages(value: GetParametersQueryPackagetype): Self = StObject.set(x, "/orgs/{org}/packages", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket(value: DeleteResponses99): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore(value: PostParametersQueryToken): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions(value: GetParametersQueryState): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}/versions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket(value: DeleteParametersPathPackageversionidResponses99): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore(value: PostParametersPathPackageversionidResponses99): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashprojects(value: GetParametersQueryPerpageState): Self = StObject.set(x, "/orgs/{org}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_members(value: GetResponses97): Self = StObject.set(x, "/orgs/{org}/public_members", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_membersSlashLeftcurlybracketusernameRightcurlybracket(value: GetParametersPathUsernameResponses): Self = StObject.set(x, "/orgs/{org}/public_members/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrepos(value: GetParametersQuerySort): Self = StObject.set(x, "/orgs/{org}/repos", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrulesets(value: GetResponses200404500): Self = StObject.set(x, "/orgs/{org}/rulesets", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrulesetsSlashLeftcurlybracketruleset_idRightcurlybracket(value: DeleteResponses108): Self = StObject.set(x, "/orgs/{org}/rulesets/{ruleset_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecret-scanningSlashalerts`(value: GetParametersQueryResolution): Self = StObject.set(x, "/orgs/{org}/secret-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managers`(value: GetResponses200Content109): Self = StObject.set(x, "/orgs/{org}/security-managers", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managersSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket`(value: DeleteParametersPathTeamslug): Self = StObject.set(x, "/orgs/{org}/security-managers/teams/{team_slug}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashactions(value: GetResponses200Content110): Self = StObject.set(x, "/orgs/{org}/settings/billing/actions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashpackages(value: GetResponses200Content111): Self = StObject.set(x, "/orgs/{org}/settings/billing/packages", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`(value: GetResponses200Content112): Self = StObject.set(x, "/orgs/{org}/settings/billing/shared-storage", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteams(value: GetResponses200Content87403): Self = StObject.set(x, "/orgs/{org}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket(value: GetResponses200Content113): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussions(value: GetParametersQueryPinned): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket(value: DeleteParametersPathDiscussionnumberResponses): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments(value: GetParametersQueryDirectionPage): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket(value: DeleteParametersPathCommentnumberResponses): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions(value: GetParametersQueryContentPage): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathReactionid): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions(value: GetParametersPathDiscussionnumberQueryContentPage): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathDiscussionnumberOrg): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashinvitations(value: GetParametersPathTeamslugQueryPage): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembers(value: GetParametersQueryPerpageRole): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/members", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteParametersPathOrgTeamslugResponses): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/memberships/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojects(value: GetResponses200Content124): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket(value: DeleteParametersPathProjectidResponses): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/projects/{project_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashrepos(value: GetResponses104): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/repos", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket(value: DeleteParametersPathRepoResponses): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteams(value: GetResponses129): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket(value: DeleteResponses404410): Self = StObject.set(x, "/projects/{project_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaborators(value: GetParametersQueryAffiliation): Self = StObject.set(x, "/projects/{project_id}/collaborators", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses135): Self = StObject.set(x, "/projects/{project_id}/collaborators/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission(value: GetResponses200304401403404422): Self = StObject.set(x, "/projects/{project_id}/collaborators/{username}/permission", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcolumns(value: GetParametersPath134QueryPage): Self = StObject.set(x, "/projects/{project_id}/columns", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracket(value: DeleteParametersPath131Responses44): Self = StObject.set(x, "/projects/columns/{column_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashcards(value: GetParametersQueryArchivedstate): Self = StObject.set(x, "/projects/columns/{column_id}/cards", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashmoves(value: PostRequestBodyContentApplicationjsonPosition): Self = StObject.set(x, "/projects/columns/{column_id}/moves", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracket(value: DeleteResponses403ContentApplicationjsonErrors): Self = StObject.set(x, "/projects/columns/cards/{card_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracketSlashmoves(value: PostRequestBodyContentApplicationjsonColumnid): Self = StObject.set(x, "/projects/columns/cards/{card_id}/moves", value.asInstanceOf[js.Any])
      
      inline def setSlashrate_limit(value: GetResponses200Content138): Self = StObject.set(x, "/rate_limit", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflows(value: GetParametersPathOrgRepo): Self = StObject.set(x, "/repos/{org}/{repo}/actions/required_workflows", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracket(value: GetParametersPathRequiredworkflowidforrepo): Self = StObject.set(x, "/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracketSlashtiming(value: GetResponses200Content140): Self = StObject.set(x, "/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket(value: DeleteResponses307): Self = StObject.set(x, "/repos/{owner}/{repo}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifacts(value: GetParametersQueryNamePage): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/artifacts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracket(value: DeleteParametersPathArtifactidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracketSlashLeftcurlybracketarchive_formatRightcurlybracket(value: GetParametersPathArchiveformat): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcacheSlashusage(value: GetResponses200Content145): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/cache/usage", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcaches(value: DeleteParametersQueryKeyRef): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/caches", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcachesSlashLeftcurlybracketcache_idRightcurlybracket(value: DeleteParametersPathCacheid): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/caches/{cache_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracket(value: GetParametersPathJobid): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/jobs/{job_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashlogs(value: GetParametersPathJobidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashrerun(value: PostResponses201Content55403): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub(value: GetResponses400404): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/oidc/customization/sub", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashorganization-secrets`(value: GetResponses200ContentApplicationjsonTotalcountNumber): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/organization-secrets", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashorganization-variables`(value: GetParametersPathOwnerQuery68): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/organization-variables", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissions(value: GetResponses200Content151): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/permissions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashaccess(value: GetResponses200Content152): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/permissions/access", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`(value: GetParameters141Responses200Content57): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/permissions/selected-actions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashworkflow(value: GetParameters141Responses200Content58): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/permissions/workflow", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrequired_workflowsSlashLeftcurlybracketrequired_workflow_id_for_repoRightcurlybracketSlashruns(value: GetParametersPathOwnerRepo): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunners(value: GetParametersPathOwnerResponses200ContentApplicationjsonRunners): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket(value: DeleteParametersPathRepoRunneridResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/{runner_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels(value: DeleteGetPost): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathNameOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashdownloads(value: GetParameters141Responses200Content61): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/downloads", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`(value: PostParameters141Responses201Content62): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/registration-token", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashremove-token`(value: PostParameters141Responses201Content62): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/remove-token", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashruns(value: GetParametersQueryActor): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracket(value: DeleteParameters154): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprovals(value: GetResponses200Content155): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprove(value: PostResponses201403): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/approve", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashartifacts(value: GetParametersPathRunidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracket(value: GetParametersPathAttemptnumber): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashjobs(value: GetParametersPathAttemptnumberQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashlogs(value: GetParameters156): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashcancel(value: PostResponses202409): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashdeployment_protection_rule(value: PostRequestBodyContent157): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashjobs(value: GetParametersQueryFilterPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashlogs(value: DeleteResponses403500): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/logs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashpending_deployments(value: GetResponses200Content159): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun(value: PostResponses201Content55): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun-failed-jobs`(value: PostResponses201Content55): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashtiming(value: GetResponses200Content161): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/timing", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecrets(value: GetResponses200ContentApplicationjsonTotalcountNumber): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: DeleteParametersPathRepoSecretnameResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`(value: GetParameters141Responses200Content66): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashvariables(value: PostRequestBodyContentApplicationjsonNameValue): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/variables", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashvariablesSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathNameOwnerRepoResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/variables/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflows(value: GetResponses200ContentApplicationjsonWorkflows): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracket(value: GetParametersPathWorkflowid): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdisable(value: PutParametersPathWorkflowidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdispatches(value: PostRequestBodyContentApplicationjsonInputs): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashenable(value: PutParametersPathWorkflowidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashruns(value: GetParametersPathWorkflowidQueryActor): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashtiming(value: GetResponses167): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassignees(value: GetResponses200HeadersLink404): Self = StObject.set(x, "/repos/{owner}/{repo}/assignees", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket(value: GetParametersPathAssignee): Self = StObject.set(x, "/repos/{owner}/{repo}/assignees/{assignee}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinks(value: GetParametersQuery168): Self = StObject.set(x, "/repos/{owner}/{repo}/autolinks", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinksSlashLeftcurlybracketautolink_idRightcurlybracket(value: DeleteParametersPathAutolinkidResponses7): Self = StObject.set(x, "/repos/{owner}/{repo}/autolinks/{autolink_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautomated-security-fixes`(value: DeleteParameters141Responses): Self = StObject.set(x, "/repos/{owner}/{repo}/automated-security-fixes", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranches(value: GetParametersQueryProtected): Self = StObject.set(x, "/repos/{owner}/{repo}/branches", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracket(value: GetParametersPathBranch): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotection(value: DeleteParametersPathBranchResponses88): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashenforce_admins(value: DeleteParametersPathBranchResponses7): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_pull_request_reviews(value: GetResponses200Content177): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_signatures(value: GetResponses200Content176404): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checks(value: DeleteParametersPathBranchResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checksSlashcontexts(value: GetPostPut): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictions(value: GetResponses200Content179): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashapps(value: DeleteGetPostPut): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashteams(value: DeleteResponses200181422): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashusers(value: DeleteResponses200Content71422): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashrename(value: PostRequestBodyContentApplicationjsonNewname): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/rename", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runs`(value: PostRequestBodyContent182): Self = StObject.set(x, "/repos/{owner}/{repo}/check-runs", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracket`(value: GetParametersPathCheckrunid): Self = StObject.set(x, "/repos/{owner}/{repo}/check-runs/{check_run_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracketSlashannotations`(value: GetParametersPathCheckrunidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracketSlashrerequest`(value: PostResponses201403404422): Self = StObject.set(x, "/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suites`(value: PostRequestBodyContentApplicationjsonHeadsha): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracket`(value: GetParametersPathChecksuiteid): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites/{check_suite_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracketSlashcheck-runs`(value: GetParametersQueryCheckname): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracketSlashrerequest`(value: PostParametersPathChecksuiteidResponses201Content55): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashpreferences`(value: PatchRequestBodyContentApplicationjsonAutotriggerchecks): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites/preferences", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalerts`(value: GetParametersQueryToolguid): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket`(value: GetParametersPathAlertnumber): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracketSlashinstances`(value: GetParametersQueryPerpageRef): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashanalyses`(value: GetParametersQuerySarifid): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/analyses", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashanalysesSlashLeftcurlybracketanalysis_idRightcurlybracket`(value: DeleteParametersQueryConfirmdelete): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashcodeqlSlashdatabases`(value: GetResponses200Content194): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/codeql/databases", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashcodeqlSlashdatabasesSlashLeftcurlybracketlanguageRightcurlybracket`(value: GetParametersPathLanguage): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashdefault-setup`(value: GetResponses200Content196): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/default-setup", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashsarifs`(value: PostRequestBodyContentApplicationjsonCheckouturi): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/sarifs", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashsarifsSlashLeftcurlybracketsarif_idRightcurlybracket`(value: GetParametersPathRepoSarifid): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodeownersSlasherrors(value: GetParametersQuery205): Self = StObject.set(x, "/repos/{owner}/{repo}/codeowners/errors", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespaces(value: GetResponses401403404500): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashdevcontainers(value: GetResponses400401): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/devcontainers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashmachines(value: GetParametersQueryClientipLocation): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/machines", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashnew(value: GetParametersQueryClientipRef): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/new", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecrets(value: GetResponses200ContentApplicationjsonSecretsArrayTotalcountNumber): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: GetResponses200Content208): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecretsSlashpublic-key`(value: GetParameters141Responses200Content73): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaborators(value: GetParametersQueryAffiliationPage): Self = StObject.set(x, "/repos/{owner}/{repo}/collaborators", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteParametersPathRepoUsername): Self = StObject.set(x, "/repos/{owner}/{repo}/collaborators/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission(value: GetResponses200Content211): Self = StObject.set(x, "/repos/{owner}/{repo}/collaborators/{username}/permission", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcomments(value: GetResponses200Content212): Self = StObject.set(x, "/repos/{owner}/{repo}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket(value: DeleteParametersPathCommentidOwnerResponses7): Self = StObject.set(x, "/repos/{owner}/{repo}/comments/{comment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions(value: GetParametersPathCommentidOwnerQueryContentPage): Self = StObject.set(x, "/repos/{owner}/{repo}/comments/{comment_id}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathOwnerReactionid): Self = StObject.set(x, "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommits(value: GetParametersQueryAuthor): Self = StObject.set(x, "/repos/{owner}/{repo}/commits", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashbranches-where-head`(value: GetParametersPathCommitsha): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashcomments(value: GetParametersPathCommitshaQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{commit_sha}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashpulls(value: GetResponses200Content216): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{commit_sha}/pulls", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracket(value: GetParametersPathOwnerRef): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashcheck-runs`(value: GetParametersQueryAppidCheckname): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}/check-runs", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashcheck-suites`(value: GetParametersQueryChecknamePage): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}/check-suites", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashstatus(value: GetParametersPathOwnerRefQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}/status", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashstatuses(value: GetResponses200Content219): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}/statuses", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommunitySlashprofile(value: GetResponses200Content220): Self = StObject.set(x, "/repos/{owner}/{repo}/community/profile", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcompareSlashLeftcurlybracketbaseRightcurlybracketDotDotDotLeftcurlybracketheadRightcurlybracket(value: GetParametersPathBaseHead_): Self = StObject.set(x, "/repos/{owner}/{repo}/compare/{base}...{head}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcompareSlashLeftcurlybracketbaseheadRightcurlybracket(value: GetParametersPathBasehead): Self = StObject.set(x, "/repos/{owner}/{repo}/compare/{basehead}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcontentsSlashLeftcurlybracketpathRightcurlybracket(value: DeleteRequestBodyContentApplicationjsonAuthorBranch): Self = StObject.set(x, "/repos/{owner}/{repo}/contents/{path}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcontributors(value: GetParametersQueryAnon): Self = StObject.set(x, "/repos/{owner}/{repo}/contributors", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashalerts(value: GetParametersQueryEcosystem): Self = StObject.set(x, "/repos/{owner}/{repo}/dependabot/alerts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket(value: GetParametersPathAlertnumberOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecrets(value: GetResponses200ContentApplicationjson227): Self = StObject.set(x, "/repos/{owner}/{repo}/dependabot/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: GetResponses200Content228): Self = StObject.set(x, "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`(value: GetParameters141Responses200Content76): Self = StObject.set(x, "/repos/{owner}/{repo}/dependabot/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashcompareSlashLeftcurlybracketbaseheadRightcurlybracket`(value: GetParametersQuery229): Self = StObject.set(x, "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashsbom`(value: GetResponses200Content231): Self = StObject.set(x, "/repos/{owner}/{repo}/dependency-graph/sbom", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashsnapshots`(value: PostRequestBodyContent232): Self = StObject.set(x, "/repos/{owner}/{repo}/dependency-graph/snapshots", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeployments(value: GetParametersQueryEnvironment): Self = StObject.set(x, "/repos/{owner}/{repo}/deployments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracket(value: DeleteResponses234): Self = StObject.set(x, "/repos/{owner}/{repo}/deployments/{deployment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracketSlashstatuses(value: GetParametersPathDeploymentidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracketSlashstatusesSlashLeftcurlybracketstatus_idRightcurlybracket(value: GetParametersPathStatusid): Self = StObject.set(x, "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdispatches(value: PostRequestBodyContentApplicationjsonClientpayload): Self = StObject.set(x, "/repos/{owner}/{repo}/dispatches", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironments(value: GetResponses200ContentApplicationjsonEnvironments): Self = StObject.set(x, "/repos/{owner}/{repo}/environments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracket(value: DeleteParametersPathEnvironmentnameResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/environments/{environment_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment-branch-policies`(value: GetParametersPathEnvironmentnameQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment-branch-policiesSlashLeftcurlybracketbranch_policy_idRightcurlybracket`(value: DeleteParametersPathBranchpolicyidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment_protection_rules(value: GetParametersPathEnvironmentnameOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment_protection_rulesSlashLeftcurlybracketprotection_rule_idRightcurlybracket(value: DeleteParametersPathOwnerProtectionruleid): Self = StObject.set(x, "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment_protection_rulesSlashapps(value: GetParametersPathEnvironmentnameOwnerQueryPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents(value: GetParametersPathOwnerResponses200Content16): Self = StObject.set(x, "/repos/{owner}/{repo}/events", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashforks(value: GetParametersQueryPerpageSort): Self = StObject.set(x, "/repos/{owner}/{repo}/forks", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashblobs(value: PostRequestBodyContentApplicationjsonEncoding): Self = StObject.set(x, "/repos/{owner}/{repo}/git/blobs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashblobsSlashLeftcurlybracketfile_shaRightcurlybracket(value: GetParametersPathFilesha): Self = StObject.set(x, "/repos/{owner}/{repo}/git/blobs/{file_sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashcommits(value: PostRequestBodyContentApplicationjsonParents): Self = StObject.set(x, "/repos/{owner}/{repo}/git/commits", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracket(value: GetResponses200247): Self = StObject.set(x, "/repos/{owner}/{repo}/git/commits/{commit_sha}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashmatching-refsSlashLeftcurlybracketrefRightcurlybracket`(value: GetParameters248): Self = StObject.set(x, "/repos/{owner}/{repo}/git/matching-refs/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefSlashLeftcurlybracketrefRightcurlybracket(value: GetResponses200Content250): Self = StObject.set(x, "/repos/{owner}/{repo}/git/ref/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefs(value: PostRequestBodyContentApplicationjsonRefSha): Self = StObject.set(x, "/repos/{owner}/{repo}/git/refs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefsSlashLeftcurlybracketrefRightcurlybracket(value: DeleteParameters248Responses9): Self = StObject.set(x, "/repos/{owner}/{repo}/git/refs/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtags(value: PostRequestBodyContentApplicationjsonObject): Self = StObject.set(x, "/repos/{owner}/{repo}/git/tags", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtagsSlashLeftcurlybrackettag_shaRightcurlybracket(value: GetParametersPathTagsha): Self = StObject.set(x, "/repos/{owner}/{repo}/git/tags/{tag_sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtrees(value: PostRequestBodyContentApplicationjsonBasetree): Self = StObject.set(x, "/repos/{owner}/{repo}/git/trees", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtreesSlashLeftcurlybrackettree_shaRightcurlybracket(value: GetParametersPathTreesha): Self = StObject.set(x, "/repos/{owner}/{repo}/git/trees/{tree_sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooks(value: GetResponses200Content255): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket(value: DeleteParametersPathHookidOwnerResponses7): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig(value: GetParametersPathHookidOwnerResponses200Content2): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/config", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries(value: GetParametersPathHookidOwnerQueryCursor): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket(value: GetParametersPathDeliveryidHookidOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts(value: PostParametersPathDeliveryidHookidOwnerResponses202): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings(value: PostParametersPathHookidOwnerResponses7): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/pings", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashtests(value: PostParametersPathHookidOwnerResponses7): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/tests", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimport(value: PatchPut): Self = StObject.set(x, "/repos/{owner}/{repo}/import", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashauthors(value: GetParametersQuery262): Self = StObject.set(x, "/repos/{owner}/{repo}/import/authors", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashauthorsSlashLeftcurlybracketauthor_idRightcurlybracket(value: PatchParametersPathAuthorid): Self = StObject.set(x, "/repos/{owner}/{repo}/import/authors/{author_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashlarge_files(value: GetResponses200Content266): Self = StObject.set(x, "/repos/{owner}/{repo}/import/large_files", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashlfs(value: PatchRequestBodyContentApplicationjsonUselfs): Self = StObject.set(x, "/repos/{owner}/{repo}/import/lfs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinstallation(value: GetResponses200301404): Self = StObject.set(x, "/repos/{owner}/{repo}/installation", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinteraction-limits`(value: GetParameters141Responses200Content83): Self = StObject.set(x, "/repos/{owner}/{repo}/interaction-limits", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinvitations(value: GetResponses200Content268): Self = StObject.set(x, "/repos/{owner}/{repo}/invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket(value: DeleteParametersPathInvitationidOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/invitations/{invitation_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissues(value: GetParametersQueryCreator): Self = StObject.set(x, "/repos/{owner}/{repo}/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracket(value: GetParametersPathIssuenumber): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashassignees(value: DeleteRequestBodyContentApplicationjsonAssigneesArray): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/assignees", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket(value: GetParametersPathAssigneeIssuenumber): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashcomments(value: GetParametersPathIssuenumberQueryPerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashevents(value: GetParametersPathIssuenumberQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/events", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlabels(value: DeleteResponses283): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathIssuenumberName): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlock(value: DeleteParametersPathIssuenumberResponses92): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/lock", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashreactions(value: GetParametersPathIssuenumberQueryContentPage): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathIssuenumberOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashtimeline(value: GetResponses200Content285): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/timeline", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcomments(value: GetParametersQueryPerpageSince): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket(value: DeleteParametersPathCommentidOwnerResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/comments/{comment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions(value: GetParametersPathCommentidOwnerQueryContentPage): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathOwnerReactionid): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashevents(value: GetResponses200Content273): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/events", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlasheventsSlashLeftcurlybracketevent_idRightcurlybracket(value: GetParametersPathEventid): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/events/{event_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashkeys(value: GetResponses200Content286): Self = StObject.set(x, "/repos/{owner}/{repo}/keys", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashkeysSlashLeftcurlybracketkey_idRightcurlybracket(value: DeleteParametersPathKeyidOwnerResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/keys/{key_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlabels(value: GetResponses200Content278): Self = StObject.set(x, "/repos/{owner}/{repo}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathNameStringResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/labels/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlanguages(value: GetResponses200Content292): Self = StObject.set(x, "/repos/{owner}/{repo}/languages", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlfs(value: PutResponses293): Self = StObject.set(x, "/repos/{owner}/{repo}/lfs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlicense(value: GetResponses200Content294): Self = StObject.set(x, "/repos/{owner}/{repo}/license", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmerge-upstream`(value: PostRequestBodyContentApplicationjsonBranchString): Self = StObject.set(x, "/repos/{owner}/{repo}/merge-upstream", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmerges(value: PostRequestBodyContentApplicationjsonBase): Self = StObject.set(x, "/repos/{owner}/{repo}/merges", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestones(value: GetParametersQuerySortState): Self = StObject.set(x, "/repos/{owner}/{repo}/milestones", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestonesSlashLeftcurlybracketmilestone_numberRightcurlybracket(value: DeleteParametersPathMilestonenumberResponses7): Self = StObject.set(x, "/repos/{owner}/{repo}/milestones/{milestone_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestonesSlashLeftcurlybracketmilestone_numberRightcurlybracketSlashlabels(value: GetParametersPathMilestonenumberQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/milestones/{milestone_number}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashnotifications(value: GetParametersQueryParticipating): Self = StObject.set(x, "/repos/{owner}/{repo}/notifications", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpages(value: DeleteResponses404409422): Self = StObject.set(x, "/repos/{owner}/{repo}/pages", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuilds(value: GetResponses200Content308): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/builds", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuildsSlashLeftcurlybracketbuild_idRightcurlybracket(value: GetParametersPathBuildid): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/builds/{build_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuildsSlashlatest(value: GetResponses200Content310): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/builds/latest", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashdeployment(value: PostRequestBodyContentApplicationjsonArtifacturl): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/deployment", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashhealth(value: GetResponses200202404): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/health", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashprojects(value: GetParametersPathOwnerQueryPerpageState): Self = StObject.set(x, "/repos/{owner}/{repo}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpulls(value: GetParametersQueryHead): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracket(value: GetParametersPathPullnumber): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcodespaces(value: PostRequestBodyContent318): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcomments(value: GetParametersPathPullnumberQueryPerpageSince): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreplies(value: PostParametersPathOwnerPullnumber): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcommits(value: GetParametersPathPullnumberQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/commits", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashfiles(value: GetResponses200422500): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/files", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashmerge(value: GetParametersPathPullnumberResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/merge", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashrequested_reviewers(value: DeleteRequestBodyContentApplicationjsonTeamreviewers): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviews(value: GetResponses200Content324): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracket(value: DeleteResponses200Content325404422): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashcomments(value: GetParametersPathReviewidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashdismissals(value: PutRequestBodyContentApplicationjsonEvent): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashevents(value: PostRequestBodyContentApplicationjsonBodyEvent): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashupdate-branch`(value: PutResponses202403422): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcomments(value: GetParametersQuerySinceSort): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket(value: GetResponses200Content315): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/comments/{comment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions(value: GetParametersPathCommentidOwnerQueryContentPage): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathOwnerReactionid): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreadme(value: GetResponses200Content328): Self = StObject.set(x, "/repos/{owner}/{repo}/readme", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreadmeSlashLeftcurlybracketdirRightcurlybracket(value: GetParametersPathDir): Self = StObject.set(x, "/repos/{owner}/{repo}/readme/{dir}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleases(value: GetResponses200Content329): Self = StObject.set(x, "/repos/{owner}/{repo}/releases", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracket(value: DeleteParametersPathReleaseidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/{release_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashassets(value: GetParametersPathReleaseidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/{release_id}/assets", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashreactions(value: GetParametersQueryContentPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/{release_id}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathReactionidReleaseid): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashassetsSlashLeftcurlybracketasset_idRightcurlybracket(value: DeleteParametersPathAssetidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/assets/{asset_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashgenerate-notes`(value: PostRequestBodyContentApplicationjsonConfigurationfilepath): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/generate-notes", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashlatest(value: GetResponses200333): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/latest", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashtagsSlashLeftcurlybrackettagRightcurlybracket(value: GetParametersPathTag): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/tags/{tag}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashrulesSlashbranchesSlashLeftcurlybracketbranchRightcurlybracket(value: GetResponses200Content336): Self = StObject.set(x, "/repos/{owner}/{repo}/rules/branches/{branch}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashrulesets(value: GetParametersQueryIncludesparents): Self = StObject.set(x, "/repos/{owner}/{repo}/rulesets", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashrulesetsSlashLeftcurlybracketruleset_idRightcurlybracket(value: DeleteParameters337Responses108): Self = StObject.set(x, "/repos/{owner}/{repo}/rulesets/{ruleset_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalerts`(value: GetParametersPathOwnerQueryResolution): Self = StObject.set(x, "/repos/{owner}/{repo}/secret-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket`(value: GetResponses304503): Self = StObject.set(x, "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracketSlashlocations`(value: GetParametersPathAlertnumberQueryPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecurity-advisories`(value: GetParametersQueryAfterBefore): Self = StObject.set(x, "/repos/{owner}/{repo}/security-advisories", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecurity-advisoriesSlashLeftcurlybracketghsa_idRightcurlybracket`(value: GetParametersPathGhsaid): Self = StObject.set(x, "/repos/{owner}/{repo}/security-advisories/{ghsa_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecurity-advisoriesSlashreports`(value: PostRequestBodyContent344): Self = StObject.set(x, "/repos/{owner}/{repo}/security-advisories/reports", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstargazers(value: GetResponses200Content347): Self = StObject.set(x, "/repos/{owner}/{repo}/stargazers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcode_frequency(value: GetResponses202204): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/code_frequency", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcommit_activity(value: GetResponses200202204): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/commit_activity", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcontributors(value: GetResponses200Content350): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/contributors", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashparticipation(value: GetResponses200Content351): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/participation", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashpunch_card(value: GetResponses200204): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/punch_card", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatusesSlashLeftcurlybracketshaRightcurlybracket(value: PostParametersPathRepoSha): Self = StObject.set(x, "/repos/{owner}/{repo}/statuses/{sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsubscribers(value: GetParametersPathOwnerResponses97): Self = StObject.set(x, "/repos/{owner}/{repo}/subscribers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsubscription(value: GetResponses200Content353): Self = StObject.set(x, "/repos/{owner}/{repo}/subscription", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtags(value: GetResponses200Content355): Self = StObject.set(x, "/repos/{owner}/{repo}/tags", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtagsSlashprotection(value: GetResponses200Content356): Self = StObject.set(x, "/repos/{owner}/{repo}/tags/protection", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtagsSlashprotectionSlashLeftcurlybrackettag_protection_idRightcurlybracket(value: DeleteParametersPathTagprotectionid): Self = StObject.set(x, "/repos/{owner}/{repo}/tags/protection/{tag_protection_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtarballSlashLeftcurlybracketrefRightcurlybracket(value: GetParameters248Responses): Self = StObject.set(x, "/repos/{owner}/{repo}/tarball/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashteams(value: GetParametersPathOwnerResponses129): Self = StObject.set(x, "/repos/{owner}/{repo}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtopics(value: GetParametersPathOwnerQueryPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/topics", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashclones(value: GetParametersQueryPer): Self = StObject.set(x, "/repos/{owner}/{repo}/traffic/clones", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashpopularSlashpaths(value: GetResponses200Content360): Self = StObject.set(x, "/repos/{owner}/{repo}/traffic/popular/paths", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashpopularSlashreferrers(value: GetResponses200Content361): Self = StObject.set(x, "/repos/{owner}/{repo}/traffic/popular/referrers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashviews(value: GetResponses200Content362): Self = StObject.set(x, "/repos/{owner}/{repo}/traffic/views", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtransfer(value: PostRequestBodyContentApplicationjsonNewowner): Self = StObject.set(x, "/repos/{owner}/{repo}/transfer", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashvulnerability-alerts`(value: GetParameters141Responses): Self = StObject.set(x, "/repos/{owner}/{repo}/vulnerability-alerts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashzipballSlashLeftcurlybracketrefRightcurlybracket(value: GetParameters248Responses): Self = StObject.set(x, "/repos/{owner}/{repo}/zipball/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybrackettemplate_ownerRightcurlybracketSlashLeftcurlybrackettemplate_repoRightcurlybracketSlashgenerate(value: PostParametersPathTemplateowner): Self = StObject.set(x, "/repos/{template_owner}/{template_repo}/generate", value.asInstanceOf[js.Any])
      
      inline def setSlashrepositories(value: GetParametersQuery364): Self = StObject.set(x, "/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecrets(value: GetParametersPathEnvironmentnameRepositoryid): Self = StObject.set(x, "/repositories/{repository_id}/environments/{environment_name}/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: DeleteParametersPathEnvironmentnameRepositoryidSecretnameResponses): Self = StObject.set(x, "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecretsSlashpublic-key`(value: GetParameters365): Self = StObject.set(x, "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashvariables(value: GetParametersPathEnvironmentnameRepositoryidQuery68): Self = StObject.set(x, "/repositories/{repository_id}/environments/{environment_name}/variables", value.asInstanceOf[js.Any])
      
      inline def setSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashvariablesSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathNameRepositoryid): Self = StObject.set(x, "/repositories/{repository_id}/environments/{environment_name}/variables/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashcode(value: GetParametersQueryOrder): Self = StObject.set(x, "/search/code", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashcommits(value: GetParametersQueryQ): Self = StObject.set(x, "/search/commits", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashissues(value: GetParametersQueryOrderPage): Self = StObject.set(x, "/search/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashlabels(value: GetParametersQueryPerpageQ): Self = StObject.set(x, "/search/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashrepositories(value: GetParametersQueryQSort): Self = StObject.set(x, "/search/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashtopics(value: GetParametersQueryPagePerpageQ): Self = StObject.set(x, "/search/topics", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashusers(value: GetParametersQueryOrderPagePerpage): Self = StObject.set(x, "/search/users", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracket(value: DeleteParametersPathTeamidResponses75): Self = StObject.set(x, "/teams/{team_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussions(value: GetParametersPathTeamidQueryDirectionPage): Self = StObject.set(x, "/teams/{team_id}/discussions", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket(value: DeleteParametersPathDiscussionnumberTeamidResponses): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments(value: GetParametersPathDiscussionnumberTeamidQueryDirectionPage): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket(value: DeleteParametersPathCommentnumberDiscussionnumberResponses): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions(value: GetParametersPathCommentnumberDiscussionnumberQueryContentPage): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions(value: GetParametersPathDiscussionnumberTeamidQueryContentPage): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashinvitations(value: GetParametersPathTeamidQueryPage): Self = StObject.set(x, "/teams/{team_id}/invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembers(value: GetParametersPathTeamidQueryPerpageRole): Self = StObject.set(x, "/teams/{team_id}/members", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteParametersPathTeamidUsername): Self = StObject.set(x, "/teams/{team_id}/members/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket(value: GetResponses200Content122404): Self = StObject.set(x, "/teams/{team_id}/memberships/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashprojects(value: GetResponses200Content124404): Self = StObject.set(x, "/teams/{team_id}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket(value: DeleteParametersPathProjectidTeamidResponses75): Self = StObject.set(x, "/teams/{team_id}/projects/{project_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashrepos(value: GetResponses200Content48): Self = StObject.set(x, "/teams/{team_id}/repos", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket(value: DeleteParametersPathRepoTeamidResponses): Self = StObject.set(x, "/teams/{team_id}/repos/{owner}/{repo}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashteams(value: GetResponses200Content87403404): Self = StObject.set(x, "/teams/{team_id}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashuser(value: GetResponses200Content368): Self = StObject.set(x, "/user", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashblocks(value: GetResponses200Content71304): Self = StObject.set(x, "/user/blocks", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashblocksSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses371): Self = StObject.set(x, "/user/blocks/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespaces(value: GetParametersQueryPerpageRepositoryid): Self = StObject.set(x, "/user/codespaces", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket(value: DeleteResponses202304401): Self = StObject.set(x, "/user/codespaces/{codespace_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashexports(value: PostResponses202401403): Self = StObject.set(x, "/user/codespaces/{codespace_name}/exports", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashexportsSlashLeftcurlybracketexport_idRightcurlybracket(value: GetParametersPathExportid): Self = StObject.set(x, "/user/codespaces/{codespace_name}/exports/{export_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashmachines(value: GetResponses304401403404500): Self = StObject.set(x, "/user/codespaces/{codespace_name}/machines", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashpublish(value: PostRequestBodyContentApplicationjsonNamePrivate): Self = StObject.set(x, "/user/codespaces/{codespace_name}/publish", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstart(value: PostResponses402): Self = StObject.set(x, "/user/codespaces/{codespace_name}/start", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop(value: PostResponses200Content89401): Self = StObject.set(x, "/user/codespaces/{codespace_name}/stop", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashsecrets(value: GetResponses200ContentApplicationjson373): Self = StObject.set(x, "/user/codespaces/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: DeleteParametersPath375Responses): Self = StObject.set(x, "/user/codespaces/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories(value: GetResponses200401403404500): Self = StObject.set(x, "/user/codespaces/secrets/{secret_name}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathRepositoryidNumber): Self = StObject.set(x, "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashuserSlashcodespacesSlashsecretsSlashpublic-key`(value: GetResponses200Content374): Self = StObject.set(x, "/user/codespaces/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashdockerSlashconflicts(value: GetResponses200Content78): Self = StObject.set(x, "/user/docker/conflicts", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashemailSlashvisibility(value: PatchRequestBodyContentApplicationjson381): Self = StObject.set(x, "/user/email/visibility", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashemails(value: DeleteRequestBodyResponses135): Self = StObject.set(x, "/user/emails", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashfollowers(value: GetResponses200HeadersLink304): Self = StObject.set(x, "/user/followers", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashfollowing(value: GetResponses200HeadersLink304): Self = StObject.set(x, "/user/following", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashfollowingSlashLeftcurlybracketusernameRightcurlybracket(value: GetParametersPath370): Self = StObject.set(x, "/user/following/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashgpg_keys(value: GetResponses200Content383): Self = StObject.set(x, "/user/gpg_keys", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashgpg_keysSlashLeftcurlybracketgpg_key_idRightcurlybracket(value: DeleteParametersPathGpgkeyidResponses135): Self = StObject.set(x, "/user/gpg_keys/{gpg_key_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashinstallations(value: GetResponses200ContentApplicationjsonInstallations304): Self = StObject.set(x, "/user/installations", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashrepositories(value: GetParametersPathInstallationidQueryPage): Self = StObject.set(x, "/user/installations/{installation_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathInstallationidRepositoryid): Self = StObject.set(x, "/user/installations/{installation_id}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashuserSlashinteraction-limits`(value: Get385): Self = StObject.set(x, "/user/interaction-limits", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashissues(value: GetParameters386): Self = StObject.set(x, "/user/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashkeys(value: GetResponses200Content387): Self = StObject.set(x, "/user/keys", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashkeysSlashLeftcurlybracketkey_idRightcurlybracket(value: DeleteParametersPath389Responses371): Self = StObject.set(x, "/user/keys/{key_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmarketplace_purchases(value: GetResponses304401404): Self = StObject.set(x, "/user/marketplace_purchases", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmarketplace_purchasesSlashstubbed(value: GetResponses200Content390): Self = StObject.set(x, "/user/marketplace_purchases/stubbed", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmembershipsSlashorgs(value: GetParametersQueryPagePerpageState): Self = StObject.set(x, "/user/memberships/orgs", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmembershipsSlashorgsSlashLeftcurlybracketorgRightcurlybracket(value: GetParameters47Responses200Content90): Self = StObject.set(x, "/user/memberships/orgs/{org}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrations(value: GetResponses200Content93304): Self = StObject.set(x, "/user/migrations", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket(value: GetParametersPath394): Self = StObject.set(x, "/user/migrations/{migration_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive(value: DeleteParameters395Responses371): Self = StObject.set(x, "/user/migrations/{migration_id}/archive", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock(value: DeleteParametersPathMigrationidReponame): Self = StObject.set(x, "/user/migrations/{migration_id}/repos/{repo_name}/lock", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories(value: GetParametersPath394QueryPage): Self = StObject.set(x, "/user/migrations/{migration_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashorgs(value: GetResponses200Content45HeadersLink): Self = StObject.set(x, "/user/orgs", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackages(value: GetParametersQueryPackagetypePage): Self = StObject.set(x, "/user/packages", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket(value: DeleteParametersPathPackagenamePackagetypeResponses99): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore(value: PostParametersPathPackagenamePackagetypeQueryToken): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions(value: GetParametersPathPackagenamePackagetypeQueryState): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}/versions", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket(value: DeleteParametersPathPackagetypePackageversionidResponses99): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}/versions/{package_version_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore(value: PostParametersPathPackagetypePackageversionidResponses99): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashprojects(value: PostRequestBodyContentApplicationjsonBodyNameString): Self = StObject.set(x, "/user/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpublic_emails(value: GetResponses200Content382HeadersLink): Self = StObject.set(x, "/user/public_emails", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashrepos(value: GetParametersQueryType): Self = StObject.set(x, "/user/repos", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashrepository_invitations(value: GetResponses200Content268304): Self = StObject.set(x, "/user/repository_invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashrepository_invitationsSlashLeftcurlybracketinvitation_idRightcurlybracket(value: DeleteParametersPath397): Self = StObject.set(x, "/user/repository_invitations/{invitation_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashsocial_accounts(value: DeleteRequestBodyContentApplicationjsonAccounturlsResponses135): Self = StObject.set(x, "/user/social_accounts", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashssh_signing_keys(value: GetResponses200Content406): Self = StObject.set(x, "/user/ssh_signing_keys", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashssh_signing_keysSlashLeftcurlybracketssh_signing_key_idRightcurlybracket(value: DeleteParametersPathSshsigningkeyidResponses371): Self = StObject.set(x, "/user/ssh_signing_keys/{ssh_signing_key_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashstarred(value: GetParametersQueryDirectionPagePerpage): Self = StObject.set(x, "/user/starred", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashstarredSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket(value: DeleteParameters141Responses371): Self = StObject.set(x, "/user/starred/{owner}/{repo}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashsubscriptions(value: GetResponses200Content48304): Self = StObject.set(x, "/user/subscriptions", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashteams(value: GetResponses200Content408): Self = StObject.set(x, "/user/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashusers(value: GetParametersQuery411): Self = StObject.set(x, "/users", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracket(value: GetResponses200Content368404): Self = StObject.set(x, "/users/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashdockerSlashconflicts(value: GetParametersPath370Responses200401403): Self = StObject.set(x, "/users/{username}/docker/conflicts", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashevents(value: GetParametersPath370QueryPage): Self = StObject.set(x, "/users/{username}/events", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlasheventsSlashorgsSlashLeftcurlybracketorgRightcurlybracket(value: GetParametersPathOrgUsername): Self = StObject.set(x, "/users/{username}/events/orgs/{org}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlasheventsSlashpublic(value: GetParametersPath370QueryPage): Self = StObject.set(x, "/users/{username}/events/public", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowers(value: GetParametersPath370QueryPageResponses97): Self = StObject.set(x, "/users/{username}/followers", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowing(value: GetParametersPath370QueryPageResponses97): Self = StObject.set(x, "/users/{username}/following", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowingSlashLeftcurlybrackettarget_userRightcurlybracket(value: GetParametersPathTargetuser): Self = StObject.set(x, "/users/{username}/following/{target_user}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashgists(value: GetParametersPath370QueryPerpage): Self = StObject.set(x, "/users/{username}/gists", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashgpg_keys(value: GetResponses412): Self = StObject.set(x, "/users/{username}/gpg_keys", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashhovercard(value: GetParametersQuerySubjectid): Self = StObject.set(x, "/users/{username}/hovercard", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashinstallation(value: GetParametersPath370Responses200Content6): Self = StObject.set(x, "/users/{username}/installation", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashkeys(value: GetResponses200Content414): Self = StObject.set(x, "/users/{username}/keys", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashorgs(value: GetResponses415): Self = StObject.set(x, "/users/{username}/orgs", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackages(value: GetParametersPath370QueryPackagetypePage): Self = StObject.set(x, "/users/{username}/packages", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket(value: DeleteParametersPathPackagetypeUsernameResponses99): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore(value: PostParametersPathPackagetypeUsernameQueryToken): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions(value: GetResponses200401403404): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}/versions", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket(value: DeleteParametersPathPackagenamePackagetypePackageversionid): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore(value: PostParametersPathPackagenamePackagetypePackageversionid): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashprojects(value: GetParametersPath370QueryPerpageState): Self = StObject.set(x, "/users/{username}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashreceived_events(value: GetParametersPath370QueryPage): Self = StObject.set(x, "/users/{username}/received_events", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashreceived_eventsSlashpublic(value: GetParametersPath370QueryPage): Self = StObject.set(x, "/users/{username}/received_events/public", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashrepos(value: GetParametersQuerySortType): Self = StObject.set(x, "/users/{username}/repos", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashactions(value: GetParametersPath370Responses200Content110): Self = StObject.set(x, "/users/{username}/settings/billing/actions", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashpackages(value: GetParametersPath370Responses200Content111): Self = StObject.set(x, "/users/{username}/settings/billing/packages", value.asInstanceOf[js.Any])
      
      inline def `setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`(value: GetParametersPath370Responses200Content112): Self = StObject.set(x, "/users/{username}/settings/billing/shared-storage", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsocial_accounts(value: GetResponses416): Self = StObject.set(x, "/users/{username}/social_accounts", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashssh_signing_keys(value: GetResponses417): Self = StObject.set(x, "/users/{username}/ssh_signing_keys", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashstarred(value: GetParametersPath370QueryDirectionPagePerpage): Self = StObject.set(x, "/users/{username}/starred", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsubscriptions(value: GetParametersPath370QueryPageResponses104): Self = StObject.set(x, "/users/{username}/subscriptions", value.asInstanceOf[js.Any])
      
      inline def setSlashversions(value: Get419): Self = StObject.set(x, "/versions", value.asInstanceOf[js.Any])
      
      inline def setSlashzen(value: GetResponses200ContentTextplainString): Self = StObject.set(x, "/zen", value.asInstanceOf[js.Any])
    }
  }
  
  type webhooks = Record[String, scala.Nothing]
}
