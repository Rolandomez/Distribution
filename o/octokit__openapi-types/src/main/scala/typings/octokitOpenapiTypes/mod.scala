package typings.octokitOpenapiTypes

import typings.octokitOpenapiTypes.anon.Accepted
import typings.octokitOpenapiTypes.anon.Actionsbillingusage
import typings.octokitOpenapiTypes.anon.Actionscachekey
import typings.octokitOpenapiTypes.anon.Delete
import typings.octokitOpenapiTypes.anon.Delete375
import typings.octokitOpenapiTypes.anon.Delete50
import typings.octokitOpenapiTypes.anon.DeleteGet
import typings.octokitOpenapiTypes.anon.DeleteGetPatch
import typings.octokitOpenapiTypes.anon.DeleteGetPatchPut
import typings.octokitOpenapiTypes.anon.DeleteGetPost
import typings.octokitOpenapiTypes.anon.DeleteGetPostPut
import typings.octokitOpenapiTypes.anon.DeleteGetPut
import typings.octokitOpenapiTypes.anon.DeleteParameters100
import typings.octokitOpenapiTypes.anon.DeleteParameters144Responses
import typings.octokitOpenapiTypes.anon.DeleteParameters144Responses362
import typings.octokitOpenapiTypes.anon.DeleteParameters144Responses409Unknown
import typings.octokitOpenapiTypes.anon.DeleteParameters157
import typings.octokitOpenapiTypes.anon.DeleteParameters241Responses8
import typings.octokitOpenapiTypes.anon.DeleteParameters385Responses362
import typings.octokitOpenapiTypes.anon.DeleteParametersPath135Responses62
import typings.octokitOpenapiTypes.anon.DeleteParametersPath366Responses
import typings.octokitOpenapiTypes.anon.DeleteParametersPath379Responses362
import typings.octokitOpenapiTypes.anon.DeleteParametersPath388
import typings.octokitOpenapiTypes.anon.DeleteParametersPathArtifactidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathAssetidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathAutolinkidResponses6
import typings.octokitOpenapiTypes.anon.DeleteParametersPathBranchResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathBranchResponses6
import typings.octokitOpenapiTypes.anon.DeleteParametersPathBranchResponses92
import typings.octokitOpenapiTypes.anon.DeleteParametersPathBranchpolicyidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCacheid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCodespacename
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCommentidOwnerResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCommentidOwnerResponses6
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCommentnumberDiscussionnumberResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCommentnumberResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathCredentialid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathDiscussionnumberOrg
import typings.octokitOpenapiTypes.anon.DeleteParametersPathDiscussionnumberResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathDiscussionnumberTeamidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathEnterpriseName
import typings.octokitOpenapiTypes.anon.DeleteParametersPathEnterpriseOrgid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathEnterpriseRunneridResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathEnvironmentnameRepositoryidSecretnameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathEnvironmentnameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathGpgkeyidResponses140
import typings.octokitOpenapiTypes.anon.DeleteParametersPathHookidOwnerResponses6
import typings.octokitOpenapiTypes.anon.DeleteParametersPathHookidResponses6
import typings.octokitOpenapiTypes.anon.DeleteParametersPathInstallationidRepositoryid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathInvitationid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathInvitationidOwner
import typings.octokitOpenapiTypes.anon.DeleteParametersPathIssuenumberName
import typings.octokitOpenapiTypes.anon.DeleteParametersPathIssuenumberOwner
import typings.octokitOpenapiTypes.anon.DeleteParametersPathIssuenumberResponses96
import typings.octokitOpenapiTypes.anon.DeleteParametersPathKeyidOwnerResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathMigrationidReponame
import typings.octokitOpenapiTypes.anon.DeleteParametersPathMilestonenumberResponses6
import typings.octokitOpenapiTypes.anon.DeleteParametersPathNameOrg
import typings.octokitOpenapiTypes.anon.DeleteParametersPathNameOwner
import typings.octokitOpenapiTypes.anon.DeleteParametersPathNameOwnerRepoResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOrgRepositoryid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOrgResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOrgRunnergroupidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOrgRunneridResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOwnerReactionid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathOwnerRepoResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackagenamePackagetypePackageversionid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackagenamePackagetypeResponses401403404
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackagetypePackageversionidResponses401403404
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackagetypeUsernameResponses401403404
import typings.octokitOpenapiTypes.anon.DeleteParametersPathPackageversionidResponses401403404
import typings.octokitOpenapiTypes.anon.DeleteParametersPathProjectidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathProjectidTeamidResponses90
import typings.octokitOpenapiTypes.anon.DeleteParametersPathReactionid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathReactionidReleaseid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathReleaseidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepoResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepoSecretnameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepoTeamidResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepoUsernameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathReponame
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepositoryid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepositoryidNumber
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRepositoryidSecretname
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRoleid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRunnergroupidRunnerid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathRunnerid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathSecretnameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathSshsigningkeyidResponses362
import typings.octokitOpenapiTypes.anon.DeleteParametersPathTagprotectionid
import typings.octokitOpenapiTypes.anon.DeleteParametersPathTeamidResponses90
import typings.octokitOpenapiTypes.anon.DeleteParametersPathTeamidUsername
import typings.octokitOpenapiTypes.anon.DeleteParametersPathTeamidUsernameResponses126
import typings.octokitOpenapiTypes.anon.DeleteParametersPathTeamslugResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersPathUsernameResponses
import typings.octokitOpenapiTypes.anon.DeleteParametersQueryConfirmdelete
import typings.octokitOpenapiTypes.anon.DeleteParametersQueryKeyRef
import typings.octokitOpenapiTypes.anon.DeleteParametersRequestBodyContentApplicationjsonEmailsArray
import typings.octokitOpenapiTypes.anon.DeletePatch
import typings.octokitOpenapiTypes.anon.DeletePost
import typings.octokitOpenapiTypes.anon.DeletePut
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyContentApplicationjsonAppsArray
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyContentApplicationjsonAuthorBranch
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyContentApplicationjsonTeamreviewers
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyContentApplicationjsonTeamsArray
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyContentApplicationjsonUsers
import typings.octokitOpenapiTypes.anon.DeleteRequestBodyResponses
import typings.octokitOpenapiTypes.anon.DeleteResponses126
import typings.octokitOpenapiTypes.anon.DeleteResponses140
import typings.octokitOpenapiTypes.anon.DeleteResponses147
import typings.octokitOpenapiTypes.anon.DeleteResponses200Content315404422
import typings.octokitOpenapiTypes.anon.DeleteResponses202304
import typings.octokitOpenapiTypes.anon.DeleteResponses227
import typings.octokitOpenapiTypes.anon.DeleteResponses307
import typings.octokitOpenapiTypes.anon.DeleteResponses356
import typings.octokitOpenapiTypes.anon.DeleteResponses362
import typings.octokitOpenapiTypes.anon.DeleteResponses401403404
import typings.octokitOpenapiTypes.anon.DeleteResponses403500
import typings.octokitOpenapiTypes.anon.DeleteResponses403ContentApplicationjsonErrors
import typings.octokitOpenapiTypes.anon.DeleteResponses404410
import typings.octokitOpenapiTypes.anon.DeleteResponses422ContentApplicationjsonDocumentationurl
import typings.octokitOpenapiTypes.anon.DeleteResponses62
import typings.octokitOpenapiTypes.anon.DeleteResponses90
import typings.octokitOpenapiTypes.anon.DeleteResponses92
import typings.octokitOpenapiTypes.anon.DeleteResponses96
import typings.octokitOpenapiTypes.anon.Get
import typings.octokitOpenapiTypes.anon.GetParameters
import typings.octokitOpenapiTypes.anon.GetParameters144Responses200Content17
import typings.octokitOpenapiTypes.anon.GetParameters144Responses200Content18
import typings.octokitOpenapiTypes.anon.GetParameters144Responses200Content21
import typings.octokitOpenapiTypes.anon.GetParameters144Responses200Content71
import typings.octokitOpenapiTypes.anon.GetParameters144Responses200Content77
import typings.octokitOpenapiTypes.anon.GetParameters144Responses404Unknown
import typings.octokitOpenapiTypes.anon.GetParameters159
import typings.octokitOpenapiTypes.anon.GetParameters241
import typings.octokitOpenapiTypes.anon.GetParameters241Responses
import typings.octokitOpenapiTypes.anon.GetParameters34
import typings.octokitOpenapiTypes.anon.GetParameters348
import typings.octokitOpenapiTypes.anon.GetParameters376
import typings.octokitOpenapiTypes.anon.GetParameters386
import typings.octokitOpenapiTypes.anon.GetParameters74
import typings.octokitOpenapiTypes.anon.GetParametersPath139QueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPath361
import typings.octokitOpenapiTypes.anon.GetParametersPath361QueryPackagetype
import typings.octokitOpenapiTypes.anon.GetParametersPath361QueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPath361QueryPagePerpageSort
import typings.octokitOpenapiTypes.anon.GetParametersPath361QueryPageResponses102
import typings.octokitOpenapiTypes.anon.GetParametersPath361QueryPageResponses109
import typings.octokitOpenapiTypes.anon.GetParametersPath361QueryPerpageState
import typings.octokitOpenapiTypes.anon.GetParametersPath361QuerySince
import typings.octokitOpenapiTypes.anon.GetParametersPath361Responses200Content30
import typings.octokitOpenapiTypes.anon.GetParametersPath361Responses200Content32
import typings.octokitOpenapiTypes.anon.GetParametersPath361Responses200Content33
import typings.octokitOpenapiTypes.anon.GetParametersPath361Responses200Content5
import typings.octokitOpenapiTypes.anon.GetParametersPath383
import typings.octokitOpenapiTypes.anon.GetParametersPath383QueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathAccountid
import typings.octokitOpenapiTypes.anon.GetParametersPathAlertnumber
import typings.octokitOpenapiTypes.anon.GetParametersPathAlertnumberQueryPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersPathAppslug
import typings.octokitOpenapiTypes.anon.GetParametersPathArchiveformat
import typings.octokitOpenapiTypes.anon.GetParametersPathAssignee
import typings.octokitOpenapiTypes.anon.GetParametersPathAttemptnumber
import typings.octokitOpenapiTypes.anon.GetParametersPathAttemptnumberQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathBaseHead_
import typings.octokitOpenapiTypes.anon.GetParametersPathBasehead
import typings.octokitOpenapiTypes.anon.GetParametersPathBranch
import typings.octokitOpenapiTypes.anon.GetParametersPathBuildid
import typings.octokitOpenapiTypes.anon.GetParametersPathCheckrunid
import typings.octokitOpenapiTypes.anon.GetParametersPathCheckrunidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathChecksuiteid
import typings.octokitOpenapiTypes.anon.GetParametersPathCommentidOwnerQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathCommentnumberDiscussionnumberQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathCommitsha
import typings.octokitOpenapiTypes.anon.GetParametersPathCommitshaQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathDeliveryid
import typings.octokitOpenapiTypes.anon.GetParametersPathDeliveryidHookid
import typings.octokitOpenapiTypes.anon.GetParametersPathDeliveryidHookidOwner
import typings.octokitOpenapiTypes.anon.GetParametersPathDeploymentidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathDir
import typings.octokitOpenapiTypes.anon.GetParametersPathDiscussionnumberQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathDiscussionnumberTeamidQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathDiscussionnumberTeamidQueryDirectionPage
import typings.octokitOpenapiTypes.anon.GetParametersPathEnterprise
import typings.octokitOpenapiTypes.anon.GetParametersPathEnvironmentnameQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathEnvironmentnameRepositoryid
import typings.octokitOpenapiTypes.anon.GetParametersPathEventid
import typings.octokitOpenapiTypes.anon.GetParametersPathExportid
import typings.octokitOpenapiTypes.anon.GetParametersPathFilesha
import typings.octokitOpenapiTypes.anon.GetParametersPathGistidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathGroupid
import typings.octokitOpenapiTypes.anon.GetParametersPathHookidOwnerQueryCursor
import typings.octokitOpenapiTypes.anon.GetParametersPathHookidOwnerResponses200Content2
import typings.octokitOpenapiTypes.anon.GetParametersPathHookidResponses200Content2
import typings.octokitOpenapiTypes.anon.GetParametersPathInstallationidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathInvitationidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathIssuenumber
import typings.octokitOpenapiTypes.anon.GetParametersPathIssuenumberQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersPathIssuenumberQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathIssuenumberQuerySince
import typings.octokitOpenapiTypes.anon.GetParametersPathJobid
import typings.octokitOpenapiTypes.anon.GetParametersPathJobidResponses
import typings.octokitOpenapiTypes.anon.GetParametersPathKey
import typings.octokitOpenapiTypes.anon.GetParametersPathLanguage
import typings.octokitOpenapiTypes.anon.GetParametersPathLicense
import typings.octokitOpenapiTypes.anon.GetParametersPathMigrationid
import typings.octokitOpenapiTypes.anon.GetParametersPathMigrationidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathMilestonenumberQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathNameString
import typings.octokitOpenapiTypes.anon.GetParametersPathOrg
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgQueryBefore
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgQueryPageResponses200Content31
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgQueryPageResponses200ContentApplicationjsonRunners
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgResponses200Content17
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgResponses200Content18
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgResponses200Content21
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgResponses200Content30
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgResponses200Content32
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgResponses200Content33
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgResponses200Content94
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgRunnergroupidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathOrgUsername
import typings.octokitOpenapiTypes.anon.GetParametersPathOrganizationid
import typings.octokitOpenapiTypes.anon.GetParametersPathOwner
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerQueryPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerQueryPerpageState
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerQueryResolution
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerRef
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerRefQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerResponses102
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerResponses133
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerResponses200Content35
import typings.octokitOpenapiTypes.anon.GetParametersPathOwnerResponses200ContentApplicationjsonRunners
import typings.octokitOpenapiTypes.anon.GetParametersPathPackagenamePackagetypeQueryState
import typings.octokitOpenapiTypes.anon.GetParametersPathPlanid
import typings.octokitOpenapiTypes.anon.GetParametersPathPullnumber
import typings.octokitOpenapiTypes.anon.GetParametersPathPullnumberQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathPullnumberQuerySinceSort
import typings.octokitOpenapiTypes.anon.GetParametersPathPullnumberResponses404Unknown
import typings.octokitOpenapiTypes.anon.GetParametersPathQuery
import typings.octokitOpenapiTypes.anon.GetParametersPathReleaseidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathRepoSarifid
import typings.octokitOpenapiTypes.anon.GetParametersPathReviewidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathRunidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathRunnergroupidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathSecretnameQueryPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersPathSha
import typings.octokitOpenapiTypes.anon.GetParametersPathStatusid
import typings.octokitOpenapiTypes.anon.GetParametersPathTag
import typings.octokitOpenapiTypes.anon.GetParametersPathTagsha
import typings.octokitOpenapiTypes.anon.GetParametersPathTargetuser
import typings.octokitOpenapiTypes.anon.GetParametersPathTeamidQueryDirectionPage
import typings.octokitOpenapiTypes.anon.GetParametersPathTeamidQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathTeamidQueryPerpageRole
import typings.octokitOpenapiTypes.anon.GetParametersPathTeamslugQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersPathThreadid
import typings.octokitOpenapiTypes.anon.GetParametersPathTreesha
import typings.octokitOpenapiTypes.anon.GetParametersPathWorkflowid
import typings.octokitOpenapiTypes.anon.GetParametersPathWorkflowidQueryActor
import typings.octokitOpenapiTypes.anon.GetParametersQuery
import typings.octokitOpenapiTypes.anon.GetParametersQuery112
import typings.octokitOpenapiTypes.anon.GetParametersQuery167
import typings.octokitOpenapiTypes.anon.GetParametersQuery197
import typings.octokitOpenapiTypes.anon.GetParametersQuery223
import typings.octokitOpenapiTypes.anon.GetParametersQuery255
import typings.octokitOpenapiTypes.anon.GetParametersQuery347
import typings.octokitOpenapiTypes.anon.GetParametersQuery392
import typings.octokitOpenapiTypes.anon.GetParametersQueryActor
import typings.octokitOpenapiTypes.anon.GetParametersQueryAffiliation
import typings.octokitOpenapiTypes.anon.GetParametersQueryAffiliationBefore
import typings.octokitOpenapiTypes.anon.GetParametersQueryAffiliationPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryAfter
import typings.octokitOpenapiTypes.anon.GetParametersQueryAll
import typings.octokitOpenapiTypes.anon.GetParametersQueryAnon
import typings.octokitOpenapiTypes.anon.GetParametersQueryAppidCheckname
import typings.octokitOpenapiTypes.anon.GetParametersQueryArchivedstate
import typings.octokitOpenapiTypes.anon.GetParametersQueryAuthor
import typings.octokitOpenapiTypes.anon.GetParametersQueryBefore
import typings.octokitOpenapiTypes.anon.GetParametersQueryCheckname
import typings.octokitOpenapiTypes.anon.GetParametersQueryChecknamePage
import typings.octokitOpenapiTypes.anon.GetParametersQueryClientipLocation
import typings.octokitOpenapiTypes.anon.GetParametersQueryClientipRef
import typings.octokitOpenapiTypes.anon.GetParametersQueryCollab
import typings.octokitOpenapiTypes.anon.GetParametersQueryContentPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryContentPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryCount
import typings.octokitOpenapiTypes.anon.GetParametersQueryCountFilter
import typings.octokitOpenapiTypes.anon.GetParametersQueryCreator
import typings.octokitOpenapiTypes.anon.GetParametersQueryCursor
import typings.octokitOpenapiTypes.anon.GetParametersQueryDirection
import typings.octokitOpenapiTypes.anon.GetParametersQueryDirectionPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryDirectionPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryDisplayname
import typings.octokitOpenapiTypes.anon.GetParametersQueryEnvironment
import typings.octokitOpenapiTypes.anon.GetParametersQueryExclude
import typings.octokitOpenapiTypes.anon.GetParametersQueryFeatured
import typings.octokitOpenapiTypes.anon.GetParametersQueryFilter
import typings.octokitOpenapiTypes.anon.GetParametersQueryFilterPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryFilterPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryHead
import typings.octokitOpenapiTypes.anon.GetParametersQueryInclude
import typings.octokitOpenapiTypes.anon.GetParametersQueryLogin
import typings.octokitOpenapiTypes.anon.GetParametersQueryOrder
import typings.octokitOpenapiTypes.anon.GetParametersQueryOrderPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryOrderPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryOutdated
import typings.octokitOpenapiTypes.anon.GetParametersQueryPackagetype
import typings.octokitOpenapiTypes.anon.GetParametersQueryPage
import typings.octokitOpenapiTypes.anon.GetParametersQueryPagePerpage
import typings.octokitOpenapiTypes.anon.GetParametersQueryPagePerpageQ
import typings.octokitOpenapiTypes.anon.GetParametersQueryPagePerpageSort
import typings.octokitOpenapiTypes.anon.GetParametersQueryPagePerpageState
import typings.octokitOpenapiTypes.anon.GetParametersQueryParticipating
import typings.octokitOpenapiTypes.anon.GetParametersQueryPer
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageQ
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageRef
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageRepositoryid
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageRole
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageSince
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageSort
import typings.octokitOpenapiTypes.anon.GetParametersQueryPerpageState
import typings.octokitOpenapiTypes.anon.GetParametersQueryPinned
import typings.octokitOpenapiTypes.anon.GetParametersQueryProtected
import typings.octokitOpenapiTypes.anon.GetParametersQueryQ
import typings.octokitOpenapiTypes.anon.GetParametersQueryQSort
import typings.octokitOpenapiTypes.anon.GetParametersQueryResolution
import typings.octokitOpenapiTypes.anon.GetParametersQueryRole
import typings.octokitOpenapiTypes.anon.GetParametersQueryS
import typings.octokitOpenapiTypes.anon.GetParametersQuerySarifid
import typings.octokitOpenapiTypes.anon.GetParametersQuerySince
import typings.octokitOpenapiTypes.anon.GetParametersQuerySinceSort
import typings.octokitOpenapiTypes.anon.GetParametersQuerySortState
import typings.octokitOpenapiTypes.anon.GetParametersQuerySortType
import typings.octokitOpenapiTypes.anon.GetParametersQueryStartIndex
import typings.octokitOpenapiTypes.anon.GetParametersQueryState
import typings.octokitOpenapiTypes.anon.GetParametersQuerySubjectid
import typings.octokitOpenapiTypes.anon.GetParametersQueryToolguid
import typings.octokitOpenapiTypes.anon.GetParametersQueryType
import typings.octokitOpenapiTypes.anon.GetParametersQueryVisibletorepository
import typings.octokitOpenapiTypes.anon.GetPatch
import typings.octokitOpenapiTypes.anon.GetPatchPut
import typings.octokitOpenapiTypes.anon.GetPost
import typings.octokitOpenapiTypes.anon.GetPostPut
import typings.octokitOpenapiTypes.anon.GetPut
import typings.octokitOpenapiTypes.anon.GetResponses102
import typings.octokitOpenapiTypes.anon.GetResponses109
import typings.octokitOpenapiTypes.anon.GetResponses133
import typings.octokitOpenapiTypes.anon.GetResponses200122
import typings.octokitOpenapiTypes.anon.GetResponses200132
import typings.octokitOpenapiTypes.anon.GetResponses200132403
import typings.octokitOpenapiTypes.anon.GetResponses200202
import typings.octokitOpenapiTypes.anon.GetResponses200202204
import typings.octokitOpenapiTypes.anon.GetResponses200204
import typings.octokitOpenapiTypes.anon.GetResponses200240
import typings.octokitOpenapiTypes.anon.GetResponses200301404
import typings.octokitOpenapiTypes.anon.GetResponses200304401403404422
import typings.octokitOpenapiTypes.anon.GetResponses200304404
import typings.octokitOpenapiTypes.anon.GetResponses200323
import typings.octokitOpenapiTypes.anon.GetResponses200400
import typings.octokitOpenapiTypes.anon.GetResponses200401403404
import typings.octokitOpenapiTypes.anon.GetResponses200401403404500
import typings.octokitOpenapiTypes.anon.GetResponses200422500
import typings.octokitOpenapiTypes.anon.GetResponses200Content101
import typings.octokitOpenapiTypes.anon.GetResponses200Content101304
import typings.octokitOpenapiTypes.anon.GetResponses200Content111
import typings.octokitOpenapiTypes.anon.GetResponses200Content114
import typings.octokitOpenapiTypes.anon.GetResponses200Content12
import typings.octokitOpenapiTypes.anon.GetResponses200Content127
import typings.octokitOpenapiTypes.anon.GetResponses200Content127404
import typings.octokitOpenapiTypes.anon.GetResponses200Content148
import typings.octokitOpenapiTypes.anon.GetResponses200Content154
import typings.octokitOpenapiTypes.anon.GetResponses200Content155
import typings.octokitOpenapiTypes.anon.GetResponses200Content158
import typings.octokitOpenapiTypes.anon.GetResponses200Content161
import typings.octokitOpenapiTypes.anon.GetResponses200Content163
import typings.octokitOpenapiTypes.anon.GetResponses200Content166
import typings.octokitOpenapiTypes.anon.GetResponses200Content17
import typings.octokitOpenapiTypes.anon.GetResponses200Content175404
import typings.octokitOpenapiTypes.anon.GetResponses200Content176
import typings.octokitOpenapiTypes.anon.GetResponses200Content178
import typings.octokitOpenapiTypes.anon.GetResponses200Content18
import typings.octokitOpenapiTypes.anon.GetResponses200Content193
import typings.octokitOpenapiTypes.anon.GetResponses200Content203
import typings.octokitOpenapiTypes.anon.GetResponses200Content204
import typings.octokitOpenapiTypes.anon.GetResponses200Content208
import typings.octokitOpenapiTypes.anon.GetResponses200Content209
import typings.octokitOpenapiTypes.anon.GetResponses200Content21
import typings.octokitOpenapiTypes.anon.GetResponses200Content213
import typings.octokitOpenapiTypes.anon.GetResponses200Content216
import typings.octokitOpenapiTypes.anon.GetResponses200Content217
import typings.octokitOpenapiTypes.anon.GetResponses200Content222
import typings.octokitOpenapiTypes.anon.GetResponses200Content243
import typings.octokitOpenapiTypes.anon.GetResponses200Content248
import typings.octokitOpenapiTypes.anon.GetResponses200Content259
import typings.octokitOpenapiTypes.anon.GetResponses200Content260
import typings.octokitOpenapiTypes.anon.GetResponses200Content260304
import typings.octokitOpenapiTypes.anon.GetResponses200Content265
import typings.octokitOpenapiTypes.anon.GetResponses200Content27
import typings.octokitOpenapiTypes.anon.GetResponses200Content270404
import typings.octokitOpenapiTypes.anon.GetResponses200Content276
import typings.octokitOpenapiTypes.anon.GetResponses200Content277
import typings.octokitOpenapiTypes.anon.GetResponses200Content28
import typings.octokitOpenapiTypes.anon.GetResponses200Content283
import typings.octokitOpenapiTypes.anon.GetResponses200Content284
import typings.octokitOpenapiTypes.anon.GetResponses200Content294
import typings.octokitOpenapiTypes.anon.GetResponses200Content296
import typings.octokitOpenapiTypes.anon.GetResponses200Content30
import typings.octokitOpenapiTypes.anon.GetResponses200Content303
import typings.octokitOpenapiTypes.anon.GetResponses200Content31
import typings.octokitOpenapiTypes.anon.GetResponses200Content314
import typings.octokitOpenapiTypes.anon.GetResponses200Content318
import typings.octokitOpenapiTypes.anon.GetResponses200Content319
import typings.octokitOpenapiTypes.anon.GetResponses200Content32
import typings.octokitOpenapiTypes.anon.GetResponses200Content33
import typings.octokitOpenapiTypes.anon.GetResponses200Content330
import typings.octokitOpenapiTypes.anon.GetResponses200Content333
import typings.octokitOpenapiTypes.anon.GetResponses200Content334
import typings.octokitOpenapiTypes.anon.GetResponses200Content336
import typings.octokitOpenapiTypes.anon.GetResponses200Content338
import typings.octokitOpenapiTypes.anon.GetResponses200Content339
import typings.octokitOpenapiTypes.anon.GetResponses200Content343
import typings.octokitOpenapiTypes.anon.GetResponses200Content344
import typings.octokitOpenapiTypes.anon.GetResponses200Content345
import typings.octokitOpenapiTypes.anon.GetResponses200Content35
import typings.octokitOpenapiTypes.anon.GetResponses200Content359
import typings.octokitOpenapiTypes.anon.GetResponses200Content359404
import typings.octokitOpenapiTypes.anon.GetResponses200Content36
import typings.octokitOpenapiTypes.anon.GetResponses200Content365
import typings.octokitOpenapiTypes.anon.GetResponses200Content371Headers
import typings.octokitOpenapiTypes.anon.GetResponses200Content372
import typings.octokitOpenapiTypes.anon.GetResponses200Content377
import typings.octokitOpenapiTypes.anon.GetResponses200Content380
import typings.octokitOpenapiTypes.anon.GetResponses200Content389
import typings.octokitOpenapiTypes.anon.GetResponses200Content391
import typings.octokitOpenapiTypes.anon.GetResponses200Content395
import typings.octokitOpenapiTypes.anon.GetResponses200Content44
import typings.octokitOpenapiTypes.anon.GetResponses200Content45
import typings.octokitOpenapiTypes.anon.GetResponses200Content48
import typings.octokitOpenapiTypes.anon.GetResponses200Content5
import typings.octokitOpenapiTypes.anon.GetResponses200Content54
import typings.octokitOpenapiTypes.anon.GetResponses200Content56
import typings.octokitOpenapiTypes.anon.GetResponses200Content57
import typings.octokitOpenapiTypes.anon.GetResponses200Content58
import typings.octokitOpenapiTypes.anon.GetResponses200Content63Headers
import typings.octokitOpenapiTypes.anon.GetResponses200Content66
import typings.octokitOpenapiTypes.anon.GetResponses200Content68
import typings.octokitOpenapiTypes.anon.GetResponses200Content71
import typings.octokitOpenapiTypes.anon.GetResponses200Content73
import typings.octokitOpenapiTypes.anon.GetResponses200Content73304
import typings.octokitOpenapiTypes.anon.GetResponses200Content73Headers304
import typings.octokitOpenapiTypes.anon.GetResponses200Content73Headers404
import typings.octokitOpenapiTypes.anon.GetResponses200Content77
import typings.octokitOpenapiTypes.anon.GetResponses200Content78
import typings.octokitOpenapiTypes.anon.GetResponses200Content81
import typings.octokitOpenapiTypes.anon.GetResponses200Content82
import typings.octokitOpenapiTypes.anon.GetResponses200Content83
import typings.octokitOpenapiTypes.anon.GetResponses200Content91403
import typings.octokitOpenapiTypes.anon.GetResponses200Content91403404
import typings.octokitOpenapiTypes.anon.GetResponses200Content97304
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjson364
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonArtifacts
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonEnvironments
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonInstallations
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonInstallations304
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonRepositoriesTotalcount
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonRunners
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonSecrets
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonSecretsArray
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonSecretsArrayTotalcountNumber
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonSecretsTotalcount
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonTotalcount
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonTotalcountNumber
import typings.octokitOpenapiTypes.anon.GetResponses200ContentApplicationjsonWorkflows
import typings.octokitOpenapiTypes.anon.GetResponses200ContentHeaders
import typings.octokitOpenapiTypes.anon.GetResponses200ContentTextplainString
import typings.octokitOpenapiTypes.anon.GetResponses202204
import typings.octokitOpenapiTypes.anon.GetResponses304
import typings.octokitOpenapiTypes.anon.GetResponses304401
import typings.octokitOpenapiTypes.anon.GetResponses304401404
import typings.octokitOpenapiTypes.anon.GetResponses304404503
import typings.octokitOpenapiTypes.anon.GetResponses393
import typings.octokitOpenapiTypes.anon.GetResponses396
import typings.octokitOpenapiTypes.anon.GetResponses397
import typings.octokitOpenapiTypes.anon.GetResponses400401
import typings.octokitOpenapiTypes.anon.GetResponses401403
import typings.octokitOpenapiTypes.anon.GetResponses401403404500
import typings.octokitOpenapiTypes.anon.GetResponses401404
import typings.octokitOpenapiTypes.anon.GetResponses403422
import typings.octokitOpenapiTypes.anon.GetResponses404Unknown
import typings.octokitOpenapiTypes.anon.Parameters434
import typings.octokitOpenapiTypes.anon.Parameters455
import typings.octokitOpenapiTypes.anon.Parameters466
import typings.octokitOpenapiTypes.anon.Parameters491
import typings.octokitOpenapiTypes.anon.Parameters491RequestBodyContentApplicationjson427
import typings.octokitOpenapiTypes.anon.Parameters491RequestBodyContentApplicationjsonBodyName
import typings.octokitOpenapiTypes.anon.Parameters491RequestBodyContentApplicationjsonClientpayload
import typings.octokitOpenapiTypes.anon.Parameters491RequestBodyContentApplicationjsonGithubownedallowed
import typings.octokitOpenapiTypes.anon.Parameters491Responses
import typings.octokitOpenapiTypes.anon.Parameters491Responses200Content430
import typings.octokitOpenapiTypes.anon.Parameters491Responses200Content462
import typings.octokitOpenapiTypes.anon.Parameters491Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
import typings.octokitOpenapiTypes.anon.Parameters491Responses200ContentApplicationjsonCreatedatId
import typings.octokitOpenapiTypes.anon.Parameters491Responses200ContentApplicationjsonGithubownedallowed
import typings.octokitOpenapiTypes.anon.Parameters491Responses200ContentApplicationjsonKeyKeyid
import typings.octokitOpenapiTypes.anon.Parameters491Responses201ContentApplicationjsonExpiresatPermissions
import typings.octokitOpenapiTypes.anon.Parameters491Responses401Content55403Content55404Content55
import typings.octokitOpenapiTypes.anon.Parameters491Responses404Unknown
import typings.octokitOpenapiTypes.anon.Parameters491Responses409Unknown
import typings.octokitOpenapiTypes.anon.Parameters495
import typings.octokitOpenapiTypes.anon.Parameters495RequestBodyContent152
import typings.octokitOpenapiTypes.anon.Parameters497
import typings.octokitOpenapiTypes.anon.Parameters525
import typings.octokitOpenapiTypes.anon.Parameters535
import typings.octokitOpenapiTypes.anon.Parameters535Responses
import typings.octokitOpenapiTypes.anon.Parameters535Responses422Content421
import typings.octokitOpenapiTypes.anon.Parameters589
import typings.octokitOpenapiTypes.anon.Parameters590
import typings.octokitOpenapiTypes.anon.Parameters591
import typings.octokitOpenapiTypes.anon.Parameters591Responses
import typings.octokitOpenapiTypes.anon.Parameters606
import typings.octokitOpenapiTypes.anon.Parameters611
import typings.octokitOpenapiTypes.anon.Parameters611Responses401Content55403Content55404Content55
import typings.octokitOpenapiTypes.anon.Parameters612
import typings.octokitOpenapiTypes.anon.ParametersPath
import typings.octokitOpenapiTypes.anon.ParametersPath599
import typings.octokitOpenapiTypes.anon.ParametersPath599Query426
import typings.octokitOpenapiTypes.anon.ParametersPath599Query426Responses469
import typings.octokitOpenapiTypes.anon.ParametersPath599Query426Responses475
import typings.octokitOpenapiTypes.anon.ParametersPath599Query473
import typings.octokitOpenapiTypes.anon.ParametersPath599Query616
import typings.octokitOpenapiTypes.anon.ParametersPath599QueryPackagetypeVisibility
import typings.octokitOpenapiTypes.anon.ParametersPath599QueryPagePerpageSince
import typings.octokitOpenapiTypes.anon.ParametersPath599QuerySubjectid
import typings.octokitOpenapiTypes.anon.ParametersPath599Responses200ContentApplicationjsonDaysleftinbillingcycle
import typings.octokitOpenapiTypes.anon.ParametersPath599Responses200ContentApplicationjsonIncludedgigabytesbandwidth
import typings.octokitOpenapiTypes.anon.ParametersPath599Responses200ContentApplicationjsonIncludedminutes
import typings.octokitOpenapiTypes.anon.ParametersPath599Responses304Unknown401Content55403Content55
import typings.octokitOpenapiTypes.anon.ParametersPath599Responses461
import typings.octokitOpenapiTypes.anon.ParametersPath602
import typings.octokitOpenapiTypes.anon.ParametersPath602Responses
import typings.octokitOpenapiTypes.anon.ParametersPathAccountidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathAlertnumberOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAlertnumberOwnerQuery451
import typings.octokitOpenapiTypes.anon.ParametersPathAnalysisidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAnalysisidOwnerQueryConfirmdelete
import typings.octokitOpenapiTypes.anon.ParametersPathAppslugString
import typings.octokitOpenapiTypes.anon.ParametersPathArchiveformatArtifactid
import typings.octokitOpenapiTypes.anon.ParametersPathArtifactidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathArtifactidOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathAssetidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAssetidOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathAssigneeOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAttemptnumberOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAttemptnumberOwnerQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathAuthoridOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAutolinkidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathAutolinkidOwnerResponses404Content55
import typings.octokitOpenapiTypes.anon.ParametersPathBaseheadOwner
import typings.octokitOpenapiTypes.anon.ParametersPathBranchOwner
import typings.octokitOpenapiTypes.anon.ParametersPathBranchOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathBranchOwnerResponses404Content55
import typings.octokitOpenapiTypes.anon.ParametersPathBranchOwnerResponses464
import typings.octokitOpenapiTypes.anon.ParametersPathBranchpolicyidEnvironmentname
import typings.octokitOpenapiTypes.anon.ParametersPathBranchpolicyidEnvironmentnameResponses
import typings.octokitOpenapiTypes.anon.ParametersPathBuildidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathCacheidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathCardidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathCheckrunidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathCheckrunidOwnerQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathChecksuiteidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathChecksuiteidOwnerResponses201Content47
import typings.octokitOpenapiTypes.anon.ParametersPathClientidString
import typings.octokitOpenapiTypes.anon.ParametersPathCodespacenameExportid
import typings.octokitOpenapiTypes.anon.ParametersPathCodespacenameOrg
import typings.octokitOpenapiTypes.anon.ParametersPathCodespacenameString
import typings.octokitOpenapiTypes.anon.ParametersPathColumnidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathColumnidNumberResponses304Unknown401Content55
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidGistid
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidGistidResponses304Unknown403Content55
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerPullnumber
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerRepoQuery481
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerRepoResponses
import typings.octokitOpenapiTypes.anon.ParametersPathCommentidOwnerRepoResponses404Content55
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberOrg
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberOrgResponses
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberTeamid
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberTeamidQuery481
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberTeamidRequestBodyContentApplicationjsonBody
import typings.octokitOpenapiTypes.anon.ParametersPathCommentnumberDiscussionnumberTeamidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathCommitshaOwner
import typings.octokitOpenapiTypes.anon.ParametersPathCommitshaOwnerQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathCredentialidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidHookidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidHookidOrgResponses202400422
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidHookidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidHookidOwnerRepoResponses202400422
import typings.octokitOpenapiTypes.anon.ParametersPathDeliveryidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathDeploymentidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathDeploymentidOwnerQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathDirOwner
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumber
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberQuery479
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberQuery481
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjson121
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjsonBody
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjsonTitle
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberNumberResponses
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberOrgTeamslug
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberOrgTeamslugQuery481
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberOrgTeamslugRequestBodyContentApplicationjson121
import typings.octokitOpenapiTypes.anon.ParametersPathDiscussionnumberOrgTeamslugResponses
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseRunnergroupid
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseRunnergroupidQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseRunnergroupidRequestBodyContentApplicationjsonRunnersArray
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseRunnergroupidRequestBodyContentApplicationjsonSelectedorganizationids
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseRunnergroupidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseRunnergroupidRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseScimgroupid
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseScimuserid
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseScimuseridRequestBodyContentApplicationjsonSchemas
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseScimuseridResponses
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseString
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseStringQueryCountFilter
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseStringRequestBodyContentApplicationjsonSelectedorganizationids
import typings.octokitOpenapiTypes.anon.ParametersPathEnterpriseororgString
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameOwner
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameOwnerQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathEnvironmentnameString
import typings.octokitOpenapiTypes.anon.ParametersPathEventidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathFileshaOwner
import typings.octokitOpenapiTypes.anon.ParametersPathGistidSha
import typings.octokitOpenapiTypes.anon.ParametersPathGistidString
import typings.octokitOpenapiTypes.anon.ParametersPathGistidStringQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathGpgkeyidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathGpgkeyidNumberResponses304Unknown401Content55403Content55
import typings.octokitOpenapiTypes.anon.ParametersPathGroupidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathHeadOwner
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrgQueryCursorPerpage
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrgRequestBodyContentApplicationjsonContenttypeInsecuressl
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrgResponses200ContentApplicationjsonContenttype
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOrgResponses404Content55
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepoQueryCursorPerpage
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepoRequestBodyContentApplicationjsonContenttypeInsecuressl
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepoResponses200ContentApplicationjsonContenttype
import typings.octokitOpenapiTypes.anon.ParametersPathHookidOwnerRepoResponses404Content55
import typings.octokitOpenapiTypes.anon.ParametersPathInstallationidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathInstallationidNumberQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathInstallationidNumberRepositoryidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathInvitationidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathInvitationidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathInvitationidOrgQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathInvitationidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberNameOwner
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerReactionid
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoQuery481
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoQueryPagePerpageSince
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoRequestBodyContentApplicationjson121
import typings.octokitOpenapiTypes.anon.ParametersPathIssuenumberOwnerRepoResponses403Content55404Content55
import typings.octokitOpenapiTypes.anon.ParametersPathJobidOwner
import typings.octokitOpenapiTypes.anon.ParametersPathJobidOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathKeyidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathKeyidNumberResponses401Content55403Content55404Content55
import typings.octokitOpenapiTypes.anon.ParametersPathKeyidOwnerRepo
import typings.octokitOpenapiTypes.anon.ParametersPathKeyidOwnerRepoResponses
import typings.octokitOpenapiTypes.anon.ParametersPathLanguageOwner
import typings.octokitOpenapiTypes.anon.ParametersPathMigrationidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathMigrationidNumberQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathMigrationidOrg
import typings.octokitOpenapiTypes.anon.ParametersPathMigrationidOrgQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathMilestonenumberOwner
import typings.octokitOpenapiTypes.anon.ParametersPathMilestonenumberOwnerQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathMilestonenumberOwnerResponses404Content55
import typings.octokitOpenapiTypes.anon.ParametersPathNameOrgRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathNameRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgOwner
import typings.octokitOpenapiTypes.anon.ParametersPathOrgOwnerRequestBodyContentApplicationjson131
import typings.octokitOpenapiTypes.anon.ParametersPathOrgOwnerResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPackagename
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPackagenamePackagetype
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPackagenamePackagetypeResponses401Content55403Content55
import typings.octokitOpenapiTypes.anon.ParametersPathOrgPackagenameQueryToken
import typings.octokitOpenapiTypes.anon.ParametersPathOrgProjectid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgProjectidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgReactionid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgReponame
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRepositoryidSecretname
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRoleid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgRunnergroupidRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretname
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretnameQuery451
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretnameRequestBodyContentApplicationjsonEncryptedvalue
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretnameRequestBodyContentApplicationjsonKeyid
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids
import typings.octokitOpenapiTypes.anon.ParametersPathOrgSecretnameResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgString
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringQuery426Responses200ContentApplicationjsonRepositoriesTotaladvancedsecuritycommitters
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringQuery426Responses200ContentApplicationjsonRunnersTotalcount
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringQueryCountFilter
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringQueryToolname
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringRepositoryidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringRequestBodyContentApplicationjson427
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringRequestBodyContentApplicationjsonGithubownedallowed
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringRequestBodyContentApplicationjsonSelectedrepositoryids
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringResponses200Content430
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringResponses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringResponses200ContentApplicationjsonDaysleftinbillingcycle
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringResponses200ContentApplicationjsonGithubownedallowed
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringResponses200ContentApplicationjsonIncludedgigabytesbandwidth
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringResponses200ContentApplicationjsonIncludedminutes
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringResponses200ContentApplicationjsonOrganizationOrganizationurl
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringResponses201ContentApplicationjsonExpiresatPermissions
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringRunneridNumber
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringRunneridNumberRequestBodyContentApplicationjsonLabels
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringRunneridNumberResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringRunneridNumberResponses200ContentApplicationjsonLabelsArray
import typings.octokitOpenapiTypes.anon.ParametersPathOrgStringUsernameString
import typings.octokitOpenapiTypes.anon.ParametersPathOrgidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathOrgidRunnergroupid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerPathRepo
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRefRepo
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRefRepoQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseidQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseidQueryLabelName
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseidRequestBodyContentApplicationjson326
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerReleaseidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSarifid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSecretname
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSecretnameResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoSha
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoTeamid
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoTeamidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoUsername
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerRepoUsernameResponses
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerString
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQuery197
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQuery451
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQuery473
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQueryBeforeDirection
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQueryClientipLocation
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringQueryClientipRef
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringResponses200Content435
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringResponses200ContentApplicationjsonRunnersTotalcount
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringResponses469
import typings.octokitOpenapiTypes.anon.ParametersPathOwnerStringResponses488
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenamePackagetypePackageversionidUsername
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenamePackagetypeUsername
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenamePackagetypeUsernameQueryToken
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenamePackagetypeUsernameResponses401Content55403Content55
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenameString
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenameStringQuery471
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenameStringQueryToken
import typings.octokitOpenapiTypes.anon.ParametersPathPackagenameStringResponses401Content55403Content55
import typings.octokitOpenapiTypes.anon.ParametersPathPackagetypePackageversionidUsername
import typings.octokitOpenapiTypes.anon.ParametersPathPackageversionidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathPackageversionidNumberResponses401Content55403Content55
import typings.octokitOpenapiTypes.anon.ParametersPathPlanidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumberQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumberTeamidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumberTeamidNumberResponses404Content55422Content421
import typings.octokitOpenapiTypes.anon.ParametersPathProjectidNumberUsernameString
import typings.octokitOpenapiTypes.anon.ParametersPathPullnumberRepo
import typings.octokitOpenapiTypes.anon.ParametersPathPullnumberRepoQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathPullnumberRepoQueryPerpageSinceSort
import typings.octokitOpenapiTypes.anon.ParametersPathPullnumberRepoResponses404Unknown
import typings.octokitOpenapiTypes.anon.ParametersPathReactionidRepo
import typings.octokitOpenapiTypes.anon.ParametersPathReactionidTeamslug
import typings.octokitOpenapiTypes.anon.ParametersPathReleaseidRepo
import typings.octokitOpenapiTypes.anon.ParametersPathRepoReviewid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoReviewidQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathRepoReviewidRequestBodyContentApplicationjsonEvent
import typings.octokitOpenapiTypes.anon.ParametersPathRepoRunid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoRunidQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathRepoRunnerid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoRunneridRequestBodyContentApplicationjsonLabels
import typings.octokitOpenapiTypes.anon.ParametersPathRepoRunneridResponses
import typings.octokitOpenapiTypes.anon.ParametersPathRepoRunneridResponses200ContentApplicationjsonLabelsArray
import typings.octokitOpenapiTypes.anon.ParametersPathRepoStatusid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoString
import typings.octokitOpenapiTypes.anon.ParametersPathRepoStringResponses
import typings.octokitOpenapiTypes.anon.ParametersPathRepoTag
import typings.octokitOpenapiTypes.anon.ParametersPathRepoTagprotectionid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoTagsha
import typings.octokitOpenapiTypes.anon.ParametersPathRepoTreesha
import typings.octokitOpenapiTypes.anon.ParametersPathRepoWorkflowid
import typings.octokitOpenapiTypes.anon.ParametersPathRepoWorkflowidQueryActorBranch
import typings.octokitOpenapiTypes.anon.ParametersPathRepoWorkflowidRequestBodyContentApplicationjsonInputs
import typings.octokitOpenapiTypes.anon.ParametersPathRepoWorkflowidResponses
import typings.octokitOpenapiTypes.anon.ParametersPathReponameString
import typings.octokitOpenapiTypes.anon.ParametersPathRepositoryidNumberSecretnameString
import typings.octokitOpenapiTypes.anon.ParametersPathRepositoryidRunnergroupid
import typings.octokitOpenapiTypes.anon.ParametersPathRunnergroupidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathRunnergroupidNumberQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathRunnergroupidNumberRequestBodyContentApplicationjsonRunnersArray
import typings.octokitOpenapiTypes.anon.ParametersPathRunnergroupidNumberRequestBodyContentApplicationjsonSelectedrepositoryids
import typings.octokitOpenapiTypes.anon.ParametersPathRunnergroupidNumberResponses
import typings.octokitOpenapiTypes.anon.ParametersPathRunneridNumber
import typings.octokitOpenapiTypes.anon.ParametersPathRunneridNumberResponses
import typings.octokitOpenapiTypes.anon.ParametersPathRunneridNumberResponses422Content418
import typings.octokitOpenapiTypes.anon.ParametersPathScimuseridString
import typings.octokitOpenapiTypes.anon.ParametersPathSecretnameString
import typings.octokitOpenapiTypes.anon.ParametersPathSecretnameStringRequestBodyContentApplicationjsonEncryptedvalueString
import typings.octokitOpenapiTypes.anon.ParametersPathSecretnameStringResponses
import typings.octokitOpenapiTypes.anon.ParametersPathSecurityproduct
import typings.octokitOpenapiTypes.anon.ParametersPathSshsigningkeyidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathSshsigningkeyidNumberResponses401Content55403Content55404Content55
import typings.octokitOpenapiTypes.anon.ParametersPathTargetuserUsername
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberQuery479
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberQuery485
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberRequestBodyContentApplicationjsonPrivacy
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberRequestBodyContentApplicationjsonPrivate
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberResponses404Content55422Content421
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberUsernameString
import typings.octokitOpenapiTypes.anon.ParametersPathTeamidNumberUsernameStringResponses126
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugString
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugStringQuery426
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugStringRequestBodyContentApplicationjsonGroups
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugStringResponses
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugUsername
import typings.octokitOpenapiTypes.anon.ParametersPathTeamslugUsernameResponses126
import typings.octokitOpenapiTypes.anon.ParametersPathThreadidNumber
import typings.octokitOpenapiTypes.anon.ParametersPathThreadidNumberRequestBodyContentApplicationjsonIgnored
import typings.octokitOpenapiTypes.anon.ParametersPathUsernameString
import typings.octokitOpenapiTypes.anon.ParametersPathUsernameStringResponses
import typings.octokitOpenapiTypes.anon.ParametersPathUsernameStringResponses404Unknown
import typings.octokitOpenapiTypes.anon.ParametersPathUsernameStringResponses422ContentApplicationjsonDocumentationurl
import typings.octokitOpenapiTypes.anon.ParametersQuery426
import typings.octokitOpenapiTypes.anon.ParametersQuery447
import typings.octokitOpenapiTypes.anon.ParametersQuery451
import typings.octokitOpenapiTypes.anon.ParametersQuery468
import typings.octokitOpenapiTypes.anon.ParametersQuery471
import typings.octokitOpenapiTypes.anon.ParametersQuery473
import typings.octokitOpenapiTypes.anon.ParametersQuery477
import typings.octokitOpenapiTypes.anon.ParametersQuery479
import typings.octokitOpenapiTypes.anon.ParametersQuery481
import typings.octokitOpenapiTypes.anon.ParametersQuery485
import typings.octokitOpenapiTypes.anon.ParametersQuery498
import typings.octokitOpenapiTypes.anon.ParametersQuery506
import typings.octokitOpenapiTypes.anon.ParametersQuery527
import typings.octokitOpenapiTypes.anon.ParametersQuery533
import typings.octokitOpenapiTypes.anon.ParametersQuery543
import typings.octokitOpenapiTypes.anon.ParametersQuery574
import typings.octokitOpenapiTypes.anon.ParametersQuery585
import typings.octokitOpenapiTypes.anon.ParametersQuery609
import typings.octokitOpenapiTypes.anon.ParametersQuery616
import typings.octokitOpenapiTypes.anon.ParametersQueryActorBranch
import typings.octokitOpenapiTypes.anon.ParametersQueryAffiliationPagePerpage
import typings.octokitOpenapiTypes.anon.ParametersQueryAfterBefore
import typings.octokitOpenapiTypes.anon.ParametersQueryAllBefore
import typings.octokitOpenapiTypes.anon.ParametersQueryAnonPage
import typings.octokitOpenapiTypes.anon.ParametersQueryAppidChecknamePage
import typings.octokitOpenapiTypes.anon.ParametersQueryArchivedstatePage
import typings.octokitOpenapiTypes.anon.ParametersQueryBaseDirection
import typings.octokitOpenapiTypes.anon.ParametersQueryBeforeDirection
import typings.octokitOpenapiTypes.anon.ParametersQueryBeforePage
import typings.octokitOpenapiTypes.anon.ParametersQueryChecknameFilter
import typings.octokitOpenapiTypes.anon.ParametersQueryCountExcludedAttributes
import typings.octokitOpenapiTypes.anon.ParametersQueryCursorPerpage
import typings.octokitOpenapiTypes.anon.ParametersQueryDirectionFilter
import typings.octokitOpenapiTypes.anon.ParametersQueryDirectionKey
import typings.octokitOpenapiTypes.anon.ParametersQueryDirectionPagePerpageSince
import typings.octokitOpenapiTypes.anon.ParametersQueryDisplaynamePage
import typings.octokitOpenapiTypes.anon.ParametersQueryExcludePage
import typings.octokitOpenapiTypes.anon.ParametersQueryFeaturedPage
import typings.octokitOpenapiTypes.anon.ParametersQueryKeyStringRef
import typings.octokitOpenapiTypes.anon.ParametersQueryLoginPage
import typings.octokitOpenapiTypes.anon.ParametersQueryMentioned
import typings.octokitOpenapiTypes.anon.ParametersQueryOrderPagePerpageQ
import typings.octokitOpenapiTypes.anon.ParametersQueryOrderPagePerpageQSort
import typings.octokitOpenapiTypes.anon.ParametersQueryOrgs
import typings.octokitOpenapiTypes.anon.ParametersQueryOutdatedPage
import typings.octokitOpenapiTypes.anon.ParametersQueryPackagetypeVisibility
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePermission
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageQSort
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageRef
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageRepositoryid
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageRole
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageSince
import typings.octokitOpenapiTypes.anon.ParametersQueryPagePerpageSortType
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpagePinned
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageProtected
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageQSort
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageQString
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageSinceSort
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageSortState
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageSortType
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageStatus
import typings.octokitOpenapiTypes.anon.ParametersQueryPerpageVisibletorepository
import typings.octokitOpenapiTypes.anon.ParametersQueryPhrase
import typings.octokitOpenapiTypes.anon.ParametersQueryQRepositoryid
import typings.octokitOpenapiTypes.anon.ParametersQueryQString
import typings.octokitOpenapiTypes.anon.ParametersQueryRefSarifid
import typings.octokitOpenapiTypes.anon.ParametersQueryRefSort
import typings.octokitOpenapiTypes.anon.ParametersQueryS
import typings.octokitOpenapiTypes.anon.ParametersQuerySecrettype
import typings.octokitOpenapiTypes.anon.ParametersQueryTask
import typings.octokitOpenapiTypes.anon.ParametersQueryToolname
import typings.octokitOpenapiTypes.anon.ParametersQueryTypeVisibility
import typings.octokitOpenapiTypes.anon.ParametersQueryUntil
import typings.octokitOpenapiTypes.anon.ParametersQueryVisibletoorganization
import typings.octokitOpenapiTypes.anon.Patch
import typings.octokitOpenapiTypes.anon.PatchParametersPathAuthorid
import typings.octokitOpenapiTypes.anon.PatchPut
import typings.octokitOpenapiTypes.anon.PatchRequestBodyContentApplicationjsonAutotriggerchecks
import typings.octokitOpenapiTypes.anon.PatchRequestBodyContentApplicationjsonUselfs
import typings.octokitOpenapiTypes.anon.PatchRequestBodyContentApplicationjsonVisibility
import typings.octokitOpenapiTypes.anon.Post
import typings.octokitOpenapiTypes.anon.PostParameters144Responses201Content22
import typings.octokitOpenapiTypes.anon.PostParametersPathDeliveryidHookidOwnerResponses202
import typings.octokitOpenapiTypes.anon.PostParametersPathDeliveryidHookidResponses202
import typings.octokitOpenapiTypes.anon.PostParametersPathEnablement
import typings.octokitOpenapiTypes.anon.PostParametersPathHookidOwnerResponses6
import typings.octokitOpenapiTypes.anon.PostParametersPathHookidResponses6
import typings.octokitOpenapiTypes.anon.PostParametersPathOrgResponses201Content22
import typings.octokitOpenapiTypes.anon.PostParametersPathOwnerPullnumber
import typings.octokitOpenapiTypes.anon.PostParametersPathPackagenamePackagetypePackageversionid
import typings.octokitOpenapiTypes.anon.PostParametersPathPackagenamePackagetypeQueryToken
import typings.octokitOpenapiTypes.anon.PostParametersPathPackagetypePackageversionidResponses401403404
import typings.octokitOpenapiTypes.anon.PostParametersPathPackagetypeUsernameQueryToken
import typings.octokitOpenapiTypes.anon.PostParametersPathPackageversionidResponses401403404
import typings.octokitOpenapiTypes.anon.PostParametersPathRepoSha
import typings.octokitOpenapiTypes.anon.PostParametersPathTemplateowner
import typings.octokitOpenapiTypes.anon.PostParametersQueryToken
import typings.octokitOpenapiTypes.anon.PostParametersRequestBody
import typings.octokitOpenapiTypes.anon.PostPut
import typings.octokitOpenapiTypes.anon.PostRequestBodyContent152
import typings.octokitOpenapiTypes.anon.PostRequestBodyContent182
import typings.octokitOpenapiTypes.anon.PostRequestBodyContent225
import typings.octokitOpenapiTypes.anon.PostRequestBodyContent308
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonArtifacturl
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBase
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBaserole
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBasetree
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBodyEvent
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBodyNameString
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonBranchString
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonCheckouturi
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonClientpayload
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonColumnid
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonConfigurationfilepath
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonContext
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonEmail
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonEncoding
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonHeadsha
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonInputs
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonNewname
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonNewowner
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonObject
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonParents
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonPosition
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonRefSha
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentApplicationjsonRepositories
import typings.octokitOpenapiTypes.anon.PostRequestBodyContentTextplain
import typings.octokitOpenapiTypes.anon.PostResponses200Content93401
import typings.octokitOpenapiTypes.anon.PostResponses201403
import typings.octokitOpenapiTypes.anon.PostResponses201403404422
import typings.octokitOpenapiTypes.anon.PostResponses201Content22
import typings.octokitOpenapiTypes.anon.PostResponses201Content47
import typings.octokitOpenapiTypes.anon.PostResponses201Content67
import typings.octokitOpenapiTypes.anon.PostResponses202
import typings.octokitOpenapiTypes.anon.PostResponses202401403
import typings.octokitOpenapiTypes.anon.PostResponses202409
import typings.octokitOpenapiTypes.anon.PostResponses402
import typings.octokitOpenapiTypes.anon.PostResponses404500
import typings.octokitOpenapiTypes.anon.Put
import typings.octokitOpenapiTypes.anon.PutParametersPathWorkflowidResponses
import typings.octokitOpenapiTypes.anon.PutRequestBodyContent15
import typings.octokitOpenapiTypes.anon.PutRequestBodyContent317
import typings.octokitOpenapiTypes.anon.PutRequestBodyContentApplicationjsonEvent
import typings.octokitOpenapiTypes.anon.PutResponses202403Unknown
import typings.octokitOpenapiTypes.anon.RequestBodyContent363Responses201202401
import typings.octokitOpenapiTypes.anon.RequestBodyContent531
import typings.octokitOpenapiTypes.anon.RequestBodyContent540
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjson427
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjson450
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjson576
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonAccesslevel
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonAccesstoken
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonActiveConfig
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonAllowedactionsEnabledBoolean
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonAllowedactionsEnabledorganizations
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonConfigEvents
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonContenttypeInsecuressl
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonDismissedcommentDismissedreason
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonEmailsArrayResponses304Unknown401Content55403Content55
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonExpiryLimit
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonGithubownedallowed
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonIncludeallbranches
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonIncludeclaimkeys
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonIncludeenterpriseslug
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonJob
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonRemoveevents
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonRepositoryids
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonSarif
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonTargetid
import typings.octokitOpenapiTypes.anon.RequestBodyContentApplicationjsonUsedefault
import typings.octokitOpenapiTypes.anon.Responses200201403
import typings.octokitOpenapiTypes.anon.Responses200202400
import typings.octokitOpenapiTypes.anon.Responses200304401403404500
import typings.octokitOpenapiTypes.anon.Responses200304401404
import typings.octokitOpenapiTypes.anon.Responses200304403422
import typings.octokitOpenapiTypes.anon.Responses200304404503
import typings.octokitOpenapiTypes.anon.Responses200307403
import typings.octokitOpenapiTypes.anon.Responses200400401
import typings.octokitOpenapiTypes.anon.Responses200404409
import typings.octokitOpenapiTypes.anon.Responses200437404Content55
import typings.octokitOpenapiTypes.anon.Responses200439404Content55
import typings.octokitOpenapiTypes.anon.Responses200483
import typings.octokitOpenapiTypes.anon.Responses200487
import typings.octokitOpenapiTypes.anon.Responses200487403Content55
import typings.octokitOpenapiTypes.anon.Responses200487403Content55422Content421
import typings.octokitOpenapiTypes.anon.Responses200511
import typings.octokitOpenapiTypes.anon.Responses200511422Content421
import typings.octokitOpenapiTypes.anon.Responses200534
import typings.octokitOpenapiTypes.anon.Responses200549
import typings.octokitOpenapiTypes.anon.Responses200552
import typings.octokitOpenapiTypes.anon.Responses200567
import typings.octokitOpenapiTypes.anon.Responses200572
import typings.octokitOpenapiTypes.anon.Responses200572404ContentApplicationjsonDocumentationurlMessage
import typings.octokitOpenapiTypes.anon.Responses200Content424
import typings.octokitOpenapiTypes.anon.Responses200Content430
import typings.octokitOpenapiTypes.anon.Responses200Content435
import typings.octokitOpenapiTypes.anon.Responses200Content440
import typings.octokitOpenapiTypes.anon.Responses200Content441
import typings.octokitOpenapiTypes.anon.Responses200Content444
import typings.octokitOpenapiTypes.anon.Responses200Content444401Content55
import typings.octokitOpenapiTypes.anon.Responses200Content445
import typings.octokitOpenapiTypes.anon.Responses200Content448Headers
import typings.octokitOpenapiTypes.anon.Responses200Content454
import typings.octokitOpenapiTypes.anon.Responses200Content454304Unknown
import typings.octokitOpenapiTypes.anon.Responses200Content454404Content55
import typings.octokitOpenapiTypes.anon.Responses200Content454422Content421
import typings.octokitOpenapiTypes.anon.Responses200Content454Headers304Unknown401Content55
import typings.octokitOpenapiTypes.anon.Responses200Content454Headers404Content55
import typings.octokitOpenapiTypes.anon.Responses200Content454HeadersLink
import typings.octokitOpenapiTypes.anon.Responses200Content457
import typings.octokitOpenapiTypes.anon.Responses200Content458
import typings.octokitOpenapiTypes.anon.Responses200Content459
import typings.octokitOpenapiTypes.anon.Responses200Content462
import typings.octokitOpenapiTypes.anon.Responses200Content463403Content55
import typings.octokitOpenapiTypes.anon.Responses200Content463403Content55404Content55
import typings.octokitOpenapiTypes.anon.Responses200Content465304Unknown
import typings.octokitOpenapiTypes.anon.Responses200Content467
import typings.octokitOpenapiTypes.anon.Responses200Content467304Unknown
import typings.octokitOpenapiTypes.anon.Responses200Content472
import typings.octokitOpenapiTypes.anon.Responses200Content476
import typings.octokitOpenapiTypes.anon.Responses200Content48304Unknown
import typings.octokitOpenapiTypes.anon.Responses200Content48403Content55
import typings.octokitOpenapiTypes.anon.Responses200Content48404Content55
import typings.octokitOpenapiTypes.anon.Responses200Content48404Content55422Content421
import typings.octokitOpenapiTypes.anon.Responses200Content486
import typings.octokitOpenapiTypes.anon.Responses200Content486404Content55
import typings.octokitOpenapiTypes.anon.Responses200Content496
import typings.octokitOpenapiTypes.anon.Responses200Content502
import typings.octokitOpenapiTypes.anon.Responses200Content504
import typings.octokitOpenapiTypes.anon.Responses200Content510
import typings.octokitOpenapiTypes.anon.Responses200Content510422Content421
import typings.octokitOpenapiTypes.anon.Responses200Content517
import typings.octokitOpenapiTypes.anon.Responses200Content520
import typings.octokitOpenapiTypes.anon.Responses200Content523
import typings.octokitOpenapiTypes.anon.Responses200Content524
import typings.octokitOpenapiTypes.anon.Responses200Content539
import typings.octokitOpenapiTypes.anon.Responses200Content545
import typings.octokitOpenapiTypes.anon.Responses200Content546
import typings.octokitOpenapiTypes.anon.Responses200Content546304Unknown
import typings.octokitOpenapiTypes.anon.Responses200Content548
import typings.octokitOpenapiTypes.anon.Responses200Content551
import typings.octokitOpenapiTypes.anon.Responses200Content551404Content55
import typings.octokitOpenapiTypes.anon.Responses200Content553
import typings.octokitOpenapiTypes.anon.Responses200Content554
import typings.octokitOpenapiTypes.anon.Responses200Content558
import typings.octokitOpenapiTypes.anon.Responses200Content564
import typings.octokitOpenapiTypes.anon.Responses200Content569
import typings.octokitOpenapiTypes.anon.Responses200Content571
import typings.octokitOpenapiTypes.anon.Responses200Content578
import typings.octokitOpenapiTypes.anon.Responses200Content579
import typings.octokitOpenapiTypes.anon.Responses200Content580
import typings.octokitOpenapiTypes.anon.Responses200Content581
import typings.octokitOpenapiTypes.anon.Responses200Content583
import typings.octokitOpenapiTypes.anon.Responses200Content584
import typings.octokitOpenapiTypes.anon.Responses200Content586
import typings.octokitOpenapiTypes.anon.Responses200Content587
import typings.octokitOpenapiTypes.anon.Responses200Content598
import typings.octokitOpenapiTypes.anon.Responses200Content598404Content55
import typings.octokitOpenapiTypes.anon.Responses200Content603
import typings.octokitOpenapiTypes.anon.Responses200Content603Headers
import typings.octokitOpenapiTypes.anon.Responses200Content604
import typings.octokitOpenapiTypes.anon.Responses200Content607
import typings.octokitOpenapiTypes.anon.Responses200Content608
import typings.octokitOpenapiTypes.anon.Responses200Content615
import typings.octokitOpenapiTypes.anon.Responses200Content617
import typings.octokitOpenapiTypes.anon.Responses200Content619
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjson428
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjson452401Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjson453
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjson505
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjson600
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAccesslevel
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonActivecachescount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAllOwner
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAllowedactionsEnabledrepositories
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonApi
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAppsurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonArtifactsTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAuthorassociationBody
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAuthorizationsurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAuthorscount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonAuthorscount422Content421
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBasebranch
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBaseroleCreatedat
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBillable
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBillableWINDOWS
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBlockcreations
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodyHtmlurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodyString
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytext
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytext422Content421
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytextCommitid
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytextCommitid403Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytextCommitid404Content55422Content418
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBodytextCommitid422Content418
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonBusinessplus
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCardsurl304Unknown
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonColumnurl304Unknown
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCommentscount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonConditions
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonContenttype
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCountUniques
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCreatedatId
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCreatedatIgnored
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCurrentuserorganizationurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCustom404
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonCustomrolesTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDaysleftinbillingcycle
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDefault
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDeployment
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDismissstalereviews
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDismissstalereviews422Content421
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDocumentation
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDownloadcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonDownloadurlEncoding
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonEmailsExternalId
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonEnabledSelectedactionsurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonEnabledUrl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonEnabledUrl404Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonEnvironmentsTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonExternalurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonFingerprint422Content421
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonGithubownedallowed
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonGitstatus
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonGitstatus401Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonHeadcommit
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIncludeclaimkeys
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIncludedgigabytesbandwidth
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonIncludedminutes
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonInherited
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonInreplytoid
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonInstallationsTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonInstallationsTotalcount304Unknown
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonInvitee
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonKeyKeyid
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonLabelsArray
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonLasteditedat
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonMachinesTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonMarketplacepurchase401Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonMembers
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonMergecommitsha
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonMeta
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNameNodeid
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNameSource
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNames404Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNodeidObject
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNodeidObject422Content421
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonNodeidUser
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOrganizationOrganizationurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOrganizationOrganizationurl403Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOrganizationOrganizationurl403Content55404Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOrigin
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonOrigin409Unknown
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonPermissionRolename
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonPermissionString
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonPreferencesRepository
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonPusher
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRateResources
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonReposcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRepositoriesTotaladvancedsecuritycommitters
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRepositoryselectionTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRepositoryurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRequiredconversationresolution
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRoleState403Unknown
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRoleState404Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonRunnersTotalcount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonSelectedorganizationsurl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonServerinstances
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonStrict
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonStrict404Content55
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonSubmodulegiturl
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonTeamsArrayUsersArray
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonTotalactivecachescount
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonTotalcountWorkflows
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonTotalseatsconsumed
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationjsonUsedefault
import typings.octokitOpenapiTypes.anon.Responses200ContentApplicationscimjsonActiveDisplayName
import typings.octokitOpenapiTypes.anon.Responses200ContentTexthtml304Unknown
import typings.octokitOpenapiTypes.anon.Responses200ContentTexthtmlHeaders304Unknown
import typings.octokitOpenapiTypes.anon.Responses200ContentTextplainString
import typings.octokitOpenapiTypes.anon.Responses201202400
import typings.octokitOpenapiTypes.anon.Responses201202401
import typings.octokitOpenapiTypes.anon.Responses201304403404
import typings.octokitOpenapiTypes.anon.Responses201304403404422
import typings.octokitOpenapiTypes.anon.Responses201401403
import typings.octokitOpenapiTypes.anon.Responses201403404409
import typings.octokitOpenapiTypes.anon.Responses201403404410
import typings.octokitOpenapiTypes.anon.Responses201409422
import typings.octokitOpenapiTypes.anon.Responses201549
import typings.octokitOpenapiTypes.anon.Responses201Content47304Unknown
import typings.octokitOpenapiTypes.anon.Responses201Content47403Content55
import typings.octokitOpenapiTypes.anon.Responses201Content47404Content55
import typings.octokitOpenapiTypes.anon.Responses201Content603
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAddedby
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAllowupdatebranch
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAssetsurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAuthorCommitter
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAuthorassociationBodyHeadersLocation
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonAuthorscountHeadersLocation
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonBaseroleCreatedat
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonBodyCreatedat
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCanencryptcomms
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCardsurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCommentscount
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCreatedatEnabled
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonCreatedatIdKey
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonDefault
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonDeployment
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonDescriptionId
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonEmailsExternalId
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonEnvironmenturl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonExcludeownerprojects
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonExcludeownerprojects304Unknown
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonExpiresatPermissions
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonFailedreason
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonIdKey
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonInherited
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonInreplytoidHeadersLocation
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonInvitee
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonKeyprefix
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonLabelsurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonLasteditedat
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonMergeable
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonMergecommitsha
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonMessageNodeid
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonMeta
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonNodeidObjectHeadersLocation
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonNodeidUser
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonOwnerurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonProtectionurl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonReposcount
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonStatusUrl
import typings.octokitOpenapiTypes.anon.Responses201ContentApplicationjsonTruncated
import typings.octokitOpenapiTypes.anon.Responses202205
import typings.octokitOpenapiTypes.anon.Responses202205304
import typings.octokitOpenapiTypes.anon.Responses202304401
import typings.octokitOpenapiTypes.anon.Responses202400403
import typings.octokitOpenapiTypes.anon.Responses202400422
import typings.octokitOpenapiTypes.anon.Responses202401403404
import typings.octokitOpenapiTypes.anon.Responses202403404
import typings.octokitOpenapiTypes.anon.Responses202409422
import typings.octokitOpenapiTypes.anon.Responses202Content47
import typings.octokitOpenapiTypes.anon.Responses202Content47403Unknown
import typings.octokitOpenapiTypes.anon.Responses202ContentApplicationjsonBranchesurl
import typings.octokitOpenapiTypes.anon.Responses202ContentApplicationjsonUrl
import typings.octokitOpenapiTypes.anon.Responses204Unknown
import typings.octokitOpenapiTypes.anon.Responses205304403
import typings.octokitOpenapiTypes.anon.Responses301403404
import typings.octokitOpenapiTypes.anon.Responses301Content55
import typings.octokitOpenapiTypes.anon.Responses304400401
import typings.octokitOpenapiTypes.anon.Responses304400403
import typings.octokitOpenapiTypes.anon.Responses304401403404410
import typings.octokitOpenapiTypes.anon.Responses304401403422503
import typings.octokitOpenapiTypes.anon.Responses304Unknown
import typings.octokitOpenapiTypes.anon.Responses304Unknown401Content55
import typings.octokitOpenapiTypes.anon.Responses304Unknown401Content55403Content55
import typings.octokitOpenapiTypes.anon.Responses304Unknown403Content55
import typings.octokitOpenapiTypes.anon.Responses307403
import typings.octokitOpenapiTypes.anon.Responses400403404
import typings.octokitOpenapiTypes.anon.Responses400404422
import typings.octokitOpenapiTypes.anon.Responses400Content420422Content421
import typings.octokitOpenapiTypes.anon.Responses401402
import typings.octokitOpenapiTypes.anon.Responses401403404410422
import typings.octokitOpenapiTypes.anon.Responses401403422503
import typings.octokitOpenapiTypes.anon.Responses401Content55
import typings.octokitOpenapiTypes.anon.Responses401Content55403Content55
import typings.octokitOpenapiTypes.anon.Responses401Content55403Content55404Content55
import typings.octokitOpenapiTypes.anon.Responses401Content55403ContentApplicationjsonErrors
import typings.octokitOpenapiTypes.anon.Responses403404409422
import typings.octokitOpenapiTypes.anon.Responses403Content55404Content47
import typings.octokitOpenapiTypes.anon.Responses403Content55404Content55
import typings.octokitOpenapiTypes.anon.Responses403Content55404ContentApplicationjsonDocumentationurlMessage
import typings.octokitOpenapiTypes.anon.Responses403Content55404Unknown
import typings.octokitOpenapiTypes.anon.Responses403Content55422Content421
import typings.octokitOpenapiTypes.anon.Responses403Content592
import typings.octokitOpenapiTypes.anon.Responses403ContentApplicationjsonDocumentationurl
import typings.octokitOpenapiTypes.anon.Responses403ContentApplicationjsonDocumentationurl404Content55
import typings.octokitOpenapiTypes.anon.Responses403ContentApplicationjsonDocumentationurlMessage
import typings.octokitOpenapiTypes.anon.Responses403Unknown404Content55
import typings.octokitOpenapiTypes.anon.Responses404405
import typings.octokitOpenapiTypes.anon.Responses404Content55
import typings.octokitOpenapiTypes.anon.Responses404Content55410Content55
import typings.octokitOpenapiTypes.anon.Responses404Content55422Content418
import typings.octokitOpenapiTypes.anon.Responses404Content55422Content421
import typings.octokitOpenapiTypes.anon.Responses404Content55500Content55
import typings.octokitOpenapiTypes.anon.Responses409Content55
import typings.octokitOpenapiTypes.anon.Responses410422503
import typings.octokitOpenapiTypes.anon.Responses410Content55
import typings.octokitOpenapiTypes.anon.Responses422500503
import typings.octokitOpenapiTypes.anon.Responses422Content418
import typings.octokitOpenapiTypes.anon.Responses422Content421
import typings.octokitOpenapiTypes.anon.Responses461
import typings.octokitOpenapiTypes.anon.Responses464
import typings.octokitOpenapiTypes.anon.Responses469
import typings.octokitOpenapiTypes.anon.Responses475
import typings.octokitOpenapiTypes.anon.Responses488
import typings.octokitOpenapiTypes.anon.Responses493
import typings.octokitOpenapiTypes.anon.Responses500Content55
import typings.octokitOpenapiTypes.anon.Responses532
import typings.octokitOpenapiTypes.anon.Responses542
import typings.octokitOpenapiTypes.anon.Responses557
import typings.octokitOpenapiTypes.anon.Responses561
import typings.octokitOpenapiTypes.anon.Responses566
import typings.octokitOpenapiTypes.anon.Responses582
import typings.octokitOpenapiTypes.anon.Responses597
import typings.octokitOpenapiTypes.anon.Responses618
import typings.octokitOpenapiTypes.anon.Responses620
import typings.octokitOpenapiTypes.anon.Responses621
import typings.octokitOpenapiTypes.anon.Xcommonmarkerversion
import typings.octokitOpenapiTypes.anon.`375`
import typings.octokitOpenapiTypes.anon.`50`
import typings.octokitOpenapiTypes.anon.`601`
import typings.octokitOpenapiTypes.anon.`605`
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object mod {
  
  trait components extends StObject {
    
    var headers: Xcommonmarkerversion
    
    var parameters: Actionscachekey
    
    var responses: Accepted
    
    var schemas: Actionsbillingusage
  }
  object components {
    
    inline def apply(
      headers: Xcommonmarkerversion,
      parameters: Actionscachekey,
      responses: Accepted,
      schemas: Actionsbillingusage
    ): components = {
      val __obj = js.Dynamic.literal(headers = headers.asInstanceOf[js.Any], parameters = parameters.asInstanceOf[js.Any], responses = responses.asInstanceOf[js.Any], schemas = schemas.asInstanceOf[js.Any])
      __obj.asInstanceOf[components]
    }
    
    extension [Self <: components](x: Self) {
      
      inline def setHeaders(value: Xcommonmarkerversion): Self = StObject.set(x, "headers", value.asInstanceOf[js.Any])
      
      inline def setParameters(value: Actionscachekey): Self = StObject.set(x, "parameters", value.asInstanceOf[js.Any])
      
      inline def setResponses(value: Accepted): Self = StObject.set(x, "responses", value.asInstanceOf[js.Any])
      
      inline def setSchemas(value: Actionsbillingusage): Self = StObject.set(x, "schemas", value.asInstanceOf[js.Any])
    }
  }
  
  trait external extends StObject
  
  trait operations extends StObject {
    
    /**
      * Add custom labels to a self-hosted runner configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/add-custom-labels-to-self-hosted-runner-for-org")
    var `actionsSlashadd-custom-labels-to-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumberRequestBodyContentApplicationjsonLabels
    
    /**
      * Add custom labels to a self-hosted runner configured in a repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/add-custom-labels-to-self-hosted-runner-for-repo")
    var `actionsSlashadd-custom-labels-to-self-hosted-runner-for-repo`: ParametersPathRepoRunneridRequestBodyContentApplicationjsonLabels
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      *
      * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org`
      * scope to use this endpoint.
      */
    @JSName("actions/add-repo-access-to-self-hosted-runner-group-in-org")
    var `actionsSlashadd-repo-access-to-self-hosted-runner-group-in-org`: ParametersPathRepositoryidRunnergroupid
    
    /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    @JSName("actions/add-selected-repo-to-org-secret")
    var `actionsSlashadd-selected-repo-to-org-secret`: ParametersPathOrgRepositoryidSecretname
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      *
      * Adds a self-hosted runner to a runner group configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org`
      * scope to use this endpoint.
      */
    @JSName("actions/add-self-hosted-runner-to-group-for-org")
    var `actionsSlashadd-self-hosted-runner-to-group-for-org`: ParametersPathOrgRunnergroupidRunnerid
    
    /**
      * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/approve-workflow-run")
    var `actionsSlashapprove-workflow-run`: Responses201Content47403Content55
    
    /** Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    @JSName("actions/cancel-workflow-run")
    var `actionsSlashcancel-workflow-run`: Responses202Content47
    
    /**
      * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
      * this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
      *
      * ```
      * const sodium = require('tweetsodium');
      *
      * const key = "base64-encoded-public-key";
      * const value = "plain-text-secret";
      *
      * // Convert the message and key to Uint8Array's (Buffer implements that interface)
      * const messageBytes = Buffer.from(value);
      * const keyBytes = Buffer.from(key, 'base64');
      *
      * // Encrypt using LibSodium.
      * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
      *
      * // Base64 the encrypted secret
      * const encrypted = Buffer.from(encryptedBytes).toString('base64');
      *
      * console.log(encrypted);
      * ```
      *
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("actions/create-or-update-environment-secret")
    var `actionsSlashcreate-or-update-environment-secret`: ParametersPathSecretnameStringRequestBodyContentApplicationjsonEncryptedvalueString
    
    /**
      * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
      * use this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
      *
      * ```
      * const sodium = require('tweetsodium');
      *
      * const key = "base64-encoded-public-key";
      * const value = "plain-text-secret";
      *
      * // Convert the message and key to Uint8Array's (Buffer implements that interface)
      * const messageBytes = Buffer.from(value);
      * const keyBytes = Buffer.from(key, 'base64');
      *
      * // Encrypt using LibSodium.
      * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
      *
      * // Base64 the encrypted secret
      * const encrypted = Buffer.from(encryptedBytes).toString('base64');
      *
      * console.log(encrypted);
      * ```
      *
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("actions/create-or-update-org-secret")
    var `actionsSlashcreate-or-update-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonEncryptedvalue
    
    /**
      * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
      * this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
      *
      * ```
      * const sodium = require('tweetsodium');
      *
      * const key = "base64-encoded-public-key";
      * const value = "plain-text-secret";
      *
      * // Convert the message and key to Uint8Array's (Buffer implements that interface)
      * const messageBytes = Buffer.from(value);
      * const keyBytes = Buffer.from(key, 'base64');
      *
      * // Encrypt using LibSodium.
      * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
      *
      * // Base64 the encrypted secret
      * const encrypted = Buffer.from(encryptedBytes).toString('base64');
      *
      * console.log(encrypted);
      * ```
      *
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("actions/create-or-update-repo-secret")
    var `actionsSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid
    
    /**
      * Returns a token that you can pass to the `config` script. The token expires after one hour.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * #### Example using registration token
      *
      * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
      *
      * ```
      * ./config.sh --url https://github.com/octo-org --token TOKEN
      * ```
      */
    @JSName("actions/create-registration-token-for-org")
    var `actionsSlashcreate-registration-token-for-org`: ParametersPathOrgStringResponses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
      * using an access token with the `repo` scope to use this endpoint.
      *
      * #### Example using registration token
      *
      * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
      *
      * ```
      * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
      * ```
      */
    @JSName("actions/create-registration-token-for-repo")
    var `actionsSlashcreate-registration-token-for-repo`: Parameters491Responses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      *
      * #### Example using remove token
      *
      * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
      * endpoint.
      *
      * ```
      * ./config.sh remove --token TOKEN
      * ```
      */
    @JSName("actions/create-remove-token-for-org")
    var `actionsSlashcreate-remove-token-for-org`: ParametersPathOrgStringResponses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      *
      * #### Example using remove token
      *
      * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
      *
      * ```
      * ./config.sh remove --token TOKEN
      * ```
      */
    @JSName("actions/create-remove-token-for-repo")
    var `actionsSlashcreate-remove-token-for-repo`: Parameters491Responses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      * Creates a new self-hosted runner group for an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/create-self-hosted-runner-group-for-org")
    var `actionsSlashcreate-self-hosted-runner-group-for-org`: Responses201ContentApplicationjsonInherited
    
    /**
      * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
      *
      * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
      */
    @JSName("actions/create-workflow-dispatch")
    var `actionsSlashcreate-workflow-dispatch`: ParametersPathRepoWorkflowidRequestBodyContentApplicationjsonInputs
    
    /**
      * Deletes a GitHub Actions cache for a repository, using a cache ID.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      *
      * GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/delete-actions-cache-by-id")
    var `actionsSlashdelete-actions-cache-by-id`: ParametersPathCacheidOwner
    
    /**
      * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      *
      * GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/delete-actions-cache-by-key")
    var `actionsSlashdelete-actions-cache-by-key`: ParametersQueryKeyStringRef
    
    /** Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    @JSName("actions/delete-artifact")
    var `actionsSlashdelete-artifact`: ParametersPathArtifactidOwnerResponses
    
    /** Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    @JSName("actions/delete-environment-secret")
    var `actionsSlashdelete-environment-secret`: ParametersPathSecretnameStringResponses
    
    /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    @JSName("actions/delete-org-secret")
    var `actionsSlashdelete-org-secret`: ParametersPathOrgSecretnameResponses
    
    /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    @JSName("actions/delete-repo-secret")
    var `actionsSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses
    
    /**
      * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/delete-self-hosted-runner-from-org")
    var `actionsSlashdelete-self-hosted-runner-from-org`: ParametersPathOrgStringRunneridNumberResponses
    
    /**
      * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
      *
      * You must authenticate using an access token with the `repo`
      * scope to use this endpoint.
      */
    @JSName("actions/delete-self-hosted-runner-from-repo")
    var `actionsSlashdelete-self-hosted-runner-from-repo`: ParametersPathRepoRunneridResponses
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      * Deletes a self-hosted runner group for an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/delete-self-hosted-runner-group-from-org")
    var `actionsSlashdelete-self-hosted-runner-group-from-org`: ParametersPathRunnergroupidNumberResponses
    
    /**
      * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
      * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
      * this endpoint.
      */
    @JSName("actions/delete-workflow-run")
    var `actionsSlashdelete-workflow-run`: Parameters495
    
    /** Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    @JSName("actions/delete-workflow-run-logs")
    var `actionsSlashdelete-workflow-run-logs`: Responses500Content55
    
    /**
      * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/disable-selected-repository-github-actions-organization")
    var `actionsSlashdisable-selected-repository-github-actions-organization`: ParametersPathOrgStringRepositoryidNumber
    
    /**
      * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/disable-workflow")
    var `actionsSlashdisable-workflow`: ParametersPathRepoWorkflowidResponses
    
    /**
      * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
      * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
      * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
      * GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/download-artifact")
    var `actionsSlashdownload-artifact`: ParametersPathArchiveformatArtifactid
    
    /**
      * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
      * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
      * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
      * have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/download-job-logs-for-workflow-run")
    var `actionsSlashdownload-job-logs-for-workflow-run`: ParametersPathJobidOwnerResponses
    
    /**
      * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
      * 1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to
      * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
      * GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/download-workflow-run-attempt-logs")
    var `actionsSlashdownload-workflow-run-attempt-logs`: Parameters497
    
    /**
      * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
      * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
      * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
      * the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/download-workflow-run-logs")
    var `actionsSlashdownload-workflow-run-logs`: Parameters495
    
    /**
      * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/enable-selected-repository-github-actions-organization")
    var `actionsSlashenable-selected-repository-github-actions-organization`: ParametersPathOrgStringRepositoryidNumber
    
    /**
      * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/enable-workflow")
    var `actionsSlashenable-workflow`: ParametersPathRepoWorkflowidResponses
    
    /**
      * Lists the GitHub Actions caches for a repository.
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      * GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-actions-cache-list")
    var `actionsSlashget-actions-cache-list`: ParametersQueryDirectionKey
    
    /**
      * Gets GitHub Actions cache usage for a repository.
      * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-actions-cache-usage")
    var `actionsSlashget-actions-cache-usage`: Responses200ContentApplicationjsonActivecachescount
    
    /**
      * Lists repositories and their GitHub Actions cache usage for an organization.
      * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
      * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
      */
    @JSName("actions/get-actions-cache-usage-by-repo-for-org")
    var `actionsSlashget-actions-cache-usage-by-repo-for-org`: ParametersPathOrgStringQuery426
    
    /**
      * Gets the total GitHub Actions cache usage for an enterprise.
      * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      */
    @JSName("actions/get-actions-cache-usage-for-enterprise")
    var `actionsSlashget-actions-cache-usage-for-enterprise`: ParametersPathEnterpriseString
    
    /**
      * Gets the total GitHub Actions cache usage for an organization.
      * The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
      * You must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.
      */
    @JSName("actions/get-actions-cache-usage-for-org")
    var `actionsSlashget-actions-cache-usage-for-org`: Responses200ContentApplicationjsonTotalactivecachescount
    
    /**
      * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/get-allowed-actions-organization")
    var `actionsSlashget-allowed-actions-organization`: ParametersPathOrgStringResponses200ContentApplicationjsonGithubownedallowed
    
    /**
      * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
      */
    @JSName("actions/get-allowed-actions-repository")
    var `actionsSlashget-allowed-actions-repository`: Parameters491Responses200ContentApplicationjsonGithubownedallowed
    
    /** Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    @JSName("actions/get-artifact")
    var `actionsSlashget-artifact`: ParametersPathArtifactidOwner
    
    /**
      * Gets the `opt-out` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.
      */
    @JSName("actions/get-custom-oidc-sub-claim-for-repo")
    var `actionsSlashget-custom-oidc-sub-claim-for-repo`: Responses200ContentApplicationjsonUsedefault
    
    /** Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    @JSName("actions/get-environment-public-key")
    var `actionsSlashget-environment-public-key`: Parameters590
    
    /** Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    @JSName("actions/get-environment-secret")
    var `actionsSlashget-environment-secret`: ParametersPathSecretnameString
    
    /**
      * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an enterprise,
      * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
      * "[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise)."
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
      */
    @JSName("actions/get-github-actions-default-workflow-permissions-enterprise")
    var `actionsSlashget-github-actions-default-workflow-permissions-enterprise`: Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
    
    /**
      * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
      * as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
      * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/get-github-actions-default-workflow-permissions-organization")
    var `actionsSlashget-github-actions-default-workflow-permissions-organization`: ParametersPathOrgStringResponses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
    
    /**
      * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
      * as well as if GitHub Actions can submit approving pull request reviews.
      * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
      */
    @JSName("actions/get-github-actions-default-workflow-permissions-repository")
    var `actionsSlashget-github-actions-default-workflow-permissions-repository`: Parameters491Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
    
    /**
      * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/get-github-actions-permissions-organization")
    var `actionsSlashget-github-actions-permissions-organization`: Responses200ContentApplicationjsonAllowedactionsEnabledrepositories
    
    /**
      * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
      */
    @JSName("actions/get-github-actions-permissions-repository")
    var `actionsSlashget-github-actions-permissions-repository`: Responses200ContentApplicationjsonEnabledSelectedactionsurl
    
    /** Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    @JSName("actions/get-job-for-workflow-run")
    var `actionsSlashget-job-for-workflow-run`: ParametersPathJobidOwner
    
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    @JSName("actions/get-org-public-key")
    var `actionsSlashget-org-public-key`: Responses200ContentApplicationjsonCreatedatId
    
    /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    @JSName("actions/get-org-secret")
    var `actionsSlashget-org-secret`: ParametersPathOrgSecretname
    
    /**
      * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-pending-deployments-for-run")
    var `actionsSlashget-pending-deployments-for-run`: Responses200Content502
    
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    @JSName("actions/get-repo-public-key")
    var `actionsSlashget-repo-public-key`: Parameters491Responses200ContentApplicationjsonCreatedatId
    
    /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    @JSName("actions/get-repo-secret")
    var `actionsSlashget-repo-secret`: ParametersPathOwnerRepoSecretname
    
    /** Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    @JSName("actions/get-reviews-for-run")
    var `actionsSlashget-reviews-for-run`: Responses200Content496
    
    /**
      * Gets a specific self-hosted runner configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/get-self-hosted-runner-for-org")
    var `actionsSlashget-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumber
    
    /**
      * Gets a specific self-hosted runner configured in a repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/get-self-hosted-runner-for-repo")
    var `actionsSlashget-self-hosted-runner-for-repo`: ParametersPathRepoRunnerid
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      * Gets a specific self-hosted runner group for an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/get-self-hosted-runner-group-for-org")
    var `actionsSlashget-self-hosted-runner-group-for-org`: ParametersPathRunnergroupidNumber
    
    /** Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    @JSName("actions/get-workflow")
    var `actionsSlashget-workflow`: ParametersPathRepoWorkflowid
    
    /**
      * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
      * This endpoint only applies to internal repositories. For more information, see "[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
      * repository `administration` permission to use this endpoint.
      */
    @JSName("actions/get-workflow-access-to-repository")
    var `actionsSlashget-workflow-access-to-repository`: Responses200ContentApplicationjsonAccesslevel
    
    /** Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    @JSName("actions/get-workflow-run")
    var `actionsSlashget-workflow-run`: ParametersPathRepoRunid
    
    /**
      * Gets a specific workflow run attempt. Anyone with read access to the repository
      * can use this endpoint. If the repository is private you must use an access token
      * with the `repo` scope. GitHub Apps must have the `actions:read` permission to
      * use this endpoint.
      */
    @JSName("actions/get-workflow-run-attempt")
    var `actionsSlashget-workflow-run-attempt`: ParametersPathAttemptnumberOwner
    
    /**
      * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-workflow-run-usage")
    var `actionsSlashget-workflow-run-usage`: Responses200ContentApplicationjsonBillable
    
    /**
      * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
      *
      * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/get-workflow-usage")
    var `actionsSlashget-workflow-usage`: Responses200ContentApplicationjsonBillableWINDOWS
    
    /** Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    @JSName("actions/list-artifacts-for-repo")
    var `actionsSlashlist-artifacts-for-repo`: Responses200ContentApplicationjsonArtifactsTotalcount
    
    /** Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    @JSName("actions/list-environment-secrets")
    var `actionsSlashlist-environment-secrets`: ParametersPathEnvironmentnameString
    
    /** Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters). */
    @JSName("actions/list-jobs-for-workflow-run")
    var `actionsSlashlist-jobs-for-workflow-run`: ParametersQuery498
    
    /** Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters). */
    @JSName("actions/list-jobs-for-workflow-run-attempt")
    var `actionsSlashlist-jobs-for-workflow-run-attempt`: ParametersPathAttemptnumberOwnerQuery426
    
    /**
      * Lists all labels for a self-hosted runner configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/list-labels-for-self-hosted-runner-for-org")
    var `actionsSlashlist-labels-for-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumberResponses200ContentApplicationjsonLabelsArray
    
    /**
      * Lists all labels for a self-hosted runner configured in a repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/list-labels-for-self-hosted-runner-for-repo")
    var `actionsSlashlist-labels-for-self-hosted-runner-for-repo`: ParametersPathRepoRunneridResponses200ContentApplicationjsonLabelsArray
    
    /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    @JSName("actions/list-org-secrets")
    var `actionsSlashlist-org-secrets`: Responses200ContentApplicationjson453
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      * Lists the repositories with access to a self-hosted runner group configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/list-repo-access-to-self-hosted-runner-group-in-org")
    var `actionsSlashlist-repo-access-to-self-hosted-runner-group-in-org`: ParametersQuery451
    
    /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    @JSName("actions/list-repo-secrets")
    var `actionsSlashlist-repo-secrets`: Responses200ContentApplicationjson505
    
    /** Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    @JSName("actions/list-repo-workflows")
    var `actionsSlashlist-repo-workflows`: Responses200ContentApplicationjsonTotalcountWorkflows
    
    /**
      * Lists binaries for the runner application that you can download and run.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/list-runner-applications-for-org")
    var `actionsSlashlist-runner-applications-for-org`: ParametersPathOrgStringResponses200Content430
    
    /**
      * Lists binaries for the runner application that you can download and run.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint.
      */
    @JSName("actions/list-runner-applications-for-repo")
    var `actionsSlashlist-runner-applications-for-repo`: Parameters491Responses200Content430
    
    /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    @JSName("actions/list-selected-repos-for-org-secret")
    var `actionsSlashlist-selected-repos-for-org-secret`: ParametersPathOrgSecretnameQuery451
    
    /**
      * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/list-selected-repositories-enabled-github-actions-organization")
    var `actionsSlashlist-selected-repositories-enabled-github-actions-organization`: Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/list-self-hosted-runner-groups-for-org")
    var `actionsSlashlist-self-hosted-runner-groups-for-org`: ParametersQueryPerpageVisibletorepository
    
    /**
      * Lists all self-hosted runners configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/list-self-hosted-runners-for-org")
    var `actionsSlashlist-self-hosted-runners-for-org`: ParametersPathOrgStringQuery426Responses200ContentApplicationjsonRunnersTotalcount
    
    /** Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. */
    @JSName("actions/list-self-hosted-runners-for-repo")
    var `actionsSlashlist-self-hosted-runners-for-repo`: ParametersPathOwnerStringResponses200ContentApplicationjsonRunnersTotalcount
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      * Lists self-hosted runners that are in a specific organization group.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/list-self-hosted-runners-in-group-for-org")
    var `actionsSlashlist-self-hosted-runners-in-group-for-org`: ParametersPathRunnergroupidNumberQuery426
    
    /** Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    @JSName("actions/list-workflow-run-artifacts")
    var `actionsSlashlist-workflow-run-artifacts`: ParametersPathRepoRunidQuery426
    
    /**
      * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
      */
    @JSName("actions/list-workflow-runs")
    var `actionsSlashlist-workflow-runs`: ParametersPathRepoWorkflowidQueryActorBranch
    
    /**
      * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("actions/list-workflow-runs-for-repo")
    var `actionsSlashlist-workflow-runs-for-repo`: ParametersQueryActorBranch
    
    /** Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    @JSName("actions/re-run-job-for-workflow-run")
    var `actionsSlashre-run-job-for-workflow-run`: Responses493
    
    /** Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    @JSName("actions/re-run-workflow")
    var `actionsSlashre-run-workflow`: Parameters495RequestBodyContent152
    
    /** Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. */
    @JSName("actions/re-run-workflow-failed-jobs")
    var `actionsSlashre-run-workflow-failed-jobs`: Parameters495RequestBodyContent152
    
    /**
      * Remove all custom labels from a self-hosted runner configured in an
      * organization. Returns the remaining read-only labels from the runner.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/remove-all-custom-labels-from-self-hosted-runner-for-org")
    var `actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumberResponses200ContentApplicationjsonLabelsArray
    
    /**
      * Remove all custom labels from a self-hosted runner configured in a
      * repository. Returns the remaining read-only labels from the runner.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/remove-all-custom-labels-from-self-hosted-runner-for-repo")
    var `actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-repo`: ParametersPathRepoRunneridResponses200ContentApplicationjsonLabelsArray
    
    /**
      * Remove a custom label from a self-hosted runner configured
      * in an organization. Returns the remaining labels from the runner.
      *
      * This endpoint returns a `404 Not Found` status if the custom label is not
      * present on the runner.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/remove-custom-label-from-self-hosted-runner-for-org")
    var `actionsSlashremove-custom-label-from-self-hosted-runner-for-org`: ParametersPathNameOrgRunnerid
    
    /**
      * Remove a custom label from a self-hosted runner configured
      * in a repository. Returns the remaining labels from the runner.
      *
      * This endpoint returns a `404 Not Found` status if the custom label is not
      * present on the runner.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/remove-custom-label-from-self-hosted-runner-for-repo")
    var `actionsSlashremove-custom-label-from-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunnerid
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      *
      * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/remove-repo-access-to-self-hosted-runner-group-in-org")
    var `actionsSlashremove-repo-access-to-self-hosted-runner-group-in-org`: ParametersPathRepositoryidRunnergroupid
    
    /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    @JSName("actions/remove-selected-repo-from-org-secret")
    var `actionsSlashremove-selected-repo-from-org-secret`: ParametersPathOrgRepositoryidSecretname
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      *
      * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/remove-self-hosted-runner-from-group-for-org")
    var `actionsSlashremove-self-hosted-runner-from-group-for-org`: ParametersPathOrgRunnergroupidRunnerid
    
    /**
      * Approve or reject pending deployments that are waiting on approval by a required reviewer.
      *
      * Required reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.
      */
    @JSName("actions/review-pending-deployments-for-run")
    var `actionsSlashreview-pending-deployments-for-run`: Responses200Content504
    
    /**
      * Sets the GitHub Actions OpenID Connect (OIDC) custom issuer policy for an enterprise.
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
      */
    @JSName("actions/set-actions-oidc-custom-issuer-policy-for-enterprise")
    var `actionsSlashset-actions-oidc-custom-issuer-policy-for-enterprise`: RequestBodyContentApplicationjsonIncludeenterpriseslug
    
    /**
      * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * If the organization belongs to an enterprise that has `selected` actions and reusable workflows set at the enterprise level, then you cannot override any of the enterprise's allowed actions and reusable workflows settings.
      *
      * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/set-allowed-actions-organization")
    var `actionsSlashset-allowed-actions-organization`: ParametersPathOrgStringRequestBodyContentApplicationjsonGithubownedallowed
    
    /**
      * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
      *
      * If the repository belongs to an organization or enterprise that has `selected` actions and reusable workflows set at the organization or enterprise levels, then you cannot override any of the allowed actions and reusable workflows settings.
      *
      * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
      */
    @JSName("actions/set-allowed-actions-repository")
    var `actionsSlashset-allowed-actions-repository`: Parameters491RequestBodyContentApplicationjsonGithubownedallowed
    
    /**
      * Remove all previous custom labels and set the new custom labels for a specific
      * self-hosted runner configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/set-custom-labels-for-self-hosted-runner-for-org")
    var `actionsSlashset-custom-labels-for-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumberRequestBodyContentApplicationjsonLabels
    
    /**
      * Remove all previous custom labels and set the new custom labels for a specific
      * self-hosted runner configured in a repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint.
      */
    @JSName("actions/set-custom-labels-for-self-hosted-runner-for-repo")
    var `actionsSlashset-custom-labels-for-self-hosted-runner-for-repo`: ParametersPathRepoRunneridRequestBodyContentApplicationjsonLabels
    
    /**
      * Sets the `opt-in` or `opt-out` flag of a GitHub Actions OpenID Connect (OIDC) subject claim customization for a repository.
      * You must authenticate using an access token with the `repo` scope to use this
      * endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
      */
    @JSName("actions/set-custom-oidc-sub-claim-for-repo")
    var `actionsSlashset-custom-oidc-sub-claim-for-repo`: RequestBodyContentApplicationjsonUsedefault
    
    /**
      * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an enterprise, and sets
      * whether GitHub Actions can submit approving pull request reviews. For more information, see
      * "[Enforcing a policy for workflow permissions in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#enforcing-a-policy-for-workflow-permissions-in-your-enterprise)."
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      * GitHub Apps must have the `enterprise_administration:write` permission to use this endpoint.
      */
    @JSName("actions/set-github-actions-default-workflow-permissions-enterprise")
    var `actionsSlashset-github-actions-default-workflow-permissions-enterprise`: RequestBodyContentApplicationjson427
    
    /**
      * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions
      * can submit approving pull request reviews. For more information, see
      * "[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/set-github-actions-default-workflow-permissions-organization")
    var `actionsSlashset-github-actions-default-workflow-permissions-organization`: ParametersPathOrgStringRequestBodyContentApplicationjson427
    
    /**
      * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions
      * can submit approving pull request reviews.
      * For more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.
      */
    @JSName("actions/set-github-actions-default-workflow-permissions-repository")
    var `actionsSlashset-github-actions-default-workflow-permissions-repository`: Parameters491RequestBodyContentApplicationjson427
    
    /**
      * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
      *
      * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions and reusable workflows, then you cannot override them for the organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/set-github-actions-permissions-organization")
    var `actionsSlashset-github-actions-permissions-organization`: RequestBodyContentApplicationjson450
    
    /**
      * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
      *
      * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions and reusable workflows, then you cannot override them for the repository.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
      */
    @JSName("actions/set-github-actions-permissions-repository")
    var `actionsSlashset-github-actions-permissions-repository`: RequestBodyContentApplicationjsonAllowedactionsEnabledBoolean
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/set-repo-access-to-self-hosted-runner-group-in-org")
    var `actionsSlashset-repo-access-to-self-hosted-runner-group-in-org`: ParametersPathRunnergroupidNumberRequestBodyContentApplicationjsonSelectedrepositoryids
    
    /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    @JSName("actions/set-selected-repos-for-org-secret")
    var `actionsSlashset-selected-repos-for-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids
    
    /**
      * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
      */
    @JSName("actions/set-selected-repositories-enabled-github-actions-organization")
    var `actionsSlashset-selected-repositories-enabled-github-actions-organization`: ParametersPathOrgStringRequestBodyContentApplicationjsonSelectedrepositoryids
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      * Replaces the list of self-hosted runners that are part of an organization runner group.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/set-self-hosted-runners-in-group-for-org")
    var `actionsSlashset-self-hosted-runners-in-group-for-org`: ParametersPathRunnergroupidNumberRequestBodyContentApplicationjsonRunnersArray
    
    /**
      * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
      * This endpoint only applies to internal repositories. For more information, see "[Managing GitHub Actions settings for a repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the
      * repository `administration` permission to use this endpoint.
      */
    @JSName("actions/set-workflow-access-to-repository")
    var `actionsSlashset-workflow-access-to-repository`: RequestBodyContentApplicationjsonAccesslevel
    
    /**
      * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
      *
      * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("actions/update-self-hosted-runner-group-for-org")
    var `actionsSlashupdate-self-hosted-runner-group-for-org`: Responses200ContentApplicationjsonInherited
    
    @JSName("activity/check-repo-is-starred-by-authenticated-user")
    var `activitySlashcheck-repo-is-starred-by-authenticated-user`: Responses403Content55404ContentApplicationjsonDocumentationurlMessage
    
    /** This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription). */
    @JSName("activity/delete-repo-subscription")
    var `activitySlashdelete-repo-subscription`: Parameters491Responses
    
    /** Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`. */
    @JSName("activity/delete-thread-subscription")
    var `activitySlashdelete-thread-subscription`: Responses304Unknown401Content55
    
    /**
      * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
      *
      * *   **Timeline**: The GitHub global public timeline
      * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
      * *   **Current user public**: The public timeline for the authenticated user
      * *   **Current user**: The private timeline for the authenticated user
      * *   **Current user actor**: The private timeline for activity created by the authenticated user
      * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
      * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
      *
      * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
      */
    @JSName("activity/get-feeds")
    var `activitySlashget-feeds`: Responses200ContentApplicationjsonCurrentuserorganizationurl
    
    @JSName("activity/get-repo-subscription")
    var `activitySlashget-repo-subscription`: Responses200ContentApplicationjsonCreatedatIgnored
    
    @JSName("activity/get-thread")
    var `activitySlashget-thread`: ParametersPathThreadidNumber
    
    /**
      * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
      *
      * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
      */
    @JSName("activity/get-thread-subscription-for-authenticated-user")
    var `activitySlashget-thread-subscription-for-authenticated-user`: Responses200ContentApplicationjsonRepositoryurl
    
    /** If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. */
    @JSName("activity/list-events-for-authenticated-user")
    var `activitySlashlist-events-for-authenticated-user`: ParametersPath599Query426
    
    /** List all notifications for the current user, sorted by most recently updated. */
    @JSName("activity/list-notifications-for-authenticated-user")
    var `activitySlashlist-notifications-for-authenticated-user`: ParametersQueryAllBefore
    
    /** This is the user's organization dashboard. You must be authenticated as the user to view this. */
    @JSName("activity/list-org-events-for-authenticated-user")
    var `activitySlashlist-org-events-for-authenticated-user`: ParametersPathOrgStringUsernameString
    
    /** We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago. */
    @JSName("activity/list-public-events")
    var `activitySlashlist-public-events`: Parameters434
    
    @JSName("activity/list-public-events-for-repo-network")
    var `activitySlashlist-public-events-for-repo-network`: ParametersPathOwnerString
    
    @JSName("activity/list-public-events-for-user")
    var `activitySlashlist-public-events-for-user`: ParametersPath599Query426
    
    @JSName("activity/list-public-org-events")
    var `activitySlashlist-public-org-events`: Responses200Content435
    
    /** These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events. */
    @JSName("activity/list-received-events-for-user")
    var `activitySlashlist-received-events-for-user`: ParametersPath599Query426
    
    @JSName("activity/list-received-public-events-for-user")
    var `activitySlashlist-received-public-events-for-user`: ParametersPath599Query426
    
    @JSName("activity/list-repo-events")
    var `activitySlashlist-repo-events`: ParametersPathOwnerStringResponses200Content435
    
    /** List all notifications for the current user. */
    @JSName("activity/list-repo-notifications-for-authenticated-user")
    var `activitySlashlist-repo-notifications-for-authenticated-user`: ParametersQueryBeforePage
    
    /**
      * Lists repositories the authenticated user has starred.
      *
      * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
      */
    @JSName("activity/list-repos-starred-by-authenticated-user")
    var `activitySlashlist-repos-starred-by-authenticated-user`: ParametersQuery616
    
    /**
      * Lists repositories a user has starred.
      *
      * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
      */
    @JSName("activity/list-repos-starred-by-user")
    var `activitySlashlist-repos-starred-by-user`: ParametersPath599Query616
    
    /** Lists repositories a user is watching. */
    @JSName("activity/list-repos-watched-by-user")
    var `activitySlashlist-repos-watched-by-user`: ParametersPath599Query426Responses475
    
    /**
      * Lists the people that have starred the repository.
      *
      * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
      */
    @JSName("activity/list-stargazers-for-repo")
    var `activitySlashlist-stargazers-for-repo`: Responses200Content578
    
    /** Lists repositories the authenticated user is watching. */
    @JSName("activity/list-watched-repos-for-authenticated-user")
    var `activitySlashlist-watched-repos-for-authenticated-user`: Responses200Content467304Unknown
    
    /** Lists the people watching the specified repository. */
    @JSName("activity/list-watchers-for-repo")
    var `activitySlashlist-watchers-for-repo`: ParametersPathOwnerStringResponses469
    
    /** Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
    @JSName("activity/mark-notifications-as-read")
    var `activitySlashmark-notifications-as-read`: Responses202205304
    
    /** Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
    @JSName("activity/mark-repo-notifications-as-read")
    var `activitySlashmark-repo-notifications-as-read`: Responses202205
    
    @JSName("activity/mark-thread-as-read")
    var `activitySlashmark-thread-as-read`: Responses205304403
    
    /** If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely. */
    @JSName("activity/set-repo-subscription")
    var `activitySlashset-repo-subscription`: Responses582
    
    /**
      * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
      *
      * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
      *
      * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
      */
    @JSName("activity/set-thread-subscription")
    var `activitySlashset-thread-subscription`: ParametersPathThreadidNumberRequestBodyContentApplicationjsonIgnored
    
    /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." */
    @JSName("activity/star-repo-for-authenticated-user")
    var `activitySlashstar-repo-for-authenticated-user`: Parameters491Responses401Content55403Content55404Content55
    
    @JSName("activity/unstar-repo-for-authenticated-user")
    var `activitySlashunstar-repo-for-authenticated-user`: Parameters491Responses401Content55403Content55404Content55
    
    /**
      * Add a single repository to an installation. The authenticated user must have admin access to the repository.
      *
      * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
      */
    @JSName("apps/add-repo-to-installation-for-authenticated-user")
    var `appsSlashadd-repo-to-installation-for-authenticated-user`: ParametersPathInstallationidNumberRepositoryidNumber
    
    /** OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`. */
    @JSName("apps/check-token")
    var `appsSlashcheck-token`: RequestBodyContentApplicationjsonAccesstoken
    
    /** Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`. */
    @JSName("apps/create-from-manifest")
    var `appsSlashcreate-from-manifest`: ParametersPath
    
    /**
      * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/create-installation-access-token")
    var `appsSlashcreate-installation-access-token`: RequestBodyContentApplicationjsonRepositoryids
    
    /**
      * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
      * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
      */
    @JSName("apps/delete-authorization")
    var `appsSlashdelete-authorization`: ParametersPathClientidString
    
    /**
      * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/delete-installation")
    var `appsSlashdelete-installation`: Responses404Content55
    
    /** OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. */
    @JSName("apps/delete-token")
    var `appsSlashdelete-token`: ParametersPathClientidString
    
    /**
      * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-authenticated")
    var `appsSlashget-authenticated`: Responses200ContentApplicationjsonExternalurl
    
    /**
      * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
      *
      * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
      */
    @JSName("apps/get-by-slug")
    var `appsSlashget-by-slug`: ParametersPathAppslugString
    
    /**
      * Enables an authenticated GitHub App to find an installation's information using the installation id.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-installation")
    var `appsSlashget-installation`: ParametersPathInstallationidNumber
    
    /**
      * Enables an authenticated GitHub App to find the organization's installation information.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-org-installation")
    var `appsSlashget-org-installation`: Responses461
    
    /**
      * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-repo-installation")
    var `appsSlashget-repo-installation`: Responses301Content55
    
    /**
      * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/get-subscription-plan-for-account")
    var `appsSlashget-subscription-plan-for-account`: ParametersPathAccountidNumber
    
    /**
      * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/get-subscription-plan-for-account-stubbed")
    var `appsSlashget-subscription-plan-for-account-stubbed`: Responses200ContentApplicationjsonMarketplacepurchase401Content55
    
    /**
      * Enables an authenticated GitHub App to find the user’s installation information.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-user-installation")
    var `appsSlashget-user-installation`: ParametersPath599Responses461
    
    /**
      * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-webhook-config-for-app")
    var `appsSlashget-webhook-config-for-app`: Responses200ContentApplicationjsonContenttype
    
    /**
      * Returns a delivery for the webhook configured for a GitHub App.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/get-webhook-delivery")
    var `appsSlashget-webhook-delivery`: ParametersPathDeliveryidNumber
    
    /**
      * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/list-accounts-for-plan")
    var `appsSlashlist-accounts-for-plan`: ParametersPathPlanidNumber
    
    /**
      * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/list-accounts-for-plan-stubbed")
    var `appsSlashlist-accounts-for-plan-stubbed`: Responses200Content445
    
    /**
      * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
      *
      * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
      *
      * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
      *
      * The access the user has to each repository is included in the hash under the `permissions` key.
      */
    @JSName("apps/list-installation-repos-for-authenticated-user")
    var `appsSlashlist-installation-repos-for-authenticated-user`: ParametersPathInstallationidNumberQuery426
    
    /**
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      *
      * The permissions the installation has are included under the `permissions` key.
      */
    @JSName("apps/list-installations")
    var `appsSlashlist-installations`: ParametersQueryOutdatedPage
    
    /**
      * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
      *
      * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
      *
      * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
      *
      * You can find the permissions for the installation under the `permissions` key.
      */
    @JSName("apps/list-installations-for-authenticated-user")
    var `appsSlashlist-installations-for-authenticated-user`: Responses200ContentApplicationjsonInstallationsTotalcount304Unknown
    
    /**
      * Lists all plans that are part of your GitHub Marketplace listing.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/list-plans")
    var `appsSlashlist-plans`: Responses200Content444
    
    /**
      * Lists all plans that are part of your GitHub Marketplace listing.
      *
      * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
      */
    @JSName("apps/list-plans-stubbed")
    var `appsSlashlist-plans-stubbed`: Responses200Content444401Content55
    
    /**
      * List repositories that an app installation can access.
      *
      * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
      */
    @JSName("apps/list-repos-accessible-to-installation")
    var `appsSlashlist-repos-accessible-to-installation`: Responses200ContentApplicationjsonRepositoryselectionTotalcount
    
    /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */
    @JSName("apps/list-subscriptions-for-authenticated-user")
    var `appsSlashlist-subscriptions-for-authenticated-user`: Responses200304401404
    
    /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */
    @JSName("apps/list-subscriptions-for-authenticated-user-stubbed")
    var `appsSlashlist-subscriptions-for-authenticated-user-stubbed`: Responses200Content608
    
    /**
      * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/list-webhook-deliveries")
    var `appsSlashlist-webhook-deliveries`: ParametersQueryCursorPerpage
    
    /**
      * Redeliver a delivery for the webhook configured for a GitHub App.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/redeliver-webhook-delivery")
    var `appsSlashredeliver-webhook-delivery`: Responses202400422
    
    /**
      * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
      *
      * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
      */
    @JSName("apps/remove-repo-from-installation-for-authenticated-user")
    var `appsSlashremove-repo-from-installation-for-authenticated-user`: ParametersPathInstallationidNumberRepositoryidNumber
    
    /** OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
    @JSName("apps/reset-token")
    var `appsSlashreset-token`: Responses200ContentApplicationjsonFingerprint422Content421
    
    /**
      * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
      *
      * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
      *
      * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
      */
    @JSName("apps/revoke-installation-access-token")
    var `appsSlashrevoke-installation-access-token`: `50`
    
    /** Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
    @JSName("apps/scope-token")
    var `appsSlashscope-token`: RequestBodyContentApplicationjsonTargetid
    
    /**
      * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/suspend-installation")
    var `appsSlashsuspend-installation`: Responses404Content55
    
    /**
      * Removes a GitHub App installation suspension.
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/unsuspend-installation")
    var `appsSlashunsuspend-installation`: Responses404Content55
    
    /**
      * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
      *
      * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
      */
    @JSName("apps/update-webhook-config-for-app")
    var `appsSlashupdate-webhook-config-for-app`: RequestBodyContentApplicationjsonContenttypeInsecuressl
    
    /**
      * Gets the summary of the free and paid GitHub Actions minutes used.
      *
      * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
      *
      * The authenticated user must be an enterprise admin.
      */
    @JSName("billing/get-github-actions-billing-ghe")
    var `billingSlashget-github-actions-billing-ghe`: Responses200ContentApplicationjsonIncludedminutes
    
    /**
      * Gets the summary of the free and paid GitHub Actions minutes used.
      *
      * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
      *
      * Access tokens must have the `repo` or `admin:org` scope.
      */
    @JSName("billing/get-github-actions-billing-org")
    var `billingSlashget-github-actions-billing-org`: ParametersPathOrgStringResponses200ContentApplicationjsonIncludedminutes
    
    /**
      * Gets the summary of the free and paid GitHub Actions minutes used.
      *
      * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
      *
      * Access tokens must have the `user` scope.
      */
    @JSName("billing/get-github-actions-billing-user")
    var `billingSlashget-github-actions-billing-user`: ParametersPath599Responses200ContentApplicationjsonIncludedminutes
    
    /**
      * Gets the GitHub Advanced Security active committers for an enterprise per repository.
      *
      * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of active_users for each repository.
      *
      * The total number of repositories with committer information is tracked by the `total_count` field.
      */
    @JSName("billing/get-github-advanced-security-billing-ghe")
    var `billingSlashget-github-advanced-security-billing-ghe`: Responses200ContentApplicationjsonRepositoriesTotaladvancedsecuritycommitters
    
    /**
      * Gets the GitHub Advanced Security active committers for an organization per repository.
      *
      * Each distinct user login across all repositories is counted as a single Advanced Security seat, so the `total_advanced_security_committers` is not the sum of advanced_security_committers for each repository.
      *
      * If this organization defers to an enterprise for billing, the `total_advanced_security_committers` returned from the organization API may include some users that are in more than one organization, so they will only consume a single Advanced Security seat at the enterprise level.
      *
      * The total number of repositories with committer information is tracked by the `total_count` field.
      */
    @JSName("billing/get-github-advanced-security-billing-org")
    var `billingSlashget-github-advanced-security-billing-org`: ParametersPathOrgStringQuery426Responses200ContentApplicationjsonRepositoriesTotaladvancedsecuritycommitters
    
    /**
      * Gets the free and paid storage used for GitHub Packages in gigabytes.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * The authenticated user must be an enterprise admin.
      */
    @JSName("billing/get-github-packages-billing-ghe")
    var `billingSlashget-github-packages-billing-ghe`: Responses200ContentApplicationjsonIncludedgigabytesbandwidth
    
    /**
      * Gets the free and paid storage used for GitHub Packages in gigabytes.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * Access tokens must have the `repo` or `admin:org` scope.
      */
    @JSName("billing/get-github-packages-billing-org")
    var `billingSlashget-github-packages-billing-org`: ParametersPathOrgStringResponses200ContentApplicationjsonIncludedgigabytesbandwidth
    
    /**
      * Gets the free and paid storage used for GitHub Packages in gigabytes.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * Access tokens must have the `user` scope.
      */
    @JSName("billing/get-github-packages-billing-user")
    var `billingSlashget-github-packages-billing-user`: ParametersPath599Responses200ContentApplicationjsonIncludedgigabytesbandwidth
    
    /**
      * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * The authenticated user must be an enterprise admin.
      */
    @JSName("billing/get-shared-storage-billing-ghe")
    var `billingSlashget-shared-storage-billing-ghe`: Responses200ContentApplicationjsonDaysleftinbillingcycle
    
    /**
      * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * Access tokens must have the `repo` or `admin:org` scope.
      */
    @JSName("billing/get-shared-storage-billing-org")
    var `billingSlashget-shared-storage-billing-org`: ParametersPathOrgStringResponses200ContentApplicationjsonDaysleftinbillingcycle
    
    /**
      * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
      *
      * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
      *
      * Access tokens must have the `user` scope.
      */
    @JSName("billing/get-shared-storage-billing-user")
    var `billingSlashget-shared-storage-billing-user`: ParametersPath599Responses200ContentApplicationjsonDaysleftinbillingcycle
    
    /**
      * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
      *
      * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
      */
    @JSName("checks/create")
    var checksSlashcreate: Responses201ContentApplicationjsonDeployment
    
    /**
      * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
      *
      * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
      */
    @JSName("checks/create-suite")
    var `checksSlashcreate-suite`: Responses200ContentApplicationjsonHeadcommit
    
    /**
      * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
      */
    @JSName("checks/get")
    var checksSlashget: ParametersPathCheckrunidOwner
    
    /**
      * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
      *
      * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
      */
    @JSName("checks/get-suite")
    var `checksSlashget-suite`: ParametersPathChecksuiteidOwner
    
    /** Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository. */
    @JSName("checks/list-annotations")
    var `checksSlashlist-annotations`: ParametersPathCheckrunidOwnerQuery426
    
    /**
      * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
      */
    @JSName("checks/list-for-ref")
    var `checksSlashlist-for-ref`: ParametersQueryPerpageStatus
    
    /**
      * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
      */
    @JSName("checks/list-for-suite")
    var `checksSlashlist-for-suite`: ParametersQueryChecknameFilter
    
    /**
      * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
      *
      * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
      */
    @JSName("checks/list-suites-for-ref")
    var `checksSlashlist-suites-for-ref`: ParametersQueryAppidChecknamePage
    
    /**
      * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
      *
      * To rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
      */
    @JSName("checks/rerequest-run")
    var `checksSlashrerequest-run`: Responses403ContentApplicationjsonDocumentationurlMessage
    
    /**
      * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
      *
      * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
      */
    @JSName("checks/rerequest-suite")
    var `checksSlashrerequest-suite`: ParametersPathChecksuiteidOwnerResponses201Content47
    
    /** Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites. */
    @JSName("checks/set-suites-preferences")
    var `checksSlashset-suites-preferences`: Responses200ContentApplicationjsonPreferencesRepository
    
    /**
      * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
      *
      * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
      */
    @JSName("checks/update")
    var checksSlashupdate: Responses200ContentApplicationjsonDeployment
    
    /**
      * Deletes a specified code scanning analysis from a repository. For
      * private repositories, you must use an access token with the `repo` scope. For public repositories,
      * you must use an access token with `public_repo` scope.
      * GitHub Apps must have the `security_events` write permission to use this endpoint.
      *
      * You can delete one analysis at a time.
      * To delete a series of analyses, start with the most recent analysis and work backwards.
      * Conceptually, the process is similar to the undo function in a text editor.
      *
      * When you list the analyses for a repository,
      * one or more will be identified as deletable in the response:
      *
      * ```
      * "deletable": true
      * ```
      *
      * An analysis is deletable when it's the most recent in a set of analyses.
      * Typically, a repository will have multiple sets of analyses
      * for each enabled code scanning tool,
      * where a set is determined by a unique combination of analysis values:
      *
      * * `ref`
      * * `tool`
      * * `category`
      *
      * If you attempt to delete an analysis that is not the most recent in a set,
      * you'll get a 400 response with the message:
      *
      * ```
      * Analysis specified is not deletable.
      * ```
      *
      * The response from a successful `DELETE` operation provides you with
      * two alternative URLs for deleting the next analysis in the set:
      * `next_analysis_url` and `confirm_delete_url`.
      * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
      * in a set. This is a useful option if you want to preserve at least one analysis
      * for the specified tool in your repository.
      * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
      * When you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`
      * in the 200 response is `null`.
      *
      * As an example of the deletion process,
      * let's imagine that you added a workflow that configured a particular code scanning tool
      * to analyze the code in a repository. This tool has added 15 analyses:
      * 10 on the default branch, and another 5 on a topic branch.
      * You therefore have two separate sets of analyses for this tool.
      * You've now decided that you want to remove all of the analyses for the tool.
      * To do this you must make 15 separate deletion requests.
      * To start, you must find an analysis that's identified as deletable.
      * Each set of analyses always has one that's identified as deletable.
      * Having found the deletable analysis for one of the two sets,
      * delete this analysis and then continue deleting the next analysis in the set until they're all deleted.
      * Then repeat the process for the second set.
      * The procedure therefore consists of a nested loop:
      *
      * **Outer loop**:
      * * List the analyses for the repository, filtered by tool.
      * * Parse this list to find a deletable analysis. If found:
      *
      *   **Inner loop**:
      *   * Delete the identified analysis.
      *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
      *
      * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
      */
    @JSName("code-scanning/delete-analysis")
    var `code-scanningSlashdelete-analysis`: ParametersPathAnalysisidOwnerQueryConfirmdelete
    
    /**
      * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.
      *
      * **Deprecation notice**:
      * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
      */
    @JSName("code-scanning/get-alert")
    var `code-scanningSlashget-alert`: ParametersPathAlertnumberOwner
    
    /**
      * Gets a specified code scanning analysis for a repository.
      * You must use an access token with the `security_events` scope to use this endpoint with private repos,
      * the `public_repo` scope also grants permission to read security events on public repos only.
      * GitHub Apps must have the `security_events` read permission to use this endpoint.
      *
      * The default JSON response contains fields that describe the analysis.
      * This includes the Git reference and commit SHA to which the analysis relates,
      * the datetime of the analysis, the name of the code scanning tool,
      * and the number of alerts.
      *
      * The `rules_count` field in the default response give the number of rules
      * that were run in the analysis.
      * For very old analyses this data is not available,
      * and `0` is returned in this field.
      *
      * If you use the Accept header `application/sarif+json`,
      * the response contains the analysis data that was uploaded.
      * This is formatted as
      * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
      */
    @JSName("code-scanning/get-analysis")
    var `code-scanningSlashget-analysis`: ParametersPathAnalysisidOwner
    
    /**
      * Gets a CodeQL database for a language in a repository.
      *
      * By default this endpoint returns JSON metadata about the CodeQL database. To
      * download the CodeQL database binary content, set the `Accept` header of the request
      * to [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure
      * your HTTP client is configured to follow redirects or use the `Location` header
      * to make a second request to get the redirect URL.
      *
      * For private repositories, you must use an access token with the `security_events` scope.
      * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
      * GitHub Apps must have the `contents` read permission to use this endpoint.
      */
    @JSName("code-scanning/get-codeql-database")
    var `code-scanningSlashget-codeql-database`: ParametersPathLanguageOwner
    
    /** Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint. */
    @JSName("code-scanning/get-sarif")
    var `code-scanningSlashget-sarif`: ParametersPathOwnerRepoSarifid
    
    /**
      * Lists all instances of the specified code scanning alert.
      * You must use an access token with the `security_events` scope to use this endpoint with private repos,
      * the `public_repo` scope also grants permission to read security events on public repos only.
      * GitHub Apps must have the `security_events` read permission to use this endpoint.
      */
    @JSName("code-scanning/list-alert-instances")
    var `code-scanningSlashlist-alert-instances`: ParametersQueryPagePerpageRef
    
    /**
      * Lists code scanning alerts for the default branch for all eligible repositories in an enterprise. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      *
      * To use this endpoint, you must be a member of the enterprise,
      * and you must use an access token with the `repo` scope or `security_events` scope.
      */
    @JSName("code-scanning/list-alerts-for-enterprise")
    var `code-scanningSlashlist-alerts-for-enterprise`: ParametersQueryToolname
    
    /**
      * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      *
      * To use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
      *
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `security_events` read permission to use this endpoint.
      */
    @JSName("code-scanning/list-alerts-for-org")
    var `code-scanningSlashlist-alerts-for-org`: ParametersPathOrgStringQueryToolname
    
    /**
      * Lists all open code scanning alerts for the default branch (usually `main`
      * or `master`). You must use an access token with the `security_events` scope to use
      * this endpoint with private repos, the `public_repo` scope also grants permission to read
      * security events on public repos only. GitHub Apps must have the `security_events` read
      * permission to use this endpoint.
      *
      * The response includes a `most_recent_instance` object.
      * This provides details of the most recent instance of this alert
      * for the default branch or for the specified Git reference
      * (if you used `ref` in the request).
      */
    @JSName("code-scanning/list-alerts-for-repo")
    var `code-scanningSlashlist-alerts-for-repo`: ParametersQueryRefSort
    
    /**
      * Lists the CodeQL databases that are available in a repository.
      *
      * For private repositories, you must use an access token with the `security_events` scope.
      * For public repositories, you can use tokens with the `security_events` or `public_repo` scope.
      * GitHub Apps must have the `contents` read permission to use this endpoint.
      */
    @JSName("code-scanning/list-codeql-databases")
    var `code-scanningSlashlist-codeql-databases`: Responses200Content517
    
    /**
      * Lists the details of all code scanning analyses for a repository,
      * starting with the most recent.
      * The response is paginated and you can use the `page` and `per_page` parameters
      * to list the analyses you're interested in.
      * By default 30 analyses are listed per page.
      *
      * The `rules_count` field in the response give the number of rules
      * that were run in the analysis.
      * For very old analyses this data is not available,
      * and `0` is returned in this field.
      *
      * You must use an access token with the `security_events` scope to use this endpoint with private repos,
      * the `public_repo` scope also grants permission to read security events on public repos only.
      * GitHub Apps must have the `security_events` read permission to use this endpoint.
      *
      * **Deprecation notice**:
      * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
      */
    @JSName("code-scanning/list-recent-analyses")
    var `code-scanningSlashlist-recent-analyses`: ParametersQueryRefSarifid
    
    /** Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint. */
    @JSName("code-scanning/update-alert")
    var `code-scanningSlashupdate-alert`: RequestBodyContentApplicationjsonDismissedcommentDismissedreason
    
    /**
      * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.
      *
      * There are two places where you can upload code scanning results.
      *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
      *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
      *
      * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
      *
      * ```
      * gzip -c analysis-data.sarif | base64 -w0
      * ```
      *
      * SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
      *
      * The `202 Accepted`, response includes an `id` value.
      * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
      * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
      */
    @JSName("code-scanning/upload-sarif")
    var `code-scanningSlashupload-sarif`: RequestBodyContentApplicationjsonSarif
    
    @JSName("codes-of-conduct/get-all-codes-of-conduct")
    var `codes-of-conductSlashget-all-codes-of-conduct`: Responses200Content424
    
    @JSName("codes-of-conduct/get-conduct-code")
    var `codes-of-conductSlashget-conduct-code`: Responses200ContentApplicationjsonBodyHtmlurl
    
    /**
      * Adds a repository to the selected repositories for a user's codespace secret.
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on the referenced repository to use this endpoint.
      */
    @JSName("codespaces/add-repository-for-secret-for-authenticated-user")
    var `codespacesSlashadd-repository-for-secret-for-authenticated-user`: ParametersPathRepositoryidNumberSecretnameString
    
    /**
      * List the machine types a codespace can transition to use.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
      */
    @JSName("codespaces/codespace-machines-for-authenticated-user")
    var `codespacesSlashcodespace-machines-for-authenticated-user`: Responses200ContentApplicationjsonMachinesTotalcount
    
    /**
      * Creates a new codespace, owned by the authenticated user.
      *
      * This endpoint requires either a `repository_id` OR a `pull_request` but not both.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/create-for-authenticated-user")
    var `codespacesSlashcreate-for-authenticated-user`: RequestBodyContent363Responses201202401
    
    /**
      * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `repo` scope to use this endpoint. GitHub Apps must have the `codespaces_secrets` repository
      * permission to use this endpoint.
      *
      * #### Example of encrypting a secret using Node.js
      *
      * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
      *
      * ```
      * const sodium = require('tweetsodium');
      *
      * const key = "base64-encoded-public-key";
      * const value = "plain-text-secret";
      *
      * // Convert the message and key to Uint8Array's (Buffer implements that interface)
      * const messageBytes = Buffer.from(value);
      * const keyBytes = Buffer.from(key, 'base64');
      *
      * // Encrypt using LibSodium.
      * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
      *
      * // Base64 the encrypted secret
      * const encrypted = Buffer.from(encryptedBytes).toString('base64');
      *
      * console.log(encrypted);
      * ```
      *
      *
      * #### Example of encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example of encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example of encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("codespaces/create-or-update-repo-secret")
    var `codespacesSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid
    
    /**
      * Creates or updates a secret for a user's codespace with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must also have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_user_secrets` user permission and `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
      *
      * ```
      * const sodium = require('tweetsodium');
      *
      * const key = "base64-encoded-public-key";
      * const value = "plain-text-secret";
      *
      * // Convert the message and key to Uint8Array's (Buffer implements that interface)
      * const messageBytes = Buffer.from(value);
      * const keyBytes = Buffer.from(key, 'base64');
      *
      * // Encrypt using LibSodium.
      * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
      *
      * // Base64 the encrypted secret
      * const encrypted = Buffer.from(encryptedBytes).toString('base64');
      *
      * console.log(encrypted);
      * ```
      *
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("codespaces/create-or-update-secret-for-authenticated-user")
    var `codespacesSlashcreate-or-update-secret-for-authenticated-user`: Responses201Content47404Content55
    
    /**
      * Creates a codespace owned by the authenticated user for the specified pull request.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/create-with-pr-for-authenticated-user")
    var `codespacesSlashcreate-with-pr-for-authenticated-user`: Responses201202401
    
    /**
      * Creates a codespace owned by the authenticated user in the specified repository.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/create-with-repo-for-authenticated-user")
    var `codespacesSlashcreate-with-repo-for-authenticated-user`: Responses201202400
    
    /**
      * Deletes a user's codespace.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/delete-for-authenticated-user")
    var `codespacesSlashdelete-for-authenticated-user`: Responses202304401
    
    /**
      * Deletes a user's codespace.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/delete-from-organization")
    var `codespacesSlashdelete-from-organization`: ParametersPathCodespacenameOrg
    
    /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `codespaces_secrets` repository permission to use this endpoint. */
    @JSName("codespaces/delete-repo-secret")
    var `codespacesSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses
    
    /**
      * Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/delete-secret-for-authenticated-user")
    var `codespacesSlashdelete-secret-for-authenticated-user`: ParametersPath602Responses
    
    /**
      * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.
      *
      * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
      */
    @JSName("codespaces/export-for-authenticated-user")
    var `codespacesSlashexport-for-authenticated-user`: Responses202401403404
    
    /**
      * Gets information about an export of a codespace.
      *
      * You must authenticate using a personal access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
      */
    @JSName("codespaces/get-export-details-for-authenticated-user")
    var `codespacesSlashget-export-details-for-authenticated-user`: ParametersPathCodespacenameExportid
    
    /**
      * Gets information about a user's codespace.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/get-for-authenticated-user")
    var `codespacesSlashget-for-authenticated-user`: ParametersPathCodespacenameString
    
    /**
      * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/get-public-key-for-authenticated-user")
    var `codespacesSlashget-public-key-for-authenticated-user`: `601`
    
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `codespaces_secrets` repository permission to use this endpoint. */
    @JSName("codespaces/get-repo-public-key")
    var `codespacesSlashget-repo-public-key`: Parameters491Responses200ContentApplicationjsonCreatedatId
    
    /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `codespaces_secrets` repository permission to use this endpoint. */
    @JSName("codespaces/get-repo-secret")
    var `codespacesSlashget-repo-secret`: ParametersPathOwnerRepoSecretname
    
    /**
      * Gets a secret available to a user's codespaces without revealing its encrypted value.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/get-secret-for-authenticated-user")
    var `codespacesSlashget-secret-for-authenticated-user`: ParametersPath602
    
    /**
      * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
      * specify launchpoint configurations for codespaces created within the repository.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.
      */
    @JSName("codespaces/list-devcontainers-in-repository-for-authenticated-user")
    var `codespacesSlashlist-devcontainers-in-repository-for-authenticated-user`: Responses200400401
    
    /**
      * Lists the authenticated user's codespaces.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/list-for-authenticated-user")
    var `codespacesSlashlist-for-authenticated-user`: ParametersQueryPagePerpageRepositoryid
    
    /**
      * Lists the codespaces associated to a specified organization.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/list-in-organization")
    var `codespacesSlashlist-in-organization`: Parameters455
    
    /**
      * Lists the codespaces associated to a specified repository and the authenticated user.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/list-in-repository-for-authenticated-user")
    var `codespacesSlashlist-in-repository-for-authenticated-user`: ParametersPathOwnerStringQuery426
    
    /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `codespaces_secrets` repository permission to use this endpoint. */
    @JSName("codespaces/list-repo-secrets")
    var `codespacesSlashlist-repo-secrets`: Responses200ContentApplicationjson505
    
    /**
      * List the repositories that have been granted the ability to use a user's codespace secret.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
      */
    @JSName("codespaces/list-repositories-for-secret-for-authenticated-user")
    var `codespacesSlashlist-repositories-for-secret-for-authenticated-user`: Responses200ContentApplicationjson452401Content55
    
    /**
      * Lists all secrets available for a user's Codespaces without revealing their
      * encrypted values.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/list-secrets-for-authenticated-user")
    var `codespacesSlashlist-secrets-for-authenticated-user`: Responses200ContentApplicationjson600
    
    /**
      * Gets the default attributes for codespaces created by the user with the repository.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/pre-flight-with-repo-for-authenticated-user")
    var `codespacesSlashpre-flight-with-repo-for-authenticated-user`: ParametersPathOwnerStringQueryClientipRef
    
    /**
      * Removes a repository from the selected repositories for a user's codespace secret.
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      * GitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.
      */
    @JSName("codespaces/remove-repository-for-secret-for-authenticated-user")
    var `codespacesSlashremove-repository-for-secret-for-authenticated-user`: ParametersPathRepositoryidNumberSecretnameString
    
    /**
      * List the machine types available for a given repository based on its configuration.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.
      */
    @JSName("codespaces/repo-machines-for-authenticated-user")
    var `codespacesSlashrepo-machines-for-authenticated-user`: ParametersPathOwnerStringQueryClientipLocation
    
    /**
      * Select the repositories that will use a user's codespace secret.
      *
      * You must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.
      */
    @JSName("codespaces/set-repositories-for-secret-for-authenticated-user")
    var `codespacesSlashset-repositories-for-secret-for-authenticated-user`: Responses404Content55500Content55
    
    /**
      * Starts a user's codespace.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
      */
    @JSName("codespaces/start-for-authenticated-user")
    var `codespacesSlashstart-for-authenticated-user`: Responses401402
    
    /**
      * Stops a user's codespace.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.
      */
    @JSName("codespaces/stop-for-authenticated-user")
    var `codespacesSlashstop-for-authenticated-user`: Responses200ContentApplicationjsonGitstatus401Content55
    
    /**
      * Stops a user's codespace.
      *
      * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
      */
    @JSName("codespaces/stop-in-organization")
    var `codespacesSlashstop-in-organization`: Responses200304401403404500
    
    /**
      * Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.
      *
      * If you specify a new machine type it will be applied the next time your codespace is started.
      *
      * You must authenticate using an access token with the `codespace` scope to use this endpoint.
      *
      * GitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.
      */
    @JSName("codespaces/update-for-authenticated-user")
    var `codespacesSlashupdate-for-authenticated-user`: Responses200ContentApplicationjsonGitstatus
    
    /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    @JSName("dependabot/add-selected-repo-to-org-secret")
    var `dependabotSlashadd-selected-repo-to-org-secret`: ParametersPathOrgRepositoryidSecretname
    
    /**
      * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization
      * permission to use this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
      *
      * ```
      * const sodium = require('tweetsodium');
      *
      * const key = "base64-encoded-public-key";
      * const value = "plain-text-secret";
      *
      * // Convert the message and key to Uint8Array's (Buffer implements that interface)
      * const messageBytes = Buffer.from(value);
      * const keyBytes = Buffer.from(key, 'base64');
      *
      * // Encrypt using LibSodium.
      * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
      *
      * // Base64 the encrypted secret
      * const encrypted = Buffer.from(encryptedBytes).toString('base64');
      *
      * console.log(encrypted);
      * ```
      *
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("dependabot/create-or-update-org-secret")
    var `dependabotSlashcreate-or-update-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonKeyid
    
    /**
      * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
      * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
      * token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository
      * permission to use this endpoint.
      *
      * #### Example encrypting a secret using Node.js
      *
      * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
      *
      * ```
      * const sodium = require('tweetsodium');
      *
      * const key = "base64-encoded-public-key";
      * const value = "plain-text-secret";
      *
      * // Convert the message and key to Uint8Array's (Buffer implements that interface)
      * const messageBytes = Buffer.from(value);
      * const keyBytes = Buffer.from(key, 'base64');
      *
      * // Encrypt using LibSodium.
      * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
      *
      * // Base64 the encrypted secret
      * const encrypted = Buffer.from(encryptedBytes).toString('base64');
      *
      * console.log(encrypted);
      * ```
      *
      *
      * #### Example encrypting a secret using Python
      *
      * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
      *
      * ```
      * from base64 import b64encode
      * from nacl import encoding, public
      *
      * def encrypt(public_key: str, secret_value: str) -> str:
      *   """Encrypt a Unicode string using the public key."""
      *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
      *   sealed_box = public.SealedBox(public_key)
      *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
      *   return b64encode(encrypted).decode("utf-8")
      * ```
      *
      * #### Example encrypting a secret using C#
      *
      * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
      *
      * ```
      * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
      * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
      *
      * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
      *
      * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
      * ```
      *
      * #### Example encrypting a secret using Ruby
      *
      * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
      *
      * ```ruby
      * require "rbnacl"
      * require "base64"
      *
      * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
      * public_key = RbNaCl::PublicKey.new(key)
      *
      * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
      * encrypted_secret = box.encrypt("my_secret")
      *
      * # Print the base64 encoded secret
      * puts Base64.strict_encode64(encrypted_secret)
      * ```
      */
    @JSName("dependabot/create-or-update-repo-secret")
    var `dependabotSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid
    
    /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    @JSName("dependabot/delete-org-secret")
    var `dependabotSlashdelete-org-secret`: ParametersPathOrgSecretnameResponses
    
    /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
    @JSName("dependabot/delete-repo-secret")
    var `dependabotSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses
    
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    @JSName("dependabot/get-org-public-key")
    var `dependabotSlashget-org-public-key`: Responses200ContentApplicationjsonKeyKeyid
    
    /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    @JSName("dependabot/get-org-secret")
    var `dependabotSlashget-org-secret`: ParametersPathOrgSecretname
    
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
    @JSName("dependabot/get-repo-public-key")
    var `dependabotSlashget-repo-public-key`: Parameters491Responses200ContentApplicationjsonKeyKeyid
    
    /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
    @JSName("dependabot/get-repo-secret")
    var `dependabotSlashget-repo-secret`: ParametersPathOwnerRepoSecretname
    
    /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    @JSName("dependabot/list-org-secrets")
    var `dependabotSlashlist-org-secrets`: Responses200ContentApplicationjson453
    
    /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint. */
    @JSName("dependabot/list-repo-secrets")
    var `dependabotSlashlist-repo-secrets`: Responses200ContentApplicationjson505
    
    /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    @JSName("dependabot/list-selected-repos-for-org-secret")
    var `dependabotSlashlist-selected-repos-for-org-secret`: ParametersPathOrgSecretnameQuery451
    
    /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    @JSName("dependabot/remove-selected-repo-from-org-secret")
    var `dependabotSlashremove-selected-repo-from-org-secret`: ParametersPathOrgRepositoryidSecretname
    
    /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint. */
    @JSName("dependabot/set-selected-repos-for-org-secret")
    var `dependabotSlashset-selected-repos-for-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids
    
    /** Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to. */
    @JSName("dependency-graph/create-repository-snapshot")
    var `dependency-graphSlashcreate-repository-snapshot`: RequestBodyContentApplicationjsonJob
    
    /** Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits. */
    @JSName("dependency-graph/diff-range")
    var `dependency-graphSlashdiff-range`: ParametersQuery527
    
    /** Lists all the emojis available to use on GitHub. */
    @JSName("emojis/get")
    var emojisSlashget: Responses304Unknown
    
    /**
      * Add custom labels to a self-hosted runner configured in an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/add-custom-labels-to-self-hosted-runner-for-enterprise")
    var `enterprise-adminSlashadd-custom-labels-to-self-hosted-runner-for-enterprise`: Responses422Content418
    
    /**
      * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise")
    var `enterprise-adminSlashadd-org-access-to-self-hosted-runner-group-in-enterprise`: ParametersPathOrgidRunnergroupid
    
    /**
      * Adds a self-hosted runner to a runner group configured in an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise`
      * scope to use this endpoint.
      */
    @JSName("enterprise-admin/add-self-hosted-runner-to-group-for-enterprise")
    var `enterprise-adminSlashadd-self-hosted-runner-to-group-for-enterprise`: ParametersPathEnterpriseRunnergroupidRunnerid
    
    /**
      * Returns a token that you can pass to the `config` script. The token expires after one hour.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      *
      * #### Example using registration token
      *
      * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
      *
      * ```
      * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
      * ```
      */
    @JSName("enterprise-admin/create-registration-token-for-enterprise")
    var `enterprise-adminSlashcreate-registration-token-for-enterprise`: Responses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      *
      * #### Example using remove token
      *
      * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
      * endpoint.
      *
      * ```
      * ./config.sh remove --token TOKEN
      * ```
      */
    @JSName("enterprise-admin/create-remove-token-for-enterprise")
    var `enterprise-adminSlashcreate-remove-token-for-enterprise`: Responses201ContentApplicationjsonExpiresatPermissions
    
    /**
      * Creates a new self-hosted runner group for an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/create-self-hosted-runner-group-for-enterprise")
    var `enterprise-adminSlashcreate-self-hosted-runner-group-for-enterprise`: Responses201ContentApplicationjsonDefault
    
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    @JSName("enterprise-admin/delete-scim-group-from-enterprise")
    var `enterprise-adminSlashdelete-scim-group-from-enterprise`: Parameters591Responses
    
    /**
      * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/delete-self-hosted-runner-from-enterprise")
    var `enterprise-adminSlashdelete-self-hosted-runner-from-enterprise`: ParametersPathRunneridNumberResponses
    
    /**
      * Deletes a self-hosted runner group for an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/delete-self-hosted-runner-group-from-enterprise")
    var `enterprise-adminSlashdelete-self-hosted-runner-group-from-enterprise`: ParametersPathEnterpriseRunnergroupidResponses
    
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    @JSName("enterprise-admin/delete-user-from-enterprise")
    var `enterprise-adminSlashdelete-user-from-enterprise`: ParametersPathEnterpriseScimuseridResponses
    
    /**
      * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/disable-selected-organization-github-actions-enterprise")
    var `enterprise-adminSlashdisable-selected-organization-github-actions-enterprise`: ParametersPathOrgidNumber
    
    /**
      * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/enable-selected-organization-github-actions-enterprise")
    var `enterprise-adminSlashenable-selected-organization-github-actions-enterprise`: ParametersPathOrgidNumber
    
    /**
      * Gets the selected actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/get-allowed-actions-enterprise")
    var `enterprise-adminSlashget-allowed-actions-enterprise`: Responses200ContentApplicationjsonGithubownedallowed
    
    /** Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope. */
    @JSName("enterprise-admin/get-audit-log")
    var `enterprise-adminSlashget-audit-log`: ParametersQueryPhrase
    
    /**
      * Lists the license consumption information for all users, including those from connected servers, associated with an enterprise.
      * To use this endpoint, you must be an enterprise admin, and you must use an access
      * token with the `read:enterprise` scope.
      *
      * **Note:** The license consumption API endpoints for enterprise accounts are currently
      * in Beta and are subject to change.
      */
    @JSName("enterprise-admin/get-consumed-licenses")
    var `enterprise-adminSlashget-consumed-licenses`: Responses200ContentApplicationjsonTotalseatsconsumed
    
    /**
      * Gets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/get-github-actions-permissions-enterprise")
    var `enterprise-adminSlashget-github-actions-permissions-enterprise`: Responses200ContentApplicationjsonSelectedorganizationsurl
    
    /**
      * Gets information about the status of a license sync job for an enterprise.
      * To use this endpoint, you must be an enterprise admin, and you must use an access
      * token with the `read:enterprise` scope.
      */
    @JSName("enterprise-admin/get-license-sync-status")
    var `enterprise-adminSlashget-license-sync-status`: Responses200ContentApplicationjsonServerinstances
    
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    @JSName("enterprise-admin/get-provisioning-information-for-enterprise-group")
    var `enterprise-adminSlashget-provisioning-information-for-enterprise-group`: ParametersPathEnterpriseScimgroupid
    
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    @JSName("enterprise-admin/get-provisioning-information-for-enterprise-user")
    var `enterprise-adminSlashget-provisioning-information-for-enterprise-user`: ParametersPathEnterpriseScimuserid
    
    /**
      * Gets a specific self-hosted runner configured in an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/get-self-hosted-runner-for-enterprise")
    var `enterprise-adminSlashget-self-hosted-runner-for-enterprise`: ParametersPathRunneridNumber
    
    /**
      * Gets a specific self-hosted runner group for an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/get-self-hosted-runner-group-for-enterprise")
    var `enterprise-adminSlashget-self-hosted-runner-group-for-enterprise`: ParametersPathEnterpriseRunnergroupid
    
    /**
      * Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.
      *
      * To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see "[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)" in the GitHub Enterprise Server documentation.
      *
      * You'll need to use a personal access token:
      *   - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you'll need a personal access token with the `read:enterprise` permission.
      *   - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you'll need a personal access token with the `read:org` permission.
      *
      * For more information on creating a personal access token, see "[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)."
      */
    @JSName("enterprise-admin/get-server-statistics")
    var `enterprise-adminSlashget-server-statistics`: ParametersPathEnterpriseororgString
    
    /**
      * Lists all labels for a self-hosted runner configured in an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/list-labels-for-self-hosted-runner-for-enterprise")
    var `enterprise-adminSlashlist-labels-for-self-hosted-runner-for-enterprise`: Responses200ContentApplicationjsonLabelsArray
    
    /**
      * Lists the organizations with access to a self-hosted runner group.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise")
    var `enterprise-adminSlashlist-org-access-to-self-hosted-runner-group-in-enterprise`: ParametersPathEnterpriseRunnergroupidQuery426
    
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    @JSName("enterprise-admin/list-provisioned-groups-enterprise")
    var `enterprise-adminSlashlist-provisioned-groups-enterprise`: ParametersQueryCountExcludedAttributes
    
    /**
      * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
      *
      * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
      *
      * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
      *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
      *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
      *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
      *
      * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
      *
      * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
      *
      * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
      *
      * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
      *    - If the user signs in, their GitHub account is linked to this entry.
      *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
      */
    @JSName("enterprise-admin/list-provisioned-identities-enterprise")
    var `enterprise-adminSlashlist-provisioned-identities-enterprise`: ParametersPathEnterpriseStringQueryCountFilter
    
    /**
      * Lists binaries for the runner application that you can download and run.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/list-runner-applications-for-enterprise")
    var `enterprise-adminSlashlist-runner-applications-for-enterprise`: Responses200Content430
    
    /**
      * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise")
    var `enterprise-adminSlashlist-selected-organizations-enabled-github-actions-enterprise`: ParametersQuery426
    
    /**
      * Lists all self-hosted runner groups for an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/list-self-hosted-runner-groups-for-enterprise")
    var `enterprise-adminSlashlist-self-hosted-runner-groups-for-enterprise`: ParametersQueryVisibletoorganization
    
    /**
      * Lists all self-hosted runners configured for an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/list-self-hosted-runners-for-enterprise")
    var `enterprise-adminSlashlist-self-hosted-runners-for-enterprise`: Responses200ContentApplicationjson428
    
    /**
      * Lists the self-hosted runners that are in a specific enterprise group.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/list-self-hosted-runners-in-group-for-enterprise")
    var `enterprise-adminSlashlist-self-hosted-runners-in-group-for-enterprise`: Responses200ContentApplicationjsonRunnersTotalcount
    
    /**
      * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
      *
      * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
      */
    @JSName("enterprise-admin/provision-and-invite-enterprise-group")
    var `enterprise-adminSlashprovision-and-invite-enterprise-group`: Responses201ContentApplicationjsonMeta
    
    /**
      * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
      *
      * Provision enterprise membership for a user, and send organization invitation emails to the email address.
      *
      * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
      */
    @JSName("enterprise-admin/provision-and-invite-enterprise-user")
    var `enterprise-adminSlashprovision-and-invite-enterprise-user`: Responses201ContentApplicationjsonEmailsExternalId
    
    /**
      * Remove all custom labels from a self-hosted runner configured in an
      * enterprise. Returns the remaining read-only labels from the runner.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/remove-all-custom-labels-from-self-hosted-runner-for-enterprise")
    var `enterprise-adminSlashremove-all-custom-labels-from-self-hosted-runner-for-enterprise`: ParametersPathRunneridNumberResponses422Content418
    
    /**
      * Remove a custom label from a self-hosted runner configured
      * in an enterprise. Returns the remaining labels from the runner.
      *
      * This endpoint returns a `404 Not Found` status if the custom label is not
      * present on the runner.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/remove-custom-label-from-self-hosted-runner-for-enterprise")
    var `enterprise-adminSlashremove-custom-label-from-self-hosted-runner-for-enterprise`: ParametersPathNameRunnerid
    
    /**
      * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise")
    var `enterprise-adminSlashremove-org-access-to-self-hosted-runner-group-in-enterprise`: ParametersPathOrgidRunnergroupid
    
    /**
      * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise")
    var `enterprise-adminSlashremove-self-hosted-runner-from-group-for-enterprise`: ParametersPathEnterpriseRunnergroupidRunnerid
    
    /**
      * Sets the actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/set-allowed-actions-enterprise")
    var `enterprise-adminSlashset-allowed-actions-enterprise`: RequestBodyContentApplicationjsonGithubownedallowed
    
    /**
      * Remove all previous custom labels and set the new custom labels for a specific
      * self-hosted runner configured in an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/set-custom-labels-for-self-hosted-runner-for-enterprise")
    var `enterprise-adminSlashset-custom-labels-for-self-hosted-runner-for-enterprise`: Responses422Content418
    
    /**
      * Sets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/set-github-actions-permissions-enterprise")
    var `enterprise-adminSlashset-github-actions-permissions-enterprise`: RequestBodyContentApplicationjsonAllowedactionsEnabledorganizations
    
    /**
      * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
      *
      * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
      */
    @JSName("enterprise-admin/set-information-for-provisioned-enterprise-group")
    var `enterprise-adminSlashset-information-for-provisioned-enterprise-group`: Parameters591
    
    /**
      * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
      *
      * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
      *
      * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
      *
      * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
      */
    @JSName("enterprise-admin/set-information-for-provisioned-enterprise-user")
    var `enterprise-adminSlashset-information-for-provisioned-enterprise-user`: Responses200ContentApplicationjsonEmailsExternalId
    
    /**
      * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise")
    var `enterprise-adminSlashset-org-access-to-self-hosted-runner-group-in-enterprise`: ParametersPathEnterpriseRunnergroupidRequestBodyContentApplicationjsonSelectedorganizationids
    
    /**
      * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
      *
      * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise")
    var `enterprise-adminSlashset-selected-organizations-enabled-github-actions-enterprise`: ParametersPathEnterpriseStringRequestBodyContentApplicationjsonSelectedorganizationids
    
    /**
      * Replaces the list of self-hosted runners that are part of an enterprise runner group.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/set-self-hosted-runners-in-group-for-enterprise")
    var `enterprise-adminSlashset-self-hosted-runners-in-group-for-enterprise`: ParametersPathEnterpriseRunnergroupidRequestBodyContentApplicationjsonRunnersArray
    
    /**
      * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
      *
      * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
      */
    @JSName("enterprise-admin/update-attribute-for-enterprise-group")
    var `enterprise-adminSlashupdate-attribute-for-enterprise-group`: Responses200ContentApplicationjsonMeta
    
    /**
      * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
      *
      * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
      *
      * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
      *
      * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
      *
      * ```
      * {
      *   "Operations":[{
      *     "op":"replace",
      *     "value":{
      *       "active":false
      *     }
      *   }]
      * }
      * ```
      */
    @JSName("enterprise-admin/update-attribute-for-enterprise-user")
    var `enterprise-adminSlashupdate-attribute-for-enterprise-user`: ParametersPathEnterpriseScimuseridRequestBodyContentApplicationjsonSchemas
    
    /**
      * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
      *
      * You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
      */
    @JSName("enterprise-admin/update-self-hosted-runner-group-for-enterprise")
    var `enterprise-adminSlashupdate-self-hosted-runner-group-for-enterprise`: Responses200ContentApplicationjsonDefault
    
    @JSName("gists/check-is-starred")
    var `gistsSlashcheck-is-starred`: Responses403Content55404Content47
    
    /**
      * Allows you to add a new gist with one or more files.
      *
      * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
      */
    @JSName("gists/create")
    var gistsSlashcreate: Responses201304403404
    
    @JSName("gists/create-comment")
    var `gistsSlashcreate-comment`: Responses201ContentApplicationjsonBodyCreatedat
    
    @JSName("gists/delete")
    var gistsSlashdelete: Responses304Unknown403Content55
    
    @JSName("gists/delete-comment")
    var `gistsSlashdelete-comment`: ParametersPathCommentidGistidResponses304Unknown403Content55
    
    @JSName("gists/fork")
    var gistsSlashfork: Responses201304403404422
    
    @JSName("gists/get")
    var gistsSlashget: ParametersPathGistidString
    
    @JSName("gists/get-comment")
    var `gistsSlashget-comment`: ParametersPathCommentidGistid
    
    @JSName("gists/get-revision")
    var `gistsSlashget-revision`: ParametersPathGistidSha
    
    /** Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists: */
    @JSName("gists/list")
    var gistsSlashlist: ParametersQueryPagePerpageSince
    
    @JSName("gists/list-comments")
    var `gistsSlashlist-comments`: ParametersPathGistidStringQuery426
    
    @JSName("gists/list-commits")
    var `gistsSlashlist-commits`: Responses200Content440
    
    /** Lists public gists for the specified user: */
    @JSName("gists/list-for-user")
    var `gistsSlashlist-for-user`: ParametersPath599QueryPagePerpageSince
    
    @JSName("gists/list-forks")
    var `gistsSlashlist-forks`: Responses200Content441
    
    /**
      * List public gists sorted by most recently updated to least recently updated.
      *
      * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
      */
    @JSName("gists/list-public")
    var `gistsSlashlist-public`: Responses200304403422
    
    /** List the authenticated user's starred gists: */
    @JSName("gists/list-starred")
    var `gistsSlashlist-starred`: Responses401Content55
    
    /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." */
    @JSName("gists/star")
    var gistsSlashstar: Responses304Unknown403Content55
    
    @JSName("gists/unstar")
    var gistsSlashunstar: Responses304Unknown403Content55
    
    /** Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged. */
    @JSName("gists/update")
    var gistsSlashupdate: Responses200437404Content55
    
    @JSName("gists/update-comment")
    var `gistsSlashupdate-comment`: Responses200439404Content55
    
    @JSName("git/create-blob")
    var `gitSlashcreate-blob`: Responses201403404409
    
    /**
      * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("git/create-commit")
    var `gitSlashcreate-commit`: Responses201ContentApplicationjsonAuthorCommitter
    
    /** Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches. */
    @JSName("git/create-ref")
    var `gitSlashcreate-ref`: Responses201ContentApplicationjsonNodeidObjectHeadersLocation
    
    /**
      * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("git/create-tag")
    var `gitSlashcreate-tag`: Responses201ContentApplicationjsonMessageNodeid
    
    /**
      * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
      *
      * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
      *
      * Returns an error if you try to delete a file that does not exist.
      */
    @JSName("git/create-tree")
    var `gitSlashcreate-tree`: Responses201ContentApplicationjsonTruncated
    
    @JSName("git/delete-ref")
    var `gitSlashdelete-ref`: Parameters535Responses422Content421
    
    /**
      * The `content` in the response will always be Base64 encoded.
      *
      * _Note_: This API supports blobs up to 100 megabytes in size.
      */
    @JSName("git/get-blob")
    var `gitSlashget-blob`: ParametersPathFileshaOwner
    
    /**
      * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("git/get-commit")
    var `gitSlashget-commit`: Responses200534
    
    /**
      * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
      *
      * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
      */
    @JSName("git/get-ref")
    var `gitSlashget-ref`: Responses200ContentApplicationjsonNodeidObject
    
    /**
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("git/get-tag")
    var `gitSlashget-tag`: ParametersPathRepoTagsha
    
    /**
      * Returns a single tree using the SHA1 value for that tree.
      *
      * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
      *
      *
      * **Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.
      */
    @JSName("git/get-tree")
    var `gitSlashget-tree`: ParametersPathRepoTreesha
    
    /**
      * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
      *
      * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
      *
      * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
      *
      * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
      */
    @JSName("git/list-matching-refs")
    var `gitSlashlist-matching-refs`: Parameters535
    
    @JSName("git/update-ref")
    var `gitSlashupdate-ref`: Responses200ContentApplicationjsonNodeidObject422Content421
    
    /** List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user). */
    @JSName("gitignore/get-all-templates")
    var `gitignoreSlashget-all-templates`: Responses200Content48304Unknown
    
    /**
      * The API also allows fetching the source of a single template.
      * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
      */
    @JSName("gitignore/get-template")
    var `gitignoreSlashget-template`: Responses200ContentApplicationjsonNameSource
    
    /** Shows which type of GitHub user can interact with your public repositories and when the restriction expires. */
    @JSName("interactions/get-restrictions-for-authenticated-user")
    var `interactionsSlashget-restrictions-for-authenticated-user`: `605`
    
    /** Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response. */
    @JSName("interactions/get-restrictions-for-org")
    var `interactionsSlashget-restrictions-for-org`: Responses200Content462
    
    /** Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response. */
    @JSName("interactions/get-restrictions-for-repo")
    var `interactionsSlashget-restrictions-for-repo`: Parameters491Responses200Content462
    
    /** Removes any interaction restrictions from your public repositories. */
    @JSName("interactions/remove-restrictions-for-authenticated-user")
    var `interactionsSlashremove-restrictions-for-authenticated-user`: `375`
    
    /** Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions. */
    @JSName("interactions/remove-restrictions-for-org")
    var `interactionsSlashremove-restrictions-for-org`: ParametersPathOrgStringResponses
    
    /** Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */
    @JSName("interactions/remove-restrictions-for-repo")
    var `interactionsSlashremove-restrictions-for-repo`: Parameters491Responses409Unknown
    
    /** Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user. */
    @JSName("interactions/set-restrictions-for-authenticated-user")
    var `interactionsSlashset-restrictions-for-authenticated-user`: Responses200ContentApplicationjsonOrigin
    
    /** Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization. */
    @JSName("interactions/set-restrictions-for-org")
    var `interactionsSlashset-restrictions-for-org`: RequestBodyContentApplicationjsonExpiryLimit
    
    /** Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */
    @JSName("interactions/set-restrictions-for-repo")
    var `interactionsSlashset-restrictions-for-repo`: Responses200ContentApplicationjsonOrigin409Unknown
    
    /** Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced. */
    @JSName("issues/add-assignees")
    var `issuesSlashadd-assignees`: Responses201549
    
    @JSName("issues/add-labels")
    var `issuesSlashadd-labels`: Responses200552
    
    /**
      * Checks if a user has permission to be assigned to an issue in this repository.
      *
      * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
      *
      * Otherwise a `404` status code is returned.
      */
    @JSName("issues/check-user-can-be-assigned")
    var `issuesSlashcheck-user-can-be-assigned`: ParametersPathAssigneeOwner
    
    /**
      * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
      *
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("issues/create")
    var issuesSlashcreate: Responses410422503
    
    /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. */
    @JSName("issues/create-comment")
    var `issuesSlashcreate-comment`: Responses201403404410
    
    @JSName("issues/create-label")
    var `issuesSlashcreate-label`: Responses201ContentApplicationjsonDescriptionId
    
    @JSName("issues/create-milestone")
    var `issuesSlashcreate-milestone`: Responses201ContentApplicationjsonLabelsurl
    
    @JSName("issues/delete-comment")
    var `issuesSlashdelete-comment`: ParametersPathCommentidOwnerRepoResponses
    
    @JSName("issues/delete-label")
    var `issuesSlashdelete-label`: ParametersPathRepoStringResponses
    
    @JSName("issues/delete-milestone")
    var `issuesSlashdelete-milestone`: ParametersPathMilestonenumberOwnerResponses404Content55
    
    /**
      * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
      * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
      * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
      * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
      * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
      * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
      *
      * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/get")
    var issuesSlashget: ParametersPathIssuenumberOwnerRepo
    
    @JSName("issues/get-comment")
    var `issuesSlashget-comment`: Responses200ContentApplicationjsonBodytext
    
    @JSName("issues/get-event")
    var `issuesSlashget-event`: ParametersPathEventidOwner
    
    @JSName("issues/get-label")
    var `issuesSlashget-label`: ParametersPathRepoString
    
    @JSName("issues/get-milestone")
    var `issuesSlashget-milestone`: ParametersPathMilestonenumberOwner
    
    /**
      * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
      * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
      * necessarily assigned to you.
      *
      *
      * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/list")
    var issuesSlashlist: ParametersQueryOrgs
    
    /** Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository. */
    @JSName("issues/list-assignees")
    var `issuesSlashlist-assignees`: Responses200Content454Headers404Content55
    
    /** Issue Comments are ordered by ascending ID. */
    @JSName("issues/list-comments")
    var `issuesSlashlist-comments`: ParametersPathIssuenumberOwnerRepoQueryPagePerpageSince
    
    /** By default, Issue Comments are ordered by ascending ID. */
    @JSName("issues/list-comments-for-repo")
    var `issuesSlashlist-comments-for-repo`: ParametersQueryPerpageSinceSort
    
    @JSName("issues/list-events")
    var `issuesSlashlist-events`: ParametersPathIssuenumberOwnerRepoQuery426
    
    @JSName("issues/list-events-for-repo")
    var `issuesSlashlist-events-for-repo`: Responses200Content548
    
    @JSName("issues/list-events-for-timeline")
    var `issuesSlashlist-events-for-timeline`: Responses200Content553
    
    /**
      * List issues across owned and member repositories assigned to the authenticated user.
      *
      * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/list-for-authenticated-user")
    var `issuesSlashlist-for-authenticated-user`: Parameters606
    
    /**
      * List issues in an organization assigned to the authenticated user.
      *
      * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/list-for-org")
    var `issuesSlashlist-for-org`: ParametersQueryDirectionFilter
    
    /**
      * List issues in a repository.
      *
      * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
      * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
      * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
      * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
      */
    @JSName("issues/list-for-repo")
    var `issuesSlashlist-for-repo`: ParametersQueryMentioned
    
    @JSName("issues/list-labels-for-milestone")
    var `issuesSlashlist-labels-for-milestone`: ParametersPathMilestonenumberOwnerQuery426
    
    @JSName("issues/list-labels-for-repo")
    var `issuesSlashlist-labels-for-repo`: Responses200Content551404Content55
    
    @JSName("issues/list-labels-on-issue")
    var `issuesSlashlist-labels-on-issue`: Responses200Content551
    
    @JSName("issues/list-milestones")
    var `issuesSlashlist-milestones`: ParametersQueryPerpageSortState
    
    /**
      * Users with push access can lock an issue or pull request's conversation.
      *
      * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("issues/lock")
    var issuesSlashlock: Responses404Content55410Content55
    
    @JSName("issues/remove-all-labels")
    var `issuesSlashremove-all-labels`: Responses410Content55
    
    /** Removes one or more assignees from an issue. */
    @JSName("issues/remove-assignees")
    var `issuesSlashremove-assignees`: Responses200549
    
    /** Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist. */
    @JSName("issues/remove-label")
    var `issuesSlashremove-label`: ParametersPathIssuenumberNameOwner
    
    /** Removes any previous labels and sets the new labels for an issue. */
    @JSName("issues/set-labels")
    var `issuesSlashset-labels`: Responses200552
    
    /** Users with push access can unlock an issue's conversation. */
    @JSName("issues/unlock")
    var issuesSlashunlock: ParametersPathIssuenumberOwnerRepoResponses403Content55404Content55
    
    /** Issue owners and users with push access can edit an issue. */
    @JSName("issues/update")
    var issuesSlashupdate: Responses301403404
    
    @JSName("issues/update-comment")
    var `issuesSlashupdate-comment`: Responses200ContentApplicationjsonBodytext422Content421
    
    @JSName("issues/update-label")
    var `issuesSlashupdate-label`: Responses557
    
    @JSName("issues/update-milestone")
    var `issuesSlashupdate-milestone`: Responses561
    
    @JSName("licenses/get")
    var licensesSlashget: Responses200ContentApplicationjsonConditions
    
    @JSName("licenses/get-all-commonly-used")
    var `licensesSlashget-all-commonly-used`: ParametersQueryFeaturedPage
    
    /**
      * This method returns the contents of the repository's license file, if one is detected.
      *
      * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
      */
    @JSName("licenses/get-for-repo")
    var `licensesSlashget-for-repo`: Responses200ContentApplicationjsonDownloadurlEncoding
    
    @JSName("markdown/render")
    var markdownSlashrender: Responses200ContentTexthtml304Unknown
    
    /** You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less. */
    @JSName("markdown/render-raw")
    var `markdownSlashrender-raw`: Responses200ContentTexthtmlHeaders304Unknown
    
    /**
      * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
      *
      * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
      */
    @JSName("meta/get")
    var metaSlashget: Responses200ContentApplicationjsonApi
    
    /** Get the octocat as ASCII art */
    @JSName("meta/get-octocat")
    var `metaSlashget-octocat`: ParametersQueryS
    
    /** Get a random sentence from the Zen of GitHub */
    @JSName("meta/get-zen")
    var `metaSlashget-zen`: Responses200ContentTextplainString
    
    /** Get Hypermedia links to resources accessible in GitHub's REST API */
    @JSName("meta/root")
    var metaSlashroot: Responses200ContentApplicationjsonAuthorizationsurl
    
    /** Stop an import for a repository. */
    @JSName("migrations/cancel-import")
    var `migrationsSlashcancel-import`: Parameters491Responses
    
    /** Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted. */
    @JSName("migrations/delete-archive-for-authenticated-user")
    var `migrationsSlashdelete-archive-for-authenticated-user`: Parameters611Responses401Content55403Content55404Content55
    
    /** Deletes a previous migration archive. Migration archives are automatically deleted after seven days. */
    @JSName("migrations/delete-archive-for-org")
    var `migrationsSlashdelete-archive-for-org`: Parameters466
    
    /** Fetches the URL to a migration archive. */
    @JSName("migrations/download-archive-for-org")
    var `migrationsSlashdownload-archive-for-org`: Parameters466
    
    /**
      * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
      *
      * *   attachments
      * *   bases
      * *   commit\_comments
      * *   issue\_comments
      * *   issue\_events
      * *   issues
      * *   milestones
      * *   organizations
      * *   projects
      * *   protected\_branches
      * *   pull\_request\_reviews
      * *   pull\_requests
      * *   releases
      * *   repositories
      * *   review\_comments
      * *   schema
      * *   users
      *
      * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
      */
    @JSName("migrations/get-archive-for-authenticated-user")
    var `migrationsSlashget-archive-for-authenticated-user`: Parameters611
    
    /**
      * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
      *
      * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
      */
    @JSName("migrations/get-commit-authors")
    var `migrationsSlashget-commit-authors`: ParametersQuery543
    
    /**
      * View the progress of an import.
      *
      * **Import status**
      *
      * This section includes details about the possible values of the `status` field of the Import Progress response.
      *
      * An import that does not have errors will progress through these steps:
      *
      * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
      * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
      * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
      * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
      * *   `complete` - the import is complete, and the repository is ready on GitHub.
      *
      * If there are problems, you will see one of these in the `status` field:
      *
      * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
      * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
      * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
      * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
      * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
      *
      * **The project_choices field**
      *
      * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
      *
      * **Git LFS related fields**
      *
      * This section includes details about Git LFS related fields that may be present in the Import Progress response.
      *
      * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
      * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
      * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
      * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
      */
    @JSName("migrations/get-import-status")
    var `migrationsSlashget-import-status`: Responses200ContentApplicationjsonAuthorscount
    
    /** List files larger than 100MB found during the import */
    @JSName("migrations/get-large-files")
    var `migrationsSlashget-large-files`: Responses200Content545
    
    /**
      * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
      *
      * *   `pending` - the migration hasn't started yet.
      * *   `exporting` - the migration is in progress.
      * *   `exported` - the migration finished successfully.
      * *   `failed` - the migration failed.
      *
      * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
      */
    @JSName("migrations/get-status-for-authenticated-user")
    var `migrationsSlashget-status-for-authenticated-user`: ParametersPathMigrationidNumber
    
    /**
      * Fetches the status of a migration.
      *
      * The `state` of a migration can be one of the following values:
      *
      * *   `pending`, which means the migration hasn't started yet.
      * *   `exporting`, which means the migration is in progress.
      * *   `exported`, which means the migration finished successfully.
      * *   `failed`, which means the migration failed.
      */
    @JSName("migrations/get-status-for-org")
    var `migrationsSlashget-status-for-org`: ParametersPathMigrationidOrg
    
    /** Lists all migrations a user has started. */
    @JSName("migrations/list-for-authenticated-user")
    var `migrationsSlashlist-for-authenticated-user`: Responses200Content465304Unknown
    
    /** Lists the most recent migrations. */
    @JSName("migrations/list-for-org")
    var `migrationsSlashlist-for-org`: ParametersQueryExcludePage
    
    /** Lists all the repositories for this user migration. */
    @JSName("migrations/list-repos-for-authenticated-user")
    var `migrationsSlashlist-repos-for-authenticated-user`: ParametersPathMigrationidNumberQuery426
    
    /** List all the repositories for this organization migration. */
    @JSName("migrations/list-repos-for-org")
    var `migrationsSlashlist-repos-for-org`: ParametersPathMigrationidOrgQuery426
    
    /** Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository. */
    @JSName("migrations/map-commit-author")
    var `migrationsSlashmap-commit-author`: ParametersPathAuthoridOwner
    
    /** You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/articles/versioning-large-files/). */
    @JSName("migrations/set-lfs-preference")
    var `migrationsSlashset-lfs-preference`: Responses200ContentApplicationjsonAuthorscount422Content421
    
    /** Initiates the generation of a user migration archive. */
    @JSName("migrations/start-for-authenticated-user")
    var `migrationsSlashstart-for-authenticated-user`: Responses201ContentApplicationjsonExcludeownerprojects304Unknown
    
    /** Initiates the generation of a migration archive. */
    @JSName("migrations/start-for-org")
    var `migrationsSlashstart-for-org`: Responses201ContentApplicationjsonExcludeownerprojects
    
    /** Start a source import to a GitHub repository using GitHub Importer. */
    @JSName("migrations/start-import")
    var `migrationsSlashstart-import`: Responses201ContentApplicationjsonAuthorscountHeadersLocation
    
    /** Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked. */
    @JSName("migrations/unlock-repo-for-authenticated-user")
    var `migrationsSlashunlock-repo-for-authenticated-user`: ParametersPathReponameString
    
    /** Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data. */
    @JSName("migrations/unlock-repo-for-org")
    var `migrationsSlashunlock-repo-for-org`: ParametersPathOrgReponame
    
    /**
      * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
      * request. If no parameters are provided, the import will be restarted.
      *
      * Some servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will
      * have the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.
      * You can select the project to import by providing one of the objects in the `project_choices` array in the update request.
      */
    @JSName("migrations/update-import")
    var `migrationsSlashupdate-import`: Responses542
    
    /**
      * Gets the customization template for an OpenID Connect (OIDC) subject claim.
      * You must authenticate using an access token with the `read:org` scope to use this endpoint.
      * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
      */
    @JSName("oidc/get-oidc-custom-sub-template-for-org")
    var `oidcSlashget-oidc-custom-sub-template-for-org`: Responses200ContentApplicationjsonIncludeclaimkeys
    
    /**
      * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
      * You must authenticate using an access token with the `write:org` scope to use this endpoint.
      * GitHub Apps must have the `admin:org` permission to use this endpoint.
      */
    @JSName("oidc/update-oidc-custom-sub-template-for-org")
    var `oidcSlashupdate-oidc-custom-sub-template-for-org`: RequestBodyContentApplicationjsonIncludeclaimkeys
    
    /**
      * Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."
      *
      * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `write:org` scope.
      *
      * GitHub Apps must have the `administration` organization read-write permission to use this endpoint.
      */
    @JSName("orgs/add-security-manager-team")
    var `orgsSlashadd-security-manager-team`: ParametersPathTeamslugString
    
    @JSName("orgs/block-user")
    var `orgsSlashblock-user`: Responses422Content421
    
    /**
      * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
      */
    @JSName("orgs/cancel-invitation")
    var `orgsSlashcancel-invitation`: ParametersPathInvitationidOrg
    
    @JSName("orgs/check-blocked-user")
    var `orgsSlashcheck-blocked-user`: ParametersPathUsernameString
    
    /** Check if a user is, publicly or privately, a member of the organization. */
    @JSName("orgs/check-membership-for-user")
    var `orgsSlashcheck-membership-for-user`: ParametersPathUsernameStringResponses404Unknown
    
    @JSName("orgs/check-public-membership-for-user")
    var `orgsSlashcheck-public-membership-for-user`: ParametersPathUsernameStringResponses404Unknown
    
    /** When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)." */
    @JSName("orgs/convert-member-to-outside-collaborator")
    var `orgsSlashconvert-member-to-outside-collaborator`: Responses202403404
    
    /**
      * **Note**: This operation is in beta and is subject to change.
      *
      * Creates a custom repository role that can be used by all repositories owned by the organization.
      *
      * To use this endpoint the authenticated user must be an administrator for the organization and must use an access token with `admin:org` scope.
      * GitHub Apps must have the `organization_custom_roles:write` organization permission to use this endpoint.
      *
      * For more information on custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)."
      */
    @JSName("orgs/create-custom-role")
    var `orgsSlashcreate-custom-role`: Responses201ContentApplicationjsonBaseroleCreatedat
    
    /**
      * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("orgs/create-invitation")
    var `orgsSlashcreate-invitation`: Responses201ContentApplicationjsonFailedreason
    
    /** Here's how you can create a hook that posts payloads in JSON format: */
    @JSName("orgs/create-webhook")
    var `orgsSlashcreate-webhook`: RequestBodyContentApplicationjsonActiveConfig
    
    /**
      * **Note**: This operation is in beta and is subject to change.
      *
      * Deletes a custom role from an organization. Once the custom role has been deleted, any
      * user, team, or invitation with the deleted custom role will be reassigned the inherited role.
      *
      * To use this endpoint the authenticated user must be an administrator for the organization and must use an access token with `admin:org` scope.
      * GitHub Apps must have the `organization_custom_roles:write` organization permission to use this endpoint.
      *
      * For more information about custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)."
      */
    @JSName("orgs/delete-custom-role")
    var `orgsSlashdelete-custom-role`: ParametersPathOrgRoleid
    
    @JSName("orgs/delete-webhook")
    var `orgsSlashdelete-webhook`: ParametersPathHookidOrgResponses404Content55
    
    /**
      * Enables or disables the specified security feature for all repositories in an organization.
      *
      * To use this endpoint, you must be an organization owner or be member of a team with the security manager role.
      * A token with the 'write:org' scope is also required.
      *
      * GitHub Apps must have the `organization_administration:write` permission to use this endpoint.
      *
      * For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      */
    @JSName("orgs/enable-or-disable-security-product-on-all-org-repos")
    var `orgsSlashenable-or-disable-security-product-on-all-org-repos`: ParametersPathSecurityproduct
    
    /**
      * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
      *
      * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
      */
    @JSName("orgs/get")
    var orgsSlashget: ParametersPathOrgString
    
    /**
      * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
      *
      * This endpoint is available for organizations on GitHub Enterprise Cloud. To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
      *
      * By default, the response includes up to 30 events from the past three months. Use the `phrase` parameter to filter results and retrieve older events. For example, use the `phrase` parameter with the `created` qualifier to filter events based on when the events occurred. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#searching-the-audit-log)."
      *
      * Use pagination to retrieve fewer or more than 30 events. For more information, see "[Resources in the REST API](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination)."
      */
    @JSName("orgs/get-audit-log")
    var `orgsSlashget-audit-log`: ParametersQueryAfterBefore
    
    @JSName("orgs/get-membership-for-authenticated-user")
    var `orgsSlashget-membership-for-authenticated-user`: ParametersPathOrgStringResponses200ContentApplicationjsonOrganizationOrganizationurl
    
    /** In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status. */
    @JSName("orgs/get-membership-for-user")
    var `orgsSlashget-membership-for-user`: Responses200ContentApplicationjsonOrganizationOrganizationurl
    
    /** Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)." */
    @JSName("orgs/get-webhook")
    var `orgsSlashget-webhook`: ParametersPathHookidOrg
    
    /**
      * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
      *
      * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
      */
    @JSName("orgs/get-webhook-config-for-org")
    var `orgsSlashget-webhook-config-for-org`: ParametersPathHookidOrgResponses200ContentApplicationjsonContenttype
    
    /** Returns a delivery for a webhook configured in an organization. */
    @JSName("orgs/get-webhook-delivery")
    var `orgsSlashget-webhook-delivery`: ParametersPathDeliveryidHookidOrg
    
    /**
      * Lists all organizations, in the order that they were created on GitHub.
      *
      * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
      */
    @JSName("orgs/list")
    var orgsSlashlist: ParametersQuery447
    
    /** Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint. */
    @JSName("orgs/list-app-installations")
    var `orgsSlashlist-app-installations`: Responses200ContentApplicationjsonInstallationsTotalcount
    
    /** List the users blocked by an organization. */
    @JSName("orgs/list-blocked-users")
    var `orgsSlashlist-blocked-users`: Responses200Content454
    
    /**
      * List the custom repository roles available in this organization. In order to see custom
      * repository roles in an organization, the authenticated user must be an organization owner.
      *
      * To use this endpoint the authenticated user must be an administrator for the organization or of an repository of the organizaiton and must use an access token with `admin:org repo` scope.
      * GitHub Apps must have the `organization_custom_roles:read` organization permission to use this endpoint.
      *
      * For more information on custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)".
      */
    @JSName("orgs/list-custom-roles")
    var `orgsSlashlist-custom-roles`: Responses200ContentApplicationjsonCustomrolesTotalcount
    
    /** The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure. */
    @JSName("orgs/list-failed-invitations")
    var `orgsSlashlist-failed-invitations`: Responses200Content457
    
    /**
      * **Note**: This operation is in beta and subject to change.
      *
      * Lists the fine-grained permissions available for an organization.
      *
      * To use this endpoint the authenticated user must be an administrator for the organization or of an repository of the organizaiton and must use an access token with `admin:org repo` scope.
      * GitHub Apps must have the `organization_custom_roles:read` organization permission to use this endpoint.
      */
    @JSName("orgs/list-fine-grained-permissions")
    var `orgsSlashlist-fine-grained-permissions`: Responses200Content458
    
    /**
      * List organizations for the authenticated user.
      *
      * **OAuth scope requirements**
      *
      * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
      */
    @JSName("orgs/list-for-authenticated-user")
    var `orgsSlashlist-for-authenticated-user`: Responses200Content448Headers
    
    /**
      * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
      *
      * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
      */
    @JSName("orgs/list-for-user")
    var `orgsSlashlist-for-user`: Responses620
    
    /** List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner. */
    @JSName("orgs/list-invitation-teams")
    var `orgsSlashlist-invitation-teams`: ParametersPathInvitationidOrgQuery426
    
    /** List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned. */
    @JSName("orgs/list-members")
    var `orgsSlashlist-members`: ParametersQueryPagePerpageRole
    
    @JSName("orgs/list-memberships-for-authenticated-user")
    var `orgsSlashlist-memberships-for-authenticated-user`: ParametersQuery609
    
    /** List all users who are outside collaborators of an organization. */
    @JSName("orgs/list-outside-collaborators")
    var `orgsSlashlist-outside-collaborators`: ParametersQuery468
    
    /** The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`. */
    @JSName("orgs/list-pending-invitations")
    var `orgsSlashlist-pending-invitations`: Responses200Content457
    
    /** Members of an organization can choose to have their membership publicized or not. */
    @JSName("orgs/list-public-members")
    var `orgsSlashlist-public-members`: Responses469
    
    /**
      * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
      *
      * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://docs.github.com/en/articles/about-authentication-with-saml-single-sign-on).
      */
    @JSName("orgs/list-saml-sso-authorizations")
    var `orgsSlashlist-saml-sso-authorizations`: ParametersQueryLoginPage
    
    /**
      * Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
      *
      * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `read:org` scope.
      *
      * GitHub Apps must have the `administration` organization read permission to use this endpoint.
      */
    @JSName("orgs/list-security-manager-teams")
    var `orgsSlashlist-security-manager-teams`: Responses200Content476
    
    /** Returns a list of webhook deliveries for a webhook configured in an organization. */
    @JSName("orgs/list-webhook-deliveries")
    var `orgsSlashlist-webhook-deliveries`: ParametersPathHookidOrgQueryCursorPerpage
    
    @JSName("orgs/list-webhooks")
    var `orgsSlashlist-webhooks`: Responses200Content459
    
    /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */
    @JSName("orgs/ping-webhook")
    var `orgsSlashping-webhook`: ParametersPathHookidOrgResponses404Content55
    
    /** Redeliver a delivery for a webhook configured in an organization. */
    @JSName("orgs/redeliver-webhook-delivery")
    var `orgsSlashredeliver-webhook-delivery`: ParametersPathDeliveryidHookidOrgResponses202400422
    
    /** Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. */
    @JSName("orgs/remove-member")
    var `orgsSlashremove-member`: Responses464
    
    /**
      * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
      *
      * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
      */
    @JSName("orgs/remove-membership-for-user")
    var `orgsSlashremove-membership-for-user`: Responses403Content55404Content55
    
    /** Removing a user from this list will remove them from all the organization's repositories. */
    @JSName("orgs/remove-outside-collaborator")
    var `orgsSlashremove-outside-collaborator`: ParametersPathUsernameStringResponses422ContentApplicationjsonDocumentationurl
    
    @JSName("orgs/remove-public-membership-for-authenticated-user")
    var `orgsSlashremove-public-membership-for-authenticated-user`: ParametersPathUsernameStringResponses
    
    /**
      * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products).
      *
      * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
      */
    @JSName("orgs/remove-saml-sso-authorization")
    var `orgsSlashremove-saml-sso-authorization`: ParametersPathCredentialidOrg
    
    /**
      * Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."
      *
      * To use this endpoint, you must be an administrator for the organization, and you must use an access token with the `admin:org` scope.
      *
      * GitHub Apps must have the `administration` organization read-write permission to use this endpoint.
      */
    @JSName("orgs/remove-security-manager-team")
    var `orgsSlashremove-security-manager-team`: ParametersPathTeamslugStringResponses
    
    /**
      * Only authenticated organization owners can add a member to the organization or update the member's role.
      *
      * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
      *
      * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
      *
      * **Rate limits**
      *
      * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
      */
    @JSName("orgs/set-membership-for-user")
    var `orgsSlashset-membership-for-user`: Responses200ContentApplicationjsonOrganizationOrganizationurl403Content55
    
    /**
      * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
      *
      * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("orgs/set-public-membership-for-authenticated-user")
    var `orgsSlashset-public-membership-for-authenticated-user`: Responses464
    
    @JSName("orgs/unblock-user")
    var `orgsSlashunblock-user`: ParametersPathUsernameStringResponses
    
    /**
      * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
      *
      * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
      */
    @JSName("orgs/update")
    var orgsSlashupdate: Responses409Content55
    
    /**
      * **Note**: This operation is in beta and subject to change.
      *
      * Updates a custom repository role that can be used by all repositories owned by the organization.
      *
      * To use this endpoint the authenticated user must be an administrator for the organization and must use an access token with `admin:org` scope.
      * GitHub Apps must have the `organization_custom_roles:write` organization permission to use this endpoint.
      *
      * For more information about custom repository roles, see "[Managing custom repository roles for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)."
      */
    @JSName("orgs/update-custom-role")
    var `orgsSlashupdate-custom-role`: Responses200ContentApplicationjsonBaseroleCreatedat
    
    @JSName("orgs/update-membership-for-authenticated-user")
    var `orgsSlashupdate-membership-for-authenticated-user`: Responses200ContentApplicationjsonOrganizationOrganizationurl403Content55404Content55
    
    /** Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)." */
    @JSName("orgs/update-webhook")
    var `orgsSlashupdate-webhook`: RequestBodyContentApplicationjsonConfigEvents
    
    /**
      * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
      *
      * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
      */
    @JSName("orgs/update-webhook-config-for-org")
    var `orgsSlashupdate-webhook-config-for-org`: ParametersPathHookidOrgRequestBodyContentApplicationjsonContenttypeInsecuressl
    
    /**
      * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/delete-package-for-authenticated-user")
    var `packagesSlashdelete-package-for-authenticated-user`: ParametersPathPackagenameStringResponses401Content55403Content55
    
    /**
      * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
      * - If `package_type` is not `container`, your token must also include the `repo` scope.
      * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
      */
    @JSName("packages/delete-package-for-org")
    var `packagesSlashdelete-package-for-org`: Responses401Content55403Content55
    
    /**
      * Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
      * - If `package_type` is not `container`, your token must also include the `repo` scope.
      * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
      */
    @JSName("packages/delete-package-for-user")
    var `packagesSlashdelete-package-for-user`: ParametersPathPackagenamePackagetypeUsernameResponses401Content55403Content55
    
    /**
      * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/delete-package-version-for-authenticated-user")
    var `packagesSlashdelete-package-version-for-authenticated-user`: ParametersPathPackageversionidNumberResponses401Content55403Content55
    
    /**
      * Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
      * - If `package_type` is not `container`, your token must also include the `repo` scope.
      * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
      */
    @JSName("packages/delete-package-version-for-org")
    var `packagesSlashdelete-package-version-for-org`: ParametersPathOrgPackagenamePackagetypeResponses401Content55403Content55
    
    /**
      * Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
      * - If `package_type` is not `container`, your token must also include the `repo` scope.
      * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
      */
    @JSName("packages/delete-package-version-for-user")
    var `packagesSlashdelete-package-version-for-user`: ParametersPathPackagenamePackagetypePackageversionidUsername
    
    /**
      * Lists package versions for a package owned by the authenticated user.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/get-all-package-versions-for-package-owned-by-authenticated-user")
    var `packagesSlashget-all-package-versions-for-package-owned-by-authenticated-user`: ParametersPathPackagenameStringQuery471
    
    /**
      * Lists package versions for a package owned by an organization.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/get-all-package-versions-for-package-owned-by-org")
    var `packagesSlashget-all-package-versions-for-package-owned-by-org`: ParametersQuery471
    
    /**
      * Lists package versions for a public package owned by a specified user.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/get-all-package-versions-for-package-owned-by-user")
    var `packagesSlashget-all-package-versions-for-package-owned-by-user`: Responses200Content472
    
    /**
      * Gets a specific package for a package owned by the authenticated user.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/get-package-for-authenticated-user")
    var `packagesSlashget-package-for-authenticated-user`: ParametersPathPackagenameString
    
    /**
      * Gets a specific package in an organization.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/get-package-for-organization")
    var `packagesSlashget-package-for-organization`: ParametersPathOrgPackagename
    
    /**
      * Gets a specific package metadata for a public package owned by a user.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/get-package-for-user")
    var `packagesSlashget-package-for-user`: ParametersPathPackagenamePackagetypeUsername
    
    /**
      * Gets a specific package version for a package owned by the authenticated user.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/get-package-version-for-authenticated-user")
    var `packagesSlashget-package-version-for-authenticated-user`: ParametersPathPackageversionidNumber
    
    /**
      * Gets a specific package version in an organization.
      *
      * You must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/get-package-version-for-organization")
    var `packagesSlashget-package-version-for-organization`: ParametersPathOrgPackagenamePackagetype
    
    /**
      * Gets a specific package version for a public package owned by a specified user.
      *
      * At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/get-package-version-for-user")
    var `packagesSlashget-package-version-for-user`: ParametersPathPackagetypePackageversionidUsername
    
    /**
      * Lists packages owned by the authenticated user within the user's namespace.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/list-packages-for-authenticated-user")
    var `packagesSlashlist-packages-for-authenticated-user`: Parameters612
    
    /**
      * Lists all packages in an organization readable by the user.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/list-packages-for-organization")
    var `packagesSlashlist-packages-for-organization`: ParametersQueryPackagetypeVisibility
    
    /**
      * Lists all packages in a user's namespace for which the requesting user has access.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
      * If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/list-packages-for-user")
    var `packagesSlashlist-packages-for-user`: ParametersPath599QueryPackagetypeVisibility
    
    /**
      * Restores a package owned by the authenticated user.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/restore-package-for-authenticated-user")
    var `packagesSlashrestore-package-for-authenticated-user`: ParametersPathPackagenameStringQueryToken
    
    /**
      * Restores an entire package in an organization.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
      * - If `package_type` is not `container`, your token must also include the `repo` scope.
      * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
      */
    @JSName("packages/restore-package-for-org")
    var `packagesSlashrestore-package-for-org`: ParametersPathOrgPackagenameQueryToken
    
    /**
      * Restores an entire package for a user.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
      * - If `package_type` is not `container`, your token must also include the `repo` scope.
      * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
      */
    @JSName("packages/restore-package-for-user")
    var `packagesSlashrestore-package-for-user`: ParametersPathPackagenamePackagetypeUsernameQueryToken
    
    /**
      * Restores a package version owned by the authenticated user.
      *
      * You can restore a deleted package version under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.
      */
    @JSName("packages/restore-package-version-for-authenticated-user")
    var `packagesSlashrestore-package-version-for-authenticated-user`: ParametersPathPackageversionidNumberResponses401Content55403Content55
    
    /**
      * Restores a specific package version in an organization.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
      * - If `package_type` is not `container`, your token must also include the `repo` scope.
      * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
      */
    @JSName("packages/restore-package-version-for-org")
    var `packagesSlashrestore-package-version-for-org`: ParametersPathOrgPackagenamePackagetypeResponses401Content55403Content55
    
    /**
      * Restores a specific package version for a user.
      *
      * You can restore a deleted package under the following conditions:
      *   - The package was deleted within the last 30 days.
      *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
      *
      * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
      * - If `package_type` is not `container`, your token must also include the `repo` scope.
      * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
      */
    @JSName("packages/restore-package-version-for-user")
    var `packagesSlashrestore-package-version-for-user`: ParametersPathPackagenamePackagetypePackageversionidUsername
    
    /** Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator. */
    @JSName("projects/add-collaborator")
    var `projectsSlashadd-collaborator`: ParametersPathProjectidNumberUsernameString
    
    @JSName("projects/create-card")
    var `projectsSlashcreate-card`: Responses304401403422503
    
    @JSName("projects/create-column")
    var `projectsSlashcreate-column`: Responses201ContentApplicationjsonCardsurl
    
    /** Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    @JSName("projects/create-for-authenticated-user")
    var `projectsSlashcreate-for-authenticated-user`: Responses201ContentApplicationjsonOwnerurl
    
    /** Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    @JSName("projects/create-for-org")
    var `projectsSlashcreate-for-org`: Responses201401403
    
    /** Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    @JSName("projects/create-for-repo")
    var `projectsSlashcreate-for-repo`: Parameters491RequestBodyContentApplicationjsonBodyName
    
    /** Deletes a project board. Returns a `404 Not Found` status if projects are disabled. */
    @JSName("projects/delete")
    var projectsSlashdelete: Responses304401403404410
    
    @JSName("projects/delete-card")
    var `projectsSlashdelete-card`: Responses401Content55403ContentApplicationjsonErrors
    
    @JSName("projects/delete-column")
    var `projectsSlashdelete-column`: ParametersPathColumnidNumberResponses304Unknown401Content55
    
    /** Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    @JSName("projects/get")
    var projectsSlashget: ParametersPathProjectidNumber
    
    @JSName("projects/get-card")
    var `projectsSlashget-card`: ParametersPathCardidNumber
    
    @JSName("projects/get-column")
    var `projectsSlashget-column`: ParametersPathColumnidNumber
    
    /** Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level. */
    @JSName("projects/get-permission-for-user")
    var `projectsSlashget-permission-for-user`: Responses200ContentApplicationjsonPermissionString
    
    @JSName("projects/list-cards")
    var `projectsSlashlist-cards`: ParametersQueryArchivedstatePage
    
    /** Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators. */
    @JSName("projects/list-collaborators")
    var `projectsSlashlist-collaborators`: ParametersQueryAffiliationPagePerpage
    
    @JSName("projects/list-columns")
    var `projectsSlashlist-columns`: ParametersPathProjectidNumberQuery426
    
    /** Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    @JSName("projects/list-for-org")
    var `projectsSlashlist-for-org`: ParametersQuery473
    
    /** Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    @JSName("projects/list-for-repo")
    var `projectsSlashlist-for-repo`: ParametersPathOwnerStringQuery473
    
    @JSName("projects/list-for-user")
    var `projectsSlashlist-for-user`: ParametersPath599Query473
    
    @JSName("projects/move-card")
    var `projectsSlashmove-card`: Responses401403422503
    
    @JSName("projects/move-column")
    var `projectsSlashmove-column`: Responses201Content47304Unknown
    
    /** Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator. */
    @JSName("projects/remove-collaborator")
    var `projectsSlashremove-collaborator`: Responses304Unknown401Content55403Content55
    
    /** Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    @JSName("projects/update")
    var projectsSlashupdate: Responses401403404410422
    
    @JSName("projects/update-card")
    var `projectsSlashupdate-card`: Responses200ContentApplicationjsonColumnurl304Unknown
    
    @JSName("projects/update-column")
    var `projectsSlashupdate-column`: Responses200ContentApplicationjsonCardsurl304Unknown
    
    @JSName("pulls/check-if-merged")
    var `pullsSlashcheck-if-merged`: ParametersPathPullnumberRepoResponses404Unknown
    
    /**
      * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
      */
    @JSName("pulls/create")
    var pullsSlashcreate: Responses201ContentApplicationjsonMergeable
    
    /**
      * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("pulls/create-reply-for-review-comment")
    var `pullsSlashcreate-reply-for-review-comment`: ParametersPathCommentidOwnerPullnumber
    
    /**
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      *
      * Pull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request)."
      *
      * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
      *
      * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
      */
    @JSName("pulls/create-review")
    var `pullsSlashcreate-review`: Responses200ContentApplicationjsonBodytextCommitid
    
    /**
      * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
      *
      * The `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.
      *
      * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("pulls/create-review-comment")
    var `pullsSlashcreate-review-comment`: Responses201ContentApplicationjsonInreplytoidHeadersLocation
    
    @JSName("pulls/delete-pending-review")
    var `pullsSlashdelete-pending-review`: Responses200ContentApplicationjsonBodytextCommitid404Content55422Content418
    
    /** Deletes a review comment. */
    @JSName("pulls/delete-review-comment")
    var `pullsSlashdelete-review-comment`: ParametersPathCommentidOwnerRepoResponses404Content55
    
    /** **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews. */
    @JSName("pulls/dismiss-review")
    var `pullsSlashdismiss-review`: ParametersPathRepoReviewidRequestBodyContentApplicationjsonEvent
    
    /**
      * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists details of a pull request by providing its number.
      *
      * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
      *
      * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
      *
      * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
      *
      * *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
      * *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
      * *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
      *
      * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
      */
    @JSName("pulls/get")
    var pullsSlashget: ParametersPathPullnumberRepo
    
    @JSName("pulls/get-review")
    var `pullsSlashget-review`: ParametersPathRepoReviewid
    
    /** Provides details for a review comment. */
    @JSName("pulls/get-review-comment")
    var `pullsSlashget-review-comment`: Responses200ContentApplicationjsonInreplytoid
    
    /** Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("pulls/list")
    var pullsSlashlist: ParametersQueryBaseDirection
    
    /** List comments for a specific pull request review. */
    @JSName("pulls/list-comments-for-review")
    var `pullsSlashlist-comments-for-review`: ParametersPathRepoReviewidQuery426
    
    /** Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint. */
    @JSName("pulls/list-commits")
    var `pullsSlashlist-commits`: ParametersPathPullnumberRepoQuery426
    
    /** **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default. */
    @JSName("pulls/list-files")
    var `pullsSlashlist-files`: Responses422500503
    
    /** Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation. */
    @JSName("pulls/list-requested-reviewers")
    var `pullsSlashlist-requested-reviewers`: Responses200ContentApplicationjsonTeamsArrayUsersArray
    
    /** Lists all review comments for a pull request. By default, review comments are in ascending order by ID. */
    @JSName("pulls/list-review-comments")
    var `pullsSlashlist-review-comments`: ParametersPathPullnumberRepoQueryPerpageSinceSort
    
    /** Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID. */
    @JSName("pulls/list-review-comments-for-repo")
    var `pullsSlashlist-review-comments-for-repo`: ParametersQueryDirectionPagePerpageSince
    
    /** The list of reviews returns in chronological order. */
    @JSName("pulls/list-reviews")
    var `pullsSlashlist-reviews`: Responses200Content569
    
    /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. */
    @JSName("pulls/merge")
    var pullsSlashmerge: Responses404405
    
    @JSName("pulls/remove-requested-reviewers")
    var `pullsSlashremove-requested-reviewers`: Responses200ContentApplicationjsonMergecommitsha
    
    /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details. */
    @JSName("pulls/request-reviewers")
    var `pullsSlashrequest-reviewers`: Responses201ContentApplicationjsonMergecommitsha
    
    /** Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request)." */
    @JSName("pulls/submit-review")
    var `pullsSlashsubmit-review`: Responses200ContentApplicationjsonBodytextCommitid403Content55
    
    /**
      * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
      */
    @JSName("pulls/update")
    var pullsSlashupdate: Responses200567
    
    /** Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch. */
    @JSName("pulls/update-branch")
    var `pullsSlashupdate-branch`: Responses202ContentApplicationjsonUrl
    
    /** Update the review summary comment with new text. */
    @JSName("pulls/update-review")
    var `pullsSlashupdate-review`: Responses200ContentApplicationjsonBodytextCommitid422Content418
    
    /** Enables you to edit a review comment. */
    @JSName("pulls/update-review-comment")
    var `pullsSlashupdate-review-comment`: Responses566
    
    /**
      * **Note:** Accessing this endpoint does not count against your REST API rate limit.
      *
      * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
      */
    @JSName("rate-limit/get")
    var `rate-limitSlashget`: Responses200ContentApplicationjsonRateResources
    
    /** Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment. */
    @JSName("reactions/create-for-commit-comment")
    var `reactionsSlashcreate-for-commit-comment`: Responses201ContentApplicationjsonNodeidUser
    
    /** Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue. */
    @JSName("reactions/create-for-issue")
    var `reactionsSlashcreate-for-issue`: ParametersPathIssuenumberOwnerRepoRequestBodyContentApplicationjson121
    
    /** Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment. */
    @JSName("reactions/create-for-issue-comment")
    var `reactionsSlashcreate-for-issue-comment`: Responses201ContentApplicationjsonNodeidUser
    
    /** Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment. */
    @JSName("reactions/create-for-pull-request-review-comment")
    var `reactionsSlashcreate-for-pull-request-review-comment`: Responses201ContentApplicationjsonNodeidUser
    
    /** Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release. */
    @JSName("reactions/create-for-release")
    var `reactionsSlashcreate-for-release`: ParametersPathOwnerReleaseidRequestBodyContentApplicationjson326
    
    /**
      * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
      */
    @JSName("reactions/create-for-team-discussion-comment-in-org")
    var `reactionsSlashcreate-for-team-discussion-comment-in-org`: Responses200ContentApplicationjsonNodeidUser
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
      *
      * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
      */
    @JSName("reactions/create-for-team-discussion-comment-legacy")
    var `reactionsSlashcreate-for-team-discussion-comment-legacy`: Responses597
    
    /**
      * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
      */
    @JSName("reactions/create-for-team-discussion-in-org")
    var `reactionsSlashcreate-for-team-discussion-in-org`: ParametersPathDiscussionnumberOrgTeamslugRequestBodyContentApplicationjson121
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
      *
      * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
      */
    @JSName("reactions/create-for-team-discussion-legacy")
    var `reactionsSlashcreate-for-team-discussion-legacy`: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjson121
    
    /**
      * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
      *
      * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
      */
    @JSName("reactions/delete-for-commit-comment")
    var `reactionsSlashdelete-for-commit-comment`: ParametersPathReactionidRepo
    
    /**
      * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
      *
      * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
      */
    @JSName("reactions/delete-for-issue")
    var `reactionsSlashdelete-for-issue`: ParametersPathIssuenumberOwnerReactionid
    
    /**
      * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
      *
      * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
      */
    @JSName("reactions/delete-for-issue-comment")
    var `reactionsSlashdelete-for-issue-comment`: ParametersPathReactionidRepo
    
    /**
      * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
      *
      * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
      */
    @JSName("reactions/delete-for-pull-request-comment")
    var `reactionsSlashdelete-for-pull-request-comment`: ParametersPathReactionidRepo
    
    /**
      * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
      *
      * Delete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).
      */
    @JSName("reactions/delete-for-release")
    var `reactionsSlashdelete-for-release`: ParametersPathReleaseidRepo
    
    /**
      * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
      *
      * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("reactions/delete-for-team-discussion")
    var `reactionsSlashdelete-for-team-discussion`: ParametersPathReactionidTeamslug
    
    /**
      * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
      *
      * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("reactions/delete-for-team-discussion-comment")
    var `reactionsSlashdelete-for-team-discussion-comment`: ParametersPathOrgReactionid
    
    /** List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments). */
    @JSName("reactions/list-for-commit-comment")
    var `reactionsSlashlist-for-commit-comment`: ParametersPathCommentidOwnerRepoQuery481
    
    /** List the reactions to an [issue](https://docs.github.com/rest/reference/issues). */
    @JSName("reactions/list-for-issue")
    var `reactionsSlashlist-for-issue`: ParametersPathIssuenumberOwnerRepoQuery481
    
    /** List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments). */
    @JSName("reactions/list-for-issue-comment")
    var `reactionsSlashlist-for-issue-comment`: ParametersPathCommentidOwnerRepoQuery481
    
    /** List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments). */
    @JSName("reactions/list-for-pull-request-review-comment")
    var `reactionsSlashlist-for-pull-request-review-comment`: ParametersPathCommentidOwnerRepoQuery481
    
    /** List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases). */
    @JSName("reactions/list-for-release")
    var `reactionsSlashlist-for-release`: ParametersQuery574
    
    /**
      * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
      */
    @JSName("reactions/list-for-team-discussion-comment-in-org")
    var `reactionsSlashlist-for-team-discussion-comment-in-org`: ParametersQuery481
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
      *
      * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("reactions/list-for-team-discussion-comment-legacy")
    var `reactionsSlashlist-for-team-discussion-comment-legacy`: ParametersPathCommentnumberDiscussionnumberTeamidQuery481
    
    /**
      * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
      */
    @JSName("reactions/list-for-team-discussion-in-org")
    var `reactionsSlashlist-for-team-discussion-in-org`: ParametersPathDiscussionnumberOrgTeamslugQuery481
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
      *
      * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("reactions/list-for-team-discussion-legacy")
    var `reactionsSlashlist-for-team-discussion-legacy`: ParametersPathDiscussionnumberNumberQuery481
    
    @JSName("repos/accept-invitation-for-authenticated-user")
    var `reposSlashaccept-invitation-for-authenticated-user`: ParametersPathInvitationidNumber
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
      *
      * | Type    | Description                                                                                                                                                |
      * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/add-app-access-restrictions")
    var `reposSlashadd-app-access-restrictions`: Responses200Content510422Content421
    
    /**
      * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      *
      * Adding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/enterprise-cloud@latest/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
      *
      * For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
      *
      * ```
      * Cannot assign {member} permission of {role name}
      * ```
      *
      * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      *
      * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
      *
      * **Updating an existing collaborator's permission level**
      *
      * The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.
      *
      * **Rate limits**
      *
      * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
      */
    @JSName("repos/add-collaborator")
    var `reposSlashadd-collaborator`: Responses201ContentApplicationjsonInvitee
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/add-status-check-contexts")
    var `reposSlashadd-status-check-contexts`: Responses200Content48403Content55
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Grants the specified teams push access for this branch. You can also give push access to child teams.
      *
      * | Type    | Description                                                                                                                                |
      * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
      * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/add-team-access-restrictions")
    var `reposSlashadd-team-access-restrictions`: Responses200511422Content421
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Grants the specified people push access for this branch.
      *
      * | Type    | Description                                                                                                                   |
      * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/add-user-access-restrictions")
    var `reposSlashadd-user-access-restrictions`: Responses200Content454422Content421
    
    /**
      * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
      *
      * Team members will include the members of child teams.
      *
      * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
      * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
      * endpoint.
      */
    @JSName("repos/check-collaborator")
    var `reposSlashcheck-collaborator`: ParametersPathOwnerRepoUsername
    
    /** Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)". */
    @JSName("repos/check-vulnerability-alerts")
    var `reposSlashcheck-vulnerability-alerts`: Parameters491Responses404Unknown
    
    /**
      * List any syntax errors that are detected in the CODEOWNERS
      * file.
      *
      * For more information about the correct CODEOWNERS syntax,
      * see "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
      */
    @JSName("repos/codeowners-errors")
    var `reposSlashcodeowners-errors`: ParametersPathOwnerStringQuery197
    
    /**
      * **Deprecated**: Use `repos.compareCommitsWithBasehead()` (`GET /repos/{owner}/{repo}/compare/{basehead}`) instead. Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
      *
      * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
      *
      * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
      *
      * **Working with large comparisons**
      *
      * To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
      *
      * When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("repos/compare-commits")
    var `reposSlashcompare-commits`: ParametersPathHeadOwner
    
    /**
      * The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.
      *
      * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
      *
      * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
      *
      * **Working with large comparisons**
      *
      * To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
      *
      * When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("repos/compare-commits-with-basehead")
    var `reposSlashcompare-commits-with-basehead`: ParametersPathBaseheadOwner
    
    /** Users with admin access to the repository can create an autolink. */
    @JSName("repos/create-autolink")
    var `reposSlashcreate-autolink`: Responses201ContentApplicationjsonKeyprefix
    
    /**
      * Create a comment for a commit using its `:commit_sha`.
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("repos/create-commit-comment")
    var `reposSlashcreate-commit-comment`: Responses201ContentApplicationjsonAuthorassociationBodyHeadersLocation
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
      */
    @JSName("repos/create-commit-signature-protection")
    var `reposSlashcreate-commit-signature-protection`: Responses200ContentApplicationjsonEnabledUrl404Content55
    
    /**
      * Users with push access in a repository can create commit statuses for a given SHA.
      *
      * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
      */
    @JSName("repos/create-commit-status")
    var `reposSlashcreate-commit-status`: ParametersPathOwnerRepoSha
    
    /** You can create a read-only deploy key. */
    @JSName("repos/create-deploy-key")
    var `reposSlashcreate-deploy-key`: Responses201ContentApplicationjsonAddedby
    
    /**
      * Deployments offer a few configurable parameters with certain defaults.
      *
      * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
      * before we merge a pull request.
      *
      * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
      * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
      * makes it easier to track which environments have requested deployments. The default environment is `production`.
      *
      * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
      * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
      * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
      * return a failure response.
      *
      * By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`
      * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
      * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
      * not require any contexts or create any commit statuses, the deployment will always succeed.
      *
      * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
      * field that will be passed on when a deployment event is dispatched.
      *
      * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
      * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
      * application with debugging enabled.
      *
      * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
      *
      * #### Merged branch response
      * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
      * a deployment. This auto-merge happens when:
      * *   Auto-merge option is enabled in the repository
      * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
      * *   There are no merge conflicts
      *
      * If there are no new commits in the base branch, a new request to create a deployment should give a successful
      * response.
      *
      * #### Merge conflict response
      * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
      * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
      *
      * #### Failed commit status checks
      * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
      * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
      */
    @JSName("repos/create-deployment")
    var `reposSlashcreate-deployment`: Responses202409422
    
    /**
      * Creates a deployment branch policy for an environment.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
      */
    @JSName("repos/create-deployment-branch-policy")
    var `reposSlashcreate-deployment-branch-policy`: Responses200ContentApplicationjsonNameNodeid
    
    /**
      * Users with `push` access can create deployment statuses for a given deployment.
      *
      * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
      */
    @JSName("repos/create-deployment-status")
    var `reposSlashcreate-deployment-status`: Responses201ContentApplicationjsonEnvironmenturl
    
    /**
      * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
      *
      * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
      *
      * This endpoint requires write access to the repository by providing either:
      *
      *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
      *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
      *
      * This input example shows how you can use the `client_payload` as a test to debug your workflow.
      */
    @JSName("repos/create-dispatch-event")
    var `reposSlashcreate-dispatch-event`: Parameters491RequestBodyContentApplicationjsonClientpayload
    
    /**
      * Creates a new repository for the authenticated user.
      *
      * **OAuth scope requirements**
      *
      * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
      *
      * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
      * *   `repo` scope to create a private repository.
      */
    @JSName("repos/create-for-authenticated-user")
    var `reposSlashcreate-for-authenticated-user`: Responses304400401
    
    /**
      * Create a fork for the authenticated user.
      *
      * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
      */
    @JSName("repos/create-fork")
    var `reposSlashcreate-fork`: Responses202400403
    
    /**
      * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
      *
      * **OAuth scope requirements**
      *
      * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
      *
      * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
      * *   `repo` scope to create a private repository
      */
    @JSName("repos/create-in-org")
    var `reposSlashcreate-in-org`: Responses201ContentApplicationjsonAllowupdatebranch
    
    /**
      * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
      *
      * **Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."
      *
      * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
      */
    @JSName("repos/create-or-update-environment")
    var `reposSlashcreate-or-update-environment`: RequestBodyContent531
    
    /**
      * Creates a new file or replaces an existing file in a repository. You must authenticate using an access token with the `workflow` scope to use this endpoint.
      *
      * **Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/reference/repos/#delete-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
      */
    @JSName("repos/create-or-update-file-contents")
    var `reposSlashcreate-or-update-file-contents`: Parameters525
    
    /**
      * Create a GitHub Pages deployment for a repository.
      *
      * Users must have write permissions. GitHub Apps must have the `pages:write` permission to use this endpoint.
      */
    @JSName("repos/create-pages-deployment")
    var `reposSlashcreate-pages-deployment`: Responses400404422
    
    /** Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)." */
    @JSName("repos/create-pages-site")
    var `reposSlashcreate-pages-site`: Responses201409422
    
    /**
      * Users with push access to the repository can create a release.
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("repos/create-release")
    var `reposSlashcreate-release`: Responses201ContentApplicationjsonAssetsurl
    
    /**
      * This creates a tag protection state for a repository.
      * This endpoint is only available to repository administrators.
      */
    @JSName("repos/create-tag-protection")
    var `reposSlashcreate-tag-protection`: Responses201ContentApplicationjsonCreatedatEnabled
    
    /**
      * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
      *
      * **OAuth scope requirements**
      *
      * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
      *
      * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
      * *   `repo` scope to create a private repository
      */
    @JSName("repos/create-using-template")
    var `reposSlashcreate-using-template`: RequestBodyContentApplicationjsonIncludeallbranches
    
    /**
      * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
      * share the same `config` as long as those webhooks do not have any `events` that overlap.
      */
    @JSName("repos/create-webhook")
    var `reposSlashcreate-webhook`: RequestBodyContent540
    
    @JSName("repos/decline-invitation-for-authenticated-user")
    var `reposSlashdecline-invitation-for-authenticated-user`: ParametersPathInvitationidNumber
    
    /**
      * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
      *
      * If an organization owner has configured the organization to prevent members from deleting organization-owned
      * repositories, you will get a `403 Forbidden` response.
      */
    @JSName("repos/delete")
    var reposSlashdelete: Responses307403
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Disables the ability to restrict who can push to this branch.
      */
    @JSName("repos/delete-access-restrictions")
    var `reposSlashdelete-access-restrictions`: ParametersPathBranchOwnerResponses
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
      */
    @JSName("repos/delete-admin-branch-protection")
    var `reposSlashdelete-admin-branch-protection`: ParametersPathBranchOwnerResponses404Content55
    
    /** You must authenticate using an access token with the repo scope to use this endpoint. */
    @JSName("repos/delete-an-environment")
    var `reposSlashdelete-an-environment`: ParametersPathEnvironmentnameOwnerResponses
    
    /**
      * This deletes a single autolink reference by ID that was configured for the given repository.
      *
      * Information about autolinks are only available to repository administrators.
      */
    @JSName("repos/delete-autolink")
    var `reposSlashdelete-autolink`: ParametersPathAutolinkidOwnerResponses404Content55
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/delete-branch-protection")
    var `reposSlashdelete-branch-protection`: ParametersPathBranchOwnerResponses464
    
    @JSName("repos/delete-commit-comment")
    var `reposSlashdelete-commit-comment`: ParametersPathCommentidOwnerRepoResponses404Content55
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
      */
    @JSName("repos/delete-commit-signature-protection")
    var `reposSlashdelete-commit-signature-protection`: ParametersPathBranchOwnerResponses404Content55
    
    /** Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead. */
    @JSName("repos/delete-deploy-key")
    var `reposSlashdelete-deploy-key`: ParametersPathKeyidOwnerRepoResponses
    
    /**
      * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
      *
      * To set a deployment as inactive, you must:
      *
      * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
      * *   Mark the active deployment as inactive by adding any non-successful deployment status.
      *
      * For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
      */
    @JSName("repos/delete-deployment")
    var `reposSlashdelete-deployment`: Responses404Content55422Content418
    
    /**
      * Deletes a deployment branch policy for an environment.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
      */
    @JSName("repos/delete-deployment-branch-policy")
    var `reposSlashdelete-deployment-branch-policy`: ParametersPathBranchpolicyidEnvironmentnameResponses
    
    /**
      * Deletes a file in a repository.
      *
      * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
      *
      * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
      *
      * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
      *
      * **Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/reference/repos/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
      */
    @JSName("repos/delete-file")
    var `reposSlashdelete-file`: Responses200404409
    
    @JSName("repos/delete-invitation")
    var `reposSlashdelete-invitation`: ParametersPathInvitationidOwnerRepo
    
    @JSName("repos/delete-pages-site")
    var `reposSlashdelete-pages-site`: Responses404Content55422Content421
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/delete-pull-request-review-protection")
    var `reposSlashdelete-pull-request-review-protection`: ParametersPathBranchOwnerResponses404Content55
    
    /** Users with push access to the repository can delete a release. */
    @JSName("repos/delete-release")
    var `reposSlashdelete-release`: ParametersPathOwnerReleaseidResponses
    
    @JSName("repos/delete-release-asset")
    var `reposSlashdelete-release-asset`: ParametersPathAssetidOwnerResponses
    
    /**
      * This deletes a tag protection state for a repository.
      * This endpoint is only available to repository administrators.
      */
    @JSName("repos/delete-tag-protection")
    var `reposSlashdelete-tag-protection`: ParametersPathRepoTagprotectionid
    
    @JSName("repos/delete-webhook")
    var `reposSlashdelete-webhook`: ParametersPathHookidOwnerRepoResponses404Content55
    
    /** Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/en/articles/configuring-automated-security-fixes)". */
    @JSName("repos/disable-automated-security-fixes")
    var `reposSlashdisable-automated-security-fixes`: Parameters491Responses
    
    @JSName("repos/disable-lfs-for-repo")
    var `reposSlashdisable-lfs-for-repo`: Parameters491Responses
    
    /** Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)". */
    @JSName("repos/disable-vulnerability-alerts")
    var `reposSlashdisable-vulnerability-alerts`: Parameters491Responses
    
    /**
      * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
      * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
      * the `Location` header to make a second `GET` request.
      * **Note**: For private repositories, these links are temporary and expire after five minutes.
      */
    @JSName("repos/download-tarball-archive")
    var `reposSlashdownload-tarball-archive`: Parameters535Responses
    
    /**
      * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
      * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
      * the `Location` header to make a second `GET` request.
      *
      * **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
      */
    @JSName("repos/download-zipball-archive")
    var `reposSlashdownload-zipball-archive`: Parameters535Responses
    
    /** Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/en/articles/configuring-automated-security-fixes)". */
    @JSName("repos/enable-automated-security-fixes")
    var `reposSlashenable-automated-security-fixes`: Parameters491Responses
    
    @JSName("repos/enable-lfs-for-repo")
    var `reposSlashenable-lfs-for-repo`: Responses202Content47403Unknown
    
    /** Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)". */
    @JSName("repos/enable-vulnerability-alerts")
    var `reposSlashenable-vulnerability-alerts`: Parameters491Responses
    
    /** Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release. */
    @JSName("repos/generate-release-notes")
    var `reposSlashgenerate-release-notes`: Responses200ContentApplicationjsonBodyString
    
    /** The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network. */
    @JSName("repos/get")
    var reposSlashget: Parameters491
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists who has access to this protected branch.
      *
      * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
      */
    @JSName("repos/get-access-restrictions")
    var `reposSlashget-access-restrictions`: Responses200ContentApplicationjsonAppsurl
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/get-admin-branch-protection")
    var `reposSlashget-admin-branch-protection`: Responses200ContentApplicationjsonEnabledUrl
    
    /**
      * Lists the environments for a repository.
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("repos/get-all-environments")
    var `reposSlashget-all-environments`: Responses200ContentApplicationjsonEnvironmentsTotalcount
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/get-all-status-check-contexts")
    var `reposSlashget-all-status-check-contexts`: Responses200Content48404Content55
    
    @JSName("repos/get-all-topics")
    var `reposSlashget-all-topics`: ParametersPathOwnerStringQuery451
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
      */
    @JSName("repos/get-apps-with-access-to-protected-branch")
    var `reposSlashget-apps-with-access-to-protected-branch`: Responses200Content510
    
    /**
      * This returns a single autolink reference by ID that was configured for the given repository.
      *
      * Information about autolinks are only available to repository administrators.
      */
    @JSName("repos/get-autolink")
    var `reposSlashget-autolink`: ParametersPathAutolinkidOwner
    
    @JSName("repos/get-branch")
    var `reposSlashget-branch`: ParametersPathBranchOwner
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/get-branch-protection")
    var `reposSlashget-branch-protection`: Responses200ContentApplicationjsonBlockcreations
    
    /** Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */
    @JSName("repos/get-clones")
    var `reposSlashget-clones`: ParametersQuery585
    
    /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */
    @JSName("repos/get-code-frequency-stats")
    var `reposSlashget-code-frequency-stats`: Responses200Content579
    
    /** Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`. */
    @JSName("repos/get-collaborator-permission-level")
    var `reposSlashget-collaborator-permission-level`: Responses200ContentApplicationjsonPermissionRolename
    
    /**
      * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
      *
      *
      * Additionally, a combined `state` is returned. The `state` is one of:
      *
      * *   **failure** if any of the contexts report as `error` or `failure`
      * *   **pending** if there are no statuses or a context is `pending`
      * *   **success** if the latest status for all contexts is `success`
      */
    @JSName("repos/get-combined-status-for-ref")
    var `reposSlashget-combined-status-for-ref`: ParametersPathOwnerRefRepoQuery426
    
    /**
      * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
      *
      * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
      *
      * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
      *
      * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
      *
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("repos/get-commit")
    var `reposSlashget-commit`: ParametersPathOwnerRefRepo
    
    /** Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`. */
    @JSName("repos/get-commit-activity-stats")
    var `reposSlashget-commit-activity-stats`: Responses200Content580
    
    @JSName("repos/get-commit-comment")
    var `reposSlashget-commit-comment`: ParametersPathCommentidOwnerRepo
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
      *
      * **Note**: You must enable branch protection to require signed commits.
      */
    @JSName("repos/get-commit-signature-protection")
    var `reposSlashget-commit-signature-protection`: Responses200ContentApplicationjsonEnabledUrl404Content55
    
    /**
      * This endpoint will return all community profile metrics, including an
      * overall health score, repository description, the presence of documentation, detected
      * code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
      * README, and CONTRIBUTING files.
      *
      * The `health_percentage` score is defined as a percentage of how many of
      * these four documents are present: README, CONTRIBUTING, LICENSE, and
      * CODE_OF_CONDUCT. For example, if all four documents are present, then
      * the `health_percentage` is `100`. If only one is present, then the
      * `health_percentage` is `25`.
      *
      * `content_reports_enabled` is only returned for organization-owned repositories.
      */
    @JSName("repos/get-community-profile-metrics")
    var `reposSlashget-community-profile-metrics`: Responses200ContentApplicationjsonDocumentation
    
    /**
      * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
      * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
      *
      * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
      * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
      * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
      * object format.
      *
      * **Notes**:
      * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
      * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
      * API](https://docs.github.com/rest/reference/git#get-a-tree).
      *  *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
      * #### Size limits
      * If the requested file's size is:
      * * 1 MB or smaller: All features of this endpoint are supported.
      * * Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.
      *  * Greater than 100 MB: This endpoint is not supported.
      *
      * #### If the content is a directory
      * The response will be an array of objects, one object for each item in the directory.
      * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
      * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
      * In the next major version of the API, the type will be returned as "submodule".
      *
      * #### If the content is a symlink
      * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
      * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
      * describing the symlink itself.
      *
      * #### If the content is a submodule
      * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
      * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
      * the submodule at that specific commit.
      *
      * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
      * github.com URLs (`html_url` and `_links["html"]`) will have null values.
      */
    @JSName("repos/get-content")
    var `reposSlashget-content`: ParametersPathOwnerPathRepo
    
    /**
      * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
      *
      * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
      * *   `a` - Number of additions
      * *   `d` - Number of deletions
      * *   `c` - Number of commits
      */
    @JSName("repos/get-contributors-stats")
    var `reposSlashget-contributors-stats`: Responses200Content581
    
    @JSName("repos/get-deploy-key")
    var `reposSlashget-deploy-key`: ParametersPathKeyidOwnerRepo
    
    @JSName("repos/get-deployment")
    var `reposSlashget-deployment`: ParametersPathDeploymentidOwner
    
    /**
      * Gets a deployment branch policy for an environment.
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("repos/get-deployment-branch-policy")
    var `reposSlashget-deployment-branch-policy`: ParametersPathBranchpolicyidEnvironmentname
    
    /** Users with pull access can view a deployment status for a deployment: */
    @JSName("repos/get-deployment-status")
    var `reposSlashget-deployment-status`: ParametersPathRepoStatusid
    
    /**
      * **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
      *
      * Anyone with read access to the repository can use this endpoint. If the
      * repository is private, you must use an access token with the `repo` scope. GitHub
      * Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("repos/get-environment")
    var `reposSlashget-environment`: ParametersPathEnvironmentnameOwner
    
    @JSName("repos/get-latest-pages-build")
    var `reposSlashget-latest-pages-build`: Responses200ContentApplicationjsonPusher
    
    /**
      * View the latest published full release for the repository.
      *
      * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
      */
    @JSName("repos/get-latest-release")
    var `reposSlashget-latest-release`: Responses200572
    
    @JSName("repos/get-pages")
    var `reposSlashget-pages`: Responses200ContentApplicationjsonCustom404
    
    @JSName("repos/get-pages-build")
    var `reposSlashget-pages-build`: ParametersPathBuildidOwner
    
    /**
      * Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
      *
      * The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
      *
      * Users must have admin or owner permissions. GitHub Apps must have the `pages:write` and `administration:write` permission to use this endpoint.
      */
    @JSName("repos/get-pages-health-check")
    var `reposSlashget-pages-health-check`: Responses200202400
    
    /**
      * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
      *
      * The array order is oldest week (index 0) to most recent week.
      */
    @JSName("repos/get-participation-stats")
    var `reposSlashget-participation-stats`: Responses200ContentApplicationjsonAllOwner
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/get-pull-request-review-protection")
    var `reposSlashget-pull-request-review-protection`: Responses200ContentApplicationjsonDismissstalereviews
    
    /**
      * Each array contains the day number, hour number, and number of commits:
      *
      * *   `0-6`: Sunday - Saturday
      * *   `0-23`: Hour of day
      * *   Number of commits
      *
      * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
      */
    @JSName("repos/get-punch-card-stats")
    var `reposSlashget-punch-card-stats`: Responses204Unknown
    
    /**
      * Gets the preferred README for a repository.
      *
      * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
      */
    @JSName("repos/get-readme")
    var `reposSlashget-readme`: Responses200ContentApplicationjsonSubmodulegiturl
    
    /**
      * Gets the README from a repository directory.
      *
      * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
      */
    @JSName("repos/get-readme-in-directory")
    var `reposSlashget-readme-in-directory`: ParametersPathDirOwner
    
    /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia). */
    @JSName("repos/get-release")
    var `reposSlashget-release`: ParametersPathOwnerReleaseid
    
    /** To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */
    @JSName("repos/get-release-asset")
    var `reposSlashget-release-asset`: ParametersPathAssetidOwner
    
    /** Get a published release with the specified tag. */
    @JSName("repos/get-release-by-tag")
    var `reposSlashget-release-by-tag`: ParametersPathRepoTag
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/get-status-checks-protection")
    var `reposSlashget-status-checks-protection`: Responses200ContentApplicationjsonStrict
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists the teams who have push access to this branch. The list includes child teams.
      */
    @JSName("repos/get-teams-with-access-to-protected-branch")
    var `reposSlashget-teams-with-access-to-protected-branch`: Responses200511
    
    /** Get the top 10 popular contents over the last 14 days. */
    @JSName("repos/get-top-paths")
    var `reposSlashget-top-paths`: Responses200Content586
    
    /** Get the top 10 referrers over the last 14 days. */
    @JSName("repos/get-top-referrers")
    var `reposSlashget-top-referrers`: Responses200Content587
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Lists the people who have push access to this branch.
      */
    @JSName("repos/get-users-with-access-to-protected-branch")
    var `reposSlashget-users-with-access-to-protected-branch`: Responses200Content454404Content55
    
    /** Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */
    @JSName("repos/get-views")
    var `reposSlashget-views`: Responses200ContentApplicationjsonCountUniques
    
    /** Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)." */
    @JSName("repos/get-webhook")
    var `reposSlashget-webhook`: ParametersPathHookidOwnerRepo
    
    /**
      * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
      *
      * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
      */
    @JSName("repos/get-webhook-config-for-repo")
    var `reposSlashget-webhook-config-for-repo`: ParametersPathHookidOwnerRepoResponses200ContentApplicationjsonContenttype
    
    /** Returns a delivery for a webhook configured in a repository. */
    @JSName("repos/get-webhook-delivery")
    var `reposSlashget-webhook-delivery`: ParametersPathDeliveryidHookidOwnerRepo
    
    /**
      * This returns a list of autolinks configured for the given repository.
      *
      * Information about autolinks are only available to repository administrators.
      */
    @JSName("repos/list-autolinks")
    var `reposSlashlist-autolinks`: ParametersQuery506
    
    @JSName("repos/list-branches")
    var `reposSlashlist-branches`: ParametersQueryPerpageProtected
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
      */
    @JSName("repos/list-branches-for-head-commit")
    var `reposSlashlist-branches-for-head-commit`: ParametersPathCommitshaOwner
    
    /**
      * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
      * Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.
      *
      * Team members will include the members of child teams.
      *
      * You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
      * endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
      * endpoint.
      */
    @JSName("repos/list-collaborators")
    var `reposSlashlist-collaborators`: ParametersQueryPagePermission
    
    /** Use the `:commit_sha` to specify the commit that will have its comments listed. */
    @JSName("repos/list-comments-for-commit")
    var `reposSlashlist-comments-for-commit`: ParametersPathCommitshaOwnerQuery426
    
    /**
      * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
      *
      * Comments are ordered by ascending ID.
      */
    @JSName("repos/list-commit-comments-for-repo")
    var `reposSlashlist-commit-comments-for-repo`: Responses200Content520
    
    /**
      * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
      *
      * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
      */
    @JSName("repos/list-commit-statuses-for-ref")
    var `reposSlashlist-commit-statuses-for-ref`: Responses200Content524
    
    /**
      * **Signature verification object**
      *
      * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
      *
      * | Name | Type | Description |
      * | ---- | ---- | ----------- |
      * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
      * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
      * | `signature` | `string` | The signature that was extracted from the commit. |
      * | `payload` | `string` | The value that was signed. |
      *
      * These are the possible values for `reason` in the `verification` object:
      *
      * | Value | Description |
      * | ----- | ----------- |
      * | `expired_key` | The key that made the signature is expired. |
      * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
      * | `gpgverify_error` | There was an error communicating with the signature verification service. |
      * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
      * | `unsigned` | The object does not include a signature. |
      * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
      * | `no_user` | No user was associated with the `committer` email address in the commit. |
      * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
      * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
      * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
      * | `malformed_signature` | There was an error parsing the signature. |
      * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
      * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
      */
    @JSName("repos/list-commits")
    var `reposSlashlist-commits`: ParametersQueryUntil
    
    /**
      * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
      *
      * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
      */
    @JSName("repos/list-contributors")
    var `reposSlashlist-contributors`: ParametersQueryAnonPage
    
    @JSName("repos/list-deploy-keys")
    var `reposSlashlist-deploy-keys`: Responses200Content554
    
    /**
      * Lists the deployment branch policies for an environment.
      *
      * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
      */
    @JSName("repos/list-deployment-branch-policies")
    var `reposSlashlist-deployment-branch-policies`: ParametersPathEnvironmentnameOwnerQuery426
    
    /** Users with pull access can view deployment statuses for a deployment: */
    @JSName("repos/list-deployment-statuses")
    var `reposSlashlist-deployment-statuses`: ParametersPathDeploymentidOwnerQuery426
    
    /** Simple filtering of deployments is available via query parameters: */
    @JSName("repos/list-deployments")
    var `reposSlashlist-deployments`: ParametersQueryTask
    
    /**
      * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
      *
      * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
      */
    @JSName("repos/list-for-authenticated-user")
    var `reposSlashlist-for-authenticated-user`: ParametersQueryTypeVisibility
    
    /** Lists repositories for the specified organization. */
    @JSName("repos/list-for-org")
    var `reposSlashlist-for-org`: ParametersQueryPerpageSortType
    
    /** Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user. */
    @JSName("repos/list-for-user")
    var `reposSlashlist-for-user`: ParametersQueryPagePerpageSortType
    
    @JSName("repos/list-forks")
    var `reposSlashlist-forks`: ParametersQuery533
    
    /** When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations. */
    @JSName("repos/list-invitations")
    var `reposSlashlist-invitations`: Responses200Content546
    
    /** When authenticating as a user, this endpoint will list all currently open repository invitations for that user. */
    @JSName("repos/list-invitations-for-authenticated-user")
    var `reposSlashlist-invitations-for-authenticated-user`: Responses200Content546304Unknown
    
    /** Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language. */
    @JSName("repos/list-languages")
    var `reposSlashlist-languages`: Responses200Content558
    
    @JSName("repos/list-pages-builds")
    var `reposSlashlist-pages-builds`: Responses200Content564
    
    /**
      * Lists all public repositories in the order that they were created.
      *
      * Note:
      * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
      * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
      */
    @JSName("repos/list-public")
    var `reposSlashlist-public`: Parameters589
    
    /** Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. */
    @JSName("repos/list-pull-requests-associated-with-commit")
    var `reposSlashlist-pull-requests-associated-with-commit`: Responses200Content523
    
    @JSName("repos/list-release-assets")
    var `reposSlashlist-release-assets`: ParametersPathOwnerReleaseidQuery426
    
    /**
      * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
      *
      * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
      */
    @JSName("repos/list-releases")
    var `reposSlashlist-releases`: Responses200Content571
    
    /**
      * This returns the tag protection states of a repository.
      *
      * This information is only available to repository administrators.
      */
    @JSName("repos/list-tag-protection")
    var `reposSlashlist-tag-protection`: Responses200Content584
    
    @JSName("repos/list-tags")
    var `reposSlashlist-tags`: Responses200Content583
    
    @JSName("repos/list-teams")
    var `reposSlashlist-teams`: ParametersPathOwnerStringResponses488
    
    /** Returns a list of webhook deliveries for a webhook configured in a repository. */
    @JSName("repos/list-webhook-deliveries")
    var `reposSlashlist-webhook-deliveries`: ParametersPathHookidOwnerRepoQueryCursorPerpage
    
    /** Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days. */
    @JSName("repos/list-webhooks")
    var `reposSlashlist-webhooks`: Responses200Content539
    
    @JSName("repos/merge")
    var reposSlashmerge: Responses403404409422
    
    /** Sync a branch of a forked repository to keep it up-to-date with the upstream repository. */
    @JSName("repos/merge-upstream")
    var `reposSlashmerge-upstream`: Responses200ContentApplicationjsonBasebranch
    
    /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */
    @JSName("repos/ping-webhook")
    var `reposSlashping-webhook`: ParametersPathHookidOwnerRepoResponses404Content55
    
    /** Redeliver a webhook delivery for a webhook configured in a repository. */
    @JSName("repos/redeliver-webhook-delivery")
    var `reposSlashredeliver-webhook-delivery`: ParametersPathDeliveryidHookidOwnerRepoResponses202400422
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
      *
      * | Type    | Description                                                                                                                                                |
      * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/remove-app-access-restrictions")
    var `reposSlashremove-app-access-restrictions`: Responses200Content510422Content421
    
    @JSName("repos/remove-collaborator")
    var `reposSlashremove-collaborator`: ParametersPathOwnerRepoUsernameResponses
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/remove-status-check-contexts")
    var `reposSlashremove-status-check-contexts`: Responses200Content48404Content55422Content421
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/remove-status-check-protection")
    var `reposSlashremove-status-check-protection`: ParametersPathBranchOwnerResponses
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
      *
      * | Type    | Description                                                                                                                                         |
      * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/remove-team-access-restrictions")
    var `reposSlashremove-team-access-restrictions`: Responses200511422Content421
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Removes the ability of a user to push to this branch.
      *
      * | Type    | Description                                                                                                                                   |
      * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/remove-user-access-restrictions")
    var `reposSlashremove-user-access-restrictions`: Responses200Content454422Content421
    
    /**
      * Renames a branch in a repository.
      *
      * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
      *
      * The permissions required to use this endpoint depends on whether you are renaming the default branch.
      *
      * To rename a non-default branch:
      *
      * * Users must have push access.
      * * GitHub Apps must have the `contents:write` repository permission.
      *
      * To rename the default branch:
      *
      * * Users must have admin or owner permissions.
      * * GitHub Apps must have the `administration:write` repository permission.
      */
    @JSName("repos/rename-branch")
    var `reposSlashrename-branch`: Responses201ContentApplicationjsonProtectionurl
    
    @JSName("repos/replace-all-topics")
    var `reposSlashreplace-all-topics`: Responses200ContentApplicationjsonNames404Content55
    
    /**
      * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
      *
      * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
      */
    @JSName("repos/request-pages-build")
    var `reposSlashrequest-pages-build`: Responses201ContentApplicationjsonStatusUrl
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
      */
    @JSName("repos/set-admin-branch-protection")
    var `reposSlashset-admin-branch-protection`: Responses200ContentApplicationjsonEnabledUrl
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
      *
      * | Type    | Description                                                                                                                                                |
      * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/set-app-access-restrictions")
    var `reposSlashset-app-access-restrictions`: Responses200Content510422Content421
    
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    @JSName("repos/set-status-check-contexts")
    var `reposSlashset-status-check-contexts`: Responses200Content48404Content55422Content421
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
      *
      * | Type    | Description                                                                                                                                |
      * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
      * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/set-team-access-restrictions")
    var `reposSlashset-team-access-restrictions`: Responses200511422Content421
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
      *
      * | Type    | Description                                                                                                                   |
      * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
      * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
      */
    @JSName("repos/set-user-access-restrictions")
    var `reposSlashset-user-access-restrictions`: Responses200Content454422Content421
    
    /**
      * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
      *
      * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
      */
    @JSName("repos/test-push-webhook")
    var `reposSlashtest-push-webhook`: ParametersPathHookidOwnerRepoResponses404Content55
    
    /** A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/). */
    @JSName("repos/transfer")
    var reposSlashtransfer: Responses202ContentApplicationjsonBranchesurl
    
    /** **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint. */
    @JSName("repos/update")
    var reposSlashupdate: Responses200307403
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Protecting a branch requires admin or owner permissions to the repository.
      *
      * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
      *
      * **Note**: The list of users, apps, and teams in total is limited to 100 items.
      */
    @JSName("repos/update-branch-protection")
    var `reposSlashupdate-branch-protection`: Responses200ContentApplicationjsonRequiredconversationresolution
    
    @JSName("repos/update-commit-comment")
    var `reposSlashupdate-commit-comment`: Responses200ContentApplicationjsonAuthorassociationBody
    
    /**
      * Updates a deployment branch policy for an environment.
      *
      * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.
      */
    @JSName("repos/update-deployment-branch-policy")
    var `reposSlashupdate-deployment-branch-policy`: Responses532
    
    /** Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages). */
    @JSName("repos/update-information-about-pages-site")
    var `reposSlashupdate-information-about-pages-site`: Responses400Content420422Content421
    
    @JSName("repos/update-invitation")
    var `reposSlashupdate-invitation`: Responses200ContentApplicationjsonInvitee
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
      *
      * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
      */
    @JSName("repos/update-pull-request-review-protection")
    var `reposSlashupdate-pull-request-review-protection`: Responses200ContentApplicationjsonDismissstalereviews422Content421
    
    /** Users with push access to the repository can edit a release. */
    @JSName("repos/update-release")
    var `reposSlashupdate-release`: Responses200572404ContentApplicationjsonDocumentationurlMessage
    
    /** Users with push access to the repository can edit a release asset. */
    @JSName("repos/update-release-asset")
    var `reposSlashupdate-release-asset`: Responses200ContentApplicationjsonDownloadcount
    
    /**
      * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
      */
    @JSName("repos/update-status-check-protection")
    var `reposSlashupdate-status-check-protection`: Responses200ContentApplicationjsonStrict404Content55
    
    /** Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)." */
    @JSName("repos/update-webhook")
    var `reposSlashupdate-webhook`: RequestBodyContentApplicationjsonRemoveevents
    
    /**
      * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
      *
      * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
      */
    @JSName("repos/update-webhook-config-for-repo")
    var `reposSlashupdate-webhook-config-for-repo`: ParametersPathHookidOwnerRepoRequestBodyContentApplicationjsonContenttypeInsecuressl
    
    /**
      * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
      * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
      *
      * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
      *
      * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
      *
      * `application/zip`
      *
      * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
      * you'll still need to pass your authentication to be able to upload an asset.
      *
      * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
      *
      * **Notes:**
      * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
      * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
      * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
      */
    @JSName("repos/upload-release-asset")
    var `reposSlashupload-release-asset`: ParametersPathOwnerReleaseidQueryLabelName
    
    @JSName("scim/delete-user-from-org")
    var `scimSlashdelete-user-from-org`: Responses403Content592
    
    @JSName("scim/get-provisioning-information-for-user")
    var `scimSlashget-provisioning-information-for-user`: ParametersPathScimuseridString
    
    /**
      * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
      *
      * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
      *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
      *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
      *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
      *
      * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
      *
      * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
      *
      * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
      *
      * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
      *    - If the user signs in, their GitHub account is linked to this entry.
      *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
      */
    @JSName("scim/list-provisioned-identities")
    var `scimSlashlist-provisioned-identities`: ParametersPathOrgStringQueryCountFilter
    
    /** Provision organization membership for a user, and send an activation email to the email address. */
    @JSName("scim/provision-and-invite-user")
    var `scimSlashprovision-and-invite-user`: Responses304400403
    
    /**
      * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
      *
      * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
      *
      * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
      */
    @JSName("scim/set-information-for-provisioned-user")
    var `scimSlashset-information-for-provisioned-user`: Responses200ContentApplicationscimjsonActiveDisplayName
    
    /**
      * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
      *
      * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
      *
      * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
      *
      * ```
      * {
      *   "Operations":[{
      *     "op":"replace",
      *     "value":{
      *       "active":false
      *     }
      *   }]
      * }
      * ```
      */
    @JSName("scim/update-attribute-for-user")
    var `scimSlashupdate-attribute-for-user`: Responses400403404
    
    /**
      * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
      *
      * `q=addClass+in:file+language:js+repo:jquery/jquery`
      *
      * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
      *
      * #### Considerations for code search
      *
      * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
      *
      * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
      * *   Only files smaller than 384 KB are searchable.
      * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
      * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
      */
    @JSName("search/code")
    var searchSlashcode: ParametersQueryPerpageQSort
    
    /**
      * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
      * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
      *
      * `q=repo:octocat/Spoon-Knife+css`
      */
    @JSName("search/commits")
    var searchSlashcommits: ParametersQueryOrderPagePerpageQ
    
    /**
      * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
      * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
      *
      * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
      *
      * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
      *
      * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
      */
    @JSName("search/issues-and-pull-requests")
    var `searchSlashissues-and-pull-requests`: ParametersQueryPagePerpageQSort
    
    /**
      * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
      *
      * `q=bug+defect+enhancement&repository_id=64778136`
      *
      * The labels that best match the query appear first in the search results.
      */
    @JSName("search/labels")
    var searchSlashlabels: ParametersQueryQRepositoryid
    
    /**
      * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
      *
      * `q=tetris+language:assembly&sort=stars&order=desc`
      *
      * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
      */
    @JSName("search/repos")
    var searchSlashrepos: ParametersQueryOrderPagePerpageQSort
    
    /**
      * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
      *
      * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
      *
      * `q=ruby+is:featured`
      *
      * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
      */
    @JSName("search/topics")
    var searchSlashtopics: ParametersQueryQString
    
    /**
      * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
      *
      * When searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
      *
      * For example, if you're looking for a list of popular users, you might try this query:
      *
      * `q=tom+repos:%3E42+followers:%3E1000`
      *
      * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
      */
    @JSName("search/users")
    var searchSlashusers: ParametersQueryPerpageQString
    
    /**
      * Gets a single secret scanning alert detected in an eligible repository.
      * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
      */
    @JSName("secret-scanning/get-alert")
    var `secret-scanningSlashget-alert`: Responses200304404503
    
    /**
      * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
      * To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
      */
    @JSName("secret-scanning/list-alerts-for-enterprise")
    var `secret-scanningSlashlist-alerts-for-enterprise`: ParametersQuerySecrettype
    
    /**
      * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
      * To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
      */
    @JSName("secret-scanning/list-alerts-for-org")
    var `secret-scanningSlashlist-alerts-for-org`: ParametersQueryBeforeDirection
    
    /**
      * Lists secret scanning alerts for an eligible repository, from newest to oldest.
      * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
      */
    @JSName("secret-scanning/list-alerts-for-repo")
    var `secret-scanningSlashlist-alerts-for-repo`: ParametersPathOwnerStringQueryBeforeDirection
    
    /**
      * Lists all locations for a given secret scanning alert for an eligible repository.
      * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
      */
    @JSName("secret-scanning/list-locations-for-alert")
    var `secret-scanningSlashlist-locations-for-alert`: ParametersPathAlertnumberOwnerQuery451
    
    /**
      * Updates the status of a secret scanning alert in an eligible repository.
      * To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
      * For public repositories, you may instead use the `public_repo` scope.
      *
      * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
      */
    @JSName("secret-scanning/update-alert")
    var `secret-scanningSlashupdate-alert`: RequestBodyContentApplicationjson576
    
    /**
      * The "Add team member" endpoint (described below) is deprecated.
      *
      * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      *
      * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("teams/add-member-legacy")
    var `teamsSlashadd-member-legacy`: Responses403Content55404Unknown
    
    /**
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      *
      * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
      *
      * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      */
    @JSName("teams/add-or-update-membership-for-user-in-org")
    var `teamsSlashadd-or-update-membership-for-user-in-org`: Responses200ContentApplicationjsonRoleState403Unknown
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      *
      * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
      *
      * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
      */
    @JSName("teams/add-or-update-membership-for-user-legacy")
    var `teamsSlashadd-or-update-membership-for-user-legacy`: Responses403Unknown404Content55
    
    /**
      * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      */
    @JSName("teams/add-or-update-project-permissions-in-org")
    var `teamsSlashadd-or-update-project-permissions-in-org`: Responses403ContentApplicationjsonDocumentationurl
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
      *
      * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
      */
    @JSName("teams/add-or-update-project-permissions-legacy")
    var `teamsSlashadd-or-update-project-permissions-legacy`: Responses403ContentApplicationjsonDocumentationurl404Content55
    
    /**
      * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      *
      * For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
      */
    @JSName("teams/add-or-update-repo-permissions-in-org")
    var `teamsSlashadd-or-update-repo-permissions-in-org`: ParametersPathOrgOwnerRequestBodyContentApplicationjson131
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
      *
      * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
      *
      * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      */
    @JSName("teams/add-or-update-repo-permissions-legacy")
    var `teamsSlashadd-or-update-repo-permissions-legacy`: Responses403Content55422Content421
    
    /**
      * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      */
    @JSName("teams/check-permissions-for-project-in-org")
    var `teamsSlashcheck-permissions-for-project-in-org`: ParametersPathOrgProjectid
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
      *
      * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
      */
    @JSName("teams/check-permissions-for-project-legacy")
    var `teamsSlashcheck-permissions-for-project-legacy`: ParametersPathProjectidNumberTeamidNumber
    
    /**
      * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
      *
      * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
      *
      * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      */
    @JSName("teams/check-permissions-for-repo-in-org")
    var `teamsSlashcheck-permissions-for-repo-in-org`: ParametersPathOrgOwner
    
    /**
      * **Note**: Repositories inherited through a parent team will also be checked.
      *
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
      *
      * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
      */
    @JSName("teams/check-permissions-for-repo-legacy")
    var `teamsSlashcheck-permissions-for-repo-legacy`: ParametersPathOwnerRepoTeamid
    
    /**
      * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
      *
      * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
      */
    @JSName("teams/create")
    var teamsSlashcreate: Responses201ContentApplicationjsonReposcount
    
    /**
      * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
      */
    @JSName("teams/create-discussion-comment-in-org")
    var `teamsSlashcreate-discussion-comment-in-org`: Responses201ContentApplicationjsonLasteditedat
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
      *
      * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("teams/create-discussion-comment-legacy")
    var `teamsSlashcreate-discussion-comment-legacy`: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjsonBody
    
    /**
      * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
      */
    @JSName("teams/create-discussion-in-org")
    var `teamsSlashcreate-discussion-in-org`: Responses201ContentApplicationjsonCommentscount
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
      *
      * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
      */
    @JSName("teams/create-discussion-legacy")
    var `teamsSlashcreate-discussion-legacy`: ParametersPathTeamidNumberRequestBodyContentApplicationjsonPrivate
    
    /**
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
      */
    @JSName("teams/create-or-update-idp-group-connections-in-org")
    var `teamsSlashcreate-or-update-idp-group-connections-in-org`: ParametersPathTeamslugStringRequestBodyContentApplicationjsonGroups
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
      */
    @JSName("teams/create-or-update-idp-group-connections-legacy")
    var `teamsSlashcreate-or-update-idp-group-connections-legacy`: Responses200487403Content55422Content421
    
    /**
      * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
      */
    @JSName("teams/delete-discussion-comment-in-org")
    var `teamsSlashdelete-discussion-comment-in-org`: ParametersPathCommentnumberDiscussionnumberOrgResponses
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
      *
      * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/delete-discussion-comment-legacy")
    var `teamsSlashdelete-discussion-comment-legacy`: ParametersPathCommentnumberDiscussionnumberTeamidResponses
    
    /**
      * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
      */
    @JSName("teams/delete-discussion-in-org")
    var `teamsSlashdelete-discussion-in-org`: ParametersPathDiscussionnumberOrgTeamslugResponses
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
      *
      * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/delete-discussion-legacy")
    var `teamsSlashdelete-discussion-legacy`: ParametersPathDiscussionnumberNumberResponses
    
    /**
      * To delete a team, the authenticated user must be an organization owner or team maintainer.
      *
      * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
      */
    @JSName("teams/delete-in-org")
    var `teamsSlashdelete-in-org`: ParametersPathTeamslugStringResponses
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
      *
      * To delete a team, the authenticated user must be an organization owner or team maintainer.
      *
      * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
      */
    @JSName("teams/delete-legacy")
    var `teamsSlashdelete-legacy`: ParametersPathTeamidNumberResponses404Content55422Content421
    
    /**
      * Displays information about the specific group's usage.  Provides a list of the group's external members as well as a list of teams that this group is connected to.
      *
      * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
      */
    @JSName("teams/external-idp-group-info-for-org")
    var `teamsSlashexternal-idp-group-info-for-org`: ParametersPathGroupidOrg
    
    /**
      * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
      */
    @JSName("teams/get-by-name")
    var `teamsSlashget-by-name`: Responses200ContentApplicationjsonReposcount
    
    /**
      * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
      */
    @JSName("teams/get-discussion-comment-in-org")
    var `teamsSlashget-discussion-comment-in-org`: ParametersPathCommentnumberDiscussionnumberOrg
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
      *
      * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/get-discussion-comment-legacy")
    var `teamsSlashget-discussion-comment-legacy`: ParametersPathCommentnumberDiscussionnumberTeamid
    
    /**
      * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
      */
    @JSName("teams/get-discussion-in-org")
    var `teamsSlashget-discussion-in-org`: ParametersPathDiscussionnumberOrgTeamslug
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
      *
      * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/get-discussion-legacy")
    var `teamsSlashget-discussion-legacy`: ParametersPathDiscussionnumberNumber
    
    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint. */
    @JSName("teams/get-legacy")
    var `teamsSlashget-legacy`: ParametersPathTeamidNumber
    
    /**
      * The "Get team member" endpoint (described below) is deprecated.
      *
      * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
      *
      * To list members in a team, the team must be visible to the authenticated user.
      */
    @JSName("teams/get-member-legacy")
    var `teamsSlashget-member-legacy`: ParametersPathTeamidNumberUsernameString
    
    /**
      * Team members will include the members of child teams.
      *
      * To get a user's membership with a team, the team must be visible to the authenticated user.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      *
      * **Note:**
      * The response contains the `state` of the membership and the member's `role`.
      *
      * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
      */
    @JSName("teams/get-membership-for-user-in-org")
    var `teamsSlashget-membership-for-user-in-org`: ParametersPathTeamslugUsername
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
      *
      * Team members will include the members of child teams.
      *
      * To get a user's membership with a team, the team must be visible to the authenticated user.
      *
      * **Note:**
      * The response contains the `state` of the membership and the member's `role`.
      *
      * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
      */
    @JSName("teams/get-membership-for-user-legacy")
    var `teamsSlashget-membership-for-user-legacy`: Responses200ContentApplicationjsonRoleState404Content55
    
    /**
      * Creates a connection between a team and an external group.  Only one external group can be linked to a team.
      *
      * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
      */
    @JSName("teams/link-external-idp-group-to-team-for-org")
    var `teamsSlashlink-external-idp-group-to-team-for-org`: Responses200ContentApplicationjsonMembers
    
    /** Lists all teams in an organization that are visible to the authenticated user. */
    @JSName("teams/list")
    var teamsSlashlist: Responses200Content463403Content55
    
    /**
      * Lists the child teams of the team specified by `{team_slug}`.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
      */
    @JSName("teams/list-child-in-org")
    var `teamsSlashlist-child-in-org`: Responses488
    
    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint. */
    @JSName("teams/list-child-legacy")
    var `teamsSlashlist-child-legacy`: Responses200Content463403Content55404Content55
    
    /**
      * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
      */
    @JSName("teams/list-discussion-comments-in-org")
    var `teamsSlashlist-discussion-comments-in-org`: ParametersQuery479
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
      *
      * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/list-discussion-comments-legacy")
    var `teamsSlashlist-discussion-comments-legacy`: ParametersPathDiscussionnumberNumberQuery479
    
    /**
      * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
      */
    @JSName("teams/list-discussions-in-org")
    var `teamsSlashlist-discussions-in-org`: ParametersQueryPerpagePinned
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
      *
      * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/list-discussions-legacy")
    var `teamsSlashlist-discussions-legacy`: ParametersPathTeamidNumberQuery479
    
    /**
      * Lists external groups available in an organization. You can query the groups using the `display_name` parameter, only groups with a `group_name` containing the text provided in the `display_name` parameter will be returned.  You can also limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
      *
      * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
      */
    @JSName("teams/list-external-idp-groups-for-org")
    var `teamsSlashlist-external-idp-groups-for-org`: ParametersQueryDisplaynamePage
    
    /** List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/). */
    @JSName("teams/list-for-authenticated-user")
    var `teamsSlashlist-for-authenticated-user`: Responses200Content617
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * List IdP groups connected to a team on GitHub.
      */
    @JSName("teams/list-idp-groups-for-legacy")
    var `teamsSlashlist-idp-groups-for-legacy`: Responses200487403Content55
    
    /**
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
      */
    @JSName("teams/list-idp-groups-for-org")
    var `teamsSlashlist-idp-groups-for-org`: ParametersQuery477
    
    /**
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * List IdP groups connected to a team on GitHub.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
      */
    @JSName("teams/list-idp-groups-in-org")
    var `teamsSlashlist-idp-groups-in-org`: Responses200487
    
    /**
      * Lists a connection between a team and an external group.
      *
      * You can manage team membership with your identity provider using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)" in the GitHub Help documentation.
      */
    @JSName("teams/list-linked-external-idp-groups-to-team-for-org")
    var `teamsSlashlist-linked-external-idp-groups-to-team-for-org`: Responses200483
    
    /**
      * Team members will include the members of child teams.
      *
      * To list members in a team, the team must be visible to the authenticated user.
      */
    @JSName("teams/list-members-in-org")
    var `teamsSlashlist-members-in-org`: ParametersQuery485
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
      *
      * Team members will include the members of child teams.
      */
    @JSName("teams/list-members-legacy")
    var `teamsSlashlist-members-legacy`: ParametersPathTeamidNumberQuery485
    
    /**
      * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
      */
    @JSName("teams/list-pending-invitations-in-org")
    var `teamsSlashlist-pending-invitations-in-org`: ParametersPathTeamslugStringQuery426
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
      *
      * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
      */
    @JSName("teams/list-pending-invitations-legacy")
    var `teamsSlashlist-pending-invitations-legacy`: ParametersPathTeamidNumberQuery426
    
    /**
      * Lists the organization projects for a team.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
      */
    @JSName("teams/list-projects-in-org")
    var `teamsSlashlist-projects-in-org`: Responses200Content486
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
      *
      * Lists the organization projects for a team.
      */
    @JSName("teams/list-projects-legacy")
    var `teamsSlashlist-projects-legacy`: Responses200Content486404Content55
    
    /**
      * Lists a team's repositories visible to the authenticated user.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
      */
    @JSName("teams/list-repos-in-org")
    var `teamsSlashlist-repos-in-org`: Responses475
    
    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint. */
    @JSName("teams/list-repos-legacy")
    var `teamsSlashlist-repos-legacy`: Responses200Content467
    
    /**
      * The "Remove team member" endpoint (described below) is deprecated.
      *
      * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      */
    @JSName("teams/remove-member-legacy")
    var `teamsSlashremove-member-legacy`: ParametersPathTeamidNumberUsernameString
    
    /**
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
      */
    @JSName("teams/remove-membership-for-user-in-org")
    var `teamsSlashremove-membership-for-user-in-org`: ParametersPathTeamslugUsernameResponses126
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
      *
      * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      *
      * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
      *
      * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
      */
    @JSName("teams/remove-membership-for-user-legacy")
    var `teamsSlashremove-membership-for-user-legacy`: ParametersPathTeamidNumberUsernameStringResponses126
    
    /**
      * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
      */
    @JSName("teams/remove-project-in-org")
    var `teamsSlashremove-project-in-org`: ParametersPathOrgProjectidResponses
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
      *
      * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
      */
    @JSName("teams/remove-project-legacy")
    var `teamsSlashremove-project-legacy`: ParametersPathProjectidNumberTeamidNumberResponses404Content55422Content421
    
    /**
      * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
      */
    @JSName("teams/remove-repo-in-org")
    var `teamsSlashremove-repo-in-org`: ParametersPathOrgOwnerResponses
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
      *
      * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
      */
    @JSName("teams/remove-repo-legacy")
    var `teamsSlashremove-repo-legacy`: ParametersPathOwnerRepoTeamidResponses
    
    /**
      * Deletes a connection between a team and an external group.
      *
      * You can manage team membership with your IdP using Enterprise Managed Users for GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
      */
    @JSName("teams/unlink-external-idp-group-from-team-for-org")
    var `teamsSlashunlink-external-idp-group-from-team-for-org`: ParametersPathTeamslugStringResponses
    
    /**
      * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
      */
    @JSName("teams/update-discussion-comment-in-org")
    var `teamsSlashupdate-discussion-comment-in-org`: Responses200ContentApplicationjsonLasteditedat
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
      *
      * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/update-discussion-comment-legacy")
    var `teamsSlashupdate-discussion-comment-legacy`: ParametersPathCommentnumberDiscussionnumberTeamidRequestBodyContentApplicationjsonBody
    
    /**
      * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
      */
    @JSName("teams/update-discussion-in-org")
    var `teamsSlashupdate-discussion-in-org`: Responses200ContentApplicationjsonCommentscount
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
      *
      * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
      */
    @JSName("teams/update-discussion-legacy")
    var `teamsSlashupdate-discussion-legacy`: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjsonTitle
    
    /**
      * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
      *
      * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
      */
    @JSName("teams/update-in-org")
    var `teamsSlashupdate-in-org`: Responses200201403
    
    /**
      * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
      *
      * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
      *
      * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
      */
    @JSName("teams/update-legacy")
    var `teamsSlashupdate-legacy`: ParametersPathTeamidNumberRequestBodyContentApplicationjsonPrivacy
    
    /** This endpoint is accessible with the `user` scope. */
    @JSName("users/add-email-for-authenticated-user")
    var `usersSlashadd-email-for-authenticated-user`: Responses201Content603
    
    @JSName("users/block")
    var usersSlashblock: ParametersPath599Responses304Unknown401Content55403Content55
    
    @JSName("users/check-blocked")
    var `usersSlashcheck-blocked`: ParametersPath599
    
    @JSName("users/check-following-for-user")
    var `usersSlashcheck-following-for-user`: ParametersPathTargetuserUsername
    
    @JSName("users/check-person-is-followed-by-authenticated")
    var `usersSlashcheck-person-is-followed-by-authenticated`: ParametersPath599
    
    /** Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    @JSName("users/create-gpg-key-for-authenticated-user")
    var `usersSlashcreate-gpg-key-for-authenticated-user`: Responses201ContentApplicationjsonCanencryptcomms
    
    /** Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    @JSName("users/create-public-ssh-key-for-authenticated-user")
    var `usersSlashcreate-public-ssh-key-for-authenticated-user`: Responses201ContentApplicationjsonIdKey
    
    /** Creates an SSH signing key for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `write:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)." */
    @JSName("users/create-ssh-signing-key-for-authenticated-user")
    var `usersSlashcreate-ssh-signing-key-for-authenticated-user`: Responses201ContentApplicationjsonCreatedatIdKey
    
    /** This endpoint is accessible with the `user` scope. */
    @JSName("users/delete-email-for-authenticated-user")
    var `usersSlashdelete-email-for-authenticated-user`: RequestBodyContentApplicationjsonEmailsArrayResponses304Unknown401Content55403Content55
    
    /** Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    @JSName("users/delete-gpg-key-for-authenticated-user")
    var `usersSlashdelete-gpg-key-for-authenticated-user`: ParametersPathGpgkeyidNumberResponses304Unknown401Content55403Content55
    
    /** Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    @JSName("users/delete-public-ssh-key-for-authenticated-user")
    var `usersSlashdelete-public-ssh-key-for-authenticated-user`: ParametersPathKeyidNumberResponses401Content55403Content55404Content55
    
    /** Deletes an SSH signing key from the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `admin:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)." */
    @JSName("users/delete-ssh-signing-key-for-authenticated-user")
    var `usersSlashdelete-ssh-signing-key-for-authenticated-user`: ParametersPathSshsigningkeyidNumberResponses401Content55403Content55404Content55
    
    /**
      * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
      *
      * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
      */
    @JSName("users/follow")
    var usersSlashfollow: Responses401Content55403Content55404Content55
    
    /**
      * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
      *
      * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
      */
    @JSName("users/get-authenticated")
    var `usersSlashget-authenticated`: Responses200Content598
    
    /**
      * Provides publicly available information about someone with a GitHub account.
      *
      * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
      *
      * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
      *
      * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
      */
    @JSName("users/get-by-username")
    var `usersSlashget-by-username`: Responses200Content598404Content55
    
    /**
      * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
      *
      * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
      *
      * ```shell
      *  curl -u username:token
      *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
      * ```
      */
    @JSName("users/get-context-for-user")
    var `usersSlashget-context-for-user`: ParametersPath599QuerySubjectid
    
    /** View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    @JSName("users/get-gpg-key-for-authenticated-user")
    var `usersSlashget-gpg-key-for-authenticated-user`: ParametersPathGpgkeyidNumber
    
    /** View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    @JSName("users/get-public-ssh-key-for-authenticated-user")
    var `usersSlashget-public-ssh-key-for-authenticated-user`: ParametersPathKeyidNumber
    
    /** Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)." */
    @JSName("users/get-ssh-signing-key-for-authenticated-user")
    var `usersSlashget-ssh-signing-key-for-authenticated-user`: ParametersPathSshsigningkeyidNumber
    
    /**
      * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
      *
      * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
      */
    @JSName("users/list")
    var usersSlashlist: Responses200Content454HeadersLink
    
    /** List the users you've blocked on your personal account. */
    @JSName("users/list-blocked-by-authenticated-user")
    var `usersSlashlist-blocked-by-authenticated-user`: Responses200Content454304Unknown
    
    /** Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope. */
    @JSName("users/list-emails-for-authenticated-user")
    var `usersSlashlist-emails-for-authenticated-user`: Responses200Content603Headers
    
    /** Lists the people who the authenticated user follows. */
    @JSName("users/list-followed-by-authenticated-user")
    var `usersSlashlist-followed-by-authenticated-user`: Responses200Content454Headers304Unknown401Content55
    
    /** Lists the people following the authenticated user. */
    @JSName("users/list-followers-for-authenticated-user")
    var `usersSlashlist-followers-for-authenticated-user`: Responses200Content454Headers304Unknown401Content55
    
    /** Lists the people following the specified user. */
    @JSName("users/list-followers-for-user")
    var `usersSlashlist-followers-for-user`: ParametersPath599Query426Responses469
    
    /** Lists the people who the specified user follows. */
    @JSName("users/list-following-for-user")
    var `usersSlashlist-following-for-user`: ParametersPath599Query426Responses469
    
    /** Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    @JSName("users/list-gpg-keys-for-authenticated-user")
    var `usersSlashlist-gpg-keys-for-authenticated-user`: Responses200Content604
    
    /** Lists the GPG keys for a user. This information is accessible by anyone. */
    @JSName("users/list-gpg-keys-for-user")
    var `usersSlashlist-gpg-keys-for-user`: Responses618
    
    /** Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope. */
    @JSName("users/list-public-emails-for-authenticated-user")
    var `usersSlashlist-public-emails-for-authenticated-user`: Responses200Content603Headers
    
    /** Lists the _verified_ public SSH keys for a user. This is accessible by anyone. */
    @JSName("users/list-public-keys-for-user")
    var `usersSlashlist-public-keys-for-user`: Responses200Content619
    
    /** Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    @JSName("users/list-public-ssh-keys-for-authenticated-user")
    var `usersSlashlist-public-ssh-keys-for-authenticated-user`: Responses200Content607
    
    /** Lists the SSH signing keys for the authenticated user's GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)." */
    @JSName("users/list-ssh-signing-keys-for-authenticated-user")
    var `usersSlashlist-ssh-signing-keys-for-authenticated-user`: Responses200Content615
    
    /** Lists the SSH signing keys for a user. This operation is accessible by anyone. */
    @JSName("users/list-ssh-signing-keys-for-user")
    var `usersSlashlist-ssh-signing-keys-for-user`: Responses621
    
    /** Sets the visibility for your primary email addresses. */
    @JSName("users/set-primary-email-visibility-for-authenticated-user")
    var `usersSlashset-primary-email-visibility-for-authenticated-user`: Responses200Content603
    
    @JSName("users/unblock")
    var usersSlashunblock: Responses401Content55403Content55404Content55
    
    /** Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope. */
    @JSName("users/unfollow")
    var usersSlashunfollow: Responses401Content55403Content55404Content55
    
    /** **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API. */
    @JSName("users/update-authenticated")
    var `usersSlashupdate-authenticated`: Responses200ContentApplicationjsonBusinessplus
  }
  object operations {
    
    inline def apply(
      `actionsSlashadd-custom-labels-to-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumberRequestBodyContentApplicationjsonLabels,
      `actionsSlashadd-custom-labels-to-self-hosted-runner-for-repo`: ParametersPathRepoRunneridRequestBodyContentApplicationjsonLabels,
      `actionsSlashadd-repo-access-to-self-hosted-runner-group-in-org`: ParametersPathRepositoryidRunnergroupid,
      `actionsSlashadd-selected-repo-to-org-secret`: ParametersPathOrgRepositoryidSecretname,
      `actionsSlashadd-self-hosted-runner-to-group-for-org`: ParametersPathOrgRunnergroupidRunnerid,
      `actionsSlashapprove-workflow-run`: Responses201Content47403Content55,
      `actionsSlashcancel-workflow-run`: Responses202Content47,
      `actionsSlashcreate-or-update-environment-secret`: ParametersPathSecretnameStringRequestBodyContentApplicationjsonEncryptedvalueString,
      `actionsSlashcreate-or-update-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonEncryptedvalue,
      `actionsSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid,
      `actionsSlashcreate-registration-token-for-org`: ParametersPathOrgStringResponses201ContentApplicationjsonExpiresatPermissions,
      `actionsSlashcreate-registration-token-for-repo`: Parameters491Responses201ContentApplicationjsonExpiresatPermissions,
      `actionsSlashcreate-remove-token-for-org`: ParametersPathOrgStringResponses201ContentApplicationjsonExpiresatPermissions,
      `actionsSlashcreate-remove-token-for-repo`: Parameters491Responses201ContentApplicationjsonExpiresatPermissions,
      `actionsSlashcreate-self-hosted-runner-group-for-org`: Responses201ContentApplicationjsonInherited,
      `actionsSlashcreate-workflow-dispatch`: ParametersPathRepoWorkflowidRequestBodyContentApplicationjsonInputs,
      `actionsSlashdelete-actions-cache-by-id`: ParametersPathCacheidOwner,
      `actionsSlashdelete-actions-cache-by-key`: ParametersQueryKeyStringRef,
      `actionsSlashdelete-artifact`: ParametersPathArtifactidOwnerResponses,
      `actionsSlashdelete-environment-secret`: ParametersPathSecretnameStringResponses,
      `actionsSlashdelete-org-secret`: ParametersPathOrgSecretnameResponses,
      `actionsSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses,
      `actionsSlashdelete-self-hosted-runner-from-org`: ParametersPathOrgStringRunneridNumberResponses,
      `actionsSlashdelete-self-hosted-runner-from-repo`: ParametersPathRepoRunneridResponses,
      `actionsSlashdelete-self-hosted-runner-group-from-org`: ParametersPathRunnergroupidNumberResponses,
      `actionsSlashdelete-workflow-run`: Parameters495,
      `actionsSlashdelete-workflow-run-logs`: Responses500Content55,
      `actionsSlashdisable-selected-repository-github-actions-organization`: ParametersPathOrgStringRepositoryidNumber,
      `actionsSlashdisable-workflow`: ParametersPathRepoWorkflowidResponses,
      `actionsSlashdownload-artifact`: ParametersPathArchiveformatArtifactid,
      `actionsSlashdownload-job-logs-for-workflow-run`: ParametersPathJobidOwnerResponses,
      `actionsSlashdownload-workflow-run-attempt-logs`: Parameters497,
      `actionsSlashdownload-workflow-run-logs`: Parameters495,
      `actionsSlashenable-selected-repository-github-actions-organization`: ParametersPathOrgStringRepositoryidNumber,
      `actionsSlashenable-workflow`: ParametersPathRepoWorkflowidResponses,
      `actionsSlashget-actions-cache-list`: ParametersQueryDirectionKey,
      `actionsSlashget-actions-cache-usage`: Responses200ContentApplicationjsonActivecachescount,
      `actionsSlashget-actions-cache-usage-by-repo-for-org`: ParametersPathOrgStringQuery426,
      `actionsSlashget-actions-cache-usage-for-enterprise`: ParametersPathEnterpriseString,
      `actionsSlashget-actions-cache-usage-for-org`: Responses200ContentApplicationjsonTotalactivecachescount,
      `actionsSlashget-allowed-actions-organization`: ParametersPathOrgStringResponses200ContentApplicationjsonGithubownedallowed,
      `actionsSlashget-allowed-actions-repository`: Parameters491Responses200ContentApplicationjsonGithubownedallowed,
      `actionsSlashget-artifact`: ParametersPathArtifactidOwner,
      `actionsSlashget-custom-oidc-sub-claim-for-repo`: Responses200ContentApplicationjsonUsedefault,
      `actionsSlashget-environment-public-key`: Parameters590,
      `actionsSlashget-environment-secret`: ParametersPathSecretnameString,
      `actionsSlashget-github-actions-default-workflow-permissions-enterprise`: Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions,
      `actionsSlashget-github-actions-default-workflow-permissions-organization`: ParametersPathOrgStringResponses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions,
      `actionsSlashget-github-actions-default-workflow-permissions-repository`: Parameters491Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions,
      `actionsSlashget-github-actions-permissions-organization`: Responses200ContentApplicationjsonAllowedactionsEnabledrepositories,
      `actionsSlashget-github-actions-permissions-repository`: Responses200ContentApplicationjsonEnabledSelectedactionsurl,
      `actionsSlashget-job-for-workflow-run`: ParametersPathJobidOwner,
      `actionsSlashget-org-public-key`: Responses200ContentApplicationjsonCreatedatId,
      `actionsSlashget-org-secret`: ParametersPathOrgSecretname,
      `actionsSlashget-pending-deployments-for-run`: Responses200Content502,
      `actionsSlashget-repo-public-key`: Parameters491Responses200ContentApplicationjsonCreatedatId,
      `actionsSlashget-repo-secret`: ParametersPathOwnerRepoSecretname,
      `actionsSlashget-reviews-for-run`: Responses200Content496,
      `actionsSlashget-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumber,
      `actionsSlashget-self-hosted-runner-for-repo`: ParametersPathRepoRunnerid,
      `actionsSlashget-self-hosted-runner-group-for-org`: ParametersPathRunnergroupidNumber,
      `actionsSlashget-workflow`: ParametersPathRepoWorkflowid,
      `actionsSlashget-workflow-access-to-repository`: Responses200ContentApplicationjsonAccesslevel,
      `actionsSlashget-workflow-run`: ParametersPathRepoRunid,
      `actionsSlashget-workflow-run-attempt`: ParametersPathAttemptnumberOwner,
      `actionsSlashget-workflow-run-usage`: Responses200ContentApplicationjsonBillable,
      `actionsSlashget-workflow-usage`: Responses200ContentApplicationjsonBillableWINDOWS,
      `actionsSlashlist-artifacts-for-repo`: Responses200ContentApplicationjsonArtifactsTotalcount,
      `actionsSlashlist-environment-secrets`: ParametersPathEnvironmentnameString,
      `actionsSlashlist-jobs-for-workflow-run`: ParametersQuery498,
      `actionsSlashlist-jobs-for-workflow-run-attempt`: ParametersPathAttemptnumberOwnerQuery426,
      `actionsSlashlist-labels-for-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumberResponses200ContentApplicationjsonLabelsArray,
      `actionsSlashlist-labels-for-self-hosted-runner-for-repo`: ParametersPathRepoRunneridResponses200ContentApplicationjsonLabelsArray,
      `actionsSlashlist-org-secrets`: Responses200ContentApplicationjson453,
      `actionsSlashlist-repo-access-to-self-hosted-runner-group-in-org`: ParametersQuery451,
      `actionsSlashlist-repo-secrets`: Responses200ContentApplicationjson505,
      `actionsSlashlist-repo-workflows`: Responses200ContentApplicationjsonTotalcountWorkflows,
      `actionsSlashlist-runner-applications-for-org`: ParametersPathOrgStringResponses200Content430,
      `actionsSlashlist-runner-applications-for-repo`: Parameters491Responses200Content430,
      `actionsSlashlist-selected-repos-for-org-secret`: ParametersPathOrgSecretnameQuery451,
      `actionsSlashlist-selected-repositories-enabled-github-actions-organization`: Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber,
      `actionsSlashlist-self-hosted-runner-groups-for-org`: ParametersQueryPerpageVisibletorepository,
      `actionsSlashlist-self-hosted-runners-for-org`: ParametersPathOrgStringQuery426Responses200ContentApplicationjsonRunnersTotalcount,
      `actionsSlashlist-self-hosted-runners-for-repo`: ParametersPathOwnerStringResponses200ContentApplicationjsonRunnersTotalcount,
      `actionsSlashlist-self-hosted-runners-in-group-for-org`: ParametersPathRunnergroupidNumberQuery426,
      `actionsSlashlist-workflow-run-artifacts`: ParametersPathRepoRunidQuery426,
      `actionsSlashlist-workflow-runs`: ParametersPathRepoWorkflowidQueryActorBranch,
      `actionsSlashlist-workflow-runs-for-repo`: ParametersQueryActorBranch,
      `actionsSlashre-run-job-for-workflow-run`: Responses493,
      `actionsSlashre-run-workflow`: Parameters495RequestBodyContent152,
      `actionsSlashre-run-workflow-failed-jobs`: Parameters495RequestBodyContent152,
      `actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumberResponses200ContentApplicationjsonLabelsArray,
      `actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-repo`: ParametersPathRepoRunneridResponses200ContentApplicationjsonLabelsArray,
      `actionsSlashremove-custom-label-from-self-hosted-runner-for-org`: ParametersPathNameOrgRunnerid,
      `actionsSlashremove-custom-label-from-self-hosted-runner-for-repo`: ParametersPathOwnerRepoRunnerid,
      `actionsSlashremove-repo-access-to-self-hosted-runner-group-in-org`: ParametersPathRepositoryidRunnergroupid,
      `actionsSlashremove-selected-repo-from-org-secret`: ParametersPathOrgRepositoryidSecretname,
      `actionsSlashremove-self-hosted-runner-from-group-for-org`: ParametersPathOrgRunnergroupidRunnerid,
      `actionsSlashreview-pending-deployments-for-run`: Responses200Content504,
      `actionsSlashset-actions-oidc-custom-issuer-policy-for-enterprise`: RequestBodyContentApplicationjsonIncludeenterpriseslug,
      `actionsSlashset-allowed-actions-organization`: ParametersPathOrgStringRequestBodyContentApplicationjsonGithubownedallowed,
      `actionsSlashset-allowed-actions-repository`: Parameters491RequestBodyContentApplicationjsonGithubownedallowed,
      `actionsSlashset-custom-labels-for-self-hosted-runner-for-org`: ParametersPathOrgStringRunneridNumberRequestBodyContentApplicationjsonLabels,
      `actionsSlashset-custom-labels-for-self-hosted-runner-for-repo`: ParametersPathRepoRunneridRequestBodyContentApplicationjsonLabels,
      `actionsSlashset-custom-oidc-sub-claim-for-repo`: RequestBodyContentApplicationjsonUsedefault,
      `actionsSlashset-github-actions-default-workflow-permissions-enterprise`: RequestBodyContentApplicationjson427,
      `actionsSlashset-github-actions-default-workflow-permissions-organization`: ParametersPathOrgStringRequestBodyContentApplicationjson427,
      `actionsSlashset-github-actions-default-workflow-permissions-repository`: Parameters491RequestBodyContentApplicationjson427,
      `actionsSlashset-github-actions-permissions-organization`: RequestBodyContentApplicationjson450,
      `actionsSlashset-github-actions-permissions-repository`: RequestBodyContentApplicationjsonAllowedactionsEnabledBoolean,
      `actionsSlashset-repo-access-to-self-hosted-runner-group-in-org`: ParametersPathRunnergroupidNumberRequestBodyContentApplicationjsonSelectedrepositoryids,
      `actionsSlashset-selected-repos-for-org-secret`: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids,
      `actionsSlashset-selected-repositories-enabled-github-actions-organization`: ParametersPathOrgStringRequestBodyContentApplicationjsonSelectedrepositoryids,
      `actionsSlashset-self-hosted-runners-in-group-for-org`: ParametersPathRunnergroupidNumberRequestBodyContentApplicationjsonRunnersArray,
      `actionsSlashset-workflow-access-to-repository`: RequestBodyContentApplicationjsonAccesslevel,
      `actionsSlashupdate-self-hosted-runner-group-for-org`: Responses200ContentApplicationjsonInherited,
      `activitySlashcheck-repo-is-starred-by-authenticated-user`: Responses403Content55404ContentApplicationjsonDocumentationurlMessage,
      `activitySlashdelete-repo-subscription`: Parameters491Responses,
      `activitySlashdelete-thread-subscription`: Responses304Unknown401Content55,
      `activitySlashget-feeds`: Responses200ContentApplicationjsonCurrentuserorganizationurl,
      `activitySlashget-repo-subscription`: Responses200ContentApplicationjsonCreatedatIgnored,
      `activitySlashget-thread`: ParametersPathThreadidNumber,
      `activitySlashget-thread-subscription-for-authenticated-user`: Responses200ContentApplicationjsonRepositoryurl,
      `activitySlashlist-events-for-authenticated-user`: ParametersPath599Query426,
      `activitySlashlist-notifications-for-authenticated-user`: ParametersQueryAllBefore,
      `activitySlashlist-org-events-for-authenticated-user`: ParametersPathOrgStringUsernameString,
      `activitySlashlist-public-events`: Parameters434,
      `activitySlashlist-public-events-for-repo-network`: ParametersPathOwnerString,
      `activitySlashlist-public-events-for-user`: ParametersPath599Query426,
      `activitySlashlist-public-org-events`: Responses200Content435,
      `activitySlashlist-received-events-for-user`: ParametersPath599Query426,
      `activitySlashlist-received-public-events-for-user`: ParametersPath599Query426,
      `activitySlashlist-repo-events`: ParametersPathOwnerStringResponses200Content435,
      `activitySlashlist-repo-notifications-for-authenticated-user`: ParametersQueryBeforePage,
      `activitySlashlist-repos-starred-by-authenticated-user`: ParametersQuery616,
      `activitySlashlist-repos-starred-by-user`: ParametersPath599Query616,
      `activitySlashlist-repos-watched-by-user`: ParametersPath599Query426Responses475,
      `activitySlashlist-stargazers-for-repo`: Responses200Content578,
      `activitySlashlist-watched-repos-for-authenticated-user`: Responses200Content467304Unknown,
      `activitySlashlist-watchers-for-repo`: ParametersPathOwnerStringResponses469,
      `activitySlashmark-notifications-as-read`: Responses202205304,
      `activitySlashmark-repo-notifications-as-read`: Responses202205,
      `activitySlashmark-thread-as-read`: Responses205304403,
      `activitySlashset-repo-subscription`: Responses582,
      `activitySlashset-thread-subscription`: ParametersPathThreadidNumberRequestBodyContentApplicationjsonIgnored,
      `activitySlashstar-repo-for-authenticated-user`: Parameters491Responses401Content55403Content55404Content55,
      `activitySlashunstar-repo-for-authenticated-user`: Parameters491Responses401Content55403Content55404Content55,
      `appsSlashadd-repo-to-installation-for-authenticated-user`: ParametersPathInstallationidNumberRepositoryidNumber,
      `appsSlashcheck-token`: RequestBodyContentApplicationjsonAccesstoken,
      `appsSlashcreate-from-manifest`: ParametersPath,
      `appsSlashcreate-installation-access-token`: RequestBodyContentApplicationjsonRepositoryids,
      `appsSlashdelete-authorization`: ParametersPathClientidString,
      `appsSlashdelete-installation`: Responses404Content55,
      `appsSlashdelete-token`: ParametersPathClientidString,
      `appsSlashget-authenticated`: Responses200ContentApplicationjsonExternalurl,
      `appsSlashget-by-slug`: ParametersPathAppslugString,
      `appsSlashget-installation`: ParametersPathInstallationidNumber,
      `appsSlashget-org-installation`: Responses461,
      `appsSlashget-repo-installation`: Responses301Content55,
      `appsSlashget-subscription-plan-for-account`: ParametersPathAccountidNumber,
      `appsSlashget-subscription-plan-for-account-stubbed`: Responses200ContentApplicationjsonMarketplacepurchase401Content55,
      `appsSlashget-user-installation`: ParametersPath599Responses461,
      `appsSlashget-webhook-config-for-app`: Responses200ContentApplicationjsonContenttype,
      `appsSlashget-webhook-delivery`: ParametersPathDeliveryidNumber,
      `appsSlashlist-accounts-for-plan`: ParametersPathPlanidNumber,
      `appsSlashlist-accounts-for-plan-stubbed`: Responses200Content445,
      `appsSlashlist-installation-repos-for-authenticated-user`: ParametersPathInstallationidNumberQuery426,
      `appsSlashlist-installations`: ParametersQueryOutdatedPage,
      `appsSlashlist-installations-for-authenticated-user`: Responses200ContentApplicationjsonInstallationsTotalcount304Unknown,
      `appsSlashlist-plans`: Responses200Content444,
      `appsSlashlist-plans-stubbed`: Responses200Content444401Content55,
      `appsSlashlist-repos-accessible-to-installation`: Responses200ContentApplicationjsonRepositoryselectionTotalcount,
      `appsSlashlist-subscriptions-for-authenticated-user`: Responses200304401404,
      `appsSlashlist-subscriptions-for-authenticated-user-stubbed`: Responses200Content608,
      `appsSlashlist-webhook-deliveries`: ParametersQueryCursorPerpage,
      `appsSlashredeliver-webhook-delivery`: Responses202400422,
      `appsSlashremove-repo-from-installation-for-authenticated-user`: ParametersPathInstallationidNumberRepositoryidNumber,
      `appsSlashreset-token`: Responses200ContentApplicationjsonFingerprint422Content421,
      `appsSlashrevoke-installation-access-token`: `50`,
      `appsSlashscope-token`: RequestBodyContentApplicationjsonTargetid,
      `appsSlashsuspend-installation`: Responses404Content55,
      `appsSlashunsuspend-installation`: Responses404Content55,
      `appsSlashupdate-webhook-config-for-app`: RequestBodyContentApplicationjsonContenttypeInsecuressl,
      `billingSlashget-github-actions-billing-ghe`: Responses200ContentApplicationjsonIncludedminutes,
      `billingSlashget-github-actions-billing-org`: ParametersPathOrgStringResponses200ContentApplicationjsonIncludedminutes,
      `billingSlashget-github-actions-billing-user`: ParametersPath599Responses200ContentApplicationjsonIncludedminutes,
      `billingSlashget-github-advanced-security-billing-ghe`: Responses200ContentApplicationjsonRepositoriesTotaladvancedsecuritycommitters,
      `billingSlashget-github-advanced-security-billing-org`: ParametersPathOrgStringQuery426Responses200ContentApplicationjsonRepositoriesTotaladvancedsecuritycommitters,
      `billingSlashget-github-packages-billing-ghe`: Responses200ContentApplicationjsonIncludedgigabytesbandwidth,
      `billingSlashget-github-packages-billing-org`: ParametersPathOrgStringResponses200ContentApplicationjsonIncludedgigabytesbandwidth,
      `billingSlashget-github-packages-billing-user`: ParametersPath599Responses200ContentApplicationjsonIncludedgigabytesbandwidth,
      `billingSlashget-shared-storage-billing-ghe`: Responses200ContentApplicationjsonDaysleftinbillingcycle,
      `billingSlashget-shared-storage-billing-org`: ParametersPathOrgStringResponses200ContentApplicationjsonDaysleftinbillingcycle,
      `billingSlashget-shared-storage-billing-user`: ParametersPath599Responses200ContentApplicationjsonDaysleftinbillingcycle,
      checksSlashcreate: Responses201ContentApplicationjsonDeployment,
      `checksSlashcreate-suite`: Responses200ContentApplicationjsonHeadcommit,
      checksSlashget: ParametersPathCheckrunidOwner,
      `checksSlashget-suite`: ParametersPathChecksuiteidOwner,
      `checksSlashlist-annotations`: ParametersPathCheckrunidOwnerQuery426,
      `checksSlashlist-for-ref`: ParametersQueryPerpageStatus,
      `checksSlashlist-for-suite`: ParametersQueryChecknameFilter,
      `checksSlashlist-suites-for-ref`: ParametersQueryAppidChecknamePage,
      `checksSlashrerequest-run`: Responses403ContentApplicationjsonDocumentationurlMessage,
      `checksSlashrerequest-suite`: ParametersPathChecksuiteidOwnerResponses201Content47,
      `checksSlashset-suites-preferences`: Responses200ContentApplicationjsonPreferencesRepository,
      checksSlashupdate: Responses200ContentApplicationjsonDeployment,
      `code-scanningSlashdelete-analysis`: ParametersPathAnalysisidOwnerQueryConfirmdelete,
      `code-scanningSlashget-alert`: ParametersPathAlertnumberOwner,
      `code-scanningSlashget-analysis`: ParametersPathAnalysisidOwner,
      `code-scanningSlashget-codeql-database`: ParametersPathLanguageOwner,
      `code-scanningSlashget-sarif`: ParametersPathOwnerRepoSarifid,
      `code-scanningSlashlist-alert-instances`: ParametersQueryPagePerpageRef,
      `code-scanningSlashlist-alerts-for-enterprise`: ParametersQueryToolname,
      `code-scanningSlashlist-alerts-for-org`: ParametersPathOrgStringQueryToolname,
      `code-scanningSlashlist-alerts-for-repo`: ParametersQueryRefSort,
      `code-scanningSlashlist-codeql-databases`: Responses200Content517,
      `code-scanningSlashlist-recent-analyses`: ParametersQueryRefSarifid,
      `code-scanningSlashupdate-alert`: RequestBodyContentApplicationjsonDismissedcommentDismissedreason,
      `code-scanningSlashupload-sarif`: RequestBodyContentApplicationjsonSarif,
      `codes-of-conductSlashget-all-codes-of-conduct`: Responses200Content424,
      `codes-of-conductSlashget-conduct-code`: Responses200ContentApplicationjsonBodyHtmlurl,
      `codespacesSlashadd-repository-for-secret-for-authenticated-user`: ParametersPathRepositoryidNumberSecretnameString,
      `codespacesSlashcodespace-machines-for-authenticated-user`: Responses200ContentApplicationjsonMachinesTotalcount,
      `codespacesSlashcreate-for-authenticated-user`: RequestBodyContent363Responses201202401,
      `codespacesSlashcreate-or-update-repo-secret`: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid,
      `codespacesSlashcreate-or-update-secret-for-authenticated-user`: Responses201Content47404Content55,
      `codespacesSlashcreate-with-pr-for-authenticated-user`: Responses201202401,
      `codespacesSlashcreate-with-repo-for-authenticated-user`: Responses201202400,
      `codespacesSlashdelete-for-authenticated-user`: Responses202304401,
      `codespacesSlashdelete-from-organization`: ParametersPathCodespacenameOrg,
      `codespacesSlashdelete-repo-secret`: ParametersPathOwnerRepoSecretnameResponses,
      `codespacesSlashdelete-secret-for-authenticated-user`: ParametersPath602Responses,
      `codespacesSlashexport-for-authenticated-user`: Responses202401403404,
      `codespacesSlashget-export-details-for-authenticated-user`: ParametersPathCodespacenameExportid,
      `codespacesSlashget-for-authenticated-user`: ParametersPathCodespacenameString,
      `codespacesSlashget-public-key-for-authenticated-user`: `601`,
      `codespacesSlashget-repo-public-key`: Parameters491Responses200ContentApplicationjsonCreatedatId,
      `codespacesSlashget-repo-secret`: ParametersPathOwnerRepoSecretname,
      `codespacesSlashget-secret-for-authenticated-user`: ParametersPath602,
      `codespacesSlashlist-devcontainers-in-repository-for-authenticated-user`: Responses200400401,
      `codespacesSlashlist-for-authenticated-user`: ParametersQueryPagePerpageRepositoryid,
      `codespacesSlashlist-in-organization`: Parameters455,
      `codespacesSlashlist-in-repository-for-authenticated-user`: ParametersPathOwnerStringQuery426,
      `codespacesSlashlist-repo-secrets`: Responses200ContentApplicationjson505,
      `codespacesSlashlist-repositories-for-secret-for-authenticated-user`: Responses200ContentApplicationjson452401Content55,
      `codespacesSlashlist-secrets-for-authenticated-user`: Responses200ContentApplicationjson600,
      `codespacesSlashpre-flight-with-repo-for-authenticated-user`: ParametersPathOwnerStringQueryClientipRef,
      `codespacesSlashremove-repository-for-secret-for-authenticated-user`: ParametersPathRepositoryidNumberSecretnameString,
      `codespacesSlashrepo-machines-for-authenticated-user`: ParametersPathOwnerStringQueryClientipLocation,
      `codespacesSlashset-repositories-for-secret-for-authenticated-user`: Responses404Content55500Content55,
      `codespacesSlashstart-for-authenticated-user`: Responses401402,
      `codespacesSlashstop-for-authenticated-user`: Responses200ContentApplicationjsonGitstatus401Content55,
      `codespacesSlashstop-in-organization`: Responses200304401403404500,
      `codespacesSlashupdate-for-authenticated-user`: Responses200ContentApplicationjsonGitstatus
    ): operations = {
      val __obj = js.Dynamic.literal()
      __obj.updateDynamic("actions/add-custom-labels-to-self-hosted-runner-for-org")(`actionsSlashadd-custom-labels-to-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/add-custom-labels-to-self-hosted-runner-for-repo")(`actionsSlashadd-custom-labels-to-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/add-repo-access-to-self-hosted-runner-group-in-org")(`actionsSlashadd-repo-access-to-self-hosted-runner-group-in-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/add-selected-repo-to-org-secret")(`actionsSlashadd-selected-repo-to-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/add-self-hosted-runner-to-group-for-org")(`actionsSlashadd-self-hosted-runner-to-group-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/approve-workflow-run")(`actionsSlashapprove-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/cancel-workflow-run")(`actionsSlashcancel-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-or-update-environment-secret")(`actionsSlashcreate-or-update-environment-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-or-update-org-secret")(`actionsSlashcreate-or-update-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-or-update-repo-secret")(`actionsSlashcreate-or-update-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-registration-token-for-org")(`actionsSlashcreate-registration-token-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-registration-token-for-repo")(`actionsSlashcreate-registration-token-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-remove-token-for-org")(`actionsSlashcreate-remove-token-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-remove-token-for-repo")(`actionsSlashcreate-remove-token-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-self-hosted-runner-group-for-org")(`actionsSlashcreate-self-hosted-runner-group-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/create-workflow-dispatch")(`actionsSlashcreate-workflow-dispatch`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-actions-cache-by-id")(`actionsSlashdelete-actions-cache-by-id`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-actions-cache-by-key")(`actionsSlashdelete-actions-cache-by-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-artifact")(`actionsSlashdelete-artifact`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-environment-secret")(`actionsSlashdelete-environment-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-org-secret")(`actionsSlashdelete-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-repo-secret")(`actionsSlashdelete-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-self-hosted-runner-from-org")(`actionsSlashdelete-self-hosted-runner-from-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-self-hosted-runner-from-repo")(`actionsSlashdelete-self-hosted-runner-from-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-self-hosted-runner-group-from-org")(`actionsSlashdelete-self-hosted-runner-group-from-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-workflow-run")(`actionsSlashdelete-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/delete-workflow-run-logs")(`actionsSlashdelete-workflow-run-logs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/disable-selected-repository-github-actions-organization")(`actionsSlashdisable-selected-repository-github-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/disable-workflow")(`actionsSlashdisable-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/download-artifact")(`actionsSlashdownload-artifact`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/download-job-logs-for-workflow-run")(`actionsSlashdownload-job-logs-for-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/download-workflow-run-attempt-logs")(`actionsSlashdownload-workflow-run-attempt-logs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/download-workflow-run-logs")(`actionsSlashdownload-workflow-run-logs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/enable-selected-repository-github-actions-organization")(`actionsSlashenable-selected-repository-github-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/enable-workflow")(`actionsSlashenable-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-actions-cache-list")(`actionsSlashget-actions-cache-list`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-actions-cache-usage")(`actionsSlashget-actions-cache-usage`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-actions-cache-usage-by-repo-for-org")(`actionsSlashget-actions-cache-usage-by-repo-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-actions-cache-usage-for-enterprise")(`actionsSlashget-actions-cache-usage-for-enterprise`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-actions-cache-usage-for-org")(`actionsSlashget-actions-cache-usage-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-allowed-actions-organization")(`actionsSlashget-allowed-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-allowed-actions-repository")(`actionsSlashget-allowed-actions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-artifact")(`actionsSlashget-artifact`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-custom-oidc-sub-claim-for-repo")(`actionsSlashget-custom-oidc-sub-claim-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-environment-public-key")(`actionsSlashget-environment-public-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-environment-secret")(`actionsSlashget-environment-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-github-actions-default-workflow-permissions-enterprise")(`actionsSlashget-github-actions-default-workflow-permissions-enterprise`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-github-actions-default-workflow-permissions-organization")(`actionsSlashget-github-actions-default-workflow-permissions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-github-actions-default-workflow-permissions-repository")(`actionsSlashget-github-actions-default-workflow-permissions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-github-actions-permissions-organization")(`actionsSlashget-github-actions-permissions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-github-actions-permissions-repository")(`actionsSlashget-github-actions-permissions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-job-for-workflow-run")(`actionsSlashget-job-for-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-org-public-key")(`actionsSlashget-org-public-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-org-secret")(`actionsSlashget-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-pending-deployments-for-run")(`actionsSlashget-pending-deployments-for-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-repo-public-key")(`actionsSlashget-repo-public-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-repo-secret")(`actionsSlashget-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-reviews-for-run")(`actionsSlashget-reviews-for-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-self-hosted-runner-for-org")(`actionsSlashget-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-self-hosted-runner-for-repo")(`actionsSlashget-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-self-hosted-runner-group-for-org")(`actionsSlashget-self-hosted-runner-group-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow")(`actionsSlashget-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-access-to-repository")(`actionsSlashget-workflow-access-to-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-run")(`actionsSlashget-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-run-attempt")(`actionsSlashget-workflow-run-attempt`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-run-usage")(`actionsSlashget-workflow-run-usage`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/get-workflow-usage")(`actionsSlashget-workflow-usage`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-artifacts-for-repo")(`actionsSlashlist-artifacts-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-environment-secrets")(`actionsSlashlist-environment-secrets`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-jobs-for-workflow-run")(`actionsSlashlist-jobs-for-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-jobs-for-workflow-run-attempt")(`actionsSlashlist-jobs-for-workflow-run-attempt`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-labels-for-self-hosted-runner-for-org")(`actionsSlashlist-labels-for-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-labels-for-self-hosted-runner-for-repo")(`actionsSlashlist-labels-for-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-org-secrets")(`actionsSlashlist-org-secrets`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-repo-access-to-self-hosted-runner-group-in-org")(`actionsSlashlist-repo-access-to-self-hosted-runner-group-in-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-repo-secrets")(`actionsSlashlist-repo-secrets`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-repo-workflows")(`actionsSlashlist-repo-workflows`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-runner-applications-for-org")(`actionsSlashlist-runner-applications-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-runner-applications-for-repo")(`actionsSlashlist-runner-applications-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-selected-repos-for-org-secret")(`actionsSlashlist-selected-repos-for-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-selected-repositories-enabled-github-actions-organization")(`actionsSlashlist-selected-repositories-enabled-github-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-self-hosted-runner-groups-for-org")(`actionsSlashlist-self-hosted-runner-groups-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-self-hosted-runners-for-org")(`actionsSlashlist-self-hosted-runners-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-self-hosted-runners-for-repo")(`actionsSlashlist-self-hosted-runners-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-self-hosted-runners-in-group-for-org")(`actionsSlashlist-self-hosted-runners-in-group-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-workflow-run-artifacts")(`actionsSlashlist-workflow-run-artifacts`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-workflow-runs")(`actionsSlashlist-workflow-runs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/list-workflow-runs-for-repo")(`actionsSlashlist-workflow-runs-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/re-run-job-for-workflow-run")(`actionsSlashre-run-job-for-workflow-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/re-run-workflow")(`actionsSlashre-run-workflow`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/re-run-workflow-failed-jobs")(`actionsSlashre-run-workflow-failed-jobs`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-all-custom-labels-from-self-hosted-runner-for-org")(`actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-all-custom-labels-from-self-hosted-runner-for-repo")(`actionsSlashremove-all-custom-labels-from-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-custom-label-from-self-hosted-runner-for-org")(`actionsSlashremove-custom-label-from-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-custom-label-from-self-hosted-runner-for-repo")(`actionsSlashremove-custom-label-from-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-repo-access-to-self-hosted-runner-group-in-org")(`actionsSlashremove-repo-access-to-self-hosted-runner-group-in-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-selected-repo-from-org-secret")(`actionsSlashremove-selected-repo-from-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/remove-self-hosted-runner-from-group-for-org")(`actionsSlashremove-self-hosted-runner-from-group-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/review-pending-deployments-for-run")(`actionsSlashreview-pending-deployments-for-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-actions-oidc-custom-issuer-policy-for-enterprise")(`actionsSlashset-actions-oidc-custom-issuer-policy-for-enterprise`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-allowed-actions-organization")(`actionsSlashset-allowed-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-allowed-actions-repository")(`actionsSlashset-allowed-actions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-custom-labels-for-self-hosted-runner-for-org")(`actionsSlashset-custom-labels-for-self-hosted-runner-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-custom-labels-for-self-hosted-runner-for-repo")(`actionsSlashset-custom-labels-for-self-hosted-runner-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-custom-oidc-sub-claim-for-repo")(`actionsSlashset-custom-oidc-sub-claim-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-github-actions-default-workflow-permissions-enterprise")(`actionsSlashset-github-actions-default-workflow-permissions-enterprise`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-github-actions-default-workflow-permissions-organization")(`actionsSlashset-github-actions-default-workflow-permissions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-github-actions-default-workflow-permissions-repository")(`actionsSlashset-github-actions-default-workflow-permissions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-github-actions-permissions-organization")(`actionsSlashset-github-actions-permissions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-github-actions-permissions-repository")(`actionsSlashset-github-actions-permissions-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-repo-access-to-self-hosted-runner-group-in-org")(`actionsSlashset-repo-access-to-self-hosted-runner-group-in-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-selected-repos-for-org-secret")(`actionsSlashset-selected-repos-for-org-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-selected-repositories-enabled-github-actions-organization")(`actionsSlashset-selected-repositories-enabled-github-actions-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-self-hosted-runners-in-group-for-org")(`actionsSlashset-self-hosted-runners-in-group-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/set-workflow-access-to-repository")(`actionsSlashset-workflow-access-to-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("actions/update-self-hosted-runner-group-for-org")(`actionsSlashupdate-self-hosted-runner-group-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/check-repo-is-starred-by-authenticated-user")(`activitySlashcheck-repo-is-starred-by-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/delete-repo-subscription")(`activitySlashdelete-repo-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/delete-thread-subscription")(`activitySlashdelete-thread-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/get-feeds")(`activitySlashget-feeds`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/get-repo-subscription")(`activitySlashget-repo-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/get-thread")(`activitySlashget-thread`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/get-thread-subscription-for-authenticated-user")(`activitySlashget-thread-subscription-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-events-for-authenticated-user")(`activitySlashlist-events-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-notifications-for-authenticated-user")(`activitySlashlist-notifications-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-org-events-for-authenticated-user")(`activitySlashlist-org-events-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-public-events")(`activitySlashlist-public-events`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-public-events-for-repo-network")(`activitySlashlist-public-events-for-repo-network`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-public-events-for-user")(`activitySlashlist-public-events-for-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-public-org-events")(`activitySlashlist-public-org-events`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-received-events-for-user")(`activitySlashlist-received-events-for-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-received-public-events-for-user")(`activitySlashlist-received-public-events-for-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repo-events")(`activitySlashlist-repo-events`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repo-notifications-for-authenticated-user")(`activitySlashlist-repo-notifications-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repos-starred-by-authenticated-user")(`activitySlashlist-repos-starred-by-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repos-starred-by-user")(`activitySlashlist-repos-starred-by-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-repos-watched-by-user")(`activitySlashlist-repos-watched-by-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-stargazers-for-repo")(`activitySlashlist-stargazers-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-watched-repos-for-authenticated-user")(`activitySlashlist-watched-repos-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/list-watchers-for-repo")(`activitySlashlist-watchers-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/mark-notifications-as-read")(`activitySlashmark-notifications-as-read`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/mark-repo-notifications-as-read")(`activitySlashmark-repo-notifications-as-read`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/mark-thread-as-read")(`activitySlashmark-thread-as-read`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/set-repo-subscription")(`activitySlashset-repo-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/set-thread-subscription")(`activitySlashset-thread-subscription`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/star-repo-for-authenticated-user")(`activitySlashstar-repo-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("activity/unstar-repo-for-authenticated-user")(`activitySlashunstar-repo-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/add-repo-to-installation-for-authenticated-user")(`appsSlashadd-repo-to-installation-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/check-token")(`appsSlashcheck-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/create-from-manifest")(`appsSlashcreate-from-manifest`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/create-installation-access-token")(`appsSlashcreate-installation-access-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/delete-authorization")(`appsSlashdelete-authorization`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/delete-installation")(`appsSlashdelete-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/delete-token")(`appsSlashdelete-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-authenticated")(`appsSlashget-authenticated`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-by-slug")(`appsSlashget-by-slug`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-installation")(`appsSlashget-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-org-installation")(`appsSlashget-org-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-repo-installation")(`appsSlashget-repo-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-subscription-plan-for-account")(`appsSlashget-subscription-plan-for-account`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-subscription-plan-for-account-stubbed")(`appsSlashget-subscription-plan-for-account-stubbed`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-user-installation")(`appsSlashget-user-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-webhook-config-for-app")(`appsSlashget-webhook-config-for-app`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/get-webhook-delivery")(`appsSlashget-webhook-delivery`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-accounts-for-plan")(`appsSlashlist-accounts-for-plan`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-accounts-for-plan-stubbed")(`appsSlashlist-accounts-for-plan-stubbed`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-installation-repos-for-authenticated-user")(`appsSlashlist-installation-repos-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-installations")(`appsSlashlist-installations`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-installations-for-authenticated-user")(`appsSlashlist-installations-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-plans")(`appsSlashlist-plans`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-plans-stubbed")(`appsSlashlist-plans-stubbed`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-repos-accessible-to-installation")(`appsSlashlist-repos-accessible-to-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-subscriptions-for-authenticated-user")(`appsSlashlist-subscriptions-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-subscriptions-for-authenticated-user-stubbed")(`appsSlashlist-subscriptions-for-authenticated-user-stubbed`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/list-webhook-deliveries")(`appsSlashlist-webhook-deliveries`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/redeliver-webhook-delivery")(`appsSlashredeliver-webhook-delivery`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/remove-repo-from-installation-for-authenticated-user")(`appsSlashremove-repo-from-installation-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/reset-token")(`appsSlashreset-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/revoke-installation-access-token")(`appsSlashrevoke-installation-access-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/scope-token")(`appsSlashscope-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/suspend-installation")(`appsSlashsuspend-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/unsuspend-installation")(`appsSlashunsuspend-installation`.asInstanceOf[js.Any])
      __obj.updateDynamic("apps/update-webhook-config-for-app")(`appsSlashupdate-webhook-config-for-app`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-actions-billing-ghe")(`billingSlashget-github-actions-billing-ghe`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-actions-billing-org")(`billingSlashget-github-actions-billing-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-actions-billing-user")(`billingSlashget-github-actions-billing-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-advanced-security-billing-ghe")(`billingSlashget-github-advanced-security-billing-ghe`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-advanced-security-billing-org")(`billingSlashget-github-advanced-security-billing-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-packages-billing-ghe")(`billingSlashget-github-packages-billing-ghe`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-packages-billing-org")(`billingSlashget-github-packages-billing-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-github-packages-billing-user")(`billingSlashget-github-packages-billing-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-shared-storage-billing-ghe")(`billingSlashget-shared-storage-billing-ghe`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-shared-storage-billing-org")(`billingSlashget-shared-storage-billing-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("billing/get-shared-storage-billing-user")(`billingSlashget-shared-storage-billing-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/create")(checksSlashcreate.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/create-suite")(`checksSlashcreate-suite`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/get")(checksSlashget.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/get-suite")(`checksSlashget-suite`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/list-annotations")(`checksSlashlist-annotations`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/list-for-ref")(`checksSlashlist-for-ref`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/list-for-suite")(`checksSlashlist-for-suite`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/list-suites-for-ref")(`checksSlashlist-suites-for-ref`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/rerequest-run")(`checksSlashrerequest-run`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/rerequest-suite")(`checksSlashrerequest-suite`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/set-suites-preferences")(`checksSlashset-suites-preferences`.asInstanceOf[js.Any])
      __obj.updateDynamic("checks/update")(checksSlashupdate.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/delete-analysis")(`code-scanningSlashdelete-analysis`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/get-alert")(`code-scanningSlashget-alert`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/get-analysis")(`code-scanningSlashget-analysis`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/get-codeql-database")(`code-scanningSlashget-codeql-database`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/get-sarif")(`code-scanningSlashget-sarif`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-alert-instances")(`code-scanningSlashlist-alert-instances`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-alerts-for-enterprise")(`code-scanningSlashlist-alerts-for-enterprise`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-alerts-for-org")(`code-scanningSlashlist-alerts-for-org`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-alerts-for-repo")(`code-scanningSlashlist-alerts-for-repo`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-codeql-databases")(`code-scanningSlashlist-codeql-databases`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/list-recent-analyses")(`code-scanningSlashlist-recent-analyses`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/update-alert")(`code-scanningSlashupdate-alert`.asInstanceOf[js.Any])
      __obj.updateDynamic("code-scanning/upload-sarif")(`code-scanningSlashupload-sarif`.asInstanceOf[js.Any])
      __obj.updateDynamic("codes-of-conduct/get-all-codes-of-conduct")(`codes-of-conductSlashget-all-codes-of-conduct`.asInstanceOf[js.Any])
      __obj.updateDynamic("codes-of-conduct/get-conduct-code")(`codes-of-conductSlashget-conduct-code`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/add-repository-for-secret-for-authenticated-user")(`codespacesSlashadd-repository-for-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/codespace-machines-for-authenticated-user")(`codespacesSlashcodespace-machines-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-for-authenticated-user")(`codespacesSlashcreate-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-or-update-repo-secret")(`codespacesSlashcreate-or-update-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-or-update-secret-for-authenticated-user")(`codespacesSlashcreate-or-update-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-with-pr-for-authenticated-user")(`codespacesSlashcreate-with-pr-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/create-with-repo-for-authenticated-user")(`codespacesSlashcreate-with-repo-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-for-authenticated-user")(`codespacesSlashdelete-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-from-organization")(`codespacesSlashdelete-from-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-repo-secret")(`codespacesSlashdelete-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/delete-secret-for-authenticated-user")(`codespacesSlashdelete-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/export-for-authenticated-user")(`codespacesSlashexport-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/get-export-details-for-authenticated-user")(`codespacesSlashget-export-details-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/get-for-authenticated-user")(`codespacesSlashget-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/get-public-key-for-authenticated-user")(`codespacesSlashget-public-key-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/get-repo-public-key")(`codespacesSlashget-repo-public-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/get-repo-secret")(`codespacesSlashget-repo-secret`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/get-secret-for-authenticated-user")(`codespacesSlashget-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/list-devcontainers-in-repository-for-authenticated-user")(`codespacesSlashlist-devcontainers-in-repository-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/list-for-authenticated-user")(`codespacesSlashlist-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/list-in-organization")(`codespacesSlashlist-in-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/list-in-repository-for-authenticated-user")(`codespacesSlashlist-in-repository-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/list-repo-secrets")(`codespacesSlashlist-repo-secrets`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/list-repositories-for-secret-for-authenticated-user")(`codespacesSlashlist-repositories-for-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/list-secrets-for-authenticated-user")(`codespacesSlashlist-secrets-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/pre-flight-with-repo-for-authenticated-user")(`codespacesSlashpre-flight-with-repo-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/remove-repository-for-secret-for-authenticated-user")(`codespacesSlashremove-repository-for-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/repo-machines-for-authenticated-user")(`codespacesSlashrepo-machines-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/set-repositories-for-secret-for-authenticated-user")(`codespacesSlashset-repositories-for-secret-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/start-for-authenticated-user")(`codespacesSlashstart-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/stop-for-authenticated-user")(`codespacesSlashstop-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/stop-in-organization")(`codespacesSlashstop-in-organization`.asInstanceOf[js.Any])
      __obj.updateDynamic("codespaces/update-for-authenticated-user")(`codespacesSlashupdate-for-authenticated-user`.asInstanceOf[js.Any])
      __obj.asInstanceOf[operations]
    }
    
    extension [Self <: operations](x: Self) {
      
      inline def `setActionsSlashadd-custom-labels-to-self-hosted-runner-for-org`(value: ParametersPathOrgStringRunneridNumberRequestBodyContentApplicationjsonLabels): Self = StObject.set(x, "actions/add-custom-labels-to-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashadd-custom-labels-to-self-hosted-runner-for-repo`(value: ParametersPathRepoRunneridRequestBodyContentApplicationjsonLabels): Self = StObject.set(x, "actions/add-custom-labels-to-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashadd-repo-access-to-self-hosted-runner-group-in-org`(value: ParametersPathRepositoryidRunnergroupid): Self = StObject.set(x, "actions/add-repo-access-to-self-hosted-runner-group-in-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashadd-selected-repo-to-org-secret`(value: ParametersPathOrgRepositoryidSecretname): Self = StObject.set(x, "actions/add-selected-repo-to-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashadd-self-hosted-runner-to-group-for-org`(value: ParametersPathOrgRunnergroupidRunnerid): Self = StObject.set(x, "actions/add-self-hosted-runner-to-group-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashapprove-workflow-run`(value: Responses201Content47403Content55): Self = StObject.set(x, "actions/approve-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcancel-workflow-run`(value: Responses202Content47): Self = StObject.set(x, "actions/cancel-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-or-update-environment-secret`(value: ParametersPathSecretnameStringRequestBodyContentApplicationjsonEncryptedvalueString): Self = StObject.set(x, "actions/create-or-update-environment-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-or-update-org-secret`(value: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonEncryptedvalue): Self = StObject.set(x, "actions/create-or-update-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-or-update-repo-secret`(value: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid): Self = StObject.set(x, "actions/create-or-update-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-registration-token-for-org`(value: ParametersPathOrgStringResponses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "actions/create-registration-token-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-registration-token-for-repo`(value: Parameters491Responses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "actions/create-registration-token-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-remove-token-for-org`(value: ParametersPathOrgStringResponses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "actions/create-remove-token-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-remove-token-for-repo`(value: Parameters491Responses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "actions/create-remove-token-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-self-hosted-runner-group-for-org`(value: Responses201ContentApplicationjsonInherited): Self = StObject.set(x, "actions/create-self-hosted-runner-group-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashcreate-workflow-dispatch`(value: ParametersPathRepoWorkflowidRequestBodyContentApplicationjsonInputs): Self = StObject.set(x, "actions/create-workflow-dispatch", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-actions-cache-by-id`(value: ParametersPathCacheidOwner): Self = StObject.set(x, "actions/delete-actions-cache-by-id", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-actions-cache-by-key`(value: ParametersQueryKeyStringRef): Self = StObject.set(x, "actions/delete-actions-cache-by-key", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-artifact`(value: ParametersPathArtifactidOwnerResponses): Self = StObject.set(x, "actions/delete-artifact", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-environment-secret`(value: ParametersPathSecretnameStringResponses): Self = StObject.set(x, "actions/delete-environment-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-org-secret`(value: ParametersPathOrgSecretnameResponses): Self = StObject.set(x, "actions/delete-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-repo-secret`(value: ParametersPathOwnerRepoSecretnameResponses): Self = StObject.set(x, "actions/delete-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-self-hosted-runner-from-org`(value: ParametersPathOrgStringRunneridNumberResponses): Self = StObject.set(x, "actions/delete-self-hosted-runner-from-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-self-hosted-runner-from-repo`(value: ParametersPathRepoRunneridResponses): Self = StObject.set(x, "actions/delete-self-hosted-runner-from-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-self-hosted-runner-group-from-org`(value: ParametersPathRunnergroupidNumberResponses): Self = StObject.set(x, "actions/delete-self-hosted-runner-group-from-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-workflow-run`(value: Parameters495): Self = StObject.set(x, "actions/delete-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdelete-workflow-run-logs`(value: Responses500Content55): Self = StObject.set(x, "actions/delete-workflow-run-logs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdisable-selected-repository-github-actions-organization`(value: ParametersPathOrgStringRepositoryidNumber): Self = StObject.set(x, "actions/disable-selected-repository-github-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdisable-workflow`(value: ParametersPathRepoWorkflowidResponses): Self = StObject.set(x, "actions/disable-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdownload-artifact`(value: ParametersPathArchiveformatArtifactid): Self = StObject.set(x, "actions/download-artifact", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdownload-job-logs-for-workflow-run`(value: ParametersPathJobidOwnerResponses): Self = StObject.set(x, "actions/download-job-logs-for-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdownload-workflow-run-attempt-logs`(value: Parameters497): Self = StObject.set(x, "actions/download-workflow-run-attempt-logs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashdownload-workflow-run-logs`(value: Parameters495): Self = StObject.set(x, "actions/download-workflow-run-logs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashenable-selected-repository-github-actions-organization`(value: ParametersPathOrgStringRepositoryidNumber): Self = StObject.set(x, "actions/enable-selected-repository-github-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashenable-workflow`(value: ParametersPathRepoWorkflowidResponses): Self = StObject.set(x, "actions/enable-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-actions-cache-list`(value: ParametersQueryDirectionKey): Self = StObject.set(x, "actions/get-actions-cache-list", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-actions-cache-usage`(value: Responses200ContentApplicationjsonActivecachescount): Self = StObject.set(x, "actions/get-actions-cache-usage", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-actions-cache-usage-by-repo-for-org`(value: ParametersPathOrgStringQuery426): Self = StObject.set(x, "actions/get-actions-cache-usage-by-repo-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-actions-cache-usage-for-enterprise`(value: ParametersPathEnterpriseString): Self = StObject.set(x, "actions/get-actions-cache-usage-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-actions-cache-usage-for-org`(value: Responses200ContentApplicationjsonTotalactivecachescount): Self = StObject.set(x, "actions/get-actions-cache-usage-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-allowed-actions-organization`(value: ParametersPathOrgStringResponses200ContentApplicationjsonGithubownedallowed): Self = StObject.set(x, "actions/get-allowed-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-allowed-actions-repository`(value: Parameters491Responses200ContentApplicationjsonGithubownedallowed): Self = StObject.set(x, "actions/get-allowed-actions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-artifact`(value: ParametersPathArtifactidOwner): Self = StObject.set(x, "actions/get-artifact", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-custom-oidc-sub-claim-for-repo`(value: Responses200ContentApplicationjsonUsedefault): Self = StObject.set(x, "actions/get-custom-oidc-sub-claim-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-environment-public-key`(value: Parameters590): Self = StObject.set(x, "actions/get-environment-public-key", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-environment-secret`(value: ParametersPathSecretnameString): Self = StObject.set(x, "actions/get-environment-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-github-actions-default-workflow-permissions-enterprise`(value: Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions): Self = StObject.set(x, "actions/get-github-actions-default-workflow-permissions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-github-actions-default-workflow-permissions-organization`(
        value: ParametersPathOrgStringResponses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
      ): Self = StObject.set(x, "actions/get-github-actions-default-workflow-permissions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-github-actions-default-workflow-permissions-repository`(
        value: Parameters491Responses200ContentApplicationjsonCanapprovepullrequestreviewsDefaultworkflowpermissions
      ): Self = StObject.set(x, "actions/get-github-actions-default-workflow-permissions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-github-actions-permissions-organization`(value: Responses200ContentApplicationjsonAllowedactionsEnabledrepositories): Self = StObject.set(x, "actions/get-github-actions-permissions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-github-actions-permissions-repository`(value: Responses200ContentApplicationjsonEnabledSelectedactionsurl): Self = StObject.set(x, "actions/get-github-actions-permissions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-job-for-workflow-run`(value: ParametersPathJobidOwner): Self = StObject.set(x, "actions/get-job-for-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-org-public-key`(value: Responses200ContentApplicationjsonCreatedatId): Self = StObject.set(x, "actions/get-org-public-key", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-org-secret`(value: ParametersPathOrgSecretname): Self = StObject.set(x, "actions/get-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-pending-deployments-for-run`(value: Responses200Content502): Self = StObject.set(x, "actions/get-pending-deployments-for-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-repo-public-key`(value: Parameters491Responses200ContentApplicationjsonCreatedatId): Self = StObject.set(x, "actions/get-repo-public-key", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-repo-secret`(value: ParametersPathOwnerRepoSecretname): Self = StObject.set(x, "actions/get-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-reviews-for-run`(value: Responses200Content496): Self = StObject.set(x, "actions/get-reviews-for-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-self-hosted-runner-for-org`(value: ParametersPathOrgStringRunneridNumber): Self = StObject.set(x, "actions/get-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-self-hosted-runner-for-repo`(value: ParametersPathRepoRunnerid): Self = StObject.set(x, "actions/get-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-self-hosted-runner-group-for-org`(value: ParametersPathRunnergroupidNumber): Self = StObject.set(x, "actions/get-self-hosted-runner-group-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow`(value: ParametersPathRepoWorkflowid): Self = StObject.set(x, "actions/get-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-access-to-repository`(value: Responses200ContentApplicationjsonAccesslevel): Self = StObject.set(x, "actions/get-workflow-access-to-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-run`(value: ParametersPathRepoRunid): Self = StObject.set(x, "actions/get-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-run-attempt`(value: ParametersPathAttemptnumberOwner): Self = StObject.set(x, "actions/get-workflow-run-attempt", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-run-usage`(value: Responses200ContentApplicationjsonBillable): Self = StObject.set(x, "actions/get-workflow-run-usage", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashget-workflow-usage`(value: Responses200ContentApplicationjsonBillableWINDOWS): Self = StObject.set(x, "actions/get-workflow-usage", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-artifacts-for-repo`(value: Responses200ContentApplicationjsonArtifactsTotalcount): Self = StObject.set(x, "actions/list-artifacts-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-environment-secrets`(value: ParametersPathEnvironmentnameString): Self = StObject.set(x, "actions/list-environment-secrets", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-jobs-for-workflow-run`(value: ParametersQuery498): Self = StObject.set(x, "actions/list-jobs-for-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-jobs-for-workflow-run-attempt`(value: ParametersPathAttemptnumberOwnerQuery426): Self = StObject.set(x, "actions/list-jobs-for-workflow-run-attempt", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-labels-for-self-hosted-runner-for-org`(value: ParametersPathOrgStringRunneridNumberResponses200ContentApplicationjsonLabelsArray): Self = StObject.set(x, "actions/list-labels-for-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-labels-for-self-hosted-runner-for-repo`(value: ParametersPathRepoRunneridResponses200ContentApplicationjsonLabelsArray): Self = StObject.set(x, "actions/list-labels-for-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-org-secrets`(value: Responses200ContentApplicationjson453): Self = StObject.set(x, "actions/list-org-secrets", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-repo-access-to-self-hosted-runner-group-in-org`(value: ParametersQuery451): Self = StObject.set(x, "actions/list-repo-access-to-self-hosted-runner-group-in-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-repo-secrets`(value: Responses200ContentApplicationjson505): Self = StObject.set(x, "actions/list-repo-secrets", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-repo-workflows`(value: Responses200ContentApplicationjsonTotalcountWorkflows): Self = StObject.set(x, "actions/list-repo-workflows", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-runner-applications-for-org`(value: ParametersPathOrgStringResponses200Content430): Self = StObject.set(x, "actions/list-runner-applications-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-runner-applications-for-repo`(value: Parameters491Responses200Content430): Self = StObject.set(x, "actions/list-runner-applications-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-selected-repos-for-org-secret`(value: ParametersPathOrgSecretnameQuery451): Self = StObject.set(x, "actions/list-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-selected-repositories-enabled-github-actions-organization`(value: Responses200ContentApplicationjsonRepositoriesArrayTotalcountNumber): Self = StObject.set(x, "actions/list-selected-repositories-enabled-github-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-self-hosted-runner-groups-for-org`(value: ParametersQueryPerpageVisibletorepository): Self = StObject.set(x, "actions/list-self-hosted-runner-groups-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-self-hosted-runners-for-org`(value: ParametersPathOrgStringQuery426Responses200ContentApplicationjsonRunnersTotalcount): Self = StObject.set(x, "actions/list-self-hosted-runners-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-self-hosted-runners-for-repo`(value: ParametersPathOwnerStringResponses200ContentApplicationjsonRunnersTotalcount): Self = StObject.set(x, "actions/list-self-hosted-runners-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-self-hosted-runners-in-group-for-org`(value: ParametersPathRunnergroupidNumberQuery426): Self = StObject.set(x, "actions/list-self-hosted-runners-in-group-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-workflow-run-artifacts`(value: ParametersPathRepoRunidQuery426): Self = StObject.set(x, "actions/list-workflow-run-artifacts", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-workflow-runs`(value: ParametersPathRepoWorkflowidQueryActorBranch): Self = StObject.set(x, "actions/list-workflow-runs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashlist-workflow-runs-for-repo`(value: ParametersQueryActorBranch): Self = StObject.set(x, "actions/list-workflow-runs-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashre-run-job-for-workflow-run`(value: Responses493): Self = StObject.set(x, "actions/re-run-job-for-workflow-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashre-run-workflow`(value: Parameters495RequestBodyContent152): Self = StObject.set(x, "actions/re-run-workflow", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashre-run-workflow-failed-jobs`(value: Parameters495RequestBodyContent152): Self = StObject.set(x, "actions/re-run-workflow-failed-jobs", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-all-custom-labels-from-self-hosted-runner-for-org`(value: ParametersPathOrgStringRunneridNumberResponses200ContentApplicationjsonLabelsArray): Self = StObject.set(x, "actions/remove-all-custom-labels-from-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-all-custom-labels-from-self-hosted-runner-for-repo`(value: ParametersPathRepoRunneridResponses200ContentApplicationjsonLabelsArray): Self = StObject.set(x, "actions/remove-all-custom-labels-from-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-custom-label-from-self-hosted-runner-for-org`(value: ParametersPathNameOrgRunnerid): Self = StObject.set(x, "actions/remove-custom-label-from-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-custom-label-from-self-hosted-runner-for-repo`(value: ParametersPathOwnerRepoRunnerid): Self = StObject.set(x, "actions/remove-custom-label-from-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-repo-access-to-self-hosted-runner-group-in-org`(value: ParametersPathRepositoryidRunnergroupid): Self = StObject.set(x, "actions/remove-repo-access-to-self-hosted-runner-group-in-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-selected-repo-from-org-secret`(value: ParametersPathOrgRepositoryidSecretname): Self = StObject.set(x, "actions/remove-selected-repo-from-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashremove-self-hosted-runner-from-group-for-org`(value: ParametersPathOrgRunnergroupidRunnerid): Self = StObject.set(x, "actions/remove-self-hosted-runner-from-group-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashreview-pending-deployments-for-run`(value: Responses200Content504): Self = StObject.set(x, "actions/review-pending-deployments-for-run", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-actions-oidc-custom-issuer-policy-for-enterprise`(value: RequestBodyContentApplicationjsonIncludeenterpriseslug): Self = StObject.set(x, "actions/set-actions-oidc-custom-issuer-policy-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-allowed-actions-organization`(value: ParametersPathOrgStringRequestBodyContentApplicationjsonGithubownedallowed): Self = StObject.set(x, "actions/set-allowed-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-allowed-actions-repository`(value: Parameters491RequestBodyContentApplicationjsonGithubownedallowed): Self = StObject.set(x, "actions/set-allowed-actions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-custom-labels-for-self-hosted-runner-for-org`(value: ParametersPathOrgStringRunneridNumberRequestBodyContentApplicationjsonLabels): Self = StObject.set(x, "actions/set-custom-labels-for-self-hosted-runner-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-custom-labels-for-self-hosted-runner-for-repo`(value: ParametersPathRepoRunneridRequestBodyContentApplicationjsonLabels): Self = StObject.set(x, "actions/set-custom-labels-for-self-hosted-runner-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-custom-oidc-sub-claim-for-repo`(value: RequestBodyContentApplicationjsonUsedefault): Self = StObject.set(x, "actions/set-custom-oidc-sub-claim-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-github-actions-default-workflow-permissions-enterprise`(value: RequestBodyContentApplicationjson427): Self = StObject.set(x, "actions/set-github-actions-default-workflow-permissions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-github-actions-default-workflow-permissions-organization`(value: ParametersPathOrgStringRequestBodyContentApplicationjson427): Self = StObject.set(x, "actions/set-github-actions-default-workflow-permissions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-github-actions-default-workflow-permissions-repository`(value: Parameters491RequestBodyContentApplicationjson427): Self = StObject.set(x, "actions/set-github-actions-default-workflow-permissions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-github-actions-permissions-organization`(value: RequestBodyContentApplicationjson450): Self = StObject.set(x, "actions/set-github-actions-permissions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-github-actions-permissions-repository`(value: RequestBodyContentApplicationjsonAllowedactionsEnabledBoolean): Self = StObject.set(x, "actions/set-github-actions-permissions-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-repo-access-to-self-hosted-runner-group-in-org`(value: ParametersPathRunnergroupidNumberRequestBodyContentApplicationjsonSelectedrepositoryids): Self = StObject.set(x, "actions/set-repo-access-to-self-hosted-runner-group-in-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-selected-repos-for-org-secret`(value: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids): Self = StObject.set(x, "actions/set-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-selected-repositories-enabled-github-actions-organization`(value: ParametersPathOrgStringRequestBodyContentApplicationjsonSelectedrepositoryids): Self = StObject.set(x, "actions/set-selected-repositories-enabled-github-actions-organization", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-self-hosted-runners-in-group-for-org`(value: ParametersPathRunnergroupidNumberRequestBodyContentApplicationjsonRunnersArray): Self = StObject.set(x, "actions/set-self-hosted-runners-in-group-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashset-workflow-access-to-repository`(value: RequestBodyContentApplicationjsonAccesslevel): Self = StObject.set(x, "actions/set-workflow-access-to-repository", value.asInstanceOf[js.Any])
      
      inline def `setActionsSlashupdate-self-hosted-runner-group-for-org`(value: Responses200ContentApplicationjsonInherited): Self = StObject.set(x, "actions/update-self-hosted-runner-group-for-org", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashcheck-repo-is-starred-by-authenticated-user`(value: Responses403Content55404ContentApplicationjsonDocumentationurlMessage): Self = StObject.set(x, "activity/check-repo-is-starred-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashdelete-repo-subscription`(value: Parameters491Responses): Self = StObject.set(x, "activity/delete-repo-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashdelete-thread-subscription`(value: Responses304Unknown401Content55): Self = StObject.set(x, "activity/delete-thread-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashget-feeds`(value: Responses200ContentApplicationjsonCurrentuserorganizationurl): Self = StObject.set(x, "activity/get-feeds", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashget-repo-subscription`(value: Responses200ContentApplicationjsonCreatedatIgnored): Self = StObject.set(x, "activity/get-repo-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashget-thread`(value: ParametersPathThreadidNumber): Self = StObject.set(x, "activity/get-thread", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashget-thread-subscription-for-authenticated-user`(value: Responses200ContentApplicationjsonRepositoryurl): Self = StObject.set(x, "activity/get-thread-subscription-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-events-for-authenticated-user`(value: ParametersPath599Query426): Self = StObject.set(x, "activity/list-events-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-notifications-for-authenticated-user`(value: ParametersQueryAllBefore): Self = StObject.set(x, "activity/list-notifications-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-org-events-for-authenticated-user`(value: ParametersPathOrgStringUsernameString): Self = StObject.set(x, "activity/list-org-events-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-public-events`(value: Parameters434): Self = StObject.set(x, "activity/list-public-events", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-public-events-for-repo-network`(value: ParametersPathOwnerString): Self = StObject.set(x, "activity/list-public-events-for-repo-network", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-public-events-for-user`(value: ParametersPath599Query426): Self = StObject.set(x, "activity/list-public-events-for-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-public-org-events`(value: Responses200Content435): Self = StObject.set(x, "activity/list-public-org-events", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-received-events-for-user`(value: ParametersPath599Query426): Self = StObject.set(x, "activity/list-received-events-for-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-received-public-events-for-user`(value: ParametersPath599Query426): Self = StObject.set(x, "activity/list-received-public-events-for-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repo-events`(value: ParametersPathOwnerStringResponses200Content435): Self = StObject.set(x, "activity/list-repo-events", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repo-notifications-for-authenticated-user`(value: ParametersQueryBeforePage): Self = StObject.set(x, "activity/list-repo-notifications-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repos-starred-by-authenticated-user`(value: ParametersQuery616): Self = StObject.set(x, "activity/list-repos-starred-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repos-starred-by-user`(value: ParametersPath599Query616): Self = StObject.set(x, "activity/list-repos-starred-by-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-repos-watched-by-user`(value: ParametersPath599Query426Responses475): Self = StObject.set(x, "activity/list-repos-watched-by-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-stargazers-for-repo`(value: Responses200Content578): Self = StObject.set(x, "activity/list-stargazers-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-watched-repos-for-authenticated-user`(value: Responses200Content467304Unknown): Self = StObject.set(x, "activity/list-watched-repos-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashlist-watchers-for-repo`(value: ParametersPathOwnerStringResponses469): Self = StObject.set(x, "activity/list-watchers-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashmark-notifications-as-read`(value: Responses202205304): Self = StObject.set(x, "activity/mark-notifications-as-read", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashmark-repo-notifications-as-read`(value: Responses202205): Self = StObject.set(x, "activity/mark-repo-notifications-as-read", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashmark-thread-as-read`(value: Responses205304403): Self = StObject.set(x, "activity/mark-thread-as-read", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashset-repo-subscription`(value: Responses582): Self = StObject.set(x, "activity/set-repo-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashset-thread-subscription`(value: ParametersPathThreadidNumberRequestBodyContentApplicationjsonIgnored): Self = StObject.set(x, "activity/set-thread-subscription", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashstar-repo-for-authenticated-user`(value: Parameters491Responses401Content55403Content55404Content55): Self = StObject.set(x, "activity/star-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setActivitySlashunstar-repo-for-authenticated-user`(value: Parameters491Responses401Content55403Content55404Content55): Self = StObject.set(x, "activity/unstar-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashadd-repo-to-installation-for-authenticated-user`(value: ParametersPathInstallationidNumberRepositoryidNumber): Self = StObject.set(x, "apps/add-repo-to-installation-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashcheck-token`(value: RequestBodyContentApplicationjsonAccesstoken): Self = StObject.set(x, "apps/check-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashcreate-from-manifest`(value: ParametersPath): Self = StObject.set(x, "apps/create-from-manifest", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashcreate-installation-access-token`(value: RequestBodyContentApplicationjsonRepositoryids): Self = StObject.set(x, "apps/create-installation-access-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashdelete-authorization`(value: ParametersPathClientidString): Self = StObject.set(x, "apps/delete-authorization", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashdelete-installation`(value: Responses404Content55): Self = StObject.set(x, "apps/delete-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashdelete-token`(value: ParametersPathClientidString): Self = StObject.set(x, "apps/delete-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-authenticated`(value: Responses200ContentApplicationjsonExternalurl): Self = StObject.set(x, "apps/get-authenticated", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-by-slug`(value: ParametersPathAppslugString): Self = StObject.set(x, "apps/get-by-slug", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-installation`(value: ParametersPathInstallationidNumber): Self = StObject.set(x, "apps/get-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-org-installation`(value: Responses461): Self = StObject.set(x, "apps/get-org-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-repo-installation`(value: Responses301Content55): Self = StObject.set(x, "apps/get-repo-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-subscription-plan-for-account`(value: ParametersPathAccountidNumber): Self = StObject.set(x, "apps/get-subscription-plan-for-account", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-subscription-plan-for-account-stubbed`(value: Responses200ContentApplicationjsonMarketplacepurchase401Content55): Self = StObject.set(x, "apps/get-subscription-plan-for-account-stubbed", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-user-installation`(value: ParametersPath599Responses461): Self = StObject.set(x, "apps/get-user-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-webhook-config-for-app`(value: Responses200ContentApplicationjsonContenttype): Self = StObject.set(x, "apps/get-webhook-config-for-app", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashget-webhook-delivery`(value: ParametersPathDeliveryidNumber): Self = StObject.set(x, "apps/get-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-accounts-for-plan`(value: ParametersPathPlanidNumber): Self = StObject.set(x, "apps/list-accounts-for-plan", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-accounts-for-plan-stubbed`(value: Responses200Content445): Self = StObject.set(x, "apps/list-accounts-for-plan-stubbed", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-installation-repos-for-authenticated-user`(value: ParametersPathInstallationidNumberQuery426): Self = StObject.set(x, "apps/list-installation-repos-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-installations`(value: ParametersQueryOutdatedPage): Self = StObject.set(x, "apps/list-installations", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-installations-for-authenticated-user`(value: Responses200ContentApplicationjsonInstallationsTotalcount304Unknown): Self = StObject.set(x, "apps/list-installations-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-plans`(value: Responses200Content444): Self = StObject.set(x, "apps/list-plans", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-plans-stubbed`(value: Responses200Content444401Content55): Self = StObject.set(x, "apps/list-plans-stubbed", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-repos-accessible-to-installation`(value: Responses200ContentApplicationjsonRepositoryselectionTotalcount): Self = StObject.set(x, "apps/list-repos-accessible-to-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-subscriptions-for-authenticated-user`(value: Responses200304401404): Self = StObject.set(x, "apps/list-subscriptions-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-subscriptions-for-authenticated-user-stubbed`(value: Responses200Content608): Self = StObject.set(x, "apps/list-subscriptions-for-authenticated-user-stubbed", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashlist-webhook-deliveries`(value: ParametersQueryCursorPerpage): Self = StObject.set(x, "apps/list-webhook-deliveries", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashredeliver-webhook-delivery`(value: Responses202400422): Self = StObject.set(x, "apps/redeliver-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashremove-repo-from-installation-for-authenticated-user`(value: ParametersPathInstallationidNumberRepositoryidNumber): Self = StObject.set(x, "apps/remove-repo-from-installation-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashreset-token`(value: Responses200ContentApplicationjsonFingerprint422Content421): Self = StObject.set(x, "apps/reset-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashrevoke-installation-access-token`(value: `50`): Self = StObject.set(x, "apps/revoke-installation-access-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashscope-token`(value: RequestBodyContentApplicationjsonTargetid): Self = StObject.set(x, "apps/scope-token", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashsuspend-installation`(value: Responses404Content55): Self = StObject.set(x, "apps/suspend-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashunsuspend-installation`(value: Responses404Content55): Self = StObject.set(x, "apps/unsuspend-installation", value.asInstanceOf[js.Any])
      
      inline def `setAppsSlashupdate-webhook-config-for-app`(value: RequestBodyContentApplicationjsonContenttypeInsecuressl): Self = StObject.set(x, "apps/update-webhook-config-for-app", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-actions-billing-ghe`(value: Responses200ContentApplicationjsonIncludedminutes): Self = StObject.set(x, "billing/get-github-actions-billing-ghe", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-actions-billing-org`(value: ParametersPathOrgStringResponses200ContentApplicationjsonIncludedminutes): Self = StObject.set(x, "billing/get-github-actions-billing-org", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-actions-billing-user`(value: ParametersPath599Responses200ContentApplicationjsonIncludedminutes): Self = StObject.set(x, "billing/get-github-actions-billing-user", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-advanced-security-billing-ghe`(value: Responses200ContentApplicationjsonRepositoriesTotaladvancedsecuritycommitters): Self = StObject.set(x, "billing/get-github-advanced-security-billing-ghe", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-advanced-security-billing-org`(
        value: ParametersPathOrgStringQuery426Responses200ContentApplicationjsonRepositoriesTotaladvancedsecuritycommitters
      ): Self = StObject.set(x, "billing/get-github-advanced-security-billing-org", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-packages-billing-ghe`(value: Responses200ContentApplicationjsonIncludedgigabytesbandwidth): Self = StObject.set(x, "billing/get-github-packages-billing-ghe", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-packages-billing-org`(value: ParametersPathOrgStringResponses200ContentApplicationjsonIncludedgigabytesbandwidth): Self = StObject.set(x, "billing/get-github-packages-billing-org", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-github-packages-billing-user`(value: ParametersPath599Responses200ContentApplicationjsonIncludedgigabytesbandwidth): Self = StObject.set(x, "billing/get-github-packages-billing-user", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-shared-storage-billing-ghe`(value: Responses200ContentApplicationjsonDaysleftinbillingcycle): Self = StObject.set(x, "billing/get-shared-storage-billing-ghe", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-shared-storage-billing-org`(value: ParametersPathOrgStringResponses200ContentApplicationjsonDaysleftinbillingcycle): Self = StObject.set(x, "billing/get-shared-storage-billing-org", value.asInstanceOf[js.Any])
      
      inline def `setBillingSlashget-shared-storage-billing-user`(value: ParametersPath599Responses200ContentApplicationjsonDaysleftinbillingcycle): Self = StObject.set(x, "billing/get-shared-storage-billing-user", value.asInstanceOf[js.Any])
      
      inline def setChecksSlashcreate(value: Responses201ContentApplicationjsonDeployment): Self = StObject.set(x, "checks/create", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashcreate-suite`(value: Responses200ContentApplicationjsonHeadcommit): Self = StObject.set(x, "checks/create-suite", value.asInstanceOf[js.Any])
      
      inline def setChecksSlashget(value: ParametersPathCheckrunidOwner): Self = StObject.set(x, "checks/get", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashget-suite`(value: ParametersPathChecksuiteidOwner): Self = StObject.set(x, "checks/get-suite", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashlist-annotations`(value: ParametersPathCheckrunidOwnerQuery426): Self = StObject.set(x, "checks/list-annotations", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashlist-for-ref`(value: ParametersQueryPerpageStatus): Self = StObject.set(x, "checks/list-for-ref", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashlist-for-suite`(value: ParametersQueryChecknameFilter): Self = StObject.set(x, "checks/list-for-suite", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashlist-suites-for-ref`(value: ParametersQueryAppidChecknamePage): Self = StObject.set(x, "checks/list-suites-for-ref", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashrerequest-run`(value: Responses403ContentApplicationjsonDocumentationurlMessage): Self = StObject.set(x, "checks/rerequest-run", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashrerequest-suite`(value: ParametersPathChecksuiteidOwnerResponses201Content47): Self = StObject.set(x, "checks/rerequest-suite", value.asInstanceOf[js.Any])
      
      inline def `setChecksSlashset-suites-preferences`(value: Responses200ContentApplicationjsonPreferencesRepository): Self = StObject.set(x, "checks/set-suites-preferences", value.asInstanceOf[js.Any])
      
      inline def setChecksSlashupdate(value: Responses200ContentApplicationjsonDeployment): Self = StObject.set(x, "checks/update", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashdelete-analysis`(value: ParametersPathAnalysisidOwnerQueryConfirmdelete): Self = StObject.set(x, "code-scanning/delete-analysis", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashget-alert`(value: ParametersPathAlertnumberOwner): Self = StObject.set(x, "code-scanning/get-alert", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashget-analysis`(value: ParametersPathAnalysisidOwner): Self = StObject.set(x, "code-scanning/get-analysis", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashget-codeql-database`(value: ParametersPathLanguageOwner): Self = StObject.set(x, "code-scanning/get-codeql-database", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashget-sarif`(value: ParametersPathOwnerRepoSarifid): Self = StObject.set(x, "code-scanning/get-sarif", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-alert-instances`(value: ParametersQueryPagePerpageRef): Self = StObject.set(x, "code-scanning/list-alert-instances", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-alerts-for-enterprise`(value: ParametersQueryToolname): Self = StObject.set(x, "code-scanning/list-alerts-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-alerts-for-org`(value: ParametersPathOrgStringQueryToolname): Self = StObject.set(x, "code-scanning/list-alerts-for-org", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-alerts-for-repo`(value: ParametersQueryRefSort): Self = StObject.set(x, "code-scanning/list-alerts-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-codeql-databases`(value: Responses200Content517): Self = StObject.set(x, "code-scanning/list-codeql-databases", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashlist-recent-analyses`(value: ParametersQueryRefSarifid): Self = StObject.set(x, "code-scanning/list-recent-analyses", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashupdate-alert`(value: RequestBodyContentApplicationjsonDismissedcommentDismissedreason): Self = StObject.set(x, "code-scanning/update-alert", value.asInstanceOf[js.Any])
      
      inline def `setCode-scanningSlashupload-sarif`(value: RequestBodyContentApplicationjsonSarif): Self = StObject.set(x, "code-scanning/upload-sarif", value.asInstanceOf[js.Any])
      
      inline def `setCodes-of-conductSlashget-all-codes-of-conduct`(value: Responses200Content424): Self = StObject.set(x, "codes-of-conduct/get-all-codes-of-conduct", value.asInstanceOf[js.Any])
      
      inline def `setCodes-of-conductSlashget-conduct-code`(value: Responses200ContentApplicationjsonBodyHtmlurl): Self = StObject.set(x, "codes-of-conduct/get-conduct-code", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashadd-repository-for-secret-for-authenticated-user`(value: ParametersPathRepositoryidNumberSecretnameString): Self = StObject.set(x, "codespaces/add-repository-for-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcodespace-machines-for-authenticated-user`(value: Responses200ContentApplicationjsonMachinesTotalcount): Self = StObject.set(x, "codespaces/codespace-machines-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-for-authenticated-user`(value: RequestBodyContent363Responses201202401): Self = StObject.set(x, "codespaces/create-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-or-update-repo-secret`(value: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid): Self = StObject.set(x, "codespaces/create-or-update-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-or-update-secret-for-authenticated-user`(value: Responses201Content47404Content55): Self = StObject.set(x, "codespaces/create-or-update-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-with-pr-for-authenticated-user`(value: Responses201202401): Self = StObject.set(x, "codespaces/create-with-pr-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashcreate-with-repo-for-authenticated-user`(value: Responses201202400): Self = StObject.set(x, "codespaces/create-with-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-for-authenticated-user`(value: Responses202304401): Self = StObject.set(x, "codespaces/delete-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-from-organization`(value: ParametersPathCodespacenameOrg): Self = StObject.set(x, "codespaces/delete-from-organization", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-repo-secret`(value: ParametersPathOwnerRepoSecretnameResponses): Self = StObject.set(x, "codespaces/delete-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashdelete-secret-for-authenticated-user`(value: ParametersPath602Responses): Self = StObject.set(x, "codespaces/delete-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashexport-for-authenticated-user`(value: Responses202401403404): Self = StObject.set(x, "codespaces/export-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-export-details-for-authenticated-user`(value: ParametersPathCodespacenameExportid): Self = StObject.set(x, "codespaces/get-export-details-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-for-authenticated-user`(value: ParametersPathCodespacenameString): Self = StObject.set(x, "codespaces/get-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-public-key-for-authenticated-user`(value: `601`): Self = StObject.set(x, "codespaces/get-public-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-repo-public-key`(value: Parameters491Responses200ContentApplicationjsonCreatedatId): Self = StObject.set(x, "codespaces/get-repo-public-key", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-repo-secret`(value: ParametersPathOwnerRepoSecretname): Self = StObject.set(x, "codespaces/get-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashget-secret-for-authenticated-user`(value: ParametersPath602): Self = StObject.set(x, "codespaces/get-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-devcontainers-in-repository-for-authenticated-user`(value: Responses200400401): Self = StObject.set(x, "codespaces/list-devcontainers-in-repository-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-for-authenticated-user`(value: ParametersQueryPagePerpageRepositoryid): Self = StObject.set(x, "codespaces/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-in-organization`(value: Parameters455): Self = StObject.set(x, "codespaces/list-in-organization", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-in-repository-for-authenticated-user`(value: ParametersPathOwnerStringQuery426): Self = StObject.set(x, "codespaces/list-in-repository-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-repo-secrets`(value: Responses200ContentApplicationjson505): Self = StObject.set(x, "codespaces/list-repo-secrets", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-repositories-for-secret-for-authenticated-user`(value: Responses200ContentApplicationjson452401Content55): Self = StObject.set(x, "codespaces/list-repositories-for-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashlist-secrets-for-authenticated-user`(value: Responses200ContentApplicationjson600): Self = StObject.set(x, "codespaces/list-secrets-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashpre-flight-with-repo-for-authenticated-user`(value: ParametersPathOwnerStringQueryClientipRef): Self = StObject.set(x, "codespaces/pre-flight-with-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashremove-repository-for-secret-for-authenticated-user`(value: ParametersPathRepositoryidNumberSecretnameString): Self = StObject.set(x, "codespaces/remove-repository-for-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashrepo-machines-for-authenticated-user`(value: ParametersPathOwnerStringQueryClientipLocation): Self = StObject.set(x, "codespaces/repo-machines-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashset-repositories-for-secret-for-authenticated-user`(value: Responses404Content55500Content55): Self = StObject.set(x, "codespaces/set-repositories-for-secret-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashstart-for-authenticated-user`(value: Responses401402): Self = StObject.set(x, "codespaces/start-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashstop-for-authenticated-user`(value: Responses200ContentApplicationjsonGitstatus401Content55): Self = StObject.set(x, "codespaces/stop-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashstop-in-organization`(value: Responses200304401403404500): Self = StObject.set(x, "codespaces/stop-in-organization", value.asInstanceOf[js.Any])
      
      inline def `setCodespacesSlashupdate-for-authenticated-user`(value: Responses200ContentApplicationjsonGitstatus): Self = StObject.set(x, "codespaces/update-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashadd-selected-repo-to-org-secret`(value: ParametersPathOrgRepositoryidSecretname): Self = StObject.set(x, "dependabot/add-selected-repo-to-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashcreate-or-update-org-secret`(value: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonKeyid): Self = StObject.set(x, "dependabot/create-or-update-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashcreate-or-update-repo-secret`(value: ParametersPathOwnerRepoSecretnameRequestBodyContentApplicationjsonEncryptedvalueKeyid): Self = StObject.set(x, "dependabot/create-or-update-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashdelete-org-secret`(value: ParametersPathOrgSecretnameResponses): Self = StObject.set(x, "dependabot/delete-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashdelete-repo-secret`(value: ParametersPathOwnerRepoSecretnameResponses): Self = StObject.set(x, "dependabot/delete-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashget-org-public-key`(value: Responses200ContentApplicationjsonKeyKeyid): Self = StObject.set(x, "dependabot/get-org-public-key", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashget-org-secret`(value: ParametersPathOrgSecretname): Self = StObject.set(x, "dependabot/get-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashget-repo-public-key`(value: Parameters491Responses200ContentApplicationjsonKeyKeyid): Self = StObject.set(x, "dependabot/get-repo-public-key", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashget-repo-secret`(value: ParametersPathOwnerRepoSecretname): Self = StObject.set(x, "dependabot/get-repo-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashlist-org-secrets`(value: Responses200ContentApplicationjson453): Self = StObject.set(x, "dependabot/list-org-secrets", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashlist-repo-secrets`(value: Responses200ContentApplicationjson505): Self = StObject.set(x, "dependabot/list-repo-secrets", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashlist-selected-repos-for-org-secret`(value: ParametersPathOrgSecretnameQuery451): Self = StObject.set(x, "dependabot/list-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashremove-selected-repo-from-org-secret`(value: ParametersPathOrgRepositoryidSecretname): Self = StObject.set(x, "dependabot/remove-selected-repo-from-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependabotSlashset-selected-repos-for-org-secret`(value: ParametersPathOrgSecretnameRequestBodyContentApplicationjsonSelectedrepositoryids): Self = StObject.set(x, "dependabot/set-selected-repos-for-org-secret", value.asInstanceOf[js.Any])
      
      inline def `setDependency-graphSlashcreate-repository-snapshot`(value: RequestBodyContentApplicationjsonJob): Self = StObject.set(x, "dependency-graph/create-repository-snapshot", value.asInstanceOf[js.Any])
      
      inline def `setDependency-graphSlashdiff-range`(value: ParametersQuery527): Self = StObject.set(x, "dependency-graph/diff-range", value.asInstanceOf[js.Any])
      
      inline def setEmojisSlashget(value: Responses304Unknown): Self = StObject.set(x, "emojis/get", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashadd-custom-labels-to-self-hosted-runner-for-enterprise`(value: Responses422Content418): Self = StObject.set(x, "enterprise-admin/add-custom-labels-to-self-hosted-runner-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashadd-org-access-to-self-hosted-runner-group-in-enterprise`(value: ParametersPathOrgidRunnergroupid): Self = StObject.set(x, "enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashadd-self-hosted-runner-to-group-for-enterprise`(value: ParametersPathEnterpriseRunnergroupidRunnerid): Self = StObject.set(x, "enterprise-admin/add-self-hosted-runner-to-group-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashcreate-registration-token-for-enterprise`(value: Responses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "enterprise-admin/create-registration-token-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashcreate-remove-token-for-enterprise`(value: Responses201ContentApplicationjsonExpiresatPermissions): Self = StObject.set(x, "enterprise-admin/create-remove-token-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashcreate-self-hosted-runner-group-for-enterprise`(value: Responses201ContentApplicationjsonDefault): Self = StObject.set(x, "enterprise-admin/create-self-hosted-runner-group-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashdelete-scim-group-from-enterprise`(value: Parameters591Responses): Self = StObject.set(x, "enterprise-admin/delete-scim-group-from-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashdelete-self-hosted-runner-from-enterprise`(value: ParametersPathRunneridNumberResponses): Self = StObject.set(x, "enterprise-admin/delete-self-hosted-runner-from-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashdelete-self-hosted-runner-group-from-enterprise`(value: ParametersPathEnterpriseRunnergroupidResponses): Self = StObject.set(x, "enterprise-admin/delete-self-hosted-runner-group-from-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashdelete-user-from-enterprise`(value: ParametersPathEnterpriseScimuseridResponses): Self = StObject.set(x, "enterprise-admin/delete-user-from-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashdisable-selected-organization-github-actions-enterprise`(value: ParametersPathOrgidNumber): Self = StObject.set(x, "enterprise-admin/disable-selected-organization-github-actions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashenable-selected-organization-github-actions-enterprise`(value: ParametersPathOrgidNumber): Self = StObject.set(x, "enterprise-admin/enable-selected-organization-github-actions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-allowed-actions-enterprise`(value: Responses200ContentApplicationjsonGithubownedallowed): Self = StObject.set(x, "enterprise-admin/get-allowed-actions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-audit-log`(value: ParametersQueryPhrase): Self = StObject.set(x, "enterprise-admin/get-audit-log", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-consumed-licenses`(value: Responses200ContentApplicationjsonTotalseatsconsumed): Self = StObject.set(x, "enterprise-admin/get-consumed-licenses", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-github-actions-permissions-enterprise`(value: Responses200ContentApplicationjsonSelectedorganizationsurl): Self = StObject.set(x, "enterprise-admin/get-github-actions-permissions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-license-sync-status`(value: Responses200ContentApplicationjsonServerinstances): Self = StObject.set(x, "enterprise-admin/get-license-sync-status", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-provisioning-information-for-enterprise-group`(value: ParametersPathEnterpriseScimgroupid): Self = StObject.set(x, "enterprise-admin/get-provisioning-information-for-enterprise-group", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-provisioning-information-for-enterprise-user`(value: ParametersPathEnterpriseScimuserid): Self = StObject.set(x, "enterprise-admin/get-provisioning-information-for-enterprise-user", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-self-hosted-runner-for-enterprise`(value: ParametersPathRunneridNumber): Self = StObject.set(x, "enterprise-admin/get-self-hosted-runner-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-self-hosted-runner-group-for-enterprise`(value: ParametersPathEnterpriseRunnergroupid): Self = StObject.set(x, "enterprise-admin/get-self-hosted-runner-group-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashget-server-statistics`(value: ParametersPathEnterpriseororgString): Self = StObject.set(x, "enterprise-admin/get-server-statistics", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashlist-labels-for-self-hosted-runner-for-enterprise`(value: Responses200ContentApplicationjsonLabelsArray): Self = StObject.set(x, "enterprise-admin/list-labels-for-self-hosted-runner-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashlist-org-access-to-self-hosted-runner-group-in-enterprise`(value: ParametersPathEnterpriseRunnergroupidQuery426): Self = StObject.set(x, "enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashlist-provisioned-groups-enterprise`(value: ParametersQueryCountExcludedAttributes): Self = StObject.set(x, "enterprise-admin/list-provisioned-groups-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashlist-provisioned-identities-enterprise`(value: ParametersPathEnterpriseStringQueryCountFilter): Self = StObject.set(x, "enterprise-admin/list-provisioned-identities-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashlist-runner-applications-for-enterprise`(value: Responses200Content430): Self = StObject.set(x, "enterprise-admin/list-runner-applications-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashlist-selected-organizations-enabled-github-actions-enterprise`(value: ParametersQuery426): Self = StObject.set(x, "enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashlist-self-hosted-runner-groups-for-enterprise`(value: ParametersQueryVisibletoorganization): Self = StObject.set(x, "enterprise-admin/list-self-hosted-runner-groups-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashlist-self-hosted-runners-for-enterprise`(value: Responses200ContentApplicationjson428): Self = StObject.set(x, "enterprise-admin/list-self-hosted-runners-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashlist-self-hosted-runners-in-group-for-enterprise`(value: Responses200ContentApplicationjsonRunnersTotalcount): Self = StObject.set(x, "enterprise-admin/list-self-hosted-runners-in-group-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashprovision-and-invite-enterprise-group`(value: Responses201ContentApplicationjsonMeta): Self = StObject.set(x, "enterprise-admin/provision-and-invite-enterprise-group", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashprovision-and-invite-enterprise-user`(value: Responses201ContentApplicationjsonEmailsExternalId): Self = StObject.set(x, "enterprise-admin/provision-and-invite-enterprise-user", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashremove-all-custom-labels-from-self-hosted-runner-for-enterprise`(value: ParametersPathRunneridNumberResponses422Content418): Self = StObject.set(x, "enterprise-admin/remove-all-custom-labels-from-self-hosted-runner-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashremove-custom-label-from-self-hosted-runner-for-enterprise`(value: ParametersPathNameRunnerid): Self = StObject.set(x, "enterprise-admin/remove-custom-label-from-self-hosted-runner-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashremove-org-access-to-self-hosted-runner-group-in-enterprise`(value: ParametersPathOrgidRunnergroupid): Self = StObject.set(x, "enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashremove-self-hosted-runner-from-group-for-enterprise`(value: ParametersPathEnterpriseRunnergroupidRunnerid): Self = StObject.set(x, "enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashset-allowed-actions-enterprise`(value: RequestBodyContentApplicationjsonGithubownedallowed): Self = StObject.set(x, "enterprise-admin/set-allowed-actions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashset-custom-labels-for-self-hosted-runner-for-enterprise`(value: Responses422Content418): Self = StObject.set(x, "enterprise-admin/set-custom-labels-for-self-hosted-runner-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashset-github-actions-permissions-enterprise`(value: RequestBodyContentApplicationjsonAllowedactionsEnabledorganizations): Self = StObject.set(x, "enterprise-admin/set-github-actions-permissions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashset-information-for-provisioned-enterprise-group`(value: Parameters591): Self = StObject.set(x, "enterprise-admin/set-information-for-provisioned-enterprise-group", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashset-information-for-provisioned-enterprise-user`(value: Responses200ContentApplicationjsonEmailsExternalId): Self = StObject.set(x, "enterprise-admin/set-information-for-provisioned-enterprise-user", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashset-org-access-to-self-hosted-runner-group-in-enterprise`(
        value: ParametersPathEnterpriseRunnergroupidRequestBodyContentApplicationjsonSelectedorganizationids
      ): Self = StObject.set(x, "enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashset-selected-organizations-enabled-github-actions-enterprise`(value: ParametersPathEnterpriseStringRequestBodyContentApplicationjsonSelectedorganizationids): Self = StObject.set(x, "enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashset-self-hosted-runners-in-group-for-enterprise`(value: ParametersPathEnterpriseRunnergroupidRequestBodyContentApplicationjsonRunnersArray): Self = StObject.set(x, "enterprise-admin/set-self-hosted-runners-in-group-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashupdate-attribute-for-enterprise-group`(value: Responses200ContentApplicationjsonMeta): Self = StObject.set(x, "enterprise-admin/update-attribute-for-enterprise-group", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashupdate-attribute-for-enterprise-user`(value: ParametersPathEnterpriseScimuseridRequestBodyContentApplicationjsonSchemas): Self = StObject.set(x, "enterprise-admin/update-attribute-for-enterprise-user", value.asInstanceOf[js.Any])
      
      inline def `setEnterprise-adminSlashupdate-self-hosted-runner-group-for-enterprise`(value: Responses200ContentApplicationjsonDefault): Self = StObject.set(x, "enterprise-admin/update-self-hosted-runner-group-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashcheck-is-starred`(value: Responses403Content55404Content47): Self = StObject.set(x, "gists/check-is-starred", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashcreate(value: Responses201304403404): Self = StObject.set(x, "gists/create", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashcreate-comment`(value: Responses201ContentApplicationjsonBodyCreatedat): Self = StObject.set(x, "gists/create-comment", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashdelete(value: Responses304Unknown403Content55): Self = StObject.set(x, "gists/delete", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashdelete-comment`(value: ParametersPathCommentidGistidResponses304Unknown403Content55): Self = StObject.set(x, "gists/delete-comment", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashfork(value: Responses201304403404422): Self = StObject.set(x, "gists/fork", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashget(value: ParametersPathGistidString): Self = StObject.set(x, "gists/get", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashget-comment`(value: ParametersPathCommentidGistid): Self = StObject.set(x, "gists/get-comment", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashget-revision`(value: ParametersPathGistidSha): Self = StObject.set(x, "gists/get-revision", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashlist(value: ParametersQueryPagePerpageSince): Self = StObject.set(x, "gists/list", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-comments`(value: ParametersPathGistidStringQuery426): Self = StObject.set(x, "gists/list-comments", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-commits`(value: Responses200Content440): Self = StObject.set(x, "gists/list-commits", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-for-user`(value: ParametersPath599QueryPagePerpageSince): Self = StObject.set(x, "gists/list-for-user", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-forks`(value: Responses200Content441): Self = StObject.set(x, "gists/list-forks", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-public`(value: Responses200304403422): Self = StObject.set(x, "gists/list-public", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashlist-starred`(value: Responses401Content55): Self = StObject.set(x, "gists/list-starred", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashstar(value: Responses304Unknown403Content55): Self = StObject.set(x, "gists/star", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashunstar(value: Responses304Unknown403Content55): Self = StObject.set(x, "gists/unstar", value.asInstanceOf[js.Any])
      
      inline def setGistsSlashupdate(value: Responses200437404Content55): Self = StObject.set(x, "gists/update", value.asInstanceOf[js.Any])
      
      inline def `setGistsSlashupdate-comment`(value: Responses200439404Content55): Self = StObject.set(x, "gists/update-comment", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-blob`(value: Responses201403404409): Self = StObject.set(x, "git/create-blob", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-commit`(value: Responses201ContentApplicationjsonAuthorCommitter): Self = StObject.set(x, "git/create-commit", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-ref`(value: Responses201ContentApplicationjsonNodeidObjectHeadersLocation): Self = StObject.set(x, "git/create-ref", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-tag`(value: Responses201ContentApplicationjsonMessageNodeid): Self = StObject.set(x, "git/create-tag", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashcreate-tree`(value: Responses201ContentApplicationjsonTruncated): Self = StObject.set(x, "git/create-tree", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashdelete-ref`(value: Parameters535Responses422Content421): Self = StObject.set(x, "git/delete-ref", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-blob`(value: ParametersPathFileshaOwner): Self = StObject.set(x, "git/get-blob", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-commit`(value: Responses200534): Self = StObject.set(x, "git/get-commit", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-ref`(value: Responses200ContentApplicationjsonNodeidObject): Self = StObject.set(x, "git/get-ref", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-tag`(value: ParametersPathRepoTagsha): Self = StObject.set(x, "git/get-tag", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashget-tree`(value: ParametersPathRepoTreesha): Self = StObject.set(x, "git/get-tree", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashlist-matching-refs`(value: Parameters535): Self = StObject.set(x, "git/list-matching-refs", value.asInstanceOf[js.Any])
      
      inline def `setGitSlashupdate-ref`(value: Responses200ContentApplicationjsonNodeidObject422Content421): Self = StObject.set(x, "git/update-ref", value.asInstanceOf[js.Any])
      
      inline def `setGitignoreSlashget-all-templates`(value: Responses200Content48304Unknown): Self = StObject.set(x, "gitignore/get-all-templates", value.asInstanceOf[js.Any])
      
      inline def `setGitignoreSlashget-template`(value: Responses200ContentApplicationjsonNameSource): Self = StObject.set(x, "gitignore/get-template", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashget-restrictions-for-authenticated-user`(value: `605`): Self = StObject.set(x, "interactions/get-restrictions-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashget-restrictions-for-org`(value: Responses200Content462): Self = StObject.set(x, "interactions/get-restrictions-for-org", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashget-restrictions-for-repo`(value: Parameters491Responses200Content462): Self = StObject.set(x, "interactions/get-restrictions-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashremove-restrictions-for-authenticated-user`(value: `375`): Self = StObject.set(x, "interactions/remove-restrictions-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashremove-restrictions-for-org`(value: ParametersPathOrgStringResponses): Self = StObject.set(x, "interactions/remove-restrictions-for-org", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashremove-restrictions-for-repo`(value: Parameters491Responses409Unknown): Self = StObject.set(x, "interactions/remove-restrictions-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashset-restrictions-for-authenticated-user`(value: Responses200ContentApplicationjsonOrigin): Self = StObject.set(x, "interactions/set-restrictions-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashset-restrictions-for-org`(value: RequestBodyContentApplicationjsonExpiryLimit): Self = StObject.set(x, "interactions/set-restrictions-for-org", value.asInstanceOf[js.Any])
      
      inline def `setInteractionsSlashset-restrictions-for-repo`(value: Responses200ContentApplicationjsonOrigin409Unknown): Self = StObject.set(x, "interactions/set-restrictions-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashadd-assignees`(value: Responses201549): Self = StObject.set(x, "issues/add-assignees", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashadd-labels`(value: Responses200552): Self = StObject.set(x, "issues/add-labels", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashcheck-user-can-be-assigned`(value: ParametersPathAssigneeOwner): Self = StObject.set(x, "issues/check-user-can-be-assigned", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashcreate(value: Responses410422503): Self = StObject.set(x, "issues/create", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashcreate-comment`(value: Responses201403404410): Self = StObject.set(x, "issues/create-comment", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashcreate-label`(value: Responses201ContentApplicationjsonDescriptionId): Self = StObject.set(x, "issues/create-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashcreate-milestone`(value: Responses201ContentApplicationjsonLabelsurl): Self = StObject.set(x, "issues/create-milestone", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashdelete-comment`(value: ParametersPathCommentidOwnerRepoResponses): Self = StObject.set(x, "issues/delete-comment", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashdelete-label`(value: ParametersPathRepoStringResponses): Self = StObject.set(x, "issues/delete-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashdelete-milestone`(value: ParametersPathMilestonenumberOwnerResponses404Content55): Self = StObject.set(x, "issues/delete-milestone", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashget(value: ParametersPathIssuenumberOwnerRepo): Self = StObject.set(x, "issues/get", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashget-comment`(value: Responses200ContentApplicationjsonBodytext): Self = StObject.set(x, "issues/get-comment", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashget-event`(value: ParametersPathEventidOwner): Self = StObject.set(x, "issues/get-event", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashget-label`(value: ParametersPathRepoString): Self = StObject.set(x, "issues/get-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashget-milestone`(value: ParametersPathMilestonenumberOwner): Self = StObject.set(x, "issues/get-milestone", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashlist(value: ParametersQueryOrgs): Self = StObject.set(x, "issues/list", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-assignees`(value: Responses200Content454Headers404Content55): Self = StObject.set(x, "issues/list-assignees", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-comments`(value: ParametersPathIssuenumberOwnerRepoQueryPagePerpageSince): Self = StObject.set(x, "issues/list-comments", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-comments-for-repo`(value: ParametersQueryPerpageSinceSort): Self = StObject.set(x, "issues/list-comments-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-events`(value: ParametersPathIssuenumberOwnerRepoQuery426): Self = StObject.set(x, "issues/list-events", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-events-for-repo`(value: Responses200Content548): Self = StObject.set(x, "issues/list-events-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-events-for-timeline`(value: Responses200Content553): Self = StObject.set(x, "issues/list-events-for-timeline", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-for-authenticated-user`(value: Parameters606): Self = StObject.set(x, "issues/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-for-org`(value: ParametersQueryDirectionFilter): Self = StObject.set(x, "issues/list-for-org", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-for-repo`(value: ParametersQueryMentioned): Self = StObject.set(x, "issues/list-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-labels-for-milestone`(value: ParametersPathMilestonenumberOwnerQuery426): Self = StObject.set(x, "issues/list-labels-for-milestone", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-labels-for-repo`(value: Responses200Content551404Content55): Self = StObject.set(x, "issues/list-labels-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-labels-on-issue`(value: Responses200Content551): Self = StObject.set(x, "issues/list-labels-on-issue", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashlist-milestones`(value: ParametersQueryPerpageSortState): Self = StObject.set(x, "issues/list-milestones", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashlock(value: Responses404Content55410Content55): Self = StObject.set(x, "issues/lock", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashremove-all-labels`(value: Responses410Content55): Self = StObject.set(x, "issues/remove-all-labels", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashremove-assignees`(value: Responses200549): Self = StObject.set(x, "issues/remove-assignees", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashremove-label`(value: ParametersPathIssuenumberNameOwner): Self = StObject.set(x, "issues/remove-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashset-labels`(value: Responses200552): Self = StObject.set(x, "issues/set-labels", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashunlock(value: ParametersPathIssuenumberOwnerRepoResponses403Content55404Content55): Self = StObject.set(x, "issues/unlock", value.asInstanceOf[js.Any])
      
      inline def setIssuesSlashupdate(value: Responses301403404): Self = StObject.set(x, "issues/update", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashupdate-comment`(value: Responses200ContentApplicationjsonBodytext422Content421): Self = StObject.set(x, "issues/update-comment", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashupdate-label`(value: Responses557): Self = StObject.set(x, "issues/update-label", value.asInstanceOf[js.Any])
      
      inline def `setIssuesSlashupdate-milestone`(value: Responses561): Self = StObject.set(x, "issues/update-milestone", value.asInstanceOf[js.Any])
      
      inline def setLicensesSlashget(value: Responses200ContentApplicationjsonConditions): Self = StObject.set(x, "licenses/get", value.asInstanceOf[js.Any])
      
      inline def `setLicensesSlashget-all-commonly-used`(value: ParametersQueryFeaturedPage): Self = StObject.set(x, "licenses/get-all-commonly-used", value.asInstanceOf[js.Any])
      
      inline def `setLicensesSlashget-for-repo`(value: Responses200ContentApplicationjsonDownloadurlEncoding): Self = StObject.set(x, "licenses/get-for-repo", value.asInstanceOf[js.Any])
      
      inline def setMarkdownSlashrender(value: Responses200ContentTexthtml304Unknown): Self = StObject.set(x, "markdown/render", value.asInstanceOf[js.Any])
      
      inline def `setMarkdownSlashrender-raw`(value: Responses200ContentTexthtmlHeaders304Unknown): Self = StObject.set(x, "markdown/render-raw", value.asInstanceOf[js.Any])
      
      inline def setMetaSlashget(value: Responses200ContentApplicationjsonApi): Self = StObject.set(x, "meta/get", value.asInstanceOf[js.Any])
      
      inline def `setMetaSlashget-octocat`(value: ParametersQueryS): Self = StObject.set(x, "meta/get-octocat", value.asInstanceOf[js.Any])
      
      inline def `setMetaSlashget-zen`(value: Responses200ContentTextplainString): Self = StObject.set(x, "meta/get-zen", value.asInstanceOf[js.Any])
      
      inline def setMetaSlashroot(value: Responses200ContentApplicationjsonAuthorizationsurl): Self = StObject.set(x, "meta/root", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashcancel-import`(value: Parameters491Responses): Self = StObject.set(x, "migrations/cancel-import", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashdelete-archive-for-authenticated-user`(value: Parameters611Responses401Content55403Content55404Content55): Self = StObject.set(x, "migrations/delete-archive-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashdelete-archive-for-org`(value: Parameters466): Self = StObject.set(x, "migrations/delete-archive-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashdownload-archive-for-org`(value: Parameters466): Self = StObject.set(x, "migrations/download-archive-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-archive-for-authenticated-user`(value: Parameters611): Self = StObject.set(x, "migrations/get-archive-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-commit-authors`(value: ParametersQuery543): Self = StObject.set(x, "migrations/get-commit-authors", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-import-status`(value: Responses200ContentApplicationjsonAuthorscount): Self = StObject.set(x, "migrations/get-import-status", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-large-files`(value: Responses200Content545): Self = StObject.set(x, "migrations/get-large-files", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-status-for-authenticated-user`(value: ParametersPathMigrationidNumber): Self = StObject.set(x, "migrations/get-status-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashget-status-for-org`(value: ParametersPathMigrationidOrg): Self = StObject.set(x, "migrations/get-status-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashlist-for-authenticated-user`(value: Responses200Content465304Unknown): Self = StObject.set(x, "migrations/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashlist-for-org`(value: ParametersQueryExcludePage): Self = StObject.set(x, "migrations/list-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashlist-repos-for-authenticated-user`(value: ParametersPathMigrationidNumberQuery426): Self = StObject.set(x, "migrations/list-repos-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashlist-repos-for-org`(value: ParametersPathMigrationidOrgQuery426): Self = StObject.set(x, "migrations/list-repos-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashmap-commit-author`(value: ParametersPathAuthoridOwner): Self = StObject.set(x, "migrations/map-commit-author", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashset-lfs-preference`(value: Responses200ContentApplicationjsonAuthorscount422Content421): Self = StObject.set(x, "migrations/set-lfs-preference", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashstart-for-authenticated-user`(value: Responses201ContentApplicationjsonExcludeownerprojects304Unknown): Self = StObject.set(x, "migrations/start-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashstart-for-org`(value: Responses201ContentApplicationjsonExcludeownerprojects): Self = StObject.set(x, "migrations/start-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashstart-import`(value: Responses201ContentApplicationjsonAuthorscountHeadersLocation): Self = StObject.set(x, "migrations/start-import", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashunlock-repo-for-authenticated-user`(value: ParametersPathReponameString): Self = StObject.set(x, "migrations/unlock-repo-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashunlock-repo-for-org`(value: ParametersPathOrgReponame): Self = StObject.set(x, "migrations/unlock-repo-for-org", value.asInstanceOf[js.Any])
      
      inline def `setMigrationsSlashupdate-import`(value: Responses542): Self = StObject.set(x, "migrations/update-import", value.asInstanceOf[js.Any])
      
      inline def `setOidcSlashget-oidc-custom-sub-template-for-org`(value: Responses200ContentApplicationjsonIncludeclaimkeys): Self = StObject.set(x, "oidc/get-oidc-custom-sub-template-for-org", value.asInstanceOf[js.Any])
      
      inline def `setOidcSlashupdate-oidc-custom-sub-template-for-org`(value: RequestBodyContentApplicationjsonIncludeclaimkeys): Self = StObject.set(x, "oidc/update-oidc-custom-sub-template-for-org", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashadd-security-manager-team`(value: ParametersPathTeamslugString): Self = StObject.set(x, "orgs/add-security-manager-team", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashblock-user`(value: Responses422Content421): Self = StObject.set(x, "orgs/block-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcancel-invitation`(value: ParametersPathInvitationidOrg): Self = StObject.set(x, "orgs/cancel-invitation", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcheck-blocked-user`(value: ParametersPathUsernameString): Self = StObject.set(x, "orgs/check-blocked-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcheck-membership-for-user`(value: ParametersPathUsernameStringResponses404Unknown): Self = StObject.set(x, "orgs/check-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcheck-public-membership-for-user`(value: ParametersPathUsernameStringResponses404Unknown): Self = StObject.set(x, "orgs/check-public-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashconvert-member-to-outside-collaborator`(value: Responses202403404): Self = StObject.set(x, "orgs/convert-member-to-outside-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcreate-custom-role`(value: Responses201ContentApplicationjsonBaseroleCreatedat): Self = StObject.set(x, "orgs/create-custom-role", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcreate-invitation`(value: Responses201ContentApplicationjsonFailedreason): Self = StObject.set(x, "orgs/create-invitation", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashcreate-webhook`(value: RequestBodyContentApplicationjsonActiveConfig): Self = StObject.set(x, "orgs/create-webhook", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashdelete-custom-role`(value: ParametersPathOrgRoleid): Self = StObject.set(x, "orgs/delete-custom-role", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashdelete-webhook`(value: ParametersPathHookidOrgResponses404Content55): Self = StObject.set(x, "orgs/delete-webhook", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashenable-or-disable-security-product-on-all-org-repos`(value: ParametersPathSecurityproduct): Self = StObject.set(x, "orgs/enable-or-disable-security-product-on-all-org-repos", value.asInstanceOf[js.Any])
      
      inline def setOrgsSlashget(value: ParametersPathOrgString): Self = StObject.set(x, "orgs/get", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-audit-log`(value: ParametersQueryAfterBefore): Self = StObject.set(x, "orgs/get-audit-log", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-membership-for-authenticated-user`(value: ParametersPathOrgStringResponses200ContentApplicationjsonOrganizationOrganizationurl): Self = StObject.set(x, "orgs/get-membership-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-membership-for-user`(value: Responses200ContentApplicationjsonOrganizationOrganizationurl): Self = StObject.set(x, "orgs/get-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-webhook`(value: ParametersPathHookidOrg): Self = StObject.set(x, "orgs/get-webhook", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-webhook-config-for-org`(value: ParametersPathHookidOrgResponses200ContentApplicationjsonContenttype): Self = StObject.set(x, "orgs/get-webhook-config-for-org", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashget-webhook-delivery`(value: ParametersPathDeliveryidHookidOrg): Self = StObject.set(x, "orgs/get-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def setOrgsSlashlist(value: ParametersQuery447): Self = StObject.set(x, "orgs/list", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-app-installations`(value: Responses200ContentApplicationjsonInstallationsTotalcount): Self = StObject.set(x, "orgs/list-app-installations", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-blocked-users`(value: Responses200Content454): Self = StObject.set(x, "orgs/list-blocked-users", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-custom-roles`(value: Responses200ContentApplicationjsonCustomrolesTotalcount): Self = StObject.set(x, "orgs/list-custom-roles", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-failed-invitations`(value: Responses200Content457): Self = StObject.set(x, "orgs/list-failed-invitations", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-fine-grained-permissions`(value: Responses200Content458): Self = StObject.set(x, "orgs/list-fine-grained-permissions", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-for-authenticated-user`(value: Responses200Content448Headers): Self = StObject.set(x, "orgs/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-for-user`(value: Responses620): Self = StObject.set(x, "orgs/list-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-invitation-teams`(value: ParametersPathInvitationidOrgQuery426): Self = StObject.set(x, "orgs/list-invitation-teams", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-members`(value: ParametersQueryPagePerpageRole): Self = StObject.set(x, "orgs/list-members", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-memberships-for-authenticated-user`(value: ParametersQuery609): Self = StObject.set(x, "orgs/list-memberships-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-outside-collaborators`(value: ParametersQuery468): Self = StObject.set(x, "orgs/list-outside-collaborators", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-pending-invitations`(value: Responses200Content457): Self = StObject.set(x, "orgs/list-pending-invitations", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-public-members`(value: Responses469): Self = StObject.set(x, "orgs/list-public-members", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-saml-sso-authorizations`(value: ParametersQueryLoginPage): Self = StObject.set(x, "orgs/list-saml-sso-authorizations", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-security-manager-teams`(value: Responses200Content476): Self = StObject.set(x, "orgs/list-security-manager-teams", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-webhook-deliveries`(value: ParametersPathHookidOrgQueryCursorPerpage): Self = StObject.set(x, "orgs/list-webhook-deliveries", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashlist-webhooks`(value: Responses200Content459): Self = StObject.set(x, "orgs/list-webhooks", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashping-webhook`(value: ParametersPathHookidOrgResponses404Content55): Self = StObject.set(x, "orgs/ping-webhook", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashredeliver-webhook-delivery`(value: ParametersPathDeliveryidHookidOrgResponses202400422): Self = StObject.set(x, "orgs/redeliver-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-member`(value: Responses464): Self = StObject.set(x, "orgs/remove-member", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-membership-for-user`(value: Responses403Content55404Content55): Self = StObject.set(x, "orgs/remove-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-outside-collaborator`(value: ParametersPathUsernameStringResponses422ContentApplicationjsonDocumentationurl): Self = StObject.set(x, "orgs/remove-outside-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-public-membership-for-authenticated-user`(value: ParametersPathUsernameStringResponses): Self = StObject.set(x, "orgs/remove-public-membership-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-saml-sso-authorization`(value: ParametersPathCredentialidOrg): Self = StObject.set(x, "orgs/remove-saml-sso-authorization", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashremove-security-manager-team`(value: ParametersPathTeamslugStringResponses): Self = StObject.set(x, "orgs/remove-security-manager-team", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashset-membership-for-user`(value: Responses200ContentApplicationjsonOrganizationOrganizationurl403Content55): Self = StObject.set(x, "orgs/set-membership-for-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashset-public-membership-for-authenticated-user`(value: Responses464): Self = StObject.set(x, "orgs/set-public-membership-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashunblock-user`(value: ParametersPathUsernameStringResponses): Self = StObject.set(x, "orgs/unblock-user", value.asInstanceOf[js.Any])
      
      inline def setOrgsSlashupdate(value: Responses409Content55): Self = StObject.set(x, "orgs/update", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashupdate-custom-role`(value: Responses200ContentApplicationjsonBaseroleCreatedat): Self = StObject.set(x, "orgs/update-custom-role", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashupdate-membership-for-authenticated-user`(value: Responses200ContentApplicationjsonOrganizationOrganizationurl403Content55404Content55): Self = StObject.set(x, "orgs/update-membership-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashupdate-webhook`(value: RequestBodyContentApplicationjsonConfigEvents): Self = StObject.set(x, "orgs/update-webhook", value.asInstanceOf[js.Any])
      
      inline def `setOrgsSlashupdate-webhook-config-for-org`(value: ParametersPathHookidOrgRequestBodyContentApplicationjsonContenttypeInsecuressl): Self = StObject.set(x, "orgs/update-webhook-config-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-for-authenticated-user`(value: ParametersPathPackagenameStringResponses401Content55403Content55): Self = StObject.set(x, "packages/delete-package-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-for-org`(value: Responses401Content55403Content55): Self = StObject.set(x, "packages/delete-package-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-for-user`(value: ParametersPathPackagenamePackagetypeUsernameResponses401Content55403Content55): Self = StObject.set(x, "packages/delete-package-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-version-for-authenticated-user`(value: ParametersPathPackageversionidNumberResponses401Content55403Content55): Self = StObject.set(x, "packages/delete-package-version-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-version-for-org`(value: ParametersPathOrgPackagenamePackagetypeResponses401Content55403Content55): Self = StObject.set(x, "packages/delete-package-version-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashdelete-package-version-for-user`(value: ParametersPathPackagenamePackagetypePackageversionidUsername): Self = StObject.set(x, "packages/delete-package-version-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-all-package-versions-for-package-owned-by-authenticated-user`(value: ParametersPathPackagenameStringQuery471): Self = StObject.set(x, "packages/get-all-package-versions-for-package-owned-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-all-package-versions-for-package-owned-by-org`(value: ParametersQuery471): Self = StObject.set(x, "packages/get-all-package-versions-for-package-owned-by-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-all-package-versions-for-package-owned-by-user`(value: Responses200Content472): Self = StObject.set(x, "packages/get-all-package-versions-for-package-owned-by-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-for-authenticated-user`(value: ParametersPathPackagenameString): Self = StObject.set(x, "packages/get-package-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-for-organization`(value: ParametersPathOrgPackagename): Self = StObject.set(x, "packages/get-package-for-organization", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-for-user`(value: ParametersPathPackagenamePackagetypeUsername): Self = StObject.set(x, "packages/get-package-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-version-for-authenticated-user`(value: ParametersPathPackageversionidNumber): Self = StObject.set(x, "packages/get-package-version-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-version-for-organization`(value: ParametersPathOrgPackagenamePackagetype): Self = StObject.set(x, "packages/get-package-version-for-organization", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashget-package-version-for-user`(value: ParametersPathPackagetypePackageversionidUsername): Self = StObject.set(x, "packages/get-package-version-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashlist-packages-for-authenticated-user`(value: Parameters612): Self = StObject.set(x, "packages/list-packages-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashlist-packages-for-organization`(value: ParametersQueryPackagetypeVisibility): Self = StObject.set(x, "packages/list-packages-for-organization", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashlist-packages-for-user`(value: ParametersPath599QueryPackagetypeVisibility): Self = StObject.set(x, "packages/list-packages-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-for-authenticated-user`(value: ParametersPathPackagenameStringQueryToken): Self = StObject.set(x, "packages/restore-package-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-for-org`(value: ParametersPathOrgPackagenameQueryToken): Self = StObject.set(x, "packages/restore-package-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-for-user`(value: ParametersPathPackagenamePackagetypeUsernameQueryToken): Self = StObject.set(x, "packages/restore-package-for-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-version-for-authenticated-user`(value: ParametersPathPackageversionidNumberResponses401Content55403Content55): Self = StObject.set(x, "packages/restore-package-version-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-version-for-org`(value: ParametersPathOrgPackagenamePackagetypeResponses401Content55403Content55): Self = StObject.set(x, "packages/restore-package-version-for-org", value.asInstanceOf[js.Any])
      
      inline def `setPackagesSlashrestore-package-version-for-user`(value: ParametersPathPackagenamePackagetypePackageversionidUsername): Self = StObject.set(x, "packages/restore-package-version-for-user", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashadd-collaborator`(value: ParametersPathProjectidNumberUsernameString): Self = StObject.set(x, "projects/add-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-card`(value: Responses304401403422503): Self = StObject.set(x, "projects/create-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-column`(value: Responses201ContentApplicationjsonCardsurl): Self = StObject.set(x, "projects/create-column", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-for-authenticated-user`(value: Responses201ContentApplicationjsonOwnerurl): Self = StObject.set(x, "projects/create-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-for-org`(value: Responses201401403): Self = StObject.set(x, "projects/create-for-org", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashcreate-for-repo`(value: Parameters491RequestBodyContentApplicationjsonBodyName): Self = StObject.set(x, "projects/create-for-repo", value.asInstanceOf[js.Any])
      
      inline def setProjectsSlashdelete(value: Responses304401403404410): Self = StObject.set(x, "projects/delete", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashdelete-card`(value: Responses401Content55403ContentApplicationjsonErrors): Self = StObject.set(x, "projects/delete-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashdelete-column`(value: ParametersPathColumnidNumberResponses304Unknown401Content55): Self = StObject.set(x, "projects/delete-column", value.asInstanceOf[js.Any])
      
      inline def setProjectsSlashget(value: ParametersPathProjectidNumber): Self = StObject.set(x, "projects/get", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashget-card`(value: ParametersPathCardidNumber): Self = StObject.set(x, "projects/get-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashget-column`(value: ParametersPathColumnidNumber): Self = StObject.set(x, "projects/get-column", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashget-permission-for-user`(value: Responses200ContentApplicationjsonPermissionString): Self = StObject.set(x, "projects/get-permission-for-user", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-cards`(value: ParametersQueryArchivedstatePage): Self = StObject.set(x, "projects/list-cards", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-collaborators`(value: ParametersQueryAffiliationPagePerpage): Self = StObject.set(x, "projects/list-collaborators", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-columns`(value: ParametersPathProjectidNumberQuery426): Self = StObject.set(x, "projects/list-columns", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-for-org`(value: ParametersQuery473): Self = StObject.set(x, "projects/list-for-org", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-for-repo`(value: ParametersPathOwnerStringQuery473): Self = StObject.set(x, "projects/list-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashlist-for-user`(value: ParametersPath599Query473): Self = StObject.set(x, "projects/list-for-user", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashmove-card`(value: Responses401403422503): Self = StObject.set(x, "projects/move-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashmove-column`(value: Responses201Content47304Unknown): Self = StObject.set(x, "projects/move-column", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashremove-collaborator`(value: Responses304Unknown401Content55403Content55): Self = StObject.set(x, "projects/remove-collaborator", value.asInstanceOf[js.Any])
      
      inline def setProjectsSlashupdate(value: Responses401403404410422): Self = StObject.set(x, "projects/update", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashupdate-card`(value: Responses200ContentApplicationjsonColumnurl304Unknown): Self = StObject.set(x, "projects/update-card", value.asInstanceOf[js.Any])
      
      inline def `setProjectsSlashupdate-column`(value: Responses200ContentApplicationjsonCardsurl304Unknown): Self = StObject.set(x, "projects/update-column", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashcheck-if-merged`(value: ParametersPathPullnumberRepoResponses404Unknown): Self = StObject.set(x, "pulls/check-if-merged", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashcreate(value: Responses201ContentApplicationjsonMergeable): Self = StObject.set(x, "pulls/create", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashcreate-reply-for-review-comment`(value: ParametersPathCommentidOwnerPullnumber): Self = StObject.set(x, "pulls/create-reply-for-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashcreate-review`(value: Responses200ContentApplicationjsonBodytextCommitid): Self = StObject.set(x, "pulls/create-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashcreate-review-comment`(value: Responses201ContentApplicationjsonInreplytoidHeadersLocation): Self = StObject.set(x, "pulls/create-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashdelete-pending-review`(value: Responses200ContentApplicationjsonBodytextCommitid404Content55422Content418): Self = StObject.set(x, "pulls/delete-pending-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashdelete-review-comment`(value: ParametersPathCommentidOwnerRepoResponses404Content55): Self = StObject.set(x, "pulls/delete-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashdismiss-review`(value: ParametersPathRepoReviewidRequestBodyContentApplicationjsonEvent): Self = StObject.set(x, "pulls/dismiss-review", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashget(value: ParametersPathPullnumberRepo): Self = StObject.set(x, "pulls/get", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashget-review`(value: ParametersPathRepoReviewid): Self = StObject.set(x, "pulls/get-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashget-review-comment`(value: Responses200ContentApplicationjsonInreplytoid): Self = StObject.set(x, "pulls/get-review-comment", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashlist(value: ParametersQueryBaseDirection): Self = StObject.set(x, "pulls/list", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-comments-for-review`(value: ParametersPathRepoReviewidQuery426): Self = StObject.set(x, "pulls/list-comments-for-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-commits`(value: ParametersPathPullnumberRepoQuery426): Self = StObject.set(x, "pulls/list-commits", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-files`(value: Responses422500503): Self = StObject.set(x, "pulls/list-files", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-requested-reviewers`(value: Responses200ContentApplicationjsonTeamsArrayUsersArray): Self = StObject.set(x, "pulls/list-requested-reviewers", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-review-comments`(value: ParametersPathPullnumberRepoQueryPerpageSinceSort): Self = StObject.set(x, "pulls/list-review-comments", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-review-comments-for-repo`(value: ParametersQueryDirectionPagePerpageSince): Self = StObject.set(x, "pulls/list-review-comments-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashlist-reviews`(value: Responses200Content569): Self = StObject.set(x, "pulls/list-reviews", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashmerge(value: Responses404405): Self = StObject.set(x, "pulls/merge", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashremove-requested-reviewers`(value: Responses200ContentApplicationjsonMergecommitsha): Self = StObject.set(x, "pulls/remove-requested-reviewers", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashrequest-reviewers`(value: Responses201ContentApplicationjsonMergecommitsha): Self = StObject.set(x, "pulls/request-reviewers", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashsubmit-review`(value: Responses200ContentApplicationjsonBodytextCommitid403Content55): Self = StObject.set(x, "pulls/submit-review", value.asInstanceOf[js.Any])
      
      inline def setPullsSlashupdate(value: Responses200567): Self = StObject.set(x, "pulls/update", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashupdate-branch`(value: Responses202ContentApplicationjsonUrl): Self = StObject.set(x, "pulls/update-branch", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashupdate-review`(value: Responses200ContentApplicationjsonBodytextCommitid422Content418): Self = StObject.set(x, "pulls/update-review", value.asInstanceOf[js.Any])
      
      inline def `setPullsSlashupdate-review-comment`(value: Responses566): Self = StObject.set(x, "pulls/update-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setRate-limitSlashget`(value: Responses200ContentApplicationjsonRateResources): Self = StObject.set(x, "rate-limit/get", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-commit-comment`(value: Responses201ContentApplicationjsonNodeidUser): Self = StObject.set(x, "reactions/create-for-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-issue`(value: ParametersPathIssuenumberOwnerRepoRequestBodyContentApplicationjson121): Self = StObject.set(x, "reactions/create-for-issue", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-issue-comment`(value: Responses201ContentApplicationjsonNodeidUser): Self = StObject.set(x, "reactions/create-for-issue-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-pull-request-review-comment`(value: Responses201ContentApplicationjsonNodeidUser): Self = StObject.set(x, "reactions/create-for-pull-request-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-release`(value: ParametersPathOwnerReleaseidRequestBodyContentApplicationjson326): Self = StObject.set(x, "reactions/create-for-release", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-team-discussion-comment-in-org`(value: Responses200ContentApplicationjsonNodeidUser): Self = StObject.set(x, "reactions/create-for-team-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-team-discussion-comment-legacy`(value: Responses597): Self = StObject.set(x, "reactions/create-for-team-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-team-discussion-in-org`(value: ParametersPathDiscussionnumberOrgTeamslugRequestBodyContentApplicationjson121): Self = StObject.set(x, "reactions/create-for-team-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashcreate-for-team-discussion-legacy`(value: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjson121): Self = StObject.set(x, "reactions/create-for-team-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-commit-comment`(value: ParametersPathReactionidRepo): Self = StObject.set(x, "reactions/delete-for-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-issue`(value: ParametersPathIssuenumberOwnerReactionid): Self = StObject.set(x, "reactions/delete-for-issue", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-issue-comment`(value: ParametersPathReactionidRepo): Self = StObject.set(x, "reactions/delete-for-issue-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-pull-request-comment`(value: ParametersPathReactionidRepo): Self = StObject.set(x, "reactions/delete-for-pull-request-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-release`(value: ParametersPathReleaseidRepo): Self = StObject.set(x, "reactions/delete-for-release", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-team-discussion`(value: ParametersPathReactionidTeamslug): Self = StObject.set(x, "reactions/delete-for-team-discussion", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashdelete-for-team-discussion-comment`(value: ParametersPathOrgReactionid): Self = StObject.set(x, "reactions/delete-for-team-discussion-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-commit-comment`(value: ParametersPathCommentidOwnerRepoQuery481): Self = StObject.set(x, "reactions/list-for-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-issue`(value: ParametersPathIssuenumberOwnerRepoQuery481): Self = StObject.set(x, "reactions/list-for-issue", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-issue-comment`(value: ParametersPathCommentidOwnerRepoQuery481): Self = StObject.set(x, "reactions/list-for-issue-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-pull-request-review-comment`(value: ParametersPathCommentidOwnerRepoQuery481): Self = StObject.set(x, "reactions/list-for-pull-request-review-comment", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-release`(value: ParametersQuery574): Self = StObject.set(x, "reactions/list-for-release", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-team-discussion-comment-in-org`(value: ParametersQuery481): Self = StObject.set(x, "reactions/list-for-team-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-team-discussion-comment-legacy`(value: ParametersPathCommentnumberDiscussionnumberTeamidQuery481): Self = StObject.set(x, "reactions/list-for-team-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-team-discussion-in-org`(value: ParametersPathDiscussionnumberOrgTeamslugQuery481): Self = StObject.set(x, "reactions/list-for-team-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReactionsSlashlist-for-team-discussion-legacy`(value: ParametersPathDiscussionnumberNumberQuery481): Self = StObject.set(x, "reactions/list-for-team-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashaccept-invitation-for-authenticated-user`(value: ParametersPathInvitationidNumber): Self = StObject.set(x, "repos/accept-invitation-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-app-access-restrictions`(value: Responses200Content510422Content421): Self = StObject.set(x, "repos/add-app-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-collaborator`(value: Responses201ContentApplicationjsonInvitee): Self = StObject.set(x, "repos/add-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-status-check-contexts`(value: Responses200Content48403Content55): Self = StObject.set(x, "repos/add-status-check-contexts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-team-access-restrictions`(value: Responses200511422Content421): Self = StObject.set(x, "repos/add-team-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashadd-user-access-restrictions`(value: Responses200Content454422Content421): Self = StObject.set(x, "repos/add-user-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcheck-collaborator`(value: ParametersPathOwnerRepoUsername): Self = StObject.set(x, "repos/check-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcheck-vulnerability-alerts`(value: Parameters491Responses404Unknown): Self = StObject.set(x, "repos/check-vulnerability-alerts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcodeowners-errors`(value: ParametersPathOwnerStringQuery197): Self = StObject.set(x, "repos/codeowners-errors", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcompare-commits`(value: ParametersPathHeadOwner): Self = StObject.set(x, "repos/compare-commits", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcompare-commits-with-basehead`(value: ParametersPathBaseheadOwner): Self = StObject.set(x, "repos/compare-commits-with-basehead", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-autolink`(value: Responses201ContentApplicationjsonKeyprefix): Self = StObject.set(x, "repos/create-autolink", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-commit-comment`(value: Responses201ContentApplicationjsonAuthorassociationBodyHeadersLocation): Self = StObject.set(x, "repos/create-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-commit-signature-protection`(value: Responses200ContentApplicationjsonEnabledUrl404Content55): Self = StObject.set(x, "repos/create-commit-signature-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-commit-status`(value: ParametersPathOwnerRepoSha): Self = StObject.set(x, "repos/create-commit-status", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-deploy-key`(value: Responses201ContentApplicationjsonAddedby): Self = StObject.set(x, "repos/create-deploy-key", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-deployment`(value: Responses202409422): Self = StObject.set(x, "repos/create-deployment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-deployment-branch-policy`(value: Responses200ContentApplicationjsonNameNodeid): Self = StObject.set(x, "repos/create-deployment-branch-policy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-deployment-status`(value: Responses201ContentApplicationjsonEnvironmenturl): Self = StObject.set(x, "repos/create-deployment-status", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-dispatch-event`(value: Parameters491RequestBodyContentApplicationjsonClientpayload): Self = StObject.set(x, "repos/create-dispatch-event", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-for-authenticated-user`(value: Responses304400401): Self = StObject.set(x, "repos/create-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-fork`(value: Responses202400403): Self = StObject.set(x, "repos/create-fork", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-in-org`(value: Responses201ContentApplicationjsonAllowupdatebranch): Self = StObject.set(x, "repos/create-in-org", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-or-update-environment`(value: RequestBodyContent531): Self = StObject.set(x, "repos/create-or-update-environment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-or-update-file-contents`(value: Parameters525): Self = StObject.set(x, "repos/create-or-update-file-contents", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-pages-deployment`(value: Responses400404422): Self = StObject.set(x, "repos/create-pages-deployment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-pages-site`(value: Responses201409422): Self = StObject.set(x, "repos/create-pages-site", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-release`(value: Responses201ContentApplicationjsonAssetsurl): Self = StObject.set(x, "repos/create-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-tag-protection`(value: Responses201ContentApplicationjsonCreatedatEnabled): Self = StObject.set(x, "repos/create-tag-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-using-template`(value: RequestBodyContentApplicationjsonIncludeallbranches): Self = StObject.set(x, "repos/create-using-template", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashcreate-webhook`(value: RequestBodyContent540): Self = StObject.set(x, "repos/create-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdecline-invitation-for-authenticated-user`(value: ParametersPathInvitationidNumber): Self = StObject.set(x, "repos/decline-invitation-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setReposSlashdelete(value: Responses307403): Self = StObject.set(x, "repos/delete", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-access-restrictions`(value: ParametersPathBranchOwnerResponses): Self = StObject.set(x, "repos/delete-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-admin-branch-protection`(value: ParametersPathBranchOwnerResponses404Content55): Self = StObject.set(x, "repos/delete-admin-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-an-environment`(value: ParametersPathEnvironmentnameOwnerResponses): Self = StObject.set(x, "repos/delete-an-environment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-autolink`(value: ParametersPathAutolinkidOwnerResponses404Content55): Self = StObject.set(x, "repos/delete-autolink", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-branch-protection`(value: ParametersPathBranchOwnerResponses464): Self = StObject.set(x, "repos/delete-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-commit-comment`(value: ParametersPathCommentidOwnerRepoResponses404Content55): Self = StObject.set(x, "repos/delete-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-commit-signature-protection`(value: ParametersPathBranchOwnerResponses404Content55): Self = StObject.set(x, "repos/delete-commit-signature-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-deploy-key`(value: ParametersPathKeyidOwnerRepoResponses): Self = StObject.set(x, "repos/delete-deploy-key", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-deployment`(value: Responses404Content55422Content418): Self = StObject.set(x, "repos/delete-deployment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-deployment-branch-policy`(value: ParametersPathBranchpolicyidEnvironmentnameResponses): Self = StObject.set(x, "repos/delete-deployment-branch-policy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-file`(value: Responses200404409): Self = StObject.set(x, "repos/delete-file", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-invitation`(value: ParametersPathInvitationidOwnerRepo): Self = StObject.set(x, "repos/delete-invitation", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-pages-site`(value: Responses404Content55422Content421): Self = StObject.set(x, "repos/delete-pages-site", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-pull-request-review-protection`(value: ParametersPathBranchOwnerResponses404Content55): Self = StObject.set(x, "repos/delete-pull-request-review-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-release`(value: ParametersPathOwnerReleaseidResponses): Self = StObject.set(x, "repos/delete-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-release-asset`(value: ParametersPathAssetidOwnerResponses): Self = StObject.set(x, "repos/delete-release-asset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-tag-protection`(value: ParametersPathRepoTagprotectionid): Self = StObject.set(x, "repos/delete-tag-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdelete-webhook`(value: ParametersPathHookidOwnerRepoResponses404Content55): Self = StObject.set(x, "repos/delete-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdisable-automated-security-fixes`(value: Parameters491Responses): Self = StObject.set(x, "repos/disable-automated-security-fixes", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdisable-lfs-for-repo`(value: Parameters491Responses): Self = StObject.set(x, "repos/disable-lfs-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdisable-vulnerability-alerts`(value: Parameters491Responses): Self = StObject.set(x, "repos/disable-vulnerability-alerts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdownload-tarball-archive`(value: Parameters535Responses): Self = StObject.set(x, "repos/download-tarball-archive", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashdownload-zipball-archive`(value: Parameters535Responses): Self = StObject.set(x, "repos/download-zipball-archive", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashenable-automated-security-fixes`(value: Parameters491Responses): Self = StObject.set(x, "repos/enable-automated-security-fixes", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashenable-lfs-for-repo`(value: Responses202Content47403Unknown): Self = StObject.set(x, "repos/enable-lfs-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashenable-vulnerability-alerts`(value: Parameters491Responses): Self = StObject.set(x, "repos/enable-vulnerability-alerts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashgenerate-release-notes`(value: Responses200ContentApplicationjsonBodyString): Self = StObject.set(x, "repos/generate-release-notes", value.asInstanceOf[js.Any])
      
      inline def setReposSlashget(value: Parameters491): Self = StObject.set(x, "repos/get", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-access-restrictions`(value: Responses200ContentApplicationjsonAppsurl): Self = StObject.set(x, "repos/get-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-admin-branch-protection`(value: Responses200ContentApplicationjsonEnabledUrl): Self = StObject.set(x, "repos/get-admin-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-all-environments`(value: Responses200ContentApplicationjsonEnvironmentsTotalcount): Self = StObject.set(x, "repos/get-all-environments", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-all-status-check-contexts`(value: Responses200Content48404Content55): Self = StObject.set(x, "repos/get-all-status-check-contexts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-all-topics`(value: ParametersPathOwnerStringQuery451): Self = StObject.set(x, "repos/get-all-topics", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-apps-with-access-to-protected-branch`(value: Responses200Content510): Self = StObject.set(x, "repos/get-apps-with-access-to-protected-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-autolink`(value: ParametersPathAutolinkidOwner): Self = StObject.set(x, "repos/get-autolink", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-branch`(value: ParametersPathBranchOwner): Self = StObject.set(x, "repos/get-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-branch-protection`(value: Responses200ContentApplicationjsonBlockcreations): Self = StObject.set(x, "repos/get-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-clones`(value: ParametersQuery585): Self = StObject.set(x, "repos/get-clones", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-code-frequency-stats`(value: Responses200Content579): Self = StObject.set(x, "repos/get-code-frequency-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-collaborator-permission-level`(value: Responses200ContentApplicationjsonPermissionRolename): Self = StObject.set(x, "repos/get-collaborator-permission-level", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-combined-status-for-ref`(value: ParametersPathOwnerRefRepoQuery426): Self = StObject.set(x, "repos/get-combined-status-for-ref", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-commit`(value: ParametersPathOwnerRefRepo): Self = StObject.set(x, "repos/get-commit", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-commit-activity-stats`(value: Responses200Content580): Self = StObject.set(x, "repos/get-commit-activity-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-commit-comment`(value: ParametersPathCommentidOwnerRepo): Self = StObject.set(x, "repos/get-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-commit-signature-protection`(value: Responses200ContentApplicationjsonEnabledUrl404Content55): Self = StObject.set(x, "repos/get-commit-signature-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-community-profile-metrics`(value: Responses200ContentApplicationjsonDocumentation): Self = StObject.set(x, "repos/get-community-profile-metrics", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-content`(value: ParametersPathOwnerPathRepo): Self = StObject.set(x, "repos/get-content", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-contributors-stats`(value: Responses200Content581): Self = StObject.set(x, "repos/get-contributors-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-deploy-key`(value: ParametersPathKeyidOwnerRepo): Self = StObject.set(x, "repos/get-deploy-key", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-deployment`(value: ParametersPathDeploymentidOwner): Self = StObject.set(x, "repos/get-deployment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-deployment-branch-policy`(value: ParametersPathBranchpolicyidEnvironmentname): Self = StObject.set(x, "repos/get-deployment-branch-policy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-deployment-status`(value: ParametersPathRepoStatusid): Self = StObject.set(x, "repos/get-deployment-status", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-environment`(value: ParametersPathEnvironmentnameOwner): Self = StObject.set(x, "repos/get-environment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-latest-pages-build`(value: Responses200ContentApplicationjsonPusher): Self = StObject.set(x, "repos/get-latest-pages-build", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-latest-release`(value: Responses200572): Self = StObject.set(x, "repos/get-latest-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-pages`(value: Responses200ContentApplicationjsonCustom404): Self = StObject.set(x, "repos/get-pages", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-pages-build`(value: ParametersPathBuildidOwner): Self = StObject.set(x, "repos/get-pages-build", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-pages-health-check`(value: Responses200202400): Self = StObject.set(x, "repos/get-pages-health-check", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-participation-stats`(value: Responses200ContentApplicationjsonAllOwner): Self = StObject.set(x, "repos/get-participation-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-pull-request-review-protection`(value: Responses200ContentApplicationjsonDismissstalereviews): Self = StObject.set(x, "repos/get-pull-request-review-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-punch-card-stats`(value: Responses204Unknown): Self = StObject.set(x, "repos/get-punch-card-stats", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-readme`(value: Responses200ContentApplicationjsonSubmodulegiturl): Self = StObject.set(x, "repos/get-readme", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-readme-in-directory`(value: ParametersPathDirOwner): Self = StObject.set(x, "repos/get-readme-in-directory", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-release`(value: ParametersPathOwnerReleaseid): Self = StObject.set(x, "repos/get-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-release-asset`(value: ParametersPathAssetidOwner): Self = StObject.set(x, "repos/get-release-asset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-release-by-tag`(value: ParametersPathRepoTag): Self = StObject.set(x, "repos/get-release-by-tag", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-status-checks-protection`(value: Responses200ContentApplicationjsonStrict): Self = StObject.set(x, "repos/get-status-checks-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-teams-with-access-to-protected-branch`(value: Responses200511): Self = StObject.set(x, "repos/get-teams-with-access-to-protected-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-top-paths`(value: Responses200Content586): Self = StObject.set(x, "repos/get-top-paths", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-top-referrers`(value: Responses200Content587): Self = StObject.set(x, "repos/get-top-referrers", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-users-with-access-to-protected-branch`(value: Responses200Content454404Content55): Self = StObject.set(x, "repos/get-users-with-access-to-protected-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-views`(value: Responses200ContentApplicationjsonCountUniques): Self = StObject.set(x, "repos/get-views", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-webhook`(value: ParametersPathHookidOwnerRepo): Self = StObject.set(x, "repos/get-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-webhook-config-for-repo`(value: ParametersPathHookidOwnerRepoResponses200ContentApplicationjsonContenttype): Self = StObject.set(x, "repos/get-webhook-config-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashget-webhook-delivery`(value: ParametersPathDeliveryidHookidOwnerRepo): Self = StObject.set(x, "repos/get-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-autolinks`(value: ParametersQuery506): Self = StObject.set(x, "repos/list-autolinks", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-branches`(value: ParametersQueryPerpageProtected): Self = StObject.set(x, "repos/list-branches", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-branches-for-head-commit`(value: ParametersPathCommitshaOwner): Self = StObject.set(x, "repos/list-branches-for-head-commit", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-collaborators`(value: ParametersQueryPagePermission): Self = StObject.set(x, "repos/list-collaborators", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-comments-for-commit`(value: ParametersPathCommitshaOwnerQuery426): Self = StObject.set(x, "repos/list-comments-for-commit", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-commit-comments-for-repo`(value: Responses200Content520): Self = StObject.set(x, "repos/list-commit-comments-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-commit-statuses-for-ref`(value: Responses200Content524): Self = StObject.set(x, "repos/list-commit-statuses-for-ref", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-commits`(value: ParametersQueryUntil): Self = StObject.set(x, "repos/list-commits", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-contributors`(value: ParametersQueryAnonPage): Self = StObject.set(x, "repos/list-contributors", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-deploy-keys`(value: Responses200Content554): Self = StObject.set(x, "repos/list-deploy-keys", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-deployment-branch-policies`(value: ParametersPathEnvironmentnameOwnerQuery426): Self = StObject.set(x, "repos/list-deployment-branch-policies", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-deployment-statuses`(value: ParametersPathDeploymentidOwnerQuery426): Self = StObject.set(x, "repos/list-deployment-statuses", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-deployments`(value: ParametersQueryTask): Self = StObject.set(x, "repos/list-deployments", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-for-authenticated-user`(value: ParametersQueryTypeVisibility): Self = StObject.set(x, "repos/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-for-org`(value: ParametersQueryPerpageSortType): Self = StObject.set(x, "repos/list-for-org", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-for-user`(value: ParametersQueryPagePerpageSortType): Self = StObject.set(x, "repos/list-for-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-forks`(value: ParametersQuery533): Self = StObject.set(x, "repos/list-forks", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-invitations`(value: Responses200Content546): Self = StObject.set(x, "repos/list-invitations", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-invitations-for-authenticated-user`(value: Responses200Content546304Unknown): Self = StObject.set(x, "repos/list-invitations-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-languages`(value: Responses200Content558): Self = StObject.set(x, "repos/list-languages", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-pages-builds`(value: Responses200Content564): Self = StObject.set(x, "repos/list-pages-builds", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-public`(value: Parameters589): Self = StObject.set(x, "repos/list-public", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-pull-requests-associated-with-commit`(value: Responses200Content523): Self = StObject.set(x, "repos/list-pull-requests-associated-with-commit", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-release-assets`(value: ParametersPathOwnerReleaseidQuery426): Self = StObject.set(x, "repos/list-release-assets", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-releases`(value: Responses200Content571): Self = StObject.set(x, "repos/list-releases", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-tag-protection`(value: Responses200Content584): Self = StObject.set(x, "repos/list-tag-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-tags`(value: Responses200Content583): Self = StObject.set(x, "repos/list-tags", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-teams`(value: ParametersPathOwnerStringResponses488): Self = StObject.set(x, "repos/list-teams", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-webhook-deliveries`(value: ParametersPathHookidOwnerRepoQueryCursorPerpage): Self = StObject.set(x, "repos/list-webhook-deliveries", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashlist-webhooks`(value: Responses200Content539): Self = StObject.set(x, "repos/list-webhooks", value.asInstanceOf[js.Any])
      
      inline def setReposSlashmerge(value: Responses403404409422): Self = StObject.set(x, "repos/merge", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashmerge-upstream`(value: Responses200ContentApplicationjsonBasebranch): Self = StObject.set(x, "repos/merge-upstream", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashping-webhook`(value: ParametersPathHookidOwnerRepoResponses404Content55): Self = StObject.set(x, "repos/ping-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashredeliver-webhook-delivery`(value: ParametersPathDeliveryidHookidOwnerRepoResponses202400422): Self = StObject.set(x, "repos/redeliver-webhook-delivery", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-app-access-restrictions`(value: Responses200Content510422Content421): Self = StObject.set(x, "repos/remove-app-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-collaborator`(value: ParametersPathOwnerRepoUsernameResponses): Self = StObject.set(x, "repos/remove-collaborator", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-status-check-contexts`(value: Responses200Content48404Content55422Content421): Self = StObject.set(x, "repos/remove-status-check-contexts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-status-check-protection`(value: ParametersPathBranchOwnerResponses): Self = StObject.set(x, "repos/remove-status-check-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-team-access-restrictions`(value: Responses200511422Content421): Self = StObject.set(x, "repos/remove-team-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashremove-user-access-restrictions`(value: Responses200Content454422Content421): Self = StObject.set(x, "repos/remove-user-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashrename-branch`(value: Responses201ContentApplicationjsonProtectionurl): Self = StObject.set(x, "repos/rename-branch", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashreplace-all-topics`(value: Responses200ContentApplicationjsonNames404Content55): Self = StObject.set(x, "repos/replace-all-topics", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashrequest-pages-build`(value: Responses201ContentApplicationjsonStatusUrl): Self = StObject.set(x, "repos/request-pages-build", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-admin-branch-protection`(value: Responses200ContentApplicationjsonEnabledUrl): Self = StObject.set(x, "repos/set-admin-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-app-access-restrictions`(value: Responses200Content510422Content421): Self = StObject.set(x, "repos/set-app-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-status-check-contexts`(value: Responses200Content48404Content55422Content421): Self = StObject.set(x, "repos/set-status-check-contexts", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-team-access-restrictions`(value: Responses200511422Content421): Self = StObject.set(x, "repos/set-team-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashset-user-access-restrictions`(value: Responses200Content454422Content421): Self = StObject.set(x, "repos/set-user-access-restrictions", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashtest-push-webhook`(value: ParametersPathHookidOwnerRepoResponses404Content55): Self = StObject.set(x, "repos/test-push-webhook", value.asInstanceOf[js.Any])
      
      inline def setReposSlashtransfer(value: Responses202ContentApplicationjsonBranchesurl): Self = StObject.set(x, "repos/transfer", value.asInstanceOf[js.Any])
      
      inline def setReposSlashupdate(value: Responses200307403): Self = StObject.set(x, "repos/update", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-branch-protection`(value: Responses200ContentApplicationjsonRequiredconversationresolution): Self = StObject.set(x, "repos/update-branch-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-commit-comment`(value: Responses200ContentApplicationjsonAuthorassociationBody): Self = StObject.set(x, "repos/update-commit-comment", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-deployment-branch-policy`(value: Responses532): Self = StObject.set(x, "repos/update-deployment-branch-policy", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-information-about-pages-site`(value: Responses400Content420422Content421): Self = StObject.set(x, "repos/update-information-about-pages-site", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-invitation`(value: Responses200ContentApplicationjsonInvitee): Self = StObject.set(x, "repos/update-invitation", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-pull-request-review-protection`(value: Responses200ContentApplicationjsonDismissstalereviews422Content421): Self = StObject.set(x, "repos/update-pull-request-review-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-release`(value: Responses200572404ContentApplicationjsonDocumentationurlMessage): Self = StObject.set(x, "repos/update-release", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-release-asset`(value: Responses200ContentApplicationjsonDownloadcount): Self = StObject.set(x, "repos/update-release-asset", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-status-check-protection`(value: Responses200ContentApplicationjsonStrict404Content55): Self = StObject.set(x, "repos/update-status-check-protection", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-webhook`(value: RequestBodyContentApplicationjsonRemoveevents): Self = StObject.set(x, "repos/update-webhook", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupdate-webhook-config-for-repo`(value: ParametersPathHookidOwnerRepoRequestBodyContentApplicationjsonContenttypeInsecuressl): Self = StObject.set(x, "repos/update-webhook-config-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setReposSlashupload-release-asset`(value: ParametersPathOwnerReleaseidQueryLabelName): Self = StObject.set(x, "repos/upload-release-asset", value.asInstanceOf[js.Any])
      
      inline def `setScimSlashdelete-user-from-org`(value: Responses403Content592): Self = StObject.set(x, "scim/delete-user-from-org", value.asInstanceOf[js.Any])
      
      inline def `setScimSlashget-provisioning-information-for-user`(value: ParametersPathScimuseridString): Self = StObject.set(x, "scim/get-provisioning-information-for-user", value.asInstanceOf[js.Any])
      
      inline def `setScimSlashlist-provisioned-identities`(value: ParametersPathOrgStringQueryCountFilter): Self = StObject.set(x, "scim/list-provisioned-identities", value.asInstanceOf[js.Any])
      
      inline def `setScimSlashprovision-and-invite-user`(value: Responses304400403): Self = StObject.set(x, "scim/provision-and-invite-user", value.asInstanceOf[js.Any])
      
      inline def `setScimSlashset-information-for-provisioned-user`(value: Responses200ContentApplicationscimjsonActiveDisplayName): Self = StObject.set(x, "scim/set-information-for-provisioned-user", value.asInstanceOf[js.Any])
      
      inline def `setScimSlashupdate-attribute-for-user`(value: Responses400403404): Self = StObject.set(x, "scim/update-attribute-for-user", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashcode(value: ParametersQueryPerpageQSort): Self = StObject.set(x, "search/code", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashcommits(value: ParametersQueryOrderPagePerpageQ): Self = StObject.set(x, "search/commits", value.asInstanceOf[js.Any])
      
      inline def `setSearchSlashissues-and-pull-requests`(value: ParametersQueryPagePerpageQSort): Self = StObject.set(x, "search/issues-and-pull-requests", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashlabels(value: ParametersQueryQRepositoryid): Self = StObject.set(x, "search/labels", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashrepos(value: ParametersQueryOrderPagePerpageQSort): Self = StObject.set(x, "search/repos", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashtopics(value: ParametersQueryQString): Self = StObject.set(x, "search/topics", value.asInstanceOf[js.Any])
      
      inline def setSearchSlashusers(value: ParametersQueryPerpageQString): Self = StObject.set(x, "search/users", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashget-alert`(value: Responses200304404503): Self = StObject.set(x, "secret-scanning/get-alert", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashlist-alerts-for-enterprise`(value: ParametersQuerySecrettype): Self = StObject.set(x, "secret-scanning/list-alerts-for-enterprise", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashlist-alerts-for-org`(value: ParametersQueryBeforeDirection): Self = StObject.set(x, "secret-scanning/list-alerts-for-org", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashlist-alerts-for-repo`(value: ParametersPathOwnerStringQueryBeforeDirection): Self = StObject.set(x, "secret-scanning/list-alerts-for-repo", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashlist-locations-for-alert`(value: ParametersPathAlertnumberOwnerQuery451): Self = StObject.set(x, "secret-scanning/list-locations-for-alert", value.asInstanceOf[js.Any])
      
      inline def `setSecret-scanningSlashupdate-alert`(value: RequestBodyContentApplicationjson576): Self = StObject.set(x, "secret-scanning/update-alert", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-member-legacy`(value: Responses403Content55404Unknown): Self = StObject.set(x, "teams/add-member-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-membership-for-user-in-org`(value: Responses200ContentApplicationjsonRoleState403Unknown): Self = StObject.set(x, "teams/add-or-update-membership-for-user-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-membership-for-user-legacy`(value: Responses403Unknown404Content55): Self = StObject.set(x, "teams/add-or-update-membership-for-user-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-project-permissions-in-org`(value: Responses403ContentApplicationjsonDocumentationurl): Self = StObject.set(x, "teams/add-or-update-project-permissions-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-project-permissions-legacy`(value: Responses403ContentApplicationjsonDocumentationurl404Content55): Self = StObject.set(x, "teams/add-or-update-project-permissions-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-repo-permissions-in-org`(value: ParametersPathOrgOwnerRequestBodyContentApplicationjson131): Self = StObject.set(x, "teams/add-or-update-repo-permissions-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashadd-or-update-repo-permissions-legacy`(value: Responses403Content55422Content421): Self = StObject.set(x, "teams/add-or-update-repo-permissions-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcheck-permissions-for-project-in-org`(value: ParametersPathOrgProjectid): Self = StObject.set(x, "teams/check-permissions-for-project-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcheck-permissions-for-project-legacy`(value: ParametersPathProjectidNumberTeamidNumber): Self = StObject.set(x, "teams/check-permissions-for-project-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcheck-permissions-for-repo-in-org`(value: ParametersPathOrgOwner): Self = StObject.set(x, "teams/check-permissions-for-repo-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcheck-permissions-for-repo-legacy`(value: ParametersPathOwnerRepoTeamid): Self = StObject.set(x, "teams/check-permissions-for-repo-legacy", value.asInstanceOf[js.Any])
      
      inline def setTeamsSlashcreate(value: Responses201ContentApplicationjsonReposcount): Self = StObject.set(x, "teams/create", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-discussion-comment-in-org`(value: Responses201ContentApplicationjsonLasteditedat): Self = StObject.set(x, "teams/create-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-discussion-comment-legacy`(value: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjsonBody): Self = StObject.set(x, "teams/create-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-discussion-in-org`(value: Responses201ContentApplicationjsonCommentscount): Self = StObject.set(x, "teams/create-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-discussion-legacy`(value: ParametersPathTeamidNumberRequestBodyContentApplicationjsonPrivate): Self = StObject.set(x, "teams/create-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-or-update-idp-group-connections-in-org`(value: ParametersPathTeamslugStringRequestBodyContentApplicationjsonGroups): Self = StObject.set(x, "teams/create-or-update-idp-group-connections-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashcreate-or-update-idp-group-connections-legacy`(value: Responses200487403Content55422Content421): Self = StObject.set(x, "teams/create-or-update-idp-group-connections-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-discussion-comment-in-org`(value: ParametersPathCommentnumberDiscussionnumberOrgResponses): Self = StObject.set(x, "teams/delete-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-discussion-comment-legacy`(value: ParametersPathCommentnumberDiscussionnumberTeamidResponses): Self = StObject.set(x, "teams/delete-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-discussion-in-org`(value: ParametersPathDiscussionnumberOrgTeamslugResponses): Self = StObject.set(x, "teams/delete-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-discussion-legacy`(value: ParametersPathDiscussionnumberNumberResponses): Self = StObject.set(x, "teams/delete-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-in-org`(value: ParametersPathTeamslugStringResponses): Self = StObject.set(x, "teams/delete-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashdelete-legacy`(value: ParametersPathTeamidNumberResponses404Content55422Content421): Self = StObject.set(x, "teams/delete-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashexternal-idp-group-info-for-org`(value: ParametersPathGroupidOrg): Self = StObject.set(x, "teams/external-idp-group-info-for-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-by-name`(value: Responses200ContentApplicationjsonReposcount): Self = StObject.set(x, "teams/get-by-name", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-discussion-comment-in-org`(value: ParametersPathCommentnumberDiscussionnumberOrg): Self = StObject.set(x, "teams/get-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-discussion-comment-legacy`(value: ParametersPathCommentnumberDiscussionnumberTeamid): Self = StObject.set(x, "teams/get-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-discussion-in-org`(value: ParametersPathDiscussionnumberOrgTeamslug): Self = StObject.set(x, "teams/get-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-discussion-legacy`(value: ParametersPathDiscussionnumberNumber): Self = StObject.set(x, "teams/get-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-legacy`(value: ParametersPathTeamidNumber): Self = StObject.set(x, "teams/get-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-member-legacy`(value: ParametersPathTeamidNumberUsernameString): Self = StObject.set(x, "teams/get-member-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-membership-for-user-in-org`(value: ParametersPathTeamslugUsername): Self = StObject.set(x, "teams/get-membership-for-user-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashget-membership-for-user-legacy`(value: Responses200ContentApplicationjsonRoleState404Content55): Self = StObject.set(x, "teams/get-membership-for-user-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlink-external-idp-group-to-team-for-org`(value: Responses200ContentApplicationjsonMembers): Self = StObject.set(x, "teams/link-external-idp-group-to-team-for-org", value.asInstanceOf[js.Any])
      
      inline def setTeamsSlashlist(value: Responses200Content463403Content55): Self = StObject.set(x, "teams/list", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-child-in-org`(value: Responses488): Self = StObject.set(x, "teams/list-child-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-child-legacy`(value: Responses200Content463403Content55404Content55): Self = StObject.set(x, "teams/list-child-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-discussion-comments-in-org`(value: ParametersQuery479): Self = StObject.set(x, "teams/list-discussion-comments-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-discussion-comments-legacy`(value: ParametersPathDiscussionnumberNumberQuery479): Self = StObject.set(x, "teams/list-discussion-comments-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-discussions-in-org`(value: ParametersQueryPerpagePinned): Self = StObject.set(x, "teams/list-discussions-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-discussions-legacy`(value: ParametersPathTeamidNumberQuery479): Self = StObject.set(x, "teams/list-discussions-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-external-idp-groups-for-org`(value: ParametersQueryDisplaynamePage): Self = StObject.set(x, "teams/list-external-idp-groups-for-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-for-authenticated-user`(value: Responses200Content617): Self = StObject.set(x, "teams/list-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-idp-groups-for-legacy`(value: Responses200487403Content55): Self = StObject.set(x, "teams/list-idp-groups-for-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-idp-groups-for-org`(value: ParametersQuery477): Self = StObject.set(x, "teams/list-idp-groups-for-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-idp-groups-in-org`(value: Responses200487): Self = StObject.set(x, "teams/list-idp-groups-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-linked-external-idp-groups-to-team-for-org`(value: Responses200483): Self = StObject.set(x, "teams/list-linked-external-idp-groups-to-team-for-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-members-in-org`(value: ParametersQuery485): Self = StObject.set(x, "teams/list-members-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-members-legacy`(value: ParametersPathTeamidNumberQuery485): Self = StObject.set(x, "teams/list-members-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-pending-invitations-in-org`(value: ParametersPathTeamslugStringQuery426): Self = StObject.set(x, "teams/list-pending-invitations-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-pending-invitations-legacy`(value: ParametersPathTeamidNumberQuery426): Self = StObject.set(x, "teams/list-pending-invitations-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-projects-in-org`(value: Responses200Content486): Self = StObject.set(x, "teams/list-projects-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-projects-legacy`(value: Responses200Content486404Content55): Self = StObject.set(x, "teams/list-projects-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-repos-in-org`(value: Responses475): Self = StObject.set(x, "teams/list-repos-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashlist-repos-legacy`(value: Responses200Content467): Self = StObject.set(x, "teams/list-repos-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-member-legacy`(value: ParametersPathTeamidNumberUsernameString): Self = StObject.set(x, "teams/remove-member-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-membership-for-user-in-org`(value: ParametersPathTeamslugUsernameResponses126): Self = StObject.set(x, "teams/remove-membership-for-user-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-membership-for-user-legacy`(value: ParametersPathTeamidNumberUsernameStringResponses126): Self = StObject.set(x, "teams/remove-membership-for-user-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-project-in-org`(value: ParametersPathOrgProjectidResponses): Self = StObject.set(x, "teams/remove-project-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-project-legacy`(value: ParametersPathProjectidNumberTeamidNumberResponses404Content55422Content421): Self = StObject.set(x, "teams/remove-project-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-repo-in-org`(value: ParametersPathOrgOwnerResponses): Self = StObject.set(x, "teams/remove-repo-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashremove-repo-legacy`(value: ParametersPathOwnerRepoTeamidResponses): Self = StObject.set(x, "teams/remove-repo-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashunlink-external-idp-group-from-team-for-org`(value: ParametersPathTeamslugStringResponses): Self = StObject.set(x, "teams/unlink-external-idp-group-from-team-for-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-discussion-comment-in-org`(value: Responses200ContentApplicationjsonLasteditedat): Self = StObject.set(x, "teams/update-discussion-comment-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-discussion-comment-legacy`(value: ParametersPathCommentnumberDiscussionnumberTeamidRequestBodyContentApplicationjsonBody): Self = StObject.set(x, "teams/update-discussion-comment-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-discussion-in-org`(value: Responses200ContentApplicationjsonCommentscount): Self = StObject.set(x, "teams/update-discussion-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-discussion-legacy`(value: ParametersPathDiscussionnumberNumberRequestBodyContentApplicationjsonTitle): Self = StObject.set(x, "teams/update-discussion-legacy", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-in-org`(value: Responses200201403): Self = StObject.set(x, "teams/update-in-org", value.asInstanceOf[js.Any])
      
      inline def `setTeamsSlashupdate-legacy`(value: ParametersPathTeamidNumberRequestBodyContentApplicationjsonPrivacy): Self = StObject.set(x, "teams/update-legacy", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashadd-email-for-authenticated-user`(value: Responses201Content603): Self = StObject.set(x, "users/add-email-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashblock(value: ParametersPath599Responses304Unknown401Content55403Content55): Self = StObject.set(x, "users/block", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcheck-blocked`(value: ParametersPath599): Self = StObject.set(x, "users/check-blocked", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcheck-following-for-user`(value: ParametersPathTargetuserUsername): Self = StObject.set(x, "users/check-following-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcheck-person-is-followed-by-authenticated`(value: ParametersPath599): Self = StObject.set(x, "users/check-person-is-followed-by-authenticated", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcreate-gpg-key-for-authenticated-user`(value: Responses201ContentApplicationjsonCanencryptcomms): Self = StObject.set(x, "users/create-gpg-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcreate-public-ssh-key-for-authenticated-user`(value: Responses201ContentApplicationjsonIdKey): Self = StObject.set(x, "users/create-public-ssh-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashcreate-ssh-signing-key-for-authenticated-user`(value: Responses201ContentApplicationjsonCreatedatIdKey): Self = StObject.set(x, "users/create-ssh-signing-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashdelete-email-for-authenticated-user`(value: RequestBodyContentApplicationjsonEmailsArrayResponses304Unknown401Content55403Content55): Self = StObject.set(x, "users/delete-email-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashdelete-gpg-key-for-authenticated-user`(value: ParametersPathGpgkeyidNumberResponses304Unknown401Content55403Content55): Self = StObject.set(x, "users/delete-gpg-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashdelete-public-ssh-key-for-authenticated-user`(value: ParametersPathKeyidNumberResponses401Content55403Content55404Content55): Self = StObject.set(x, "users/delete-public-ssh-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashdelete-ssh-signing-key-for-authenticated-user`(value: ParametersPathSshsigningkeyidNumberResponses401Content55403Content55404Content55): Self = StObject.set(x, "users/delete-ssh-signing-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashfollow(value: Responses401Content55403Content55404Content55): Self = StObject.set(x, "users/follow", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-authenticated`(value: Responses200Content598): Self = StObject.set(x, "users/get-authenticated", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-by-username`(value: Responses200Content598404Content55): Self = StObject.set(x, "users/get-by-username", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-context-for-user`(value: ParametersPath599QuerySubjectid): Self = StObject.set(x, "users/get-context-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-gpg-key-for-authenticated-user`(value: ParametersPathGpgkeyidNumber): Self = StObject.set(x, "users/get-gpg-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-public-ssh-key-for-authenticated-user`(value: ParametersPathKeyidNumber): Self = StObject.set(x, "users/get-public-ssh-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashget-ssh-signing-key-for-authenticated-user`(value: ParametersPathSshsigningkeyidNumber): Self = StObject.set(x, "users/get-ssh-signing-key-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashlist(value: Responses200Content454HeadersLink): Self = StObject.set(x, "users/list", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-blocked-by-authenticated-user`(value: Responses200Content454304Unknown): Self = StObject.set(x, "users/list-blocked-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-emails-for-authenticated-user`(value: Responses200Content603Headers): Self = StObject.set(x, "users/list-emails-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-followed-by-authenticated-user`(value: Responses200Content454Headers304Unknown401Content55): Self = StObject.set(x, "users/list-followed-by-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-followers-for-authenticated-user`(value: Responses200Content454Headers304Unknown401Content55): Self = StObject.set(x, "users/list-followers-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-followers-for-user`(value: ParametersPath599Query426Responses469): Self = StObject.set(x, "users/list-followers-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-following-for-user`(value: ParametersPath599Query426Responses469): Self = StObject.set(x, "users/list-following-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-gpg-keys-for-authenticated-user`(value: Responses200Content604): Self = StObject.set(x, "users/list-gpg-keys-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-gpg-keys-for-user`(value: Responses618): Self = StObject.set(x, "users/list-gpg-keys-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-public-emails-for-authenticated-user`(value: Responses200Content603Headers): Self = StObject.set(x, "users/list-public-emails-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-public-keys-for-user`(value: Responses200Content619): Self = StObject.set(x, "users/list-public-keys-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-public-ssh-keys-for-authenticated-user`(value: Responses200Content607): Self = StObject.set(x, "users/list-public-ssh-keys-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-ssh-signing-keys-for-authenticated-user`(value: Responses200Content615): Self = StObject.set(x, "users/list-ssh-signing-keys-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashlist-ssh-signing-keys-for-user`(value: Responses621): Self = StObject.set(x, "users/list-ssh-signing-keys-for-user", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashset-primary-email-visibility-for-authenticated-user`(value: Responses200Content603): Self = StObject.set(x, "users/set-primary-email-visibility-for-authenticated-user", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashunblock(value: Responses401Content55403Content55404Content55): Self = StObject.set(x, "users/unblock", value.asInstanceOf[js.Any])
      
      inline def setUsersSlashunfollow(value: Responses401Content55403Content55404Content55): Self = StObject.set(x, "users/unfollow", value.asInstanceOf[js.Any])
      
      inline def `setUsersSlashupdate-authenticated`(value: Responses200ContentApplicationjsonBusinessplus): Self = StObject.set(x, "users/update-authenticated", value.asInstanceOf[js.Any])
    }
  }
  
  trait paths extends StObject {
    
    @JSName("/")
    var Slash: Get
    
    @JSName("/app")
    var Slashapp: GetParameters
    
    @JSName("/app-manifests/{code}/conversions")
    var `Slashapp-manifestsSlashLeftcurlybracketcodeRightcurlybracketSlashconversions`: Post
    
    @JSName("/app/hook/config")
    var SlashappSlashhookSlashconfig: Patch
    
    @JSName("/app/hook/deliveries")
    var SlashappSlashhookSlashdeliveries: GetParametersQuery
    
    @JSName("/app/hook/deliveries/{delivery_id}")
    var SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryid
    
    @JSName("/app/hook/deliveries/{delivery_id}/attempts")
    var SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostResponses202
    
    @JSName("/app/installations")
    var SlashappSlashinstallations: GetParametersQueryOutdated
    
    @JSName("/app/installations/{installation_id}")
    var SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracket: Delete
    
    @JSName("/app/installations/{installation_id}/access_tokens")
    var SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashaccess_tokens: PostParametersRequestBody
    
    @JSName("/app/installations/{installation_id}/suspended")
    var SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashsuspended: Put
    
    @JSName("/applications/{client_id}/grant")
    var SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashgrant: DeleteRequestBodyResponses
    
    @JSName("/applications/{client_id}/token")
    var SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtoken: DeletePatch
    
    @JSName("/applications/{client_id}/token/scoped")
    var SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtokenSlashscoped: PostRequestBodyContentApplicationjsonRepositories
    
    @JSName("/apps/{app_slug}")
    var SlashappsSlashLeftcurlybracketapp_slugRightcurlybracket: GetParametersPathAppslug
    
    @JSName("/codes_of_conduct")
    var Slashcodes_of_conduct: GetResponses304
    
    @JSName("/codes_of_conduct/{key}")
    var Slashcodes_of_conductSlashLeftcurlybracketkeyRightcurlybracket: GetParametersPathKey
    
    @JSName("/emojis")
    var Slashemojis: GetResponses200Content12
    
    @JSName("/enterprise-installation/{enterprise_or_org}/server-statistics")
    var `Slashenterprise-installationSlashLeftcurlybracketenterprise_or_orgRightcurlybracketSlashserver-statistics`: GetParametersPathQuery
    
    @JSName("/enterprises/{enterprise}/actions/cache/usage")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashcacheSlashusage: GetParametersPathEnterprise
    
    @JSName("/enterprises/{enterprise}/actions/oidc/customization/issuer")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashissuer: PutRequestBodyContent15
    
    @JSName("/enterprises/{enterprise}/actions/permissions")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissions: GetPut
    
    @JSName("/enterprises/{enterprise}/actions/permissions/organizations")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashorganizations: GetParametersQueryPage
    
    @JSName("/enterprises/{enterprise}/actions/permissions/organizations/{org_id}")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashorganizationsSlashLeftcurlybracketorg_idRightcurlybracket: DeletePut
    
    @JSName("/enterprises/{enterprise}/actions/permissions/selected-actions")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetResponses200Content17
    
    @JSName("/enterprises/{enterprise}/actions/permissions/workflow")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetResponses200Content18
    
    @JSName("/enterprises/{enterprise}/actions/runner-groups")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groups`: GetPost
    
    @JSName("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracket`: DeleteGet
    
    @JSName("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashorganizations`: GetParametersPathRunnergroupidQueryPage
    
    @JSName("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashorganizationsSlashLeftcurlybracketorg_idRightcurlybracket`: DeleteParametersPathEnterpriseOrgid
    
    @JSName("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunners`: GetResponses200ContentApplicationjsonRunners
    
    @JSName("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket`: DeleteParametersPathRunnerid
    
    @JSName("/enterprises/{enterprise}/actions/runners")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunners: GetResponses200ContentApplicationjsonTotalcount
    
    @JSName("/enterprises/{enterprise}/actions/runners/{runner_id}")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathEnterpriseRunneridResponses
    
    @JSName("/enterprises/{enterprise}/actions/runners/{runner_id}/labels")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: PostPut
    
    @JSName("/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathEnterpriseName
    
    @JSName("/enterprises/{enterprise}/actions/runners/downloads")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetResponses200Content21
    
    @JSName("/enterprises/{enterprise}/actions/runners/registration-token")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostResponses201Content22
    
    @JSName("/enterprises/{enterprise}/actions/runners/remove-token")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostResponses201Content22
    
    @JSName("/enterprises/{enterprise}/audit-log")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashaudit-log`: GetParametersQueryAfter
    
    @JSName("/enterprises/{enterprise}/code-scanning/alerts")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashcode-scanningSlashalerts`: GetParametersQueryBefore
    
    @JSName("/enterprises/{enterprise}/consumed-licenses")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashconsumed-licenses`: GetResponses200Content27
    
    @JSName("/enterprises/{enterprise}/license-sync-status")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashlicense-sync-status`: GetResponses200Content28
    
    @JSName("/enterprises/{enterprise}/secret-scanning/alerts")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersQueryDirection
    
    @JSName("/enterprises/{enterprise}/settings/billing/actions")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashactions: GetResponses200Content30
    
    @JSName("/enterprises/{enterprise}/settings/billing/advanced-security")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashadvanced-security`: GetResponses200Content31
    
    @JSName("/enterprises/{enterprise}/settings/billing/packages")
    var SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashpackages: GetResponses200Content32
    
    @JSName("/enterprises/{enterprise}/settings/billing/shared-storage")
    var `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`: GetResponses200Content33
    
    @JSName("/events")
    var Slashevents: GetParameters34
    
    @JSName("/feeds")
    var Slashfeeds: GetResponses200Content36
    
    @JSName("/gists")
    var Slashgists: GetParametersQuerySince
    
    @JSName("/gists/{gist_id}")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracket: GetPatch
    
    @JSName("/gists/{gist_id}/{sha}")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashLeftcurlybracketshaRightcurlybracket: GetParametersPathSha
    
    @JSName("/gists/{gist_id}/comments")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcomments: GetParametersPathGistidQueryPage
    
    @JSName("/gists/{gist_id}/comments/{comment_id}")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: DeleteGetPatch
    
    @JSName("/gists/{gist_id}/commits")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommits: GetResponses200Content44
    
    @JSName("/gists/{gist_id}/forks")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashforks: GetResponses200Content45
    
    @JSName("/gists/{gist_id}/star")
    var SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashstar: DeleteGetPut
    
    @JSName("/gists/public")
    var SlashgistsSlashpublic: GetResponses403422
    
    @JSName("/gists/starred")
    var SlashgistsSlashstarred: GetResponses304401
    
    @JSName("/gitignore/templates")
    var SlashgitignoreSlashtemplates: GetResponses200Content48
    
    @JSName("/gitignore/templates/{name}")
    var SlashgitignoreSlashtemplatesSlashLeftcurlybracketnameRightcurlybracket: GetParametersPathNameString
    
    @JSName("/installation/repositories")
    var SlashinstallationSlashrepositories: GetResponses401403
    
    @JSName("/installation/token")
    var SlashinstallationSlashtoken: Delete50
    
    @JSName("/issues")
    var Slashissues: GetParametersQueryCollab
    
    @JSName("/licenses")
    var Slashlicenses: GetParametersQueryFeatured
    
    @JSName("/licenses/{license}")
    var SlashlicensesSlashLeftcurlybracketlicenseRightcurlybracket: GetParametersPathLicense
    
    @JSName("/markdown")
    var Slashmarkdown: PostRequestBodyContentApplicationjsonContext
    
    @JSName("/markdown/raw")
    var SlashmarkdownSlashraw: PostRequestBodyContentTextplain
    
    @JSName("/marketplace_listing/accounts/{account_id}")
    var Slashmarketplace_listingSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket: GetParametersPathAccountid
    
    @JSName("/marketplace_listing/plans")
    var Slashmarketplace_listingSlashplans: GetResponses401404
    
    @JSName("/marketplace_listing/plans/{plan_id}/accounts")
    var Slashmarketplace_listingSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts: GetParametersPathPlanid
    
    @JSName("/marketplace_listing/stubbed/accounts/{account_id}")
    var Slashmarketplace_listingSlashstubbedSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket: GetResponses200Content54
    
    @JSName("/marketplace_listing/stubbed/plans")
    var Slashmarketplace_listingSlashstubbedSlashplans: GetResponses200Content56
    
    @JSName("/marketplace_listing/stubbed/plans/{plan_id}/accounts")
    var Slashmarketplace_listingSlashstubbedSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts: GetResponses200Content57
    
    @JSName("/meta")
    var Slashmeta: GetResponses200Content58
    
    @JSName("/networks/{owner}/{repo}/events")
    var SlashnetworksSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents: GetParametersPathOwner
    
    @JSName("/notifications")
    var Slashnotifications: GetParametersQueryAll
    
    @JSName("/notifications/threads/{thread_id}")
    var SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracket: GetParametersPathThreadid
    
    @JSName("/notifications/threads/{thread_id}/subscription")
    var SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracketSlashsubscription: DeleteResponses62
    
    @JSName("/octocat")
    var Slashoctocat: GetParametersQueryS
    
    @JSName("/organizations")
    var Slashorganizations: GetParametersQueryPerpageSince
    
    @JSName("/organizations/{organization_id}/custom_roles")
    var SlashorganizationsSlashLeftcurlybracketorganization_idRightcurlybracketSlashcustom_roles: GetParametersPathOrganizationid
    
    @JSName("/orgs/{org}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracket: GetParametersPathOrg
    
    @JSName("/orgs/{org}/{security_product}/{enablement}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketsecurity_productRightcurlybracketSlashLeftcurlybracketenablementRightcurlybracket: PostParametersPathEnablement
    
    @JSName("/orgs/{org}/actions/cache/usage")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage: GetResponses200ContentHeaders
    
    @JSName("/orgs/{org}/actions/cache/usage-by-repository")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage-by-repository`: GetParametersPathOrgQueryPage
    
    @JSName("/orgs/{org}/actions/oidc/customization/sub")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub: GetResponses200Content66
    
    @JSName("/orgs/{org}/actions/permissions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissions: GetResponses200Content68
    
    @JSName("/orgs/{org}/actions/permissions/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositories: GetResponses200ContentApplicationjsonRepositoriesTotalcount
    
    @JSName("/orgs/{org}/actions/permissions/repositories/{repository_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryid
    
    @JSName("/orgs/{org}/actions/permissions/selected-actions")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetParametersPathOrgResponses200Content17
    
    @JSName("/orgs/{org}/actions/permissions/workflow")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetParametersPathOrgResponses200Content18
    
    @JSName("/orgs/{org}/actions/runner-groups")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groups`: GetParametersQueryVisibletorepository
    
    @JSName("/orgs/{org}/actions/runner-groups/{runner_group_id}")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracket`: DeleteParametersPathOrgRunnergroupidResponses
    
    @JSName("/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrepositories`: GetParametersQueryPagePerpage
    
    @JSName("/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket`: DeleteParametersPathOrgRepositoryid
    
    @JSName("/orgs/{org}/actions/runner-groups/{runner_group_id}/runners")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunners`: GetParametersPathOrgRunnergroupidQueryPage
    
    @JSName("/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket`: DeleteParametersPathRunnergroupidRunnerid
    
    @JSName("/orgs/{org}/actions/runners")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunners: GetParametersPathOrgQueryPageResponses200ContentApplicationjsonRunners
    
    @JSName("/orgs/{org}/actions/runners/{runner_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathOrgRunneridResponses
    
    @JSName("/orgs/{org}/actions/runners/{runner_id}/labels")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: DeleteGetPost
    
    @JSName("/orgs/{org}/actions/runners/{runner_id}/labels/{name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOrg
    
    @JSName("/orgs/{org}/actions/runners/downloads")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetParametersPathOrgResponses200Content21
    
    @JSName("/orgs/{org}/actions/runners/registration-token")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostParametersPathOrgResponses201Content22
    
    @JSName("/orgs/{org}/actions/runners/remove-token")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostParametersPathOrgResponses201Content22
    
    @JSName("/orgs/{org}/actions/secrets")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecrets: GetResponses200ContentApplicationjsonSecrets
    
    @JSName("/orgs/{org}/actions/secrets/{secret_name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathSecretnameResponses
    
    @JSName("/orgs/{org}/actions/secrets/{secret_name}/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetParametersPathSecretnameQueryPagePerpage
    
    @JSName("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidSecretname
    
    @JSName("/orgs/{org}/actions/secrets/public-key")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`: GetResponses200Content71
    
    @JSName("/orgs/{org}/audit-log")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashaudit-log`: GetParametersQueryInclude
    
    @JSName("/orgs/{org}/blocks")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocks: GetResponses200Content73
    
    @JSName("/orgs/{org}/blocks/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocksSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathUsernameResponses
    
    @JSName("/orgs/{org}/code-scanning/alerts")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcode-scanningSlashalerts`: GetParametersPathOrgQueryBefore
    
    @JSName("/orgs/{org}/codespaces")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespaces: GetParameters74
    
    @JSName("/orgs/{org}/credential-authorizations")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcredential-authorizations`: GetParametersQueryLogin
    
    @JSName("/orgs/{org}/credential-authorizations/{credential_id}")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcredential-authorizationsSlashLeftcurlybracketcredential_idRightcurlybracket`: DeleteParametersPathCredentialid
    
    @JSName("/orgs/{org}/custom_roles")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcustom_roles: PostRequestBodyContentApplicationjsonBaserole
    
    @JSName("/orgs/{org}/custom_roles/{role_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcustom_rolesSlashLeftcurlybracketrole_idRightcurlybracket: DeleteParametersPathRoleid
    
    @JSName("/orgs/{org}/dependabot/secrets")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecrets: GetResponses200ContentApplicationjsonSecretsTotalcount
    
    @JSName("/orgs/{org}/dependabot/secrets/{secret_name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: GetResponses200Content78
    
    @JSName("/orgs/{org}/dependabot/secrets/{secret_name}/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetParametersPathSecretnameQueryPagePerpage
    
    @JSName("/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidSecretname
    
    @JSName("/orgs/{org}/dependabot/secrets/public-key")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`: GetResponses200Content77
    
    @JSName("/orgs/{org}/events")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashevents: GetResponses200Content35
    
    @JSName("/orgs/{org}/external-group/{group_id}")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashexternal-groupSlashLeftcurlybracketgroup_idRightcurlybracket`: GetParametersPathGroupid
    
    @JSName("/orgs/{org}/external-groups")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashexternal-groups`: GetParametersQueryDisplayname
    
    @JSName("/orgs/{org}/failed_invitations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfailed_invitations: GetResponses200Content81
    
    @JSName("/orgs/{org}/fine_grained_permissions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfine_grained_permissions: GetResponses200Content82
    
    @JSName("/orgs/{org}/hooks")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooks: GetResponses200Content83
    
    @JSName("/orgs/{org}/hooks/{hook_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket: DeleteParametersPathHookidResponses6
    
    @JSName("/orgs/{org}/hooks/{hook_id}/config")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig: GetParametersPathHookidResponses200Content2
    
    @JSName("/orgs/{org}/hooks/{hook_id}/deliveries")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries: GetParametersQueryCursor
    
    @JSName("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryidHookid
    
    @JSName("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostParametersPathDeliveryidHookidResponses202
    
    @JSName("/orgs/{org}/hooks/{hook_id}/pings")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings: PostParametersPathHookidResponses6
    
    @JSName("/orgs/{org}/installation")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallation: GetResponses200Content5
    
    @JSName("/orgs/{org}/installations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallations: GetResponses200ContentApplicationjsonInstallations
    
    @JSName("/orgs/{org}/interaction-limits")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinteraction-limits`: DeleteParametersPathOrgResponses
    
    @JSName("/orgs/{org}/invitations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitations: PostRequestBodyContentApplicationjsonEmail
    
    @JSName("/orgs/{org}/invitations/{invitation_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket: DeleteParametersPathInvitationid
    
    @JSName("/orgs/{org}/invitations/{invitation_id}/teams")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracketSlashteams: GetParametersPathInvitationidQueryPage
    
    @JSName("/orgs/{org}/issues")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashissues: GetParametersQueryFilter
    
    @JSName("/orgs/{org}/members")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembers: GetParametersQueryRole
    
    @JSName("/orgs/{org}/members/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses92
    
    @JSName("/orgs/{org}/members/{username}/codespaces/{codespace_name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket: DeleteParametersPathCodespacename
    
    @JSName("/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop: PostResponses404500
    
    @JSName("/orgs/{org}/memberships/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses96
    
    @JSName("/orgs/{org}/migrations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrations: GetParametersQueryExclude
    
    @JSName("/orgs/{org}/migrations/{migration_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket: GetParametersPathMigrationid
    
    @JSName("/orgs/{org}/migrations/{migration_id}/archive")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive: DeleteParameters100
    
    @JSName("/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock: DeleteParametersPathReponame
    
    @JSName("/orgs/{org}/migrations/{migration_id}/repositories")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories: GetParametersPathMigrationidQueryPage
    
    @JSName("/orgs/{org}/outside_collaborators")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaborators: GetParametersQueryFilterPage
    
    @JSName("/orgs/{org}/outside_collaborators/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses422ContentApplicationjsonDocumentationurl
    
    @JSName("/orgs/{org}/packages")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackages: GetParametersQueryPackagetype
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket: DeleteResponses401403404
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}/restore")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore: PostParametersQueryToken
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}/versions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions: GetParametersQueryState
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket: DeleteParametersPathPackageversionidResponses401403404
    
    @JSName("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore: PostParametersPathPackageversionidResponses401403404
    
    @JSName("/orgs/{org}/projects")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashprojects: GetParametersQueryPerpageState
    
    @JSName("/orgs/{org}/public_members")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_members: GetResponses102
    
    @JSName("/orgs/{org}/public_members/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_membersSlashLeftcurlybracketusernameRightcurlybracket: GetResponses404Unknown
    
    @JSName("/orgs/{org}/repos")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrepos: GetParametersQueryType
    
    @JSName("/orgs/{org}/secret-scanning/alerts")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersQueryResolution
    
    @JSName("/orgs/{org}/security-managers")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managers`: GetResponses200Content111
    
    @JSName("/orgs/{org}/security-managers/teams/{team_slug}")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managersSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket`: DeleteParametersPathTeamslugResponses
    
    @JSName("/orgs/{org}/settings/billing/actions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashactions: GetParametersPathOrgResponses200Content30
    
    @JSName("/orgs/{org}/settings/billing/advanced-security")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashadvanced-security`: GetParametersPathOrgQueryPageResponses200Content31
    
    @JSName("/orgs/{org}/settings/billing/packages")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashpackages: GetParametersPathOrgResponses200Content32
    
    @JSName("/orgs/{org}/settings/billing/shared-storage")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`: GetParametersPathOrgResponses200Content33
    
    @JSName("/orgs/{org}/team-sync/groups")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteam-syncSlashgroups`: GetParametersQuery112
    
    @JSName("/orgs/{org}/teams")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteams: GetResponses200Content91403
    
    @JSName("/orgs/{org}/teams/{team_slug}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket: GetResponses200Content114
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussions: GetParametersQueryPinned
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket: DeleteParametersPathDiscussionnumberResponses
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments: GetParametersQueryDirectionPage
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket: DeleteParametersPathCommentnumberResponses
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions: GetParametersQueryContentPage
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathReactionid
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions: GetParametersPathDiscussionnumberQueryContentPage
    
    @JSName("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathDiscussionnumberOrg
    
    @JSName("/orgs/{org}/teams/{team_slug}/external-groups")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashexternal-groups`: GetResponses200122
    
    @JSName("/orgs/{org}/teams/{team_slug}/invitations")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashinvitations: GetParametersPathTeamslugQueryPage
    
    @JSName("/orgs/{org}/teams/{team_slug}/members")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembers: GetParametersQueryPerpageRole
    
    @JSName("/orgs/{org}/teams/{team_slug}/memberships/{username}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses126
    
    @JSName("/orgs/{org}/teams/{team_slug}/projects")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojects: GetResponses200Content127
    
    @JSName("/orgs/{org}/teams/{team_slug}/projects/{project_id}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteParametersPathProjectidResponses
    
    @JSName("/orgs/{org}/teams/{team_slug}/repos")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashrepos: GetResponses109
    
    @JSName("/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteParametersPathRepoResponses
    
    @JSName("/orgs/{org}/teams/{team_slug}/team-sync/group-mappings")
    var `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteam-syncSlashgroup-mappings`: GetResponses200132
    
    @JSName("/orgs/{org}/teams/{team_slug}/teams")
    var SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteams: GetResponses133
    
    @JSName("/projects/{project_id}")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteResponses404410
    
    @JSName("/projects/{project_id}/collaborators")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaborators: GetParametersQueryAffiliation
    
    @JSName("/projects/{project_id}/collaborators/{username}")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses140
    
    @JSName("/projects/{project_id}/collaborators/{username}/permission")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission: GetResponses200304401403404422
    
    @JSName("/projects/{project_id}/columns")
    var SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcolumns: GetParametersPath139QueryPage
    
    @JSName("/projects/columns/{column_id}")
    var SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracket: DeleteParametersPath135Responses62
    
    @JSName("/projects/columns/{column_id}/cards")
    var SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashcards: GetParametersQueryArchivedstate
    
    @JSName("/projects/columns/{column_id}/moves")
    var SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashmoves: PostRequestBodyContentApplicationjsonPosition
    
    @JSName("/projects/columns/cards/{card_id}")
    var SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracket: DeleteResponses403ContentApplicationjsonErrors
    
    @JSName("/projects/columns/cards/{card_id}/moves")
    var SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracketSlashmoves: PostRequestBodyContentApplicationjsonColumnid
    
    @JSName("/rate_limit")
    var Slashrate_limit: GetResponses200304404
    
    @JSName("/repos/{owner}/{repo}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteResponses307
    
    @JSName("/repos/{owner}/{repo}/actions/artifacts")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifacts: GetResponses200ContentApplicationjsonArtifacts
    
    @JSName("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracket: DeleteParametersPathArtifactidResponses
    
    @JSName("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracketSlashLeftcurlybracketarchive_formatRightcurlybracket: GetParametersPathArchiveformat
    
    @JSName("/repos/{owner}/{repo}/actions/cache/usage")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcacheSlashusage: GetResponses200Content148
    
    @JSName("/repos/{owner}/{repo}/actions/caches")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcaches: DeleteParametersQueryKeyRef
    
    @JSName("/repos/{owner}/{repo}/actions/caches/{cache_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcachesSlashLeftcurlybracketcache_idRightcurlybracket: DeleteParametersPathCacheid
    
    @JSName("/repos/{owner}/{repo}/actions/jobs/{job_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracket: GetParametersPathJobid
    
    @JSName("/repos/{owner}/{repo}/actions/jobs/{job_id}/logs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashlogs: GetParametersPathJobidResponses
    
    @JSName("/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashrerun: PostRequestBodyContent152
    
    @JSName("/repos/{owner}/{repo}/actions/oidc/customization/sub")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub: GetResponses200400
    
    @JSName("/repos/{owner}/{repo}/actions/permissions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissions: GetResponses200Content154
    
    @JSName("/repos/{owner}/{repo}/actions/permissions/access")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashaccess: GetResponses200Content155
    
    @JSName("/repos/{owner}/{repo}/actions/permissions/selected-actions")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetParameters144Responses200Content17
    
    @JSName("/repos/{owner}/{repo}/actions/permissions/workflow")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetParameters144Responses200Content18
    
    @JSName("/repos/{owner}/{repo}/actions/runners")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunners: GetParametersPathOwnerResponses200ContentApplicationjsonRunners
    
    @JSName("/repos/{owner}/{repo}/actions/runners/{runner_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathOwnerRepoResponses
    
    @JSName("/repos/{owner}/{repo}/actions/runners/{runner_id}/labels")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: GetPostPut
    
    @JSName("/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOwner
    
    @JSName("/repos/{owner}/{repo}/actions/runners/downloads")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetParameters144Responses200Content21
    
    @JSName("/repos/{owner}/{repo}/actions/runners/registration-token")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostParameters144Responses201Content22
    
    @JSName("/repos/{owner}/{repo}/actions/runners/remove-token")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostParameters144Responses201Content22
    
    @JSName("/repos/{owner}/{repo}/actions/runs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashruns: GetParametersQueryActor
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracket: DeleteParameters157
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/approvals")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprovals: GetResponses200Content158
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/approve")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprove: PostResponses201403
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashartifacts: GetParametersPathRunidQueryPage
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracket: GetParametersPathAttemptnumber
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashjobs: GetParametersPathAttemptnumberQueryPage
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashlogs: GetParameters159
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/cancel")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashcancel: PostResponses202409
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/jobs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashjobs: GetParametersQueryFilterPagePerpage
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/logs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashlogs: DeleteResponses403500
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashpending_deployments: GetResponses200Content161
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/rerun")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun: PostResponses201Content67
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun-failed-jobs`: PostResponses201Content67
    
    @JSName("/repos/{owner}/{repo}/actions/runs/{run_id}/timing")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashtiming: GetResponses200Content163
    
    @JSName("/repos/{owner}/{repo}/actions/secrets")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecrets: GetResponses200ContentApplicationjsonSecretsArray
    
    @JSName("/repos/{owner}/{repo}/actions/secrets/{secret_name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathRepoSecretnameResponses
    
    @JSName("/repos/{owner}/{repo}/actions/secrets/public-key")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`: GetParameters144Responses200Content71
    
    @JSName("/repos/{owner}/{repo}/actions/workflows")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflows: GetResponses200ContentApplicationjsonWorkflows
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracket: GetParametersPathWorkflowid
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdisable: PutParametersPathWorkflowidResponses
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdispatches: PostRequestBodyContentApplicationjsonInputs
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashenable: PutParametersPathWorkflowidResponses
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashruns: GetParametersPathWorkflowidQueryActor
    
    @JSName("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashtiming: GetResponses200Content166
    
    @JSName("/repos/{owner}/{repo}/assignees")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassignees: GetResponses200Content73Headers404
    
    @JSName("/repos/{owner}/{repo}/assignees/{assignee}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket: GetParametersPathAssignee
    
    @JSName("/repos/{owner}/{repo}/autolinks")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinks: GetParametersQuery167
    
    @JSName("/repos/{owner}/{repo}/autolinks/{autolink_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinksSlashLeftcurlybracketautolink_idRightcurlybracket: DeleteParametersPathAutolinkidResponses6
    
    @JSName("/repos/{owner}/{repo}/automated-security-fixes")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautomated-security-fixes`: DeleteParameters144Responses
    
    @JSName("/repos/{owner}/{repo}/branches")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranches: GetParametersQueryProtected
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracket: GetParametersPathBranch
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotection: DeleteParametersPathBranchResponses92
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashenforce_admins: DeleteParametersPathBranchResponses6
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_pull_request_reviews: GetResponses200Content176
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_signatures: GetResponses200Content175404
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checks: DeleteParametersPathBranchResponses
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checksSlashcontexts: DeleteGetPostPut
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictions: GetResponses200Content178
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashapps: DeleteRequestBodyContentApplicationjsonAppsArray
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashteams: DeleteRequestBodyContentApplicationjsonTeamsArray
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashusers: DeleteRequestBodyContentApplicationjsonUsers
    
    @JSName("/repos/{owner}/{repo}/branches/{branch}/rename")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashrename: PostRequestBodyContentApplicationjsonNewname
    
    @JSName("/repos/{owner}/{repo}/check-runs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runs`: PostRequestBodyContent182
    
    @JSName("/repos/{owner}/{repo}/check-runs/{check_run_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracket`: GetParametersPathCheckrunid
    
    @JSName("/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracketSlashannotations`: GetParametersPathCheckrunidQueryPage
    
    @JSName("/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracketSlashrerequest`: PostResponses201403404422
    
    @JSName("/repos/{owner}/{repo}/check-suites")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suites`: PostRequestBodyContentApplicationjsonHeadsha
    
    @JSName("/repos/{owner}/{repo}/check-suites/{check_suite_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracket`: GetParametersPathChecksuiteid
    
    @JSName("/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracketSlashcheck-runs`: GetParametersQueryCheckname
    
    @JSName("/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracketSlashrerequest`: PostResponses201Content47
    
    @JSName("/repos/{owner}/{repo}/check-suites/preferences")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashpreferences`: PatchRequestBodyContentApplicationjsonAutotriggerchecks
    
    @JSName("/repos/{owner}/{repo}/code-scanning/alerts")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalerts`: GetParametersQueryToolguid
    
    @JSName("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket`: GetParametersPathAlertnumber
    
    @JSName("/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracketSlashinstances`: GetParametersQueryPerpageRef
    
    @JSName("/repos/{owner}/{repo}/code-scanning/analyses")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashanalyses`: GetParametersQuerySarifid
    
    @JSName("/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashanalysesSlashLeftcurlybracketanalysis_idRightcurlybracket`: DeleteParametersQueryConfirmdelete
    
    @JSName("/repos/{owner}/{repo}/code-scanning/codeql/databases")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashcodeqlSlashdatabases`: GetResponses200Content193
    
    @JSName("/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashcodeqlSlashdatabasesSlashLeftcurlybracketlanguageRightcurlybracket`: GetParametersPathLanguage
    
    @JSName("/repos/{owner}/{repo}/code-scanning/sarifs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashsarifs`: PostRequestBodyContentApplicationjsonCheckouturi
    
    @JSName("/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashsarifsSlashLeftcurlybracketsarif_idRightcurlybracket`: GetParametersPathRepoSarifid
    
    @JSName("/repos/{owner}/{repo}/codeowners/errors")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodeownersSlasherrors: GetParametersQuery197
    
    @JSName("/repos/{owner}/{repo}/codespaces")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespaces: GetParametersPathOwnerQueryPage
    
    @JSName("/repos/{owner}/{repo}/codespaces/devcontainers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashdevcontainers: GetResponses400401
    
    @JSName("/repos/{owner}/{repo}/codespaces/machines")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashmachines: GetParametersQueryClientipLocation
    
    @JSName("/repos/{owner}/{repo}/codespaces/new")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashnew: GetParametersQueryClientipRef
    
    @JSName("/repos/{owner}/{repo}/codespaces/secrets")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecrets: GetResponses200ContentApplicationjsonTotalcountNumber
    
    @JSName("/repos/{owner}/{repo}/codespaces/secrets/{secret_name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: GetResponses200Content204
    
    @JSName("/repos/{owner}/{repo}/codespaces/secrets/public-key")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecretsSlashpublic-key`: GetResponses200Content203
    
    @JSName("/repos/{owner}/{repo}/collaborators")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaborators: GetParametersQueryAffiliationPage
    
    @JSName("/repos/{owner}/{repo}/collaborators/{username}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathRepoUsernameResponses
    
    @JSName("/repos/{owner}/{repo}/collaborators/{username}/permission")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission: GetResponses200Content208
    
    @JSName("/repos/{owner}/{repo}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcomments: GetResponses200Content209
    
    @JSName("/repos/{owner}/{repo}/comments/{comment_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: DeleteParametersPathCommentidOwnerResponses6
    
    @JSName("/repos/{owner}/{repo}/comments/{comment_id}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions: GetParametersPathCommentidOwnerQueryContentPage
    
    @JSName("/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathOwnerReactionid
    
    @JSName("/repos/{owner}/{repo}/commits")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommits: GetParametersQueryAuthor
    
    @JSName("/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashbranches-where-head`: GetParametersPathCommitsha
    
    @JSName("/repos/{owner}/{repo}/commits/{commit_sha}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashcomments: GetParametersPathCommitshaQueryPage
    
    @JSName("/repos/{owner}/{repo}/commits/{commit_sha}/pulls")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashpulls: GetResponses200Content213
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracket: GetParametersPathOwnerRef
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}/check-runs")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashcheck-runs`: GetParametersQueryAppidCheckname
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}/check-suites")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashcheck-suites`: GetParametersQueryChecknamePage
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}/status")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashstatus: GetParametersPathOwnerRefQueryPage
    
    @JSName("/repos/{owner}/{repo}/commits/{ref}/statuses")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashstatuses: GetResponses200Content216
    
    @JSName("/repos/{owner}/{repo}/community/profile")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommunitySlashprofile: GetResponses200Content217
    
    @JSName("/repos/{owner}/{repo}/compare/{base}...{head}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcompareSlashLeftcurlybracketbaseRightcurlybracketDotDotDotLeftcurlybracketheadRightcurlybracket: GetParametersPathBaseHead_
    
    @JSName("/repos/{owner}/{repo}/compare/{basehead}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcompareSlashLeftcurlybracketbaseheadRightcurlybracket: GetParametersPathBasehead
    
    @JSName("/repos/{owner}/{repo}/contents/{path}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcontentsSlashLeftcurlybracketpathRightcurlybracket: DeleteRequestBodyContentApplicationjsonAuthorBranch
    
    @JSName("/repos/{owner}/{repo}/contributors")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcontributors: GetParametersQueryAnon
    
    @JSName("/repos/{owner}/{repo}/dependabot/secrets")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecrets: GetResponses200ContentApplicationjsonSecretsArrayTotalcountNumber
    
    @JSName("/repos/{owner}/{repo}/dependabot/secrets/{secret_name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: GetResponses200Content222
    
    @JSName("/repos/{owner}/{repo}/dependabot/secrets/public-key")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`: GetParameters144Responses200Content77
    
    @JSName("/repos/{owner}/{repo}/dependency-graph/compare/{basehead}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashcompareSlashLeftcurlybracketbaseheadRightcurlybracket`: GetParametersQuery223
    
    @JSName("/repos/{owner}/{repo}/dependency-graph/snapshots")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashsnapshots`: PostRequestBodyContent225
    
    @JSName("/repos/{owner}/{repo}/deployments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeployments: GetParametersQueryEnvironment
    
    @JSName("/repos/{owner}/{repo}/deployments/{deployment_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracket: DeleteResponses227
    
    @JSName("/repos/{owner}/{repo}/deployments/{deployment_id}/statuses")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracketSlashstatuses: GetParametersPathDeploymentidQueryPage
    
    @JSName("/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracketSlashstatusesSlashLeftcurlybracketstatus_idRightcurlybracket: GetParametersPathStatusid
    
    @JSName("/repos/{owner}/{repo}/dispatches")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdispatches: PostRequestBodyContentApplicationjsonClientpayload
    
    @JSName("/repos/{owner}/{repo}/environments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironments: GetResponses200ContentApplicationjsonEnvironments
    
    @JSName("/repos/{owner}/{repo}/environments/{environment_name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracket: DeleteParametersPathEnvironmentnameResponses
    
    @JSName("/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment-branch-policies`: GetParametersPathEnvironmentnameQueryPage
    
    @JSName("/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment-branch-policiesSlashLeftcurlybracketbranch_policy_idRightcurlybracket`: DeleteParametersPathBranchpolicyidResponses
    
    @JSName("/repos/{owner}/{repo}/events")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents: GetParametersPathOwnerResponses200Content35
    
    @JSName("/repos/{owner}/{repo}/forks")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashforks: GetParametersQueryPerpageSort
    
    @JSName("/repos/{owner}/{repo}/git/blobs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashblobs: PostRequestBodyContentApplicationjsonEncoding
    
    @JSName("/repos/{owner}/{repo}/git/blobs/{file_sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashblobsSlashLeftcurlybracketfile_shaRightcurlybracket: GetParametersPathFilesha
    
    @JSName("/repos/{owner}/{repo}/git/commits")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashcommits: PostRequestBodyContentApplicationjsonParents
    
    @JSName("/repos/{owner}/{repo}/git/commits/{commit_sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracket: GetResponses200240
    
    @JSName("/repos/{owner}/{repo}/git/matching-refs/{ref}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashmatching-refsSlashLeftcurlybracketrefRightcurlybracket`: GetParameters241
    
    @JSName("/repos/{owner}/{repo}/git/ref/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefSlashLeftcurlybracketrefRightcurlybracket: GetResponses200Content243
    
    @JSName("/repos/{owner}/{repo}/git/refs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefs: PostRequestBodyContentApplicationjsonRefSha
    
    @JSName("/repos/{owner}/{repo}/git/refs/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefsSlashLeftcurlybracketrefRightcurlybracket: DeleteParameters241Responses8
    
    @JSName("/repos/{owner}/{repo}/git/tags")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtags: PostRequestBodyContentApplicationjsonObject
    
    @JSName("/repos/{owner}/{repo}/git/tags/{tag_sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtagsSlashLeftcurlybrackettag_shaRightcurlybracket: GetParametersPathTagsha
    
    @JSName("/repos/{owner}/{repo}/git/trees")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtrees: PostRequestBodyContentApplicationjsonBasetree
    
    @JSName("/repos/{owner}/{repo}/git/trees/{tree_sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtreesSlashLeftcurlybrackettree_shaRightcurlybracket: GetParametersPathTreesha
    
    @JSName("/repos/{owner}/{repo}/hooks")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooks: GetResponses200Content248
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket: DeleteParametersPathHookidOwnerResponses6
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/config")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig: GetParametersPathHookidOwnerResponses200Content2
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/deliveries")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries: GetParametersPathHookidOwnerQueryCursor
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryidHookidOwner
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostParametersPathDeliveryidHookidOwnerResponses202
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/pings")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings: PostParametersPathHookidOwnerResponses6
    
    @JSName("/repos/{owner}/{repo}/hooks/{hook_id}/tests")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashtests: PostParametersPathHookidOwnerResponses6
    
    @JSName("/repos/{owner}/{repo}/import")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimport: PatchPut
    
    @JSName("/repos/{owner}/{repo}/import/authors")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashauthors: GetParametersQuery255
    
    @JSName("/repos/{owner}/{repo}/import/authors/{author_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashauthorsSlashLeftcurlybracketauthor_idRightcurlybracket: PatchParametersPathAuthorid
    
    @JSName("/repos/{owner}/{repo}/import/large_files")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashlarge_files: GetResponses200Content259
    
    @JSName("/repos/{owner}/{repo}/import/lfs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashlfs: PatchRequestBodyContentApplicationjsonUselfs
    
    @JSName("/repos/{owner}/{repo}/installation")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinstallation: GetResponses200301404
    
    @JSName("/repos/{owner}/{repo}/interaction-limits")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinteraction-limits`: DeleteParameters144Responses409Unknown
    
    @JSName("/repos/{owner}/{repo}/invitations")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinvitations: GetResponses200Content260
    
    @JSName("/repos/{owner}/{repo}/invitations/{invitation_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket: DeleteParametersPathInvitationidOwner
    
    @JSName("/repos/{owner}/{repo}/issues")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissues: GetParametersQueryCreator
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracket: GetParametersPathIssuenumber
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/assignees")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashassignees: DeletePost
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashcomments: GetParametersPathIssuenumberQuerySince
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/events")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashevents: GetParametersPathIssuenumberQueryPage
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/labels")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlabels: DeleteResponses147
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathIssuenumberName
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/lock")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlock: DeleteParametersPathIssuenumberResponses96
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashreactions: GetParametersPathIssuenumberQueryContentPage
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathIssuenumberOwner
    
    @JSName("/repos/{owner}/{repo}/issues/{issue_number}/timeline")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashtimeline: GetResponses200Content276
    
    @JSName("/repos/{owner}/{repo}/issues/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcomments: GetParametersQuerySinceSort
    
    @JSName("/repos/{owner}/{repo}/issues/comments/{comment_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: DeleteParametersPathCommentidOwnerResponses
    
    @JSName("/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions: GetParametersPathCommentidOwnerQueryContentPage
    
    @JSName("/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathOwnerReactionid
    
    @JSName("/repos/{owner}/{repo}/issues/events")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashevents: GetResponses200Content265
    
    @JSName("/repos/{owner}/{repo}/issues/events/{event_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlasheventsSlashLeftcurlybracketevent_idRightcurlybracket: GetParametersPathEventid
    
    @JSName("/repos/{owner}/{repo}/keys")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashkeys: GetResponses200Content277
    
    @JSName("/repos/{owner}/{repo}/keys/{key_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashkeysSlashLeftcurlybracketkey_idRightcurlybracket: DeleteParametersPathKeyidOwnerResponses
    
    @JSName("/repos/{owner}/{repo}/labels")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlabels: GetResponses200Content270404
    
    @JSName("/repos/{owner}/{repo}/labels/{name}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOwnerRepoResponses
    
    @JSName("/repos/{owner}/{repo}/languages")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlanguages: GetResponses200Content283
    
    @JSName("/repos/{owner}/{repo}/lfs")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlfs: PutResponses202403Unknown
    
    @JSName("/repos/{owner}/{repo}/license")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlicense: GetResponses200Content284
    
    @JSName("/repos/{owner}/{repo}/merge-upstream")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmerge-upstream`: PostRequestBodyContentApplicationjsonBranchString
    
    @JSName("/repos/{owner}/{repo}/merges")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmerges: PostRequestBodyContentApplicationjsonBase
    
    @JSName("/repos/{owner}/{repo}/milestones")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestones: GetParametersQuerySortState
    
    @JSName("/repos/{owner}/{repo}/milestones/{milestone_number}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestonesSlashLeftcurlybracketmilestone_numberRightcurlybracket: DeleteParametersPathMilestonenumberResponses6
    
    @JSName("/repos/{owner}/{repo}/milestones/{milestone_number}/labels")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestonesSlashLeftcurlybracketmilestone_numberRightcurlybracketSlashlabels: GetParametersPathMilestonenumberQueryPage
    
    @JSName("/repos/{owner}/{repo}/notifications")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashnotifications: GetParametersQueryParticipating
    
    @JSName("/repos/{owner}/{repo}/pages")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpages: DeleteResponses90
    
    @JSName("/repos/{owner}/{repo}/pages/builds")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuilds: GetResponses200Content294
    
    @JSName("/repos/{owner}/{repo}/pages/builds/{build_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuildsSlashLeftcurlybracketbuild_idRightcurlybracket: GetParametersPathBuildid
    
    @JSName("/repos/{owner}/{repo}/pages/builds/latest")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuildsSlashlatest: GetResponses200Content296
    
    @JSName("/repos/{owner}/{repo}/pages/deployment")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashdeployment: PostRequestBodyContentApplicationjsonArtifacturl
    
    @JSName("/repos/{owner}/{repo}/pages/health")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashhealth: GetResponses200202
    
    @JSName("/repos/{owner}/{repo}/projects")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashprojects: GetParametersPathOwnerQueryPerpageState
    
    @JSName("/repos/{owner}/{repo}/pulls")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpulls: GetParametersQueryHead
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracket: GetParametersPathPullnumber
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/codespaces")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcodespaces: PostRequestBodyContent308
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcomments: GetParametersPathPullnumberQuerySinceSort
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreplies: PostParametersPathOwnerPullnumber
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/commits")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcommits: GetParametersPathPullnumberQueryPage
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/files")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashfiles: GetResponses200422500
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/merge")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashmerge: GetParametersPathPullnumberResponses404Unknown
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashrequested_reviewers: DeleteRequestBodyContentApplicationjsonTeamreviewers
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviews: GetResponses200Content314
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracket: DeleteResponses200Content315404422
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashcomments: GetParametersPathReviewidQueryPage
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashdismissals: PutRequestBodyContentApplicationjsonEvent
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashevents: PostRequestBodyContentApplicationjsonBodyEvent
    
    @JSName("/repos/{owner}/{repo}/pulls/{pull_number}/update-branch")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashupdate-branch`: PutRequestBodyContent317
    
    @JSName("/repos/{owner}/{repo}/pulls/comments")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcomments: GetParametersQueryDirectionPagePerpage
    
    @JSName("/repos/{owner}/{repo}/pulls/comments/{comment_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: GetResponses200Content303
    
    @JSName("/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions: GetParametersPathCommentidOwnerQueryContentPage
    
    @JSName("/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathOwnerReactionid
    
    @JSName("/repos/{owner}/{repo}/readme")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreadme: GetResponses200Content318
    
    @JSName("/repos/{owner}/{repo}/readme/{dir}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreadmeSlashLeftcurlybracketdirRightcurlybracket: GetParametersPathDir
    
    @JSName("/repos/{owner}/{repo}/releases")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleases: GetResponses200Content319
    
    @JSName("/repos/{owner}/{repo}/releases/{release_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracket: DeleteParametersPathReleaseidResponses
    
    @JSName("/repos/{owner}/{repo}/releases/{release_id}/assets")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashassets: GetParametersPathReleaseidQueryPage
    
    @JSName("/repos/{owner}/{repo}/releases/{release_id}/reactions")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashreactions: GetParametersQueryContentPagePerpage
    
    @JSName("/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathReactionidReleaseid
    
    @JSName("/repos/{owner}/{repo}/releases/assets/{asset_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashassetsSlashLeftcurlybracketasset_idRightcurlybracket: DeleteParametersPathAssetidResponses
    
    @JSName("/repos/{owner}/{repo}/releases/generate-notes")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashgenerate-notes`: PostRequestBodyContentApplicationjsonConfigurationfilepath
    
    @JSName("/repos/{owner}/{repo}/releases/latest")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashlatest: GetResponses200323
    
    @JSName("/repos/{owner}/{repo}/releases/tags/{tag}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashtagsSlashLeftcurlybrackettagRightcurlybracket: GetParametersPathTag
    
    @JSName("/repos/{owner}/{repo}/secret-scanning/alerts")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersPathOwnerQueryResolution
    
    @JSName("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket`: GetResponses304404503
    
    @JSName("/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracketSlashlocations`: GetParametersPathAlertnumberQueryPagePerpage
    
    @JSName("/repos/{owner}/{repo}/stargazers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstargazers: GetResponses200Content330
    
    @JSName("/repos/{owner}/{repo}/stats/code_frequency")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcode_frequency: GetResponses202204
    
    @JSName("/repos/{owner}/{repo}/stats/commit_activity")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcommit_activity: GetResponses200202204
    
    @JSName("/repos/{owner}/{repo}/stats/contributors")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcontributors: GetResponses200Content333
    
    @JSName("/repos/{owner}/{repo}/stats/participation")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashparticipation: GetResponses200Content334
    
    @JSName("/repos/{owner}/{repo}/stats/punch_card")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashpunch_card: GetResponses200204
    
    @JSName("/repos/{owner}/{repo}/statuses/{sha}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatusesSlashLeftcurlybracketshaRightcurlybracket: PostParametersPathRepoSha
    
    @JSName("/repos/{owner}/{repo}/subscribers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsubscribers: GetParametersPathOwnerResponses102
    
    @JSName("/repos/{owner}/{repo}/subscription")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsubscription: GetResponses200Content336
    
    @JSName("/repos/{owner}/{repo}/tags")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtags: GetResponses200Content338
    
    @JSName("/repos/{owner}/{repo}/tags/protection")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtagsSlashprotection: GetResponses200Content339
    
    @JSName("/repos/{owner}/{repo}/tags/protection/{tag_protection_id}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtagsSlashprotectionSlashLeftcurlybrackettag_protection_idRightcurlybracket: DeleteParametersPathTagprotectionid
    
    @JSName("/repos/{owner}/{repo}/tarball/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtarballSlashLeftcurlybracketrefRightcurlybracket: GetParameters241Responses
    
    @JSName("/repos/{owner}/{repo}/teams")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashteams: GetParametersPathOwnerResponses133
    
    @JSName("/repos/{owner}/{repo}/topics")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtopics: GetParametersPathOwnerQueryPagePerpage
    
    @JSName("/repos/{owner}/{repo}/traffic/clones")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashclones: GetParametersQueryPer
    
    @JSName("/repos/{owner}/{repo}/traffic/popular/paths")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashpopularSlashpaths: GetResponses200Content343
    
    @JSName("/repos/{owner}/{repo}/traffic/popular/referrers")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashpopularSlashreferrers: GetResponses200Content344
    
    @JSName("/repos/{owner}/{repo}/traffic/views")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashviews: GetResponses200Content345
    
    @JSName("/repos/{owner}/{repo}/transfer")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtransfer: PostRequestBodyContentApplicationjsonNewowner
    
    @JSName("/repos/{owner}/{repo}/vulnerability-alerts")
    var `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashvulnerability-alerts`: GetParameters144Responses404Unknown
    
    @JSName("/repos/{owner}/{repo}/zipball/{ref}")
    var SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashzipballSlashLeftcurlybracketrefRightcurlybracket: GetParameters241Responses
    
    @JSName("/repos/{template_owner}/{template_repo}/generate")
    var SlashreposSlashLeftcurlybrackettemplate_ownerRightcurlybracketSlashLeftcurlybrackettemplate_repoRightcurlybracketSlashgenerate: PostParametersPathTemplateowner
    
    @JSName("/repositories")
    var Slashrepositories: GetParametersQuery347
    
    @JSName("/repositories/{repository_id}/environments/{environment_name}/secrets")
    var SlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecrets: GetParametersPathEnvironmentnameRepositoryid
    
    @JSName("/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}")
    var SlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathEnvironmentnameRepositoryidSecretnameResponses
    
    @JSName("/repositories/{repository_id}/environments/{environment_name}/secrets/public-key")
    var `SlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecretsSlashpublic-key`: GetParameters348
    
    @JSName("/scim/v2/enterprises/{enterprise}/Groups")
    var SlashscimSlashv2SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashGroups: GetParametersQueryCount
    
    @JSName("/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}")
    var SlashscimSlashv2SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashGroupsSlashLeftcurlybracketscim_group_idRightcurlybracket: GetPatchPut
    
    @JSName("/scim/v2/enterprises/{enterprise}/Users")
    var SlashscimSlashv2SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashUsers: GetParametersQueryStartIndex
    
    @JSName("/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}")
    var SlashscimSlashv2SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashUsersSlashLeftcurlybracketscim_user_idRightcurlybracket: DeleteGetPatchPut
    
    @JSName("/scim/v2/organizations/{org}/Users")
    var SlashscimSlashv2SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashUsers: GetParametersQueryCountFilter
    
    @JSName("/scim/v2/organizations/{org}/Users/{scim_user_id}")
    var SlashscimSlashv2SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashUsersSlashLeftcurlybracketscim_user_idRightcurlybracket: DeleteResponses356
    
    @JSName("/search/code")
    var SlashsearchSlashcode: GetParametersQueryOrder
    
    @JSName("/search/commits")
    var SlashsearchSlashcommits: GetParametersQueryQ
    
    @JSName("/search/issues")
    var SlashsearchSlashissues: GetParametersQueryOrderPage
    
    @JSName("/search/labels")
    var SlashsearchSlashlabels: GetParametersQueryPerpageQ
    
    @JSName("/search/repositories")
    var SlashsearchSlashrepositories: GetParametersQueryQSort
    
    @JSName("/search/topics")
    var SlashsearchSlashtopics: GetParametersQueryPagePerpageQ
    
    @JSName("/search/users")
    var SlashsearchSlashusers: GetParametersQueryOrderPagePerpage
    
    @JSName("/teams/{team_id}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracket: DeleteParametersPathTeamidResponses90
    
    @JSName("/teams/{team_id}/discussions")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussions: GetParametersPathTeamidQueryDirectionPage
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket: DeleteParametersPathDiscussionnumberTeamidResponses
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}/comments")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments: GetParametersPathDiscussionnumberTeamidQueryDirectionPage
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket: DeleteParametersPathCommentnumberDiscussionnumberResponses
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions: GetParametersPathCommentnumberDiscussionnumberQueryContentPage
    
    @JSName("/teams/{team_id}/discussions/{discussion_number}/reactions")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions: GetParametersPathDiscussionnumberTeamidQueryContentPage
    
    @JSName("/teams/{team_id}/invitations")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashinvitations: GetParametersPathTeamidQueryPage
    
    @JSName("/teams/{team_id}/members")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembers: GetParametersPathTeamidQueryPerpageRole
    
    @JSName("/teams/{team_id}/members/{username}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathTeamidUsername
    
    @JSName("/teams/{team_id}/memberships/{username}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathTeamidUsernameResponses126
    
    @JSName("/teams/{team_id}/projects")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashprojects: GetResponses200Content127404
    
    @JSName("/teams/{team_id}/projects/{project_id}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteParametersPathProjectidTeamidResponses90
    
    @JSName("/teams/{team_id}/repos")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashrepos: GetResponses200Content101
    
    @JSName("/teams/{team_id}/repos/{owner}/{repo}")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteParametersPathRepoTeamidResponses
    
    @JSName("/teams/{team_id}/team-sync/group-mappings")
    var `SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashteam-syncSlashgroup-mappings`: GetResponses200132403
    
    @JSName("/teams/{team_id}/teams")
    var SlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashteams: GetResponses200Content91403404
    
    @JSName("/user")
    var Slashuser: GetResponses200Content359
    
    @JSName("/user/blocks")
    var SlashuserSlashblocks: GetResponses200Content73304
    
    @JSName("/user/blocks/{username}")
    var SlashuserSlashblocksSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses362
    
    @JSName("/user/codespaces")
    var SlashuserSlashcodespaces: GetParametersQueryPerpageRepositoryid
    
    @JSName("/user/codespaces/{codespace_name}")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket: DeleteResponses202304
    
    @JSName("/user/codespaces/{codespace_name}/exports")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashexports: PostResponses202401403
    
    @JSName("/user/codespaces/{codespace_name}/exports/{export_id}")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashexportsSlashLeftcurlybracketexport_idRightcurlybracket: GetParametersPathExportid
    
    @JSName("/user/codespaces/{codespace_name}/machines")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashmachines: GetResponses401403404500
    
    @JSName("/user/codespaces/{codespace_name}/start")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstart: PostResponses402
    
    @JSName("/user/codespaces/{codespace_name}/stop")
    var SlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop: PostResponses200Content93401
    
    @JSName("/user/codespaces/secrets")
    var SlashuserSlashcodespacesSlashsecrets: GetResponses200ContentApplicationjson364
    
    @JSName("/user/codespaces/secrets/{secret_name}")
    var SlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPath366Responses
    
    @JSName("/user/codespaces/secrets/{secret_name}/repositories")
    var SlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetResponses200401403404500
    
    @JSName("/user/codespaces/secrets/{secret_name}/repositories/{repository_id}")
    var SlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidNumber
    
    @JSName("/user/codespaces/secrets/public-key")
    var `SlashuserSlashcodespacesSlashsecretsSlashpublic-key`: GetResponses200Content365
    
    @JSName("/user/email/visibility")
    var SlashuserSlashemailSlashvisibility: PatchRequestBodyContentApplicationjsonVisibility
    
    @JSName("/user/emails")
    var SlashuserSlashemails: DeleteParametersRequestBodyContentApplicationjsonEmailsArray
    
    @JSName("/user/followers")
    var SlashuserSlashfollowers: GetResponses200Content73Headers304
    
    @JSName("/user/following")
    var SlashuserSlashfollowing: GetResponses200Content73Headers304
    
    @JSName("/user/following/{username}")
    var SlashuserSlashfollowingSlashLeftcurlybracketusernameRightcurlybracket: GetParametersPath361
    
    @JSName("/user/gpg_keys")
    var SlashuserSlashgpg_keys: GetResponses200Content372
    
    @JSName("/user/gpg_keys/{gpg_key_id}")
    var SlashuserSlashgpg_keysSlashLeftcurlybracketgpg_key_idRightcurlybracket: DeleteParametersPathGpgkeyidResponses140
    
    @JSName("/user/installations")
    var SlashuserSlashinstallations: GetResponses200ContentApplicationjsonInstallations304
    
    @JSName("/user/installations/{installation_id}/repositories")
    var SlashuserSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashrepositories: GetParametersPathInstallationidQueryPage
    
    @JSName("/user/installations/{installation_id}/repositories/{repository_id}")
    var SlashuserSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathInstallationidRepositoryid
    
    @JSName("/user/interaction-limits")
    var `SlashuserSlashinteraction-limits`: Delete375
    
    @JSName("/user/issues")
    var SlashuserSlashissues: GetParameters376
    
    @JSName("/user/keys")
    var SlashuserSlashkeys: GetResponses200Content377
    
    @JSName("/user/keys/{key_id}")
    var SlashuserSlashkeysSlashLeftcurlybracketkey_idRightcurlybracket: DeleteParametersPath379Responses362
    
    @JSName("/user/marketplace_purchases")
    var SlashuserSlashmarketplace_purchases: GetResponses304401404
    
    @JSName("/user/marketplace_purchases/stubbed")
    var SlashuserSlashmarketplace_purchasesSlashstubbed: GetResponses200Content380
    
    @JSName("/user/memberships/orgs")
    var SlashuserSlashmembershipsSlashorgs: GetParametersQueryPagePerpageState
    
    @JSName("/user/memberships/orgs/{org}")
    var SlashuserSlashmembershipsSlashorgsSlashLeftcurlybracketorgRightcurlybracket: GetParametersPathOrgResponses200Content94
    
    @JSName("/user/migrations")
    var SlashuserSlashmigrations: GetResponses200Content97304
    
    @JSName("/user/migrations/{migration_id}")
    var SlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket: GetParametersPath383
    
    @JSName("/user/migrations/{migration_id}/archive")
    var SlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive: DeleteParameters385Responses362
    
    @JSName("/user/migrations/{migration_id}/repos/{repo_name}/lock")
    var SlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock: DeleteParametersPathMigrationidReponame
    
    @JSName("/user/migrations/{migration_id}/repositories")
    var SlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories: GetParametersPath383QueryPage
    
    @JSName("/user/orgs")
    var SlashuserSlashorgs: GetResponses200Content63Headers
    
    @JSName("/user/packages")
    var SlashuserSlashpackages: GetParameters386
    
    @JSName("/user/packages/{package_type}/{package_name}")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket: DeleteParametersPathPackagenamePackagetypeResponses401403404
    
    @JSName("/user/packages/{package_type}/{package_name}/restore")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore: PostParametersPathPackagenamePackagetypeQueryToken
    
    @JSName("/user/packages/{package_type}/{package_name}/versions")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions: GetParametersPathPackagenamePackagetypeQueryState
    
    @JSName("/user/packages/{package_type}/{package_name}/versions/{package_version_id}")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket: DeleteParametersPathPackagetypePackageversionidResponses401403404
    
    @JSName("/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")
    var SlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore: PostParametersPathPackagetypePackageversionidResponses401403404
    
    @JSName("/user/projects")
    var SlashuserSlashprojects: PostRequestBodyContentApplicationjsonBodyNameString
    
    @JSName("/user/public_emails")
    var SlashuserSlashpublic_emails: GetResponses200Content371Headers
    
    @JSName("/user/repos")
    var SlashuserSlashrepos: GetParametersQueryAffiliationBefore
    
    @JSName("/user/repository_invitations")
    var SlashuserSlashrepository_invitations: GetResponses200Content260304
    
    @JSName("/user/repository_invitations/{invitation_id}")
    var SlashuserSlashrepository_invitationsSlashLeftcurlybracketinvitation_idRightcurlybracket: DeleteParametersPath388
    
    @JSName("/user/ssh_signing_keys")
    var SlashuserSlashssh_signing_keys: GetResponses200Content389
    
    @JSName("/user/ssh_signing_keys/{ssh_signing_key_id}")
    var SlashuserSlashssh_signing_keysSlashLeftcurlybracketssh_signing_key_idRightcurlybracket: DeleteParametersPathSshsigningkeyidResponses362
    
    @JSName("/user/starred")
    var SlashuserSlashstarred: GetParametersQueryPagePerpageSort
    
    @JSName("/user/starred/{owner}/{repo}")
    var SlashuserSlashstarredSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteParameters144Responses362
    
    @JSName("/user/subscriptions")
    var SlashuserSlashsubscriptions: GetResponses200Content101304
    
    @JSName("/user/teams")
    var SlashuserSlashteams: GetResponses200Content391
    
    @JSName("/users")
    var Slashusers: GetParametersQuery392
    
    @JSName("/users/{username}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracket: GetResponses200Content359404
    
    @JSName("/users/{username}/events")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashevents: GetParametersPath361QueryPage
    
    @JSName("/users/{username}/events/orgs/{org}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlasheventsSlashorgsSlashLeftcurlybracketorgRightcurlybracket: GetParametersPathOrgUsername
    
    @JSName("/users/{username}/events/public")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlasheventsSlashpublic: GetParametersPath361QueryPage
    
    @JSName("/users/{username}/followers")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowers: GetParametersPath361QueryPageResponses102
    
    @JSName("/users/{username}/following")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowing: GetParametersPath361QueryPageResponses102
    
    @JSName("/users/{username}/following/{target_user}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowingSlashLeftcurlybrackettarget_userRightcurlybracket: GetParametersPathTargetuser
    
    @JSName("/users/{username}/gists")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashgists: GetParametersPath361QuerySince
    
    @JSName("/users/{username}/gpg_keys")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashgpg_keys: GetResponses393
    
    @JSName("/users/{username}/hovercard")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashhovercard: GetParametersQuerySubjectid
    
    @JSName("/users/{username}/installation")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashinstallation: GetParametersPath361Responses200Content5
    
    @JSName("/users/{username}/keys")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashkeys: GetResponses200Content395
    
    @JSName("/users/{username}/orgs")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashorgs: GetResponses396
    
    @JSName("/users/{username}/packages")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackages: GetParametersPath361QueryPackagetype
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket: DeleteParametersPathPackagetypeUsernameResponses401403404
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}/restore")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore: PostParametersPathPackagetypeUsernameQueryToken
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}/versions")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions: GetResponses200401403404
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket: DeleteParametersPathPackagenamePackagetypePackageversionid
    
    @JSName("/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore: PostParametersPathPackagenamePackagetypePackageversionid
    
    @JSName("/users/{username}/projects")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashprojects: GetParametersPath361QueryPerpageState
    
    @JSName("/users/{username}/received_events")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashreceived_events: GetParametersPath361QueryPage
    
    @JSName("/users/{username}/received_events/public")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashreceived_eventsSlashpublic: GetParametersPath361QueryPage
    
    @JSName("/users/{username}/repos")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashrepos: GetParametersQuerySortType
    
    @JSName("/users/{username}/settings/billing/actions")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashactions: GetParametersPath361Responses200Content30
    
    @JSName("/users/{username}/settings/billing/packages")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashpackages: GetParametersPath361Responses200Content32
    
    @JSName("/users/{username}/settings/billing/shared-storage")
    var `SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`: GetParametersPath361Responses200Content33
    
    @JSName("/users/{username}/ssh_signing_keys")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashssh_signing_keys: GetResponses397
    
    @JSName("/users/{username}/starred")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashstarred: GetParametersPath361QueryPagePerpageSort
    
    @JSName("/users/{username}/subscriptions")
    var SlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsubscriptions: GetParametersPath361QueryPageResponses109
    
    @JSName("/zen")
    var Slashzen: GetResponses200ContentTextplainString
  }
  object paths {
    
    inline def apply(
      Slash: Get,
      Slashapp: GetParameters,
      `Slashapp-manifestsSlashLeftcurlybracketcodeRightcurlybracketSlashconversions`: Post,
      SlashappSlashhookSlashconfig: Patch,
      SlashappSlashhookSlashdeliveries: GetParametersQuery,
      SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryid,
      SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostResponses202,
      SlashappSlashinstallations: GetParametersQueryOutdated,
      SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracket: Delete,
      SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashaccess_tokens: PostParametersRequestBody,
      SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashsuspended: Put,
      SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashgrant: DeleteRequestBodyResponses,
      SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtoken: DeletePatch,
      SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtokenSlashscoped: PostRequestBodyContentApplicationjsonRepositories,
      SlashappsSlashLeftcurlybracketapp_slugRightcurlybracket: GetParametersPathAppslug,
      Slashcodes_of_conduct: GetResponses304,
      Slashcodes_of_conductSlashLeftcurlybracketkeyRightcurlybracket: GetParametersPathKey,
      Slashemojis: GetResponses200Content12,
      `Slashenterprise-installationSlashLeftcurlybracketenterprise_or_orgRightcurlybracketSlashserver-statistics`: GetParametersPathQuery,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashcacheSlashusage: GetParametersPathEnterprise,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashissuer: PutRequestBodyContent15,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissions: GetPut,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashorganizations: GetParametersQueryPage,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashorganizationsSlashLeftcurlybracketorg_idRightcurlybracket: DeletePut,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetResponses200Content17,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetResponses200Content18,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groups`: GetPost,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracket`: DeleteGet,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashorganizations`: GetParametersPathRunnergroupidQueryPage,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashorganizationsSlashLeftcurlybracketorg_idRightcurlybracket`: DeleteParametersPathEnterpriseOrgid,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunners`: GetResponses200ContentApplicationjsonRunners,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket`: DeleteParametersPathRunnerid,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunners: GetResponses200ContentApplicationjsonTotalcount,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathEnterpriseRunneridResponses,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: PostPut,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathEnterpriseName,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetResponses200Content21,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostResponses201Content22,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostResponses201Content22,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashaudit-log`: GetParametersQueryAfter,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashcode-scanningSlashalerts`: GetParametersQueryBefore,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashconsumed-licenses`: GetResponses200Content27,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashlicense-sync-status`: GetResponses200Content28,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersQueryDirection,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashactions: GetResponses200Content30,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashadvanced-security`: GetResponses200Content31,
      SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashpackages: GetResponses200Content32,
      `SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`: GetResponses200Content33,
      Slashevents: GetParameters34,
      Slashfeeds: GetResponses200Content36,
      Slashgists: GetParametersQuerySince,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracket: GetPatch,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashLeftcurlybracketshaRightcurlybracket: GetParametersPathSha,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcomments: GetParametersPathGistidQueryPage,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket: DeleteGetPatch,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommits: GetResponses200Content44,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashforks: GetResponses200Content45,
      SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashstar: DeleteGetPut,
      SlashgistsSlashpublic: GetResponses403422,
      SlashgistsSlashstarred: GetResponses304401,
      SlashgitignoreSlashtemplates: GetResponses200Content48,
      SlashgitignoreSlashtemplatesSlashLeftcurlybracketnameRightcurlybracket: GetParametersPathNameString,
      SlashinstallationSlashrepositories: GetResponses401403,
      SlashinstallationSlashtoken: Delete50,
      Slashissues: GetParametersQueryCollab,
      Slashlicenses: GetParametersQueryFeatured,
      SlashlicensesSlashLeftcurlybracketlicenseRightcurlybracket: GetParametersPathLicense,
      Slashmarkdown: PostRequestBodyContentApplicationjsonContext,
      SlashmarkdownSlashraw: PostRequestBodyContentTextplain,
      Slashmarketplace_listingSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket: GetParametersPathAccountid,
      Slashmarketplace_listingSlashplans: GetResponses401404,
      Slashmarketplace_listingSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts: GetParametersPathPlanid,
      Slashmarketplace_listingSlashstubbedSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket: GetResponses200Content54,
      Slashmarketplace_listingSlashstubbedSlashplans: GetResponses200Content56,
      Slashmarketplace_listingSlashstubbedSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts: GetResponses200Content57,
      Slashmeta: GetResponses200Content58,
      SlashnetworksSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents: GetParametersPathOwner,
      Slashnotifications: GetParametersQueryAll,
      SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracket: GetParametersPathThreadid,
      SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracketSlashsubscription: DeleteResponses62,
      Slashoctocat: GetParametersQueryS,
      Slashorganizations: GetParametersQueryPerpageSince,
      SlashorganizationsSlashLeftcurlybracketorganization_idRightcurlybracketSlashcustom_roles: GetParametersPathOrganizationid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracket: GetParametersPathOrg,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketsecurity_productRightcurlybracketSlashLeftcurlybracketenablementRightcurlybracket: PostParametersPathEnablement,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage: GetResponses200ContentHeaders,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage-by-repository`: GetParametersPathOrgQueryPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub: GetResponses200Content66,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissions: GetResponses200Content68,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositories: GetResponses200ContentApplicationjsonRepositoriesTotalcount,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryid,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetParametersPathOrgResponses200Content17,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetParametersPathOrgResponses200Content18,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groups`: GetParametersQueryVisibletorepository,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracket`: DeleteParametersPathOrgRunnergroupidResponses,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrepositories`: GetParametersQueryPagePerpage,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket`: DeleteParametersPathOrgRepositoryid,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunners`: GetParametersPathOrgRunnergroupidQueryPage,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket`: DeleteParametersPathRunnergroupidRunnerid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunners: GetParametersPathOrgQueryPageResponses200ContentApplicationjsonRunners,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathOrgRunneridResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: DeleteGetPost,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOrg,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetParametersPathOrgResponses200Content21,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostParametersPathOrgResponses201Content22,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostParametersPathOrgResponses201Content22,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecrets: GetResponses200ContentApplicationjsonSecrets,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathSecretnameResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetParametersPathSecretnameQueryPagePerpage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidSecretname,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`: GetResponses200Content71,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashaudit-log`: GetParametersQueryInclude,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocks: GetResponses200Content73,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocksSlashLeftcurlybracketusernameRightcurlybracket: DeleteParametersPathUsernameResponses,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcode-scanningSlashalerts`: GetParametersPathOrgQueryBefore,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespaces: GetParameters74,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcredential-authorizations`: GetParametersQueryLogin,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcredential-authorizationsSlashLeftcurlybracketcredential_idRightcurlybracket`: DeleteParametersPathCredentialid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcustom_roles: PostRequestBodyContentApplicationjsonBaserole,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcustom_rolesSlashLeftcurlybracketrole_idRightcurlybracket: DeleteParametersPathRoleid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecrets: GetResponses200ContentApplicationjsonSecretsTotalcount,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: GetResponses200Content78,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories: GetParametersPathSecretnameQueryPagePerpage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket: DeleteParametersPathRepositoryidSecretname,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`: GetResponses200Content77,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashevents: GetResponses200Content35,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashexternal-groupSlashLeftcurlybracketgroup_idRightcurlybracket`: GetParametersPathGroupid,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashexternal-groups`: GetParametersQueryDisplayname,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfailed_invitations: GetResponses200Content81,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfine_grained_permissions: GetResponses200Content82,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooks: GetResponses200Content83,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket: DeleteParametersPathHookidResponses6,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig: GetParametersPathHookidResponses200Content2,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries: GetParametersQueryCursor,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket: GetParametersPathDeliveryidHookid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts: PostParametersPathDeliveryidHookidResponses202,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings: PostParametersPathHookidResponses6,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallation: GetResponses200Content5,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallations: GetResponses200ContentApplicationjsonInstallations,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinteraction-limits`: DeleteParametersPathOrgResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitations: PostRequestBodyContentApplicationjsonEmail,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket: DeleteParametersPathInvitationid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracketSlashteams: GetParametersPathInvitationidQueryPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashissues: GetParametersQueryFilter,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembers: GetParametersQueryRole,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses92,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket: DeleteParametersPathCodespacename,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop: PostResponses404500,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses96,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrations: GetParametersQueryExclude,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket: GetParametersPathMigrationid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive: DeleteParameters100,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock: DeleteParametersPathReponame,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories: GetParametersPathMigrationidQueryPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaborators: GetParametersQueryFilterPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses422ContentApplicationjsonDocumentationurl,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackages: GetParametersQueryPackagetype,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket: DeleteResponses401403404,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore: PostParametersQueryToken,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions: GetParametersQueryState,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket: DeleteParametersPathPackageversionidResponses401403404,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore: PostParametersPathPackageversionidResponses401403404,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashprojects: GetParametersQueryPerpageState,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_members: GetResponses102,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_membersSlashLeftcurlybracketusernameRightcurlybracket: GetResponses404Unknown,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrepos: GetParametersQueryType,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecret-scanningSlashalerts`: GetParametersQueryResolution,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managers`: GetResponses200Content111,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managersSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket`: DeleteParametersPathTeamslugResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashactions: GetParametersPathOrgResponses200Content30,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashadvanced-security`: GetParametersPathOrgQueryPageResponses200Content31,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashpackages: GetParametersPathOrgResponses200Content32,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`: GetParametersPathOrgResponses200Content33,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteam-syncSlashgroups`: GetParametersQuery112,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteams: GetResponses200Content91403,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket: GetResponses200Content114,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussions: GetParametersQueryPinned,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket: DeleteParametersPathDiscussionnumberResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments: GetParametersQueryDirectionPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket: DeleteParametersPathCommentnumberResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions: GetParametersQueryContentPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathReactionid,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions: GetParametersPathDiscussionnumberQueryContentPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket: DeleteParametersPathDiscussionnumberOrg,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashexternal-groups`: GetResponses200122,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashinvitations: GetParametersPathTeamslugQueryPage,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembers: GetParametersQueryPerpageRole,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses126,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojects: GetResponses200Content127,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteParametersPathProjectidResponses,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashrepos: GetResponses109,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteParametersPathRepoResponses,
      `SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteam-syncSlashgroup-mappings`: GetResponses200132,
      SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteams: GetResponses133,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket: DeleteResponses404410,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaborators: GetParametersQueryAffiliation,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket: DeleteResponses140,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission: GetResponses200304401403404422,
      SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcolumns: GetParametersPath139QueryPage,
      SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracket: DeleteParametersPath135Responses62,
      SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashcards: GetParametersQueryArchivedstate,
      SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashmoves: PostRequestBodyContentApplicationjsonPosition,
      SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracket: DeleteResponses403ContentApplicationjsonErrors,
      SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracketSlashmoves: PostRequestBodyContentApplicationjsonColumnid,
      Slashrate_limit: GetResponses200304404,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket: DeleteResponses307,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifacts: GetResponses200ContentApplicationjsonArtifacts,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracket: DeleteParametersPathArtifactidResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracketSlashLeftcurlybracketarchive_formatRightcurlybracket: GetParametersPathArchiveformat,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcacheSlashusage: GetResponses200Content148,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcaches: DeleteParametersQueryKeyRef,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcachesSlashLeftcurlybracketcache_idRightcurlybracket: DeleteParametersPathCacheid,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracket: GetParametersPathJobid,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashlogs: GetParametersPathJobidResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashrerun: PostRequestBodyContent152,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub: GetResponses200400,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissions: GetResponses200Content154,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashaccess: GetResponses200Content155,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`: GetParameters144Responses200Content17,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashworkflow: GetParameters144Responses200Content18,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunners: GetParametersPathOwnerResponses200ContentApplicationjsonRunners,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket: DeleteParametersPathOwnerRepoResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels: GetPostPut,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket: DeleteParametersPathNameOwner,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashdownloads: GetParameters144Responses200Content21,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`: PostParameters144Responses201Content22,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashremove-token`: PostParameters144Responses201Content22,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashruns: GetParametersQueryActor,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracket: DeleteParameters157,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprovals: GetResponses200Content158,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprove: PostResponses201403,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashartifacts: GetParametersPathRunidQueryPage,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracket: GetParametersPathAttemptnumber,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashjobs: GetParametersPathAttemptnumberQueryPage,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashlogs: GetParameters159,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashcancel: PostResponses202409,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashjobs: GetParametersQueryFilterPagePerpage,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashlogs: DeleteResponses403500,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashpending_deployments: GetResponses200Content161,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun: PostResponses201Content67,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun-failed-jobs`: PostResponses201Content67,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashtiming: GetResponses200Content163,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecrets: GetResponses200ContentApplicationjsonSecretsArray,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket: DeleteParametersPathRepoSecretnameResponses,
      `SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`: GetParameters144Responses200Content71,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflows: GetResponses200ContentApplicationjsonWorkflows,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracket: GetParametersPathWorkflowid,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdisable: PutParametersPathWorkflowidResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdispatches: PostRequestBodyContentApplicationjsonInputs,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashenable: PutParametersPathWorkflowidResponses,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashruns: GetParametersPathWorkflowidQueryActor,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashtiming: GetResponses200Content166,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassignees: GetResponses200Content73Headers404,
      SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket: GetParametersPathAssignee
    ): paths = {
      val __obj = js.Dynamic.literal()
      __obj.updateDynamic("/")(Slash.asInstanceOf[js.Any])
      __obj.updateDynamic("/app")(Slashapp.asInstanceOf[js.Any])
      __obj.updateDynamic("/app-manifests/{code}/conversions")(`Slashapp-manifestsSlashLeftcurlybracketcodeRightcurlybracketSlashconversions`.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/hook/config")(SlashappSlashhookSlashconfig.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/hook/deliveries")(SlashappSlashhookSlashdeliveries.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/hook/deliveries/{delivery_id}")(SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/hook/deliveries/{delivery_id}/attempts")(SlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/installations")(SlashappSlashinstallations.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/installations/{installation_id}")(SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/installations/{installation_id}/access_tokens")(SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashaccess_tokens.asInstanceOf[js.Any])
      __obj.updateDynamic("/app/installations/{installation_id}/suspended")(SlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashsuspended.asInstanceOf[js.Any])
      __obj.updateDynamic("/applications/{client_id}/grant")(SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashgrant.asInstanceOf[js.Any])
      __obj.updateDynamic("/applications/{client_id}/token")(SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtoken.asInstanceOf[js.Any])
      __obj.updateDynamic("/applications/{client_id}/token/scoped")(SlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtokenSlashscoped.asInstanceOf[js.Any])
      __obj.updateDynamic("/apps/{app_slug}")(SlashappsSlashLeftcurlybracketapp_slugRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/codes_of_conduct")(Slashcodes_of_conduct.asInstanceOf[js.Any])
      __obj.updateDynamic("/codes_of_conduct/{key}")(Slashcodes_of_conductSlashLeftcurlybracketkeyRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/emojis")(Slashemojis.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprise-installation/{enterprise_or_org}/server-statistics")(`Slashenterprise-installationSlashLeftcurlybracketenterprise_or_orgRightcurlybracketSlashserver-statistics`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/cache/usage")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashcacheSlashusage.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/oidc/customization/issuer")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashissuer.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/permissions")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissions.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/permissions/organizations")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashorganizations.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/permissions/organizations/{org_id}")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashorganizationsSlashLeftcurlybracketorg_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/permissions/selected-actions")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/permissions/workflow")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashworkflow.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runner-groups")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groups`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashorganizations`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashorganizationsSlashLeftcurlybracketorg_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunners`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runners")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunners.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runners/{runner_id}")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runners/{runner_id}/labels")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runners/downloads")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashdownloads.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runners/registration-token")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/actions/runners/remove-token")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashremove-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/audit-log")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashaudit-log`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/code-scanning/alerts")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashcode-scanningSlashalerts`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/consumed-licenses")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashconsumed-licenses`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/license-sync-status")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashlicense-sync-status`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/secret-scanning/alerts")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsecret-scanningSlashalerts`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/settings/billing/actions")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashactions.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/settings/billing/advanced-security")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashadvanced-security`.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/settings/billing/packages")(SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashpackages.asInstanceOf[js.Any])
      __obj.updateDynamic("/enterprises/{enterprise}/settings/billing/shared-storage")(`SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`.asInstanceOf[js.Any])
      __obj.updateDynamic("/events")(Slashevents.asInstanceOf[js.Any])
      __obj.updateDynamic("/feeds")(Slashfeeds.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists")(Slashgists.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/{sha}")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashLeftcurlybracketshaRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/comments")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcomments.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/comments/{comment_id}")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/commits")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommits.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/forks")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashforks.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/{gist_id}/star")(SlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashstar.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/public")(SlashgistsSlashpublic.asInstanceOf[js.Any])
      __obj.updateDynamic("/gists/starred")(SlashgistsSlashstarred.asInstanceOf[js.Any])
      __obj.updateDynamic("/gitignore/templates")(SlashgitignoreSlashtemplates.asInstanceOf[js.Any])
      __obj.updateDynamic("/gitignore/templates/{name}")(SlashgitignoreSlashtemplatesSlashLeftcurlybracketnameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/installation/repositories")(SlashinstallationSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/installation/token")(SlashinstallationSlashtoken.asInstanceOf[js.Any])
      __obj.updateDynamic("/issues")(Slashissues.asInstanceOf[js.Any])
      __obj.updateDynamic("/licenses")(Slashlicenses.asInstanceOf[js.Any])
      __obj.updateDynamic("/licenses/{license}")(SlashlicensesSlashLeftcurlybracketlicenseRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/markdown")(Slashmarkdown.asInstanceOf[js.Any])
      __obj.updateDynamic("/markdown/raw")(SlashmarkdownSlashraw.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/accounts/{account_id}")(Slashmarketplace_listingSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/plans")(Slashmarketplace_listingSlashplans.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/plans/{plan_id}/accounts")(Slashmarketplace_listingSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/stubbed/accounts/{account_id}")(Slashmarketplace_listingSlashstubbedSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/stubbed/plans")(Slashmarketplace_listingSlashstubbedSlashplans.asInstanceOf[js.Any])
      __obj.updateDynamic("/marketplace_listing/stubbed/plans/{plan_id}/accounts")(Slashmarketplace_listingSlashstubbedSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts.asInstanceOf[js.Any])
      __obj.updateDynamic("/meta")(Slashmeta.asInstanceOf[js.Any])
      __obj.updateDynamic("/networks/{owner}/{repo}/events")(SlashnetworksSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents.asInstanceOf[js.Any])
      __obj.updateDynamic("/notifications")(Slashnotifications.asInstanceOf[js.Any])
      __obj.updateDynamic("/notifications/threads/{thread_id}")(SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/notifications/threads/{thread_id}/subscription")(SlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracketSlashsubscription.asInstanceOf[js.Any])
      __obj.updateDynamic("/octocat")(Slashoctocat.asInstanceOf[js.Any])
      __obj.updateDynamic("/organizations")(Slashorganizations.asInstanceOf[js.Any])
      __obj.updateDynamic("/organizations/{organization_id}/custom_roles")(SlashorganizationsSlashLeftcurlybracketorganization_idRightcurlybracketSlashcustom_roles.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/{security_product}/{enablement}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketsecurity_productRightcurlybracketSlashLeftcurlybracketenablementRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/cache/usage")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/cache/usage-by-repository")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage-by-repository`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/oidc/customization/sub")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions/repositories/{repository_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions/selected-actions")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/permissions/workflow")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashworkflow.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runner-groups")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groups`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runner-groups/{runner_group_id}")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrepositories`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runner-groups/{runner_group_id}/runners")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunners`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunners.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/{runner_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/{runner_id}/labels")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/{runner_id}/labels/{name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/downloads")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashdownloads.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/registration-token")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/runners/remove-token")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashremove-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecrets.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets/{secret_name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets/{secret_name}/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/actions/secrets/public-key")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/audit-log")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashaudit-log`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/blocks")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocks.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/blocks/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocksSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/code-scanning/alerts")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcode-scanningSlashalerts`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/codespaces")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespaces.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/credential-authorizations")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcredential-authorizations`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/credential-authorizations/{credential_id}")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcredential-authorizationsSlashLeftcurlybracketcredential_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/custom_roles")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcustom_roles.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/custom_roles/{role_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcustom_rolesSlashLeftcurlybracketrole_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecrets.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets/{secret_name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets/{secret_name}/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/dependabot/secrets/public-key")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/events")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashevents.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/external-group/{group_id}")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashexternal-groupSlashLeftcurlybracketgroup_idRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/external-groups")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashexternal-groups`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/failed_invitations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfailed_invitations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/fine_grained_permissions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfine_grained_permissions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooks.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/config")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/deliveries")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/hooks/{hook_id}/pings")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/installation")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallation.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/installations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/interaction-limits")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinteraction-limits`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/invitations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/invitations/{invitation_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/invitations/{invitation_id}/teams")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracketSlashteams.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/issues")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashissues.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/members")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembers.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/members/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/members/{username}/codespaces/{codespace_name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/memberships/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations/{migration_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations/{migration_id}/archive")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/migrations/{migration_id}/repositories")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/outside_collaborators")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaborators.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/outside_collaborators/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaboratorsSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackages.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}/restore")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}/versions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/projects")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashprojects.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/public_members")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_members.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/public_members/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_membersSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/repos")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrepos.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/secret-scanning/alerts")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecret-scanningSlashalerts`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/security-managers")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managers`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/security-managers/teams/{team_slug}")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managersSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/settings/billing/actions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashactions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/settings/billing/advanced-security")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashadvanced-security`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/settings/billing/packages")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashpackages.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/settings/billing/shared-storage")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/team-sync/groups")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteam-syncSlashgroups`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteams.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/external-groups")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashexternal-groups`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/invitations")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashinvitations.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/members")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembers.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/memberships/{username}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/projects")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojects.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/projects/{project_id}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/repos")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashrepos.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/team-sync/group-mappings")(`SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteam-syncSlashgroup-mappings`.asInstanceOf[js.Any])
      __obj.updateDynamic("/orgs/{org}/teams/{team_slug}/teams")(SlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteams.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}/collaborators")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaborators.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}/collaborators/{username}")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}/collaborators/{username}/permission")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/{project_id}/columns")(SlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcolumns.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/{column_id}")(SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/{column_id}/cards")(SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashcards.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/{column_id}/moves")(SlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashmoves.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/cards/{card_id}")(SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/projects/columns/cards/{card_id}/moves")(SlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracketSlashmoves.asInstanceOf[js.Any])
      __obj.updateDynamic("/rate_limit")(Slashrate_limit.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/artifacts")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifacts.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracketSlashLeftcurlybracketarchive_formatRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/cache/usage")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcacheSlashusage.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/caches")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcaches.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/caches/{cache_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcachesSlashLeftcurlybracketcache_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/jobs/{job_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/jobs/{job_id}/logs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashlogs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashrerun.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/oidc/customization/sub")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/permissions")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissions.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/permissions/access")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashaccess.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/permissions/selected-actions")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/permissions/workflow")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashworkflow.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunners.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/{runner_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/{runner_id}/labels")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/downloads")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashdownloads.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/registration-token")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runners/remove-token")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashremove-token`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashruns.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/approvals")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprovals.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/approve")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprove.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashartifacts.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashjobs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashlogs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/cancel")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashcancel.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/jobs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashjobs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/logs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashlogs.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashpending_deployments.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/rerun")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun-failed-jobs`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/runs/{run_id}/timing")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashtiming.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/secrets")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecrets.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/secrets/{secret_name}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/secrets/public-key")(`SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflows.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracket.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdisable.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdispatches.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashenable.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashruns.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashtiming.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/assignees")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassignees.asInstanceOf[js.Any])
      __obj.updateDynamic("/repos/{owner}/{repo}/assignees/{assignee}")(SlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket.asInstanceOf[js.Any])
      __obj.asInstanceOf[paths]
    }
    
    extension [Self <: paths](x: Self) {
      
      inline def setSlash(value: Get): Self = StObject.set(x, "/", value.asInstanceOf[js.Any])
      
      inline def setSlashapp(value: GetParameters): Self = StObject.set(x, "/app", value.asInstanceOf[js.Any])
      
      inline def `setSlashapp-manifestsSlashLeftcurlybracketcodeRightcurlybracketSlashconversions`(value: Post): Self = StObject.set(x, "/app-manifests/{code}/conversions", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashhookSlashconfig(value: Patch): Self = StObject.set(x, "/app/hook/config", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashhookSlashdeliveries(value: GetParametersQuery): Self = StObject.set(x, "/app/hook/deliveries", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket(value: GetParametersPathDeliveryid): Self = StObject.set(x, "/app/hook/deliveries/{delivery_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashhookSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts(value: PostResponses202): Self = StObject.set(x, "/app/hook/deliveries/{delivery_id}/attempts", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashinstallations(value: GetParametersQueryOutdated): Self = StObject.set(x, "/app/installations", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracket(value: Delete): Self = StObject.set(x, "/app/installations/{installation_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashaccess_tokens(value: PostParametersRequestBody): Self = StObject.set(x, "/app/installations/{installation_id}/access_tokens", value.asInstanceOf[js.Any])
      
      inline def setSlashappSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashsuspended(value: Put): Self = StObject.set(x, "/app/installations/{installation_id}/suspended", value.asInstanceOf[js.Any])
      
      inline def setSlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashgrant(value: DeleteRequestBodyResponses): Self = StObject.set(x, "/applications/{client_id}/grant", value.asInstanceOf[js.Any])
      
      inline def setSlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtoken(value: DeletePatch): Self = StObject.set(x, "/applications/{client_id}/token", value.asInstanceOf[js.Any])
      
      inline def setSlashapplicationsSlashLeftcurlybracketclient_idRightcurlybracketSlashtokenSlashscoped(value: PostRequestBodyContentApplicationjsonRepositories): Self = StObject.set(x, "/applications/{client_id}/token/scoped", value.asInstanceOf[js.Any])
      
      inline def setSlashappsSlashLeftcurlybracketapp_slugRightcurlybracket(value: GetParametersPathAppslug): Self = StObject.set(x, "/apps/{app_slug}", value.asInstanceOf[js.Any])
      
      inline def setSlashcodes_of_conduct(value: GetResponses304): Self = StObject.set(x, "/codes_of_conduct", value.asInstanceOf[js.Any])
      
      inline def setSlashcodes_of_conductSlashLeftcurlybracketkeyRightcurlybracket(value: GetParametersPathKey): Self = StObject.set(x, "/codes_of_conduct/{key}", value.asInstanceOf[js.Any])
      
      inline def setSlashemojis(value: GetResponses200Content12): Self = StObject.set(x, "/emojis", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprise-installationSlashLeftcurlybracketenterprise_or_orgRightcurlybracketSlashserver-statistics`(value: GetParametersPathQuery): Self = StObject.set(x, "/enterprise-installation/{enterprise_or_org}/server-statistics", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashcacheSlashusage(value: GetParametersPathEnterprise): Self = StObject.set(x, "/enterprises/{enterprise}/actions/cache/usage", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashissuer(value: PutRequestBodyContent15): Self = StObject.set(x, "/enterprises/{enterprise}/actions/oidc/customization/issuer", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissions(value: GetPut): Self = StObject.set(x, "/enterprises/{enterprise}/actions/permissions", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashorganizations(value: GetParametersQueryPage): Self = StObject.set(x, "/enterprises/{enterprise}/actions/permissions/organizations", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashorganizationsSlashLeftcurlybracketorg_idRightcurlybracket(value: DeletePut): Self = StObject.set(x, "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`(value: GetResponses200Content17): Self = StObject.set(x, "/enterprises/{enterprise}/actions/permissions/selected-actions", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashpermissionsSlashworkflow(value: GetResponses200Content18): Self = StObject.set(x, "/enterprises/{enterprise}/actions/permissions/workflow", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groups`(value: GetPost): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runner-groups", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracket`(value: DeleteGet): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashorganizations`(value: GetParametersPathRunnergroupidQueryPage): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashorganizationsSlashLeftcurlybracketorg_idRightcurlybracket`(value: DeleteParametersPathEnterpriseOrgid): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunners`(value: GetResponses200ContentApplicationjsonRunners): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket`(value: DeleteParametersPathRunnerid): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunners(value: GetResponses200ContentApplicationjsonTotalcount): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runners", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket(value: DeleteParametersPathEnterpriseRunneridResponses): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runners/{runner_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels(value: PostPut): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runners/{runner_id}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathEnterpriseName): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashdownloads(value: GetResponses200Content21): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runners/downloads", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`(value: PostResponses201Content22): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runners/registration-token", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashactionsSlashrunnersSlashremove-token`(value: PostResponses201Content22): Self = StObject.set(x, "/enterprises/{enterprise}/actions/runners/remove-token", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashaudit-log`(value: GetParametersQueryAfter): Self = StObject.set(x, "/enterprises/{enterprise}/audit-log", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashcode-scanningSlashalerts`(value: GetParametersQueryBefore): Self = StObject.set(x, "/enterprises/{enterprise}/code-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashconsumed-licenses`(value: GetResponses200Content27): Self = StObject.set(x, "/enterprises/{enterprise}/consumed-licenses", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashlicense-sync-status`(value: GetResponses200Content28): Self = StObject.set(x, "/enterprises/{enterprise}/license-sync-status", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsecret-scanningSlashalerts`(value: GetParametersQueryDirection): Self = StObject.set(x, "/enterprises/{enterprise}/secret-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashactions(value: GetResponses200Content30): Self = StObject.set(x, "/enterprises/{enterprise}/settings/billing/actions", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashadvanced-security`(value: GetResponses200Content31): Self = StObject.set(x, "/enterprises/{enterprise}/settings/billing/advanced-security", value.asInstanceOf[js.Any])
      
      inline def setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashpackages(value: GetResponses200Content32): Self = StObject.set(x, "/enterprises/{enterprise}/settings/billing/packages", value.asInstanceOf[js.Any])
      
      inline def `setSlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`(value: GetResponses200Content33): Self = StObject.set(x, "/enterprises/{enterprise}/settings/billing/shared-storage", value.asInstanceOf[js.Any])
      
      inline def setSlashevents(value: GetParameters34): Self = StObject.set(x, "/events", value.asInstanceOf[js.Any])
      
      inline def setSlashfeeds(value: GetResponses200Content36): Self = StObject.set(x, "/feeds", value.asInstanceOf[js.Any])
      
      inline def setSlashgists(value: GetParametersQuerySince): Self = StObject.set(x, "/gists", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracket(value: GetPatch): Self = StObject.set(x, "/gists/{gist_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashLeftcurlybracketshaRightcurlybracket(value: GetParametersPathSha): Self = StObject.set(x, "/gists/{gist_id}/{sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcomments(value: GetParametersPathGistidQueryPage): Self = StObject.set(x, "/gists/{gist_id}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket(value: DeleteGetPatch): Self = StObject.set(x, "/gists/{gist_id}/comments/{comment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashcommits(value: GetResponses200Content44): Self = StObject.set(x, "/gists/{gist_id}/commits", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashforks(value: GetResponses200Content45): Self = StObject.set(x, "/gists/{gist_id}/forks", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashLeftcurlybracketgist_idRightcurlybracketSlashstar(value: DeleteGetPut): Self = StObject.set(x, "/gists/{gist_id}/star", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashpublic(value: GetResponses403422): Self = StObject.set(x, "/gists/public", value.asInstanceOf[js.Any])
      
      inline def setSlashgistsSlashstarred(value: GetResponses304401): Self = StObject.set(x, "/gists/starred", value.asInstanceOf[js.Any])
      
      inline def setSlashgitignoreSlashtemplates(value: GetResponses200Content48): Self = StObject.set(x, "/gitignore/templates", value.asInstanceOf[js.Any])
      
      inline def setSlashgitignoreSlashtemplatesSlashLeftcurlybracketnameRightcurlybracket(value: GetParametersPathNameString): Self = StObject.set(x, "/gitignore/templates/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashinstallationSlashrepositories(value: GetResponses401403): Self = StObject.set(x, "/installation/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashinstallationSlashtoken(value: Delete50): Self = StObject.set(x, "/installation/token", value.asInstanceOf[js.Any])
      
      inline def setSlashissues(value: GetParametersQueryCollab): Self = StObject.set(x, "/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashlicenses(value: GetParametersQueryFeatured): Self = StObject.set(x, "/licenses", value.asInstanceOf[js.Any])
      
      inline def setSlashlicensesSlashLeftcurlybracketlicenseRightcurlybracket(value: GetParametersPathLicense): Self = StObject.set(x, "/licenses/{license}", value.asInstanceOf[js.Any])
      
      inline def setSlashmarkdown(value: PostRequestBodyContentApplicationjsonContext): Self = StObject.set(x, "/markdown", value.asInstanceOf[js.Any])
      
      inline def setSlashmarkdownSlashraw(value: PostRequestBodyContentTextplain): Self = StObject.set(x, "/markdown/raw", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket(value: GetParametersPathAccountid): Self = StObject.set(x, "/marketplace_listing/accounts/{account_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashplans(value: GetResponses401404): Self = StObject.set(x, "/marketplace_listing/plans", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts(value: GetParametersPathPlanid): Self = StObject.set(x, "/marketplace_listing/plans/{plan_id}/accounts", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashstubbedSlashaccountsSlashLeftcurlybracketaccount_idRightcurlybracket(value: GetResponses200Content54): Self = StObject.set(x, "/marketplace_listing/stubbed/accounts/{account_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashstubbedSlashplans(value: GetResponses200Content56): Self = StObject.set(x, "/marketplace_listing/stubbed/plans", value.asInstanceOf[js.Any])
      
      inline def setSlashmarketplace_listingSlashstubbedSlashplansSlashLeftcurlybracketplan_idRightcurlybracketSlashaccounts(value: GetResponses200Content57): Self = StObject.set(x, "/marketplace_listing/stubbed/plans/{plan_id}/accounts", value.asInstanceOf[js.Any])
      
      inline def setSlashmeta(value: GetResponses200Content58): Self = StObject.set(x, "/meta", value.asInstanceOf[js.Any])
      
      inline def setSlashnetworksSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents(value: GetParametersPathOwner): Self = StObject.set(x, "/networks/{owner}/{repo}/events", value.asInstanceOf[js.Any])
      
      inline def setSlashnotifications(value: GetParametersQueryAll): Self = StObject.set(x, "/notifications", value.asInstanceOf[js.Any])
      
      inline def setSlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracket(value: GetParametersPathThreadid): Self = StObject.set(x, "/notifications/threads/{thread_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashnotificationsSlashthreadsSlashLeftcurlybracketthread_idRightcurlybracketSlashsubscription(value: DeleteResponses62): Self = StObject.set(x, "/notifications/threads/{thread_id}/subscription", value.asInstanceOf[js.Any])
      
      inline def setSlashoctocat(value: GetParametersQueryS): Self = StObject.set(x, "/octocat", value.asInstanceOf[js.Any])
      
      inline def setSlashorganizations(value: GetParametersQueryPerpageSince): Self = StObject.set(x, "/organizations", value.asInstanceOf[js.Any])
      
      inline def setSlashorganizationsSlashLeftcurlybracketorganization_idRightcurlybracketSlashcustom_roles(value: GetParametersPathOrganizationid): Self = StObject.set(x, "/organizations/{organization_id}/custom_roles", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracket(value: GetParametersPathOrg): Self = StObject.set(x, "/orgs/{org}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashLeftcurlybracketsecurity_productRightcurlybracketSlashLeftcurlybracketenablementRightcurlybracket(value: PostParametersPathEnablement): Self = StObject.set(x, "/orgs/{org}/{security_product}/{enablement}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage(value: GetResponses200ContentHeaders): Self = StObject.set(x, "/orgs/{org}/actions/cache/usage", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashcacheSlashusage-by-repository`(value: GetParametersPathOrgQueryPage): Self = StObject.set(x, "/orgs/{org}/actions/cache/usage-by-repository", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub(value: GetResponses200Content66): Self = StObject.set(x, "/orgs/{org}/actions/oidc/customization/sub", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissions(value: GetResponses200Content68): Self = StObject.set(x, "/orgs/{org}/actions/permissions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositories(value: GetResponses200ContentApplicationjsonRepositoriesTotalcount): Self = StObject.set(x, "/orgs/{org}/actions/permissions/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathRepositoryid): Self = StObject.set(x, "/orgs/{org}/actions/permissions/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`(value: GetParametersPathOrgResponses200Content17): Self = StObject.set(x, "/orgs/{org}/actions/permissions/selected-actions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashpermissionsSlashworkflow(value: GetParametersPathOrgResponses200Content18): Self = StObject.set(x, "/orgs/{org}/actions/permissions/workflow", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groups`(value: GetParametersQueryVisibletorepository): Self = StObject.set(x, "/orgs/{org}/actions/runner-groups", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracket`(value: DeleteParametersPathOrgRunnergroupidResponses): Self = StObject.set(x, "/orgs/{org}/actions/runner-groups/{runner_group_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrepositories`(value: GetParametersQueryPagePerpage): Self = StObject.set(x, "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket`(value: DeleteParametersPathOrgRepositoryid): Self = StObject.set(x, "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunners`(value: GetParametersPathOrgRunnergroupidQueryPage): Self = StObject.set(x, "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunner-groupsSlashLeftcurlybracketrunner_group_idRightcurlybracketSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket`(value: DeleteParametersPathRunnergroupidRunnerid): Self = StObject.set(x, "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunners(value: GetParametersPathOrgQueryPageResponses200ContentApplicationjsonRunners): Self = StObject.set(x, "/orgs/{org}/actions/runners", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket(value: DeleteParametersPathOrgRunneridResponses): Self = StObject.set(x, "/orgs/{org}/actions/runners/{runner_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels(value: DeleteGetPost): Self = StObject.set(x, "/orgs/{org}/actions/runners/{runner_id}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathNameOrg): Self = StObject.set(x, "/orgs/{org}/actions/runners/{runner_id}/labels/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashdownloads(value: GetParametersPathOrgResponses200Content21): Self = StObject.set(x, "/orgs/{org}/actions/runners/downloads", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`(value: PostParametersPathOrgResponses201Content22): Self = StObject.set(x, "/orgs/{org}/actions/runners/registration-token", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashrunnersSlashremove-token`(value: PostParametersPathOrgResponses201Content22): Self = StObject.set(x, "/orgs/{org}/actions/runners/remove-token", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecrets(value: GetResponses200ContentApplicationjsonSecrets): Self = StObject.set(x, "/orgs/{org}/actions/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: DeleteParametersPathSecretnameResponses): Self = StObject.set(x, "/orgs/{org}/actions/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories(value: GetParametersPathSecretnameQueryPagePerpage): Self = StObject.set(x, "/orgs/{org}/actions/secrets/{secret_name}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathRepositoryidSecretname): Self = StObject.set(x, "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`(value: GetResponses200Content71): Self = StObject.set(x, "/orgs/{org}/actions/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashaudit-log`(value: GetParametersQueryInclude): Self = StObject.set(x, "/orgs/{org}/audit-log", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocks(value: GetResponses200Content73): Self = StObject.set(x, "/orgs/{org}/blocks", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashblocksSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteParametersPathUsernameResponses): Self = StObject.set(x, "/orgs/{org}/blocks/{username}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcode-scanningSlashalerts`(value: GetParametersPathOrgQueryBefore): Self = StObject.set(x, "/orgs/{org}/code-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcodespaces(value: GetParameters74): Self = StObject.set(x, "/orgs/{org}/codespaces", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcredential-authorizations`(value: GetParametersQueryLogin): Self = StObject.set(x, "/orgs/{org}/credential-authorizations", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcredential-authorizationsSlashLeftcurlybracketcredential_idRightcurlybracket`(value: DeleteParametersPathCredentialid): Self = StObject.set(x, "/orgs/{org}/credential-authorizations/{credential_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcustom_roles(value: PostRequestBodyContentApplicationjsonBaserole): Self = StObject.set(x, "/orgs/{org}/custom_roles", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashcustom_rolesSlashLeftcurlybracketrole_idRightcurlybracket(value: DeleteParametersPathRoleid): Self = StObject.set(x, "/orgs/{org}/custom_roles/{role_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecrets(value: GetResponses200ContentApplicationjsonSecretsTotalcount): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: GetResponses200Content78): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories(value: GetParametersPathSecretnameQueryPagePerpage): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets/{secret_name}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathRepositoryidSecretname): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`(value: GetResponses200Content77): Self = StObject.set(x, "/orgs/{org}/dependabot/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashevents(value: GetResponses200Content35): Self = StObject.set(x, "/orgs/{org}/events", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashexternal-groupSlashLeftcurlybracketgroup_idRightcurlybracket`(value: GetParametersPathGroupid): Self = StObject.set(x, "/orgs/{org}/external-group/{group_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashexternal-groups`(value: GetParametersQueryDisplayname): Self = StObject.set(x, "/orgs/{org}/external-groups", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfailed_invitations(value: GetResponses200Content81): Self = StObject.set(x, "/orgs/{org}/failed_invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashfine_grained_permissions(value: GetResponses200Content82): Self = StObject.set(x, "/orgs/{org}/fine_grained_permissions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooks(value: GetResponses200Content83): Self = StObject.set(x, "/orgs/{org}/hooks", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket(value: DeleteParametersPathHookidResponses6): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig(value: GetParametersPathHookidResponses200Content2): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/config", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries(value: GetParametersQueryCursor): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/deliveries", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket(value: GetParametersPathDeliveryidHookid): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts(value: PostParametersPathDeliveryidHookidResponses202): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings(value: PostParametersPathHookidResponses6): Self = StObject.set(x, "/orgs/{org}/hooks/{hook_id}/pings", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallation(value: GetResponses200Content5): Self = StObject.set(x, "/orgs/{org}/installation", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinstallations(value: GetResponses200ContentApplicationjsonInstallations): Self = StObject.set(x, "/orgs/{org}/installations", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinteraction-limits`(value: DeleteParametersPathOrgResponses): Self = StObject.set(x, "/orgs/{org}/interaction-limits", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitations(value: PostRequestBodyContentApplicationjsonEmail): Self = StObject.set(x, "/orgs/{org}/invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket(value: DeleteParametersPathInvitationid): Self = StObject.set(x, "/orgs/{org}/invitations/{invitation_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracketSlashteams(value: GetParametersPathInvitationidQueryPage): Self = StObject.set(x, "/orgs/{org}/invitations/{invitation_id}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashissues(value: GetParametersQueryFilter): Self = StObject.set(x, "/orgs/{org}/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembers(value: GetParametersQueryRole): Self = StObject.set(x, "/orgs/{org}/members", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses92): Self = StObject.set(x, "/orgs/{org}/members/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket(value: DeleteParametersPathCodespacename): Self = StObject.set(x, "/orgs/{org}/members/{username}/codespaces/{codespace_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracketSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop(value: PostResponses404500): Self = StObject.set(x, "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses96): Self = StObject.set(x, "/orgs/{org}/memberships/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrations(value: GetParametersQueryExclude): Self = StObject.set(x, "/orgs/{org}/migrations", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket(value: GetParametersPathMigrationid): Self = StObject.set(x, "/orgs/{org}/migrations/{migration_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive(value: DeleteParameters100): Self = StObject.set(x, "/orgs/{org}/migrations/{migration_id}/archive", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock(value: DeleteParametersPathReponame): Self = StObject.set(x, "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories(value: GetParametersPathMigrationidQueryPage): Self = StObject.set(x, "/orgs/{org}/migrations/{migration_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaborators(value: GetParametersQueryFilterPage): Self = StObject.set(x, "/orgs/{org}/outside_collaborators", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashoutside_collaboratorsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses422ContentApplicationjsonDocumentationurl): Self = StObject.set(x, "/orgs/{org}/outside_collaborators/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackages(value: GetParametersQueryPackagetype): Self = StObject.set(x, "/orgs/{org}/packages", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket(value: DeleteResponses401403404): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore(value: PostParametersQueryToken): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions(value: GetParametersQueryState): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}/versions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket(value: DeleteParametersPathPackageversionidResponses401403404): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore(value: PostParametersPathPackageversionidResponses401403404): Self = StObject.set(x, "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashprojects(value: GetParametersQueryPerpageState): Self = StObject.set(x, "/orgs/{org}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_members(value: GetResponses102): Self = StObject.set(x, "/orgs/{org}/public_members", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashpublic_membersSlashLeftcurlybracketusernameRightcurlybracket(value: GetResponses404Unknown): Self = StObject.set(x, "/orgs/{org}/public_members/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashrepos(value: GetParametersQueryType): Self = StObject.set(x, "/orgs/{org}/repos", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecret-scanningSlashalerts`(value: GetParametersQueryResolution): Self = StObject.set(x, "/orgs/{org}/secret-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managers`(value: GetResponses200Content111): Self = StObject.set(x, "/orgs/{org}/security-managers", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsecurity-managersSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket`(value: DeleteParametersPathTeamslugResponses): Self = StObject.set(x, "/orgs/{org}/security-managers/teams/{team_slug}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashactions(value: GetParametersPathOrgResponses200Content30): Self = StObject.set(x, "/orgs/{org}/settings/billing/actions", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashadvanced-security`(value: GetParametersPathOrgQueryPageResponses200Content31): Self = StObject.set(x, "/orgs/{org}/settings/billing/advanced-security", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashpackages(value: GetParametersPathOrgResponses200Content32): Self = StObject.set(x, "/orgs/{org}/settings/billing/packages", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`(value: GetParametersPathOrgResponses200Content33): Self = StObject.set(x, "/orgs/{org}/settings/billing/shared-storage", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteam-syncSlashgroups`(value: GetParametersQuery112): Self = StObject.set(x, "/orgs/{org}/team-sync/groups", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteams(value: GetResponses200Content91403): Self = StObject.set(x, "/orgs/{org}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracket(value: GetResponses200Content114): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussions(value: GetParametersQueryPinned): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket(value: DeleteParametersPathDiscussionnumberResponses): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments(value: GetParametersQueryDirectionPage): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket(value: DeleteParametersPathCommentnumberResponses): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions(value: GetParametersQueryContentPage): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathReactionid): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions(value: GetParametersPathDiscussionnumberQueryContentPage): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathDiscussionnumberOrg): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashexternal-groups`(value: GetResponses200122): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/external-groups", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashinvitations(value: GetParametersPathTeamslugQueryPage): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembers(value: GetParametersQueryPerpageRole): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/members", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses126): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/memberships/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojects(value: GetResponses200Content127): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket(value: DeleteParametersPathProjectidResponses): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/projects/{project_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashrepos(value: GetResponses109): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/repos", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket(value: DeleteParametersPathRepoResponses): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}", value.asInstanceOf[js.Any])
      
      inline def `setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteam-syncSlashgroup-mappings`(value: GetResponses200132): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings", value.asInstanceOf[js.Any])
      
      inline def setSlashorgsSlashLeftcurlybracketorgRightcurlybracketSlashteamsSlashLeftcurlybracketteam_slugRightcurlybracketSlashteams(value: GetResponses133): Self = StObject.set(x, "/orgs/{org}/teams/{team_slug}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket(value: DeleteResponses404410): Self = StObject.set(x, "/projects/{project_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaborators(value: GetParametersQueryAffiliation): Self = StObject.set(x, "/projects/{project_id}/collaborators", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses140): Self = StObject.set(x, "/projects/{project_id}/collaborators/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission(value: GetResponses200304401403404422): Self = StObject.set(x, "/projects/{project_id}/collaborators/{username}/permission", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracketSlashcolumns(value: GetParametersPath139QueryPage): Self = StObject.set(x, "/projects/{project_id}/columns", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracket(value: DeleteParametersPath135Responses62): Self = StObject.set(x, "/projects/columns/{column_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashcards(value: GetParametersQueryArchivedstate): Self = StObject.set(x, "/projects/columns/{column_id}/cards", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashLeftcurlybracketcolumn_idRightcurlybracketSlashmoves(value: PostRequestBodyContentApplicationjsonPosition): Self = StObject.set(x, "/projects/columns/{column_id}/moves", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracket(value: DeleteResponses403ContentApplicationjsonErrors): Self = StObject.set(x, "/projects/columns/cards/{card_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashprojectsSlashcolumnsSlashcardsSlashLeftcurlybracketcard_idRightcurlybracketSlashmoves(value: PostRequestBodyContentApplicationjsonColumnid): Self = StObject.set(x, "/projects/columns/cards/{card_id}/moves", value.asInstanceOf[js.Any])
      
      inline def setSlashrate_limit(value: GetResponses200304404): Self = StObject.set(x, "/rate_limit", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket(value: DeleteResponses307): Self = StObject.set(x, "/repos/{owner}/{repo}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifacts(value: GetResponses200ContentApplicationjsonArtifacts): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/artifacts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracket(value: DeleteParametersPathArtifactidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashartifactsSlashLeftcurlybracketartifact_idRightcurlybracketSlashLeftcurlybracketarchive_formatRightcurlybracket(value: GetParametersPathArchiveformat): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcacheSlashusage(value: GetResponses200Content148): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/cache/usage", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcaches(value: DeleteParametersQueryKeyRef): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/caches", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashcachesSlashLeftcurlybracketcache_idRightcurlybracket(value: DeleteParametersPathCacheid): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/caches/{cache_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracket(value: GetParametersPathJobid): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/jobs/{job_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashlogs(value: GetParametersPathJobidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashjobsSlashLeftcurlybracketjob_idRightcurlybracketSlashrerun(value: PostRequestBodyContent152): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashoidcSlashcustomizationSlashsub(value: GetResponses200400): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/oidc/customization/sub", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissions(value: GetResponses200Content154): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/permissions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashaccess(value: GetResponses200Content155): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/permissions/access", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashselected-actions`(value: GetParameters144Responses200Content17): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/permissions/selected-actions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashpermissionsSlashworkflow(value: GetParameters144Responses200Content18): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/permissions/workflow", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunners(value: GetParametersPathOwnerResponses200ContentApplicationjsonRunners): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracket(value: DeleteParametersPathOwnerRepoResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/{runner_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabels(value: GetPostPut): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashLeftcurlybracketrunner_idRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathNameOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashdownloads(value: GetParameters144Responses200Content21): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/downloads", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashregistration-token`(value: PostParameters144Responses201Content22): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/registration-token", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunnersSlashremove-token`(value: PostParameters144Responses201Content22): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runners/remove-token", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashruns(value: GetParametersQueryActor): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracket(value: DeleteParameters157): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprovals(value: GetResponses200Content158): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashapprove(value: PostResponses201403): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/approve", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashartifacts(value: GetParametersPathRunidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracket(value: GetParametersPathAttemptnumber): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashjobs(value: GetParametersPathAttemptnumberQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashattemptsSlashLeftcurlybracketattempt_numberRightcurlybracketSlashlogs(value: GetParameters159): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashcancel(value: PostResponses202409): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashjobs(value: GetParametersQueryFilterPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashlogs(value: DeleteResponses403500): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/logs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashpending_deployments(value: GetResponses200Content161): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun(value: PostResponses201Content67): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashrerun-failed-jobs`(value: PostResponses201Content67): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashrunsSlashLeftcurlybracketrun_idRightcurlybracketSlashtiming(value: GetResponses200Content163): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/runs/{run_id}/timing", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecrets(value: GetResponses200ContentApplicationjsonSecretsArray): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: DeleteParametersPathRepoSecretnameResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashsecretsSlashpublic-key`(value: GetParameters144Responses200Content71): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflows(value: GetResponses200ContentApplicationjsonWorkflows): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracket(value: GetParametersPathWorkflowid): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdisable(value: PutParametersPathWorkflowidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashdispatches(value: PostRequestBodyContentApplicationjsonInputs): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashenable(value: PutParametersPathWorkflowidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashruns(value: GetParametersPathWorkflowidQueryActor): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashactionsSlashworkflowsSlashLeftcurlybracketworkflow_idRightcurlybracketSlashtiming(value: GetResponses200Content166): Self = StObject.set(x, "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassignees(value: GetResponses200Content73Headers404): Self = StObject.set(x, "/repos/{owner}/{repo}/assignees", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashassigneesSlashLeftcurlybracketassigneeRightcurlybracket(value: GetParametersPathAssignee): Self = StObject.set(x, "/repos/{owner}/{repo}/assignees/{assignee}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinks(value: GetParametersQuery167): Self = StObject.set(x, "/repos/{owner}/{repo}/autolinks", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautolinksSlashLeftcurlybracketautolink_idRightcurlybracket(value: DeleteParametersPathAutolinkidResponses6): Self = StObject.set(x, "/repos/{owner}/{repo}/autolinks/{autolink_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashautomated-security-fixes`(value: DeleteParameters144Responses): Self = StObject.set(x, "/repos/{owner}/{repo}/automated-security-fixes", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranches(value: GetParametersQueryProtected): Self = StObject.set(x, "/repos/{owner}/{repo}/branches", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracket(value: GetParametersPathBranch): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotection(value: DeleteParametersPathBranchResponses92): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashenforce_admins(value: DeleteParametersPathBranchResponses6): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_pull_request_reviews(value: GetResponses200Content176): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_signatures(value: GetResponses200Content175404): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checks(value: DeleteParametersPathBranchResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrequired_status_checksSlashcontexts(value: DeleteGetPostPut): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictions(value: GetResponses200Content178): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashapps(value: DeleteRequestBodyContentApplicationjsonAppsArray): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashteams(value: DeleteRequestBodyContentApplicationjsonTeamsArray): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashprotectionSlashrestrictionsSlashusers(value: DeleteRequestBodyContentApplicationjsonUsers): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashbranchesSlashLeftcurlybracketbranchRightcurlybracketSlashrename(value: PostRequestBodyContentApplicationjsonNewname): Self = StObject.set(x, "/repos/{owner}/{repo}/branches/{branch}/rename", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runs`(value: PostRequestBodyContent182): Self = StObject.set(x, "/repos/{owner}/{repo}/check-runs", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracket`(value: GetParametersPathCheckrunid): Self = StObject.set(x, "/repos/{owner}/{repo}/check-runs/{check_run_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracketSlashannotations`(value: GetParametersPathCheckrunidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-runsSlashLeftcurlybracketcheck_run_idRightcurlybracketSlashrerequest`(value: PostResponses201403404422): Self = StObject.set(x, "/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suites`(value: PostRequestBodyContentApplicationjsonHeadsha): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracket`(value: GetParametersPathChecksuiteid): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites/{check_suite_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracketSlashcheck-runs`(value: GetParametersQueryCheckname): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashLeftcurlybracketcheck_suite_idRightcurlybracketSlashrerequest`(value: PostResponses201Content47): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcheck-suitesSlashpreferences`(value: PatchRequestBodyContentApplicationjsonAutotriggerchecks): Self = StObject.set(x, "/repos/{owner}/{repo}/check-suites/preferences", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalerts`(value: GetParametersQueryToolguid): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket`(value: GetParametersPathAlertnumber): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracketSlashinstances`(value: GetParametersQueryPerpageRef): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashanalyses`(value: GetParametersQuerySarifid): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/analyses", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashanalysesSlashLeftcurlybracketanalysis_idRightcurlybracket`(value: DeleteParametersQueryConfirmdelete): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashcodeqlSlashdatabases`(value: GetResponses200Content193): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/codeql/databases", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashcodeqlSlashdatabasesSlashLeftcurlybracketlanguageRightcurlybracket`(value: GetParametersPathLanguage): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashsarifs`(value: PostRequestBodyContentApplicationjsonCheckouturi): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/sarifs", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcode-scanningSlashsarifsSlashLeftcurlybracketsarif_idRightcurlybracket`(value: GetParametersPathRepoSarifid): Self = StObject.set(x, "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodeownersSlasherrors(value: GetParametersQuery197): Self = StObject.set(x, "/repos/{owner}/{repo}/codeowners/errors", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespaces(value: GetParametersPathOwnerQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashdevcontainers(value: GetResponses400401): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/devcontainers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashmachines(value: GetParametersQueryClientipLocation): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/machines", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashnew(value: GetParametersQueryClientipRef): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/new", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecrets(value: GetResponses200ContentApplicationjsonTotalcountNumber): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: GetResponses200Content204): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcodespacesSlashsecretsSlashpublic-key`(value: GetResponses200Content203): Self = StObject.set(x, "/repos/{owner}/{repo}/codespaces/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaborators(value: GetParametersQueryAffiliationPage): Self = StObject.set(x, "/repos/{owner}/{repo}/collaborators", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteParametersPathRepoUsernameResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/collaborators/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcollaboratorsSlashLeftcurlybracketusernameRightcurlybracketSlashpermission(value: GetResponses200Content208): Self = StObject.set(x, "/repos/{owner}/{repo}/collaborators/{username}/permission", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcomments(value: GetResponses200Content209): Self = StObject.set(x, "/repos/{owner}/{repo}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket(value: DeleteParametersPathCommentidOwnerResponses6): Self = StObject.set(x, "/repos/{owner}/{repo}/comments/{comment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions(value: GetParametersPathCommentidOwnerQueryContentPage): Self = StObject.set(x, "/repos/{owner}/{repo}/comments/{comment_id}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathOwnerReactionid): Self = StObject.set(x, "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommits(value: GetParametersQueryAuthor): Self = StObject.set(x, "/repos/{owner}/{repo}/commits", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashbranches-where-head`(value: GetParametersPathCommitsha): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashcomments(value: GetParametersPathCommitshaQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{commit_sha}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracketSlashpulls(value: GetResponses200Content213): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{commit_sha}/pulls", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracket(value: GetParametersPathOwnerRef): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashcheck-runs`(value: GetParametersQueryAppidCheckname): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}/check-runs", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashcheck-suites`(value: GetParametersQueryChecknamePage): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}/check-suites", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashstatus(value: GetParametersPathOwnerRefQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}/status", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommitsSlashLeftcurlybracketrefRightcurlybracketSlashstatuses(value: GetResponses200Content216): Self = StObject.set(x, "/repos/{owner}/{repo}/commits/{ref}/statuses", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcommunitySlashprofile(value: GetResponses200Content217): Self = StObject.set(x, "/repos/{owner}/{repo}/community/profile", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcompareSlashLeftcurlybracketbaseRightcurlybracketDotDotDotLeftcurlybracketheadRightcurlybracket(value: GetParametersPathBaseHead_): Self = StObject.set(x, "/repos/{owner}/{repo}/compare/{base}...{head}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcompareSlashLeftcurlybracketbaseheadRightcurlybracket(value: GetParametersPathBasehead): Self = StObject.set(x, "/repos/{owner}/{repo}/compare/{basehead}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcontentsSlashLeftcurlybracketpathRightcurlybracket(value: DeleteRequestBodyContentApplicationjsonAuthorBranch): Self = StObject.set(x, "/repos/{owner}/{repo}/contents/{path}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashcontributors(value: GetParametersQueryAnon): Self = StObject.set(x, "/repos/{owner}/{repo}/contributors", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecrets(value: GetResponses200ContentApplicationjsonSecretsArrayTotalcountNumber): Self = StObject.set(x, "/repos/{owner}/{repo}/dependabot/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: GetResponses200Content222): Self = StObject.set(x, "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependabotSlashsecretsSlashpublic-key`(value: GetParameters144Responses200Content77): Self = StObject.set(x, "/repos/{owner}/{repo}/dependabot/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashcompareSlashLeftcurlybracketbaseheadRightcurlybracket`(value: GetParametersQuery223): Self = StObject.set(x, "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdependency-graphSlashsnapshots`(value: PostRequestBodyContent225): Self = StObject.set(x, "/repos/{owner}/{repo}/dependency-graph/snapshots", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeployments(value: GetParametersQueryEnvironment): Self = StObject.set(x, "/repos/{owner}/{repo}/deployments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracket(value: DeleteResponses227): Self = StObject.set(x, "/repos/{owner}/{repo}/deployments/{deployment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracketSlashstatuses(value: GetParametersPathDeploymentidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdeploymentsSlashLeftcurlybracketdeployment_idRightcurlybracketSlashstatusesSlashLeftcurlybracketstatus_idRightcurlybracket(value: GetParametersPathStatusid): Self = StObject.set(x, "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashdispatches(value: PostRequestBodyContentApplicationjsonClientpayload): Self = StObject.set(x, "/repos/{owner}/{repo}/dispatches", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironments(value: GetResponses200ContentApplicationjsonEnvironments): Self = StObject.set(x, "/repos/{owner}/{repo}/environments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracket(value: DeleteParametersPathEnvironmentnameResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/environments/{environment_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment-branch-policies`(value: GetParametersPathEnvironmentnameQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashdeployment-branch-policiesSlashLeftcurlybracketbranch_policy_idRightcurlybracket`(value: DeleteParametersPathBranchpolicyidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashevents(value: GetParametersPathOwnerResponses200Content35): Self = StObject.set(x, "/repos/{owner}/{repo}/events", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashforks(value: GetParametersQueryPerpageSort): Self = StObject.set(x, "/repos/{owner}/{repo}/forks", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashblobs(value: PostRequestBodyContentApplicationjsonEncoding): Self = StObject.set(x, "/repos/{owner}/{repo}/git/blobs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashblobsSlashLeftcurlybracketfile_shaRightcurlybracket(value: GetParametersPathFilesha): Self = StObject.set(x, "/repos/{owner}/{repo}/git/blobs/{file_sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashcommits(value: PostRequestBodyContentApplicationjsonParents): Self = StObject.set(x, "/repos/{owner}/{repo}/git/commits", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashcommitsSlashLeftcurlybracketcommit_shaRightcurlybracket(value: GetResponses200240): Self = StObject.set(x, "/repos/{owner}/{repo}/git/commits/{commit_sha}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashmatching-refsSlashLeftcurlybracketrefRightcurlybracket`(value: GetParameters241): Self = StObject.set(x, "/repos/{owner}/{repo}/git/matching-refs/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefSlashLeftcurlybracketrefRightcurlybracket(value: GetResponses200Content243): Self = StObject.set(x, "/repos/{owner}/{repo}/git/ref/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefs(value: PostRequestBodyContentApplicationjsonRefSha): Self = StObject.set(x, "/repos/{owner}/{repo}/git/refs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashrefsSlashLeftcurlybracketrefRightcurlybracket(value: DeleteParameters241Responses8): Self = StObject.set(x, "/repos/{owner}/{repo}/git/refs/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtags(value: PostRequestBodyContentApplicationjsonObject): Self = StObject.set(x, "/repos/{owner}/{repo}/git/tags", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtagsSlashLeftcurlybrackettag_shaRightcurlybracket(value: GetParametersPathTagsha): Self = StObject.set(x, "/repos/{owner}/{repo}/git/tags/{tag_sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtrees(value: PostRequestBodyContentApplicationjsonBasetree): Self = StObject.set(x, "/repos/{owner}/{repo}/git/trees", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashgitSlashtreesSlashLeftcurlybrackettree_shaRightcurlybracket(value: GetParametersPathTreesha): Self = StObject.set(x, "/repos/{owner}/{repo}/git/trees/{tree_sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooks(value: GetResponses200Content248): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracket(value: DeleteParametersPathHookidOwnerResponses6): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashconfig(value: GetParametersPathHookidOwnerResponses200Content2): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/config", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveries(value: GetParametersPathHookidOwnerQueryCursor): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracket(value: GetParametersPathDeliveryidHookidOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashdeliveriesSlashLeftcurlybracketdelivery_idRightcurlybracketSlashattempts(value: PostParametersPathDeliveryidHookidOwnerResponses202): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashpings(value: PostParametersPathHookidOwnerResponses6): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/pings", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashhooksSlashLeftcurlybrackethook_idRightcurlybracketSlashtests(value: PostParametersPathHookidOwnerResponses6): Self = StObject.set(x, "/repos/{owner}/{repo}/hooks/{hook_id}/tests", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimport(value: PatchPut): Self = StObject.set(x, "/repos/{owner}/{repo}/import", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashauthors(value: GetParametersQuery255): Self = StObject.set(x, "/repos/{owner}/{repo}/import/authors", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashauthorsSlashLeftcurlybracketauthor_idRightcurlybracket(value: PatchParametersPathAuthorid): Self = StObject.set(x, "/repos/{owner}/{repo}/import/authors/{author_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashlarge_files(value: GetResponses200Content259): Self = StObject.set(x, "/repos/{owner}/{repo}/import/large_files", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashimportSlashlfs(value: PatchRequestBodyContentApplicationjsonUselfs): Self = StObject.set(x, "/repos/{owner}/{repo}/import/lfs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinstallation(value: GetResponses200301404): Self = StObject.set(x, "/repos/{owner}/{repo}/installation", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinteraction-limits`(value: DeleteParameters144Responses409Unknown): Self = StObject.set(x, "/repos/{owner}/{repo}/interaction-limits", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinvitations(value: GetResponses200Content260): Self = StObject.set(x, "/repos/{owner}/{repo}/invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashinvitationsSlashLeftcurlybracketinvitation_idRightcurlybracket(value: DeleteParametersPathInvitationidOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/invitations/{invitation_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissues(value: GetParametersQueryCreator): Self = StObject.set(x, "/repos/{owner}/{repo}/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracket(value: GetParametersPathIssuenumber): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashassignees(value: DeletePost): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/assignees", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashcomments(value: GetParametersPathIssuenumberQuerySince): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashevents(value: GetParametersPathIssuenumberQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/events", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlabels(value: DeleteResponses147): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathIssuenumberName): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashlock(value: DeleteParametersPathIssuenumberResponses96): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/lock", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashreactions(value: GetParametersPathIssuenumberQueryContentPage): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathIssuenumberOwner): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashLeftcurlybracketissue_numberRightcurlybracketSlashtimeline(value: GetResponses200Content276): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/{issue_number}/timeline", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcomments(value: GetParametersQuerySinceSort): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket(value: DeleteParametersPathCommentidOwnerResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/comments/{comment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions(value: GetParametersPathCommentidOwnerQueryContentPage): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathOwnerReactionid): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlashevents(value: GetResponses200Content265): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/events", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashissuesSlasheventsSlashLeftcurlybracketevent_idRightcurlybracket(value: GetParametersPathEventid): Self = StObject.set(x, "/repos/{owner}/{repo}/issues/events/{event_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashkeys(value: GetResponses200Content277): Self = StObject.set(x, "/repos/{owner}/{repo}/keys", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashkeysSlashLeftcurlybracketkey_idRightcurlybracket(value: DeleteParametersPathKeyidOwnerResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/keys/{key_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlabels(value: GetResponses200Content270404): Self = StObject.set(x, "/repos/{owner}/{repo}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlabelsSlashLeftcurlybracketnameRightcurlybracket(value: DeleteParametersPathNameOwnerRepoResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/labels/{name}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlanguages(value: GetResponses200Content283): Self = StObject.set(x, "/repos/{owner}/{repo}/languages", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlfs(value: PutResponses202403Unknown): Self = StObject.set(x, "/repos/{owner}/{repo}/lfs", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashlicense(value: GetResponses200Content284): Self = StObject.set(x, "/repos/{owner}/{repo}/license", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmerge-upstream`(value: PostRequestBodyContentApplicationjsonBranchString): Self = StObject.set(x, "/repos/{owner}/{repo}/merge-upstream", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmerges(value: PostRequestBodyContentApplicationjsonBase): Self = StObject.set(x, "/repos/{owner}/{repo}/merges", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestones(value: GetParametersQuerySortState): Self = StObject.set(x, "/repos/{owner}/{repo}/milestones", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestonesSlashLeftcurlybracketmilestone_numberRightcurlybracket(value: DeleteParametersPathMilestonenumberResponses6): Self = StObject.set(x, "/repos/{owner}/{repo}/milestones/{milestone_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashmilestonesSlashLeftcurlybracketmilestone_numberRightcurlybracketSlashlabels(value: GetParametersPathMilestonenumberQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/milestones/{milestone_number}/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashnotifications(value: GetParametersQueryParticipating): Self = StObject.set(x, "/repos/{owner}/{repo}/notifications", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpages(value: DeleteResponses90): Self = StObject.set(x, "/repos/{owner}/{repo}/pages", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuilds(value: GetResponses200Content294): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/builds", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuildsSlashLeftcurlybracketbuild_idRightcurlybracket(value: GetParametersPathBuildid): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/builds/{build_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashbuildsSlashlatest(value: GetResponses200Content296): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/builds/latest", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashdeployment(value: PostRequestBodyContentApplicationjsonArtifacturl): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/deployment", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpagesSlashhealth(value: GetResponses200202): Self = StObject.set(x, "/repos/{owner}/{repo}/pages/health", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashprojects(value: GetParametersPathOwnerQueryPerpageState): Self = StObject.set(x, "/repos/{owner}/{repo}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpulls(value: GetParametersQueryHead): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracket(value: GetParametersPathPullnumber): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcodespaces(value: PostRequestBodyContent308): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcomments(value: GetParametersPathPullnumberQuerySinceSort): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreplies(value: PostParametersPathOwnerPullnumber): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashcommits(value: GetParametersPathPullnumberQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/commits", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashfiles(value: GetResponses200422500): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/files", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashmerge(value: GetParametersPathPullnumberResponses404Unknown): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/merge", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashrequested_reviewers(value: DeleteRequestBodyContentApplicationjsonTeamreviewers): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviews(value: GetResponses200Content314): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracket(value: DeleteResponses200Content315404422): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashcomments(value: GetParametersPathReviewidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashdismissals(value: PutRequestBodyContentApplicationjsonEvent): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashreviewsSlashLeftcurlybracketreview_idRightcurlybracketSlashevents(value: PostRequestBodyContentApplicationjsonBodyEvent): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashLeftcurlybracketpull_numberRightcurlybracketSlashupdate-branch`(value: PutRequestBodyContent317): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcomments(value: GetParametersQueryDirectionPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracket(value: GetResponses200Content303): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/comments/{comment_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactions(value: GetParametersPathCommentidOwnerQueryContentPage): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashpullsSlashcommentsSlashLeftcurlybracketcomment_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathOwnerReactionid): Self = StObject.set(x, "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreadme(value: GetResponses200Content318): Self = StObject.set(x, "/repos/{owner}/{repo}/readme", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreadmeSlashLeftcurlybracketdirRightcurlybracket(value: GetParametersPathDir): Self = StObject.set(x, "/repos/{owner}/{repo}/readme/{dir}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleases(value: GetResponses200Content319): Self = StObject.set(x, "/repos/{owner}/{repo}/releases", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracket(value: DeleteParametersPathReleaseidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/{release_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashassets(value: GetParametersPathReleaseidQueryPage): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/{release_id}/assets", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashreactions(value: GetParametersQueryContentPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/{release_id}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashLeftcurlybracketrelease_idRightcurlybracketSlashreactionsSlashLeftcurlybracketreaction_idRightcurlybracket(value: DeleteParametersPathReactionidReleaseid): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashassetsSlashLeftcurlybracketasset_idRightcurlybracket(value: DeleteParametersPathAssetidResponses): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/assets/{asset_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashgenerate-notes`(value: PostRequestBodyContentApplicationjsonConfigurationfilepath): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/generate-notes", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashlatest(value: GetResponses200323): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/latest", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashreleasesSlashtagsSlashLeftcurlybrackettagRightcurlybracket(value: GetParametersPathTag): Self = StObject.set(x, "/repos/{owner}/{repo}/releases/tags/{tag}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalerts`(value: GetParametersPathOwnerQueryResolution): Self = StObject.set(x, "/repos/{owner}/{repo}/secret-scanning/alerts", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracket`(value: GetResponses304404503): Self = StObject.set(x, "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsecret-scanningSlashalertsSlashLeftcurlybracketalert_numberRightcurlybracketSlashlocations`(value: GetParametersPathAlertnumberQueryPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstargazers(value: GetResponses200Content330): Self = StObject.set(x, "/repos/{owner}/{repo}/stargazers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcode_frequency(value: GetResponses202204): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/code_frequency", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcommit_activity(value: GetResponses200202204): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/commit_activity", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashcontributors(value: GetResponses200Content333): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/contributors", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashparticipation(value: GetResponses200Content334): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/participation", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatsSlashpunch_card(value: GetResponses200204): Self = StObject.set(x, "/repos/{owner}/{repo}/stats/punch_card", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashstatusesSlashLeftcurlybracketshaRightcurlybracket(value: PostParametersPathRepoSha): Self = StObject.set(x, "/repos/{owner}/{repo}/statuses/{sha}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsubscribers(value: GetParametersPathOwnerResponses102): Self = StObject.set(x, "/repos/{owner}/{repo}/subscribers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashsubscription(value: GetResponses200Content336): Self = StObject.set(x, "/repos/{owner}/{repo}/subscription", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtags(value: GetResponses200Content338): Self = StObject.set(x, "/repos/{owner}/{repo}/tags", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtagsSlashprotection(value: GetResponses200Content339): Self = StObject.set(x, "/repos/{owner}/{repo}/tags/protection", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtagsSlashprotectionSlashLeftcurlybrackettag_protection_idRightcurlybracket(value: DeleteParametersPathTagprotectionid): Self = StObject.set(x, "/repos/{owner}/{repo}/tags/protection/{tag_protection_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtarballSlashLeftcurlybracketrefRightcurlybracket(value: GetParameters241Responses): Self = StObject.set(x, "/repos/{owner}/{repo}/tarball/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashteams(value: GetParametersPathOwnerResponses133): Self = StObject.set(x, "/repos/{owner}/{repo}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtopics(value: GetParametersPathOwnerQueryPagePerpage): Self = StObject.set(x, "/repos/{owner}/{repo}/topics", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashclones(value: GetParametersQueryPer): Self = StObject.set(x, "/repos/{owner}/{repo}/traffic/clones", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashpopularSlashpaths(value: GetResponses200Content343): Self = StObject.set(x, "/repos/{owner}/{repo}/traffic/popular/paths", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashpopularSlashreferrers(value: GetResponses200Content344): Self = StObject.set(x, "/repos/{owner}/{repo}/traffic/popular/referrers", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtrafficSlashviews(value: GetResponses200Content345): Self = StObject.set(x, "/repos/{owner}/{repo}/traffic/views", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashtransfer(value: PostRequestBodyContentApplicationjsonNewowner): Self = StObject.set(x, "/repos/{owner}/{repo}/transfer", value.asInstanceOf[js.Any])
      
      inline def `setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashvulnerability-alerts`(value: GetParameters144Responses404Unknown): Self = StObject.set(x, "/repos/{owner}/{repo}/vulnerability-alerts", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracketSlashzipballSlashLeftcurlybracketrefRightcurlybracket(value: GetParameters241Responses): Self = StObject.set(x, "/repos/{owner}/{repo}/zipball/{ref}", value.asInstanceOf[js.Any])
      
      inline def setSlashreposSlashLeftcurlybrackettemplate_ownerRightcurlybracketSlashLeftcurlybrackettemplate_repoRightcurlybracketSlashgenerate(value: PostParametersPathTemplateowner): Self = StObject.set(x, "/repos/{template_owner}/{template_repo}/generate", value.asInstanceOf[js.Any])
      
      inline def setSlashrepositories(value: GetParametersQuery347): Self = StObject.set(x, "/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecrets(value: GetParametersPathEnvironmentnameRepositoryid): Self = StObject.set(x, "/repositories/{repository_id}/environments/{environment_name}/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: DeleteParametersPathEnvironmentnameRepositoryidSecretnameResponses): Self = StObject.set(x, "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def `setSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracketSlashenvironmentsSlashLeftcurlybracketenvironment_nameRightcurlybracketSlashsecretsSlashpublic-key`(value: GetParameters348): Self = StObject.set(x, "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashscimSlashv2SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashGroups(value: GetParametersQueryCount): Self = StObject.set(x, "/scim/v2/enterprises/{enterprise}/Groups", value.asInstanceOf[js.Any])
      
      inline def setSlashscimSlashv2SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashGroupsSlashLeftcurlybracketscim_group_idRightcurlybracket(value: GetPatchPut): Self = StObject.set(x, "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashscimSlashv2SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashUsers(value: GetParametersQueryStartIndex): Self = StObject.set(x, "/scim/v2/enterprises/{enterprise}/Users", value.asInstanceOf[js.Any])
      
      inline def setSlashscimSlashv2SlashenterprisesSlashLeftcurlybracketenterpriseRightcurlybracketSlashUsersSlashLeftcurlybracketscim_user_idRightcurlybracket(value: DeleteGetPatchPut): Self = StObject.set(x, "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashscimSlashv2SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashUsers(value: GetParametersQueryCountFilter): Self = StObject.set(x, "/scim/v2/organizations/{org}/Users", value.asInstanceOf[js.Any])
      
      inline def setSlashscimSlashv2SlashorganizationsSlashLeftcurlybracketorgRightcurlybracketSlashUsersSlashLeftcurlybracketscim_user_idRightcurlybracket(value: DeleteResponses356): Self = StObject.set(x, "/scim/v2/organizations/{org}/Users/{scim_user_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashcode(value: GetParametersQueryOrder): Self = StObject.set(x, "/search/code", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashcommits(value: GetParametersQueryQ): Self = StObject.set(x, "/search/commits", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashissues(value: GetParametersQueryOrderPage): Self = StObject.set(x, "/search/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashlabels(value: GetParametersQueryPerpageQ): Self = StObject.set(x, "/search/labels", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashrepositories(value: GetParametersQueryQSort): Self = StObject.set(x, "/search/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashtopics(value: GetParametersQueryPagePerpageQ): Self = StObject.set(x, "/search/topics", value.asInstanceOf[js.Any])
      
      inline def setSlashsearchSlashusers(value: GetParametersQueryOrderPagePerpage): Self = StObject.set(x, "/search/users", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracket(value: DeleteParametersPathTeamidResponses90): Self = StObject.set(x, "/teams/{team_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussions(value: GetParametersPathTeamidQueryDirectionPage): Self = StObject.set(x, "/teams/{team_id}/discussions", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracket(value: DeleteParametersPathDiscussionnumberTeamidResponses): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcomments(value: GetParametersPathDiscussionnumberTeamidQueryDirectionPage): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}/comments", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracket(value: DeleteParametersPathCommentnumberDiscussionnumberResponses): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashcommentsSlashLeftcurlybracketcomment_numberRightcurlybracketSlashreactions(value: GetParametersPathCommentnumberDiscussionnumberQueryContentPage): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashdiscussionsSlashLeftcurlybracketdiscussion_numberRightcurlybracketSlashreactions(value: GetParametersPathDiscussionnumberTeamidQueryContentPage): Self = StObject.set(x, "/teams/{team_id}/discussions/{discussion_number}/reactions", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashinvitations(value: GetParametersPathTeamidQueryPage): Self = StObject.set(x, "/teams/{team_id}/invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembers(value: GetParametersPathTeamidQueryPerpageRole): Self = StObject.set(x, "/teams/{team_id}/members", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembersSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteParametersPathTeamidUsername): Self = StObject.set(x, "/teams/{team_id}/members/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashmembershipsSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteParametersPathTeamidUsernameResponses126): Self = StObject.set(x, "/teams/{team_id}/memberships/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashprojects(value: GetResponses200Content127404): Self = StObject.set(x, "/teams/{team_id}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashprojectsSlashLeftcurlybracketproject_idRightcurlybracket(value: DeleteParametersPathProjectidTeamidResponses90): Self = StObject.set(x, "/teams/{team_id}/projects/{project_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashrepos(value: GetResponses200Content101): Self = StObject.set(x, "/teams/{team_id}/repos", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashreposSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket(value: DeleteParametersPathRepoTeamidResponses): Self = StObject.set(x, "/teams/{team_id}/repos/{owner}/{repo}", value.asInstanceOf[js.Any])
      
      inline def `setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashteam-syncSlashgroup-mappings`(value: GetResponses200132403): Self = StObject.set(x, "/teams/{team_id}/team-sync/group-mappings", value.asInstanceOf[js.Any])
      
      inline def setSlashteamsSlashLeftcurlybracketteam_idRightcurlybracketSlashteams(value: GetResponses200Content91403404): Self = StObject.set(x, "/teams/{team_id}/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashuser(value: GetResponses200Content359): Self = StObject.set(x, "/user", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashblocks(value: GetResponses200Content73304): Self = StObject.set(x, "/user/blocks", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashblocksSlashLeftcurlybracketusernameRightcurlybracket(value: DeleteResponses362): Self = StObject.set(x, "/user/blocks/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespaces(value: GetParametersQueryPerpageRepositoryid): Self = StObject.set(x, "/user/codespaces", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracket(value: DeleteResponses202304): Self = StObject.set(x, "/user/codespaces/{codespace_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashexports(value: PostResponses202401403): Self = StObject.set(x, "/user/codespaces/{codespace_name}/exports", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashexportsSlashLeftcurlybracketexport_idRightcurlybracket(value: GetParametersPathExportid): Self = StObject.set(x, "/user/codespaces/{codespace_name}/exports/{export_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashmachines(value: GetResponses401403404500): Self = StObject.set(x, "/user/codespaces/{codespace_name}/machines", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstart(value: PostResponses402): Self = StObject.set(x, "/user/codespaces/{codespace_name}/start", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashLeftcurlybracketcodespace_nameRightcurlybracketSlashstop(value: PostResponses200Content93401): Self = StObject.set(x, "/user/codespaces/{codespace_name}/stop", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashsecrets(value: GetResponses200ContentApplicationjson364): Self = StObject.set(x, "/user/codespaces/secrets", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracket(value: DeleteParametersPath366Responses): Self = StObject.set(x, "/user/codespaces/secrets/{secret_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositories(value: GetResponses200401403404500): Self = StObject.set(x, "/user/codespaces/secrets/{secret_name}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashcodespacesSlashsecretsSlashLeftcurlybracketsecret_nameRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathRepositoryidNumber): Self = StObject.set(x, "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashuserSlashcodespacesSlashsecretsSlashpublic-key`(value: GetResponses200Content365): Self = StObject.set(x, "/user/codespaces/secrets/public-key", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashemailSlashvisibility(value: PatchRequestBodyContentApplicationjsonVisibility): Self = StObject.set(x, "/user/email/visibility", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashemails(value: DeleteParametersRequestBodyContentApplicationjsonEmailsArray): Self = StObject.set(x, "/user/emails", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashfollowers(value: GetResponses200Content73Headers304): Self = StObject.set(x, "/user/followers", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashfollowing(value: GetResponses200Content73Headers304): Self = StObject.set(x, "/user/following", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashfollowingSlashLeftcurlybracketusernameRightcurlybracket(value: GetParametersPath361): Self = StObject.set(x, "/user/following/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashgpg_keys(value: GetResponses200Content372): Self = StObject.set(x, "/user/gpg_keys", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashgpg_keysSlashLeftcurlybracketgpg_key_idRightcurlybracket(value: DeleteParametersPathGpgkeyidResponses140): Self = StObject.set(x, "/user/gpg_keys/{gpg_key_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashinstallations(value: GetResponses200ContentApplicationjsonInstallations304): Self = StObject.set(x, "/user/installations", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashrepositories(value: GetParametersPathInstallationidQueryPage): Self = StObject.set(x, "/user/installations/{installation_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashinstallationsSlashLeftcurlybracketinstallation_idRightcurlybracketSlashrepositoriesSlashLeftcurlybracketrepository_idRightcurlybracket(value: DeleteParametersPathInstallationidRepositoryid): Self = StObject.set(x, "/user/installations/{installation_id}/repositories/{repository_id}", value.asInstanceOf[js.Any])
      
      inline def `setSlashuserSlashinteraction-limits`(value: Delete375): Self = StObject.set(x, "/user/interaction-limits", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashissues(value: GetParameters376): Self = StObject.set(x, "/user/issues", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashkeys(value: GetResponses200Content377): Self = StObject.set(x, "/user/keys", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashkeysSlashLeftcurlybracketkey_idRightcurlybracket(value: DeleteParametersPath379Responses362): Self = StObject.set(x, "/user/keys/{key_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmarketplace_purchases(value: GetResponses304401404): Self = StObject.set(x, "/user/marketplace_purchases", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmarketplace_purchasesSlashstubbed(value: GetResponses200Content380): Self = StObject.set(x, "/user/marketplace_purchases/stubbed", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmembershipsSlashorgs(value: GetParametersQueryPagePerpageState): Self = StObject.set(x, "/user/memberships/orgs", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmembershipsSlashorgsSlashLeftcurlybracketorgRightcurlybracket(value: GetParametersPathOrgResponses200Content94): Self = StObject.set(x, "/user/memberships/orgs/{org}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrations(value: GetResponses200Content97304): Self = StObject.set(x, "/user/migrations", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracket(value: GetParametersPath383): Self = StObject.set(x, "/user/migrations/{migration_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlasharchive(value: DeleteParameters385Responses362): Self = StObject.set(x, "/user/migrations/{migration_id}/archive", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashreposSlashLeftcurlybracketrepo_nameRightcurlybracketSlashlock(value: DeleteParametersPathMigrationidReponame): Self = StObject.set(x, "/user/migrations/{migration_id}/repos/{repo_name}/lock", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashmigrationsSlashLeftcurlybracketmigration_idRightcurlybracketSlashrepositories(value: GetParametersPath383QueryPage): Self = StObject.set(x, "/user/migrations/{migration_id}/repositories", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashorgs(value: GetResponses200Content63Headers): Self = StObject.set(x, "/user/orgs", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackages(value: GetParameters386): Self = StObject.set(x, "/user/packages", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket(value: DeleteParametersPathPackagenamePackagetypeResponses401403404): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore(value: PostParametersPathPackagenamePackagetypeQueryToken): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions(value: GetParametersPathPackagenamePackagetypeQueryState): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}/versions", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket(value: DeleteParametersPathPackagetypePackageversionidResponses401403404): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}/versions/{package_version_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore(value: PostParametersPathPackagetypePackageversionidResponses401403404): Self = StObject.set(x, "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashprojects(value: PostRequestBodyContentApplicationjsonBodyNameString): Self = StObject.set(x, "/user/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashpublic_emails(value: GetResponses200Content371Headers): Self = StObject.set(x, "/user/public_emails", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashrepos(value: GetParametersQueryAffiliationBefore): Self = StObject.set(x, "/user/repos", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashrepository_invitations(value: GetResponses200Content260304): Self = StObject.set(x, "/user/repository_invitations", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashrepository_invitationsSlashLeftcurlybracketinvitation_idRightcurlybracket(value: DeleteParametersPath388): Self = StObject.set(x, "/user/repository_invitations/{invitation_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashssh_signing_keys(value: GetResponses200Content389): Self = StObject.set(x, "/user/ssh_signing_keys", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashssh_signing_keysSlashLeftcurlybracketssh_signing_key_idRightcurlybracket(value: DeleteParametersPathSshsigningkeyidResponses362): Self = StObject.set(x, "/user/ssh_signing_keys/{ssh_signing_key_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashstarred(value: GetParametersQueryPagePerpageSort): Self = StObject.set(x, "/user/starred", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashstarredSlashLeftcurlybracketownerRightcurlybracketSlashLeftcurlybracketrepoRightcurlybracket(value: DeleteParameters144Responses362): Self = StObject.set(x, "/user/starred/{owner}/{repo}", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashsubscriptions(value: GetResponses200Content101304): Self = StObject.set(x, "/user/subscriptions", value.asInstanceOf[js.Any])
      
      inline def setSlashuserSlashteams(value: GetResponses200Content391): Self = StObject.set(x, "/user/teams", value.asInstanceOf[js.Any])
      
      inline def setSlashusers(value: GetParametersQuery392): Self = StObject.set(x, "/users", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracket(value: GetResponses200Content359404): Self = StObject.set(x, "/users/{username}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashevents(value: GetParametersPath361QueryPage): Self = StObject.set(x, "/users/{username}/events", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlasheventsSlashorgsSlashLeftcurlybracketorgRightcurlybracket(value: GetParametersPathOrgUsername): Self = StObject.set(x, "/users/{username}/events/orgs/{org}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlasheventsSlashpublic(value: GetParametersPath361QueryPage): Self = StObject.set(x, "/users/{username}/events/public", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowers(value: GetParametersPath361QueryPageResponses102): Self = StObject.set(x, "/users/{username}/followers", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowing(value: GetParametersPath361QueryPageResponses102): Self = StObject.set(x, "/users/{username}/following", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashfollowingSlashLeftcurlybrackettarget_userRightcurlybracket(value: GetParametersPathTargetuser): Self = StObject.set(x, "/users/{username}/following/{target_user}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashgists(value: GetParametersPath361QuerySince): Self = StObject.set(x, "/users/{username}/gists", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashgpg_keys(value: GetResponses393): Self = StObject.set(x, "/users/{username}/gpg_keys", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashhovercard(value: GetParametersQuerySubjectid): Self = StObject.set(x, "/users/{username}/hovercard", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashinstallation(value: GetParametersPath361Responses200Content5): Self = StObject.set(x, "/users/{username}/installation", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashkeys(value: GetResponses200Content395): Self = StObject.set(x, "/users/{username}/keys", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashorgs(value: GetResponses396): Self = StObject.set(x, "/users/{username}/orgs", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackages(value: GetParametersPath361QueryPackagetype): Self = StObject.set(x, "/users/{username}/packages", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracket(value: DeleteParametersPathPackagetypeUsernameResponses401403404): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashrestore(value: PostParametersPathPackagetypeUsernameQueryToken): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversions(value: GetResponses200401403404): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}/versions", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracket(value: DeleteParametersPathPackagenamePackagetypePackageversionid): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashpackagesSlashLeftcurlybracketpackage_typeRightcurlybracketSlashLeftcurlybracketpackage_nameRightcurlybracketSlashversionsSlashLeftcurlybracketpackage_version_idRightcurlybracketSlashrestore(value: PostParametersPathPackagenamePackagetypePackageversionid): Self = StObject.set(x, "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashprojects(value: GetParametersPath361QueryPerpageState): Self = StObject.set(x, "/users/{username}/projects", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashreceived_events(value: GetParametersPath361QueryPage): Self = StObject.set(x, "/users/{username}/received_events", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashreceived_eventsSlashpublic(value: GetParametersPath361QueryPage): Self = StObject.set(x, "/users/{username}/received_events/public", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashrepos(value: GetParametersQuerySortType): Self = StObject.set(x, "/users/{username}/repos", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashactions(value: GetParametersPath361Responses200Content30): Self = StObject.set(x, "/users/{username}/settings/billing/actions", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashpackages(value: GetParametersPath361Responses200Content32): Self = StObject.set(x, "/users/{username}/settings/billing/packages", value.asInstanceOf[js.Any])
      
      inline def `setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsettingsSlashbillingSlashshared-storage`(value: GetParametersPath361Responses200Content33): Self = StObject.set(x, "/users/{username}/settings/billing/shared-storage", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashssh_signing_keys(value: GetResponses397): Self = StObject.set(x, "/users/{username}/ssh_signing_keys", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashstarred(value: GetParametersPath361QueryPagePerpageSort): Self = StObject.set(x, "/users/{username}/starred", value.asInstanceOf[js.Any])
      
      inline def setSlashusersSlashLeftcurlybracketusernameRightcurlybracketSlashsubscriptions(value: GetParametersPath361QueryPageResponses109): Self = StObject.set(x, "/users/{username}/subscriptions", value.asInstanceOf[js.Any])
      
      inline def setSlashzen(value: GetResponses200ContentTextplainString): Self = StObject.set(x, "/zen", value.asInstanceOf[js.Any])
    }
  }
}
