package typings.fsExtra.mod

import org.scalablytyped.runtime.StringDictionary
import typings.fsExtra.anon.`2`
import typings.fsExtra.anon.`3`
import typings.fsExtra.fsExtraStrings.buffer
import typings.node.bufferMod.global.Buffer
import typings.node.bufferMod.global.BufferEncoding
import typings.node.fsMod.BufferEncodingOption
import typings.node.fsMod.EncodingOption
import typings.node.fsMod.PathLike
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object realpath {
  
  inline def apply(path: PathLike): js.Promise[String] = ^.asInstanceOf[js.Dynamic].apply(path.asInstanceOf[js.Any]).asInstanceOf[js.Promise[String]]
  inline def apply(path: PathLike, cache: StringDictionary[String]): js.Promise[String] = (^.asInstanceOf[js.Dynamic].apply(path.asInstanceOf[js.Any], cache.asInstanceOf[js.Any])).asInstanceOf[js.Promise[String]]
  inline def apply(
    path: PathLike,
    cache: StringDictionary[String],
    callback: js.Function2[
      /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException */ /* err */ Any, 
      /* resolvedPath */ String, 
      Any
    ]
  ): Unit = (^.asInstanceOf[js.Dynamic].apply(path.asInstanceOf[js.Any], cache.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Unit]
  inline def apply(
    path: PathLike,
    callback: js.Function2[
      /* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException */ /* err */ Any, 
      /* resolvedPath */ String, 
      Any
    ]
  ): Unit = (^.asInstanceOf[js.Dynamic].apply(path.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Unit]
  
  @JSImport("fs-extra", "realpath")
  @js.native
  val ^ : js.Any = js.native
  
  /* Inlined {None (path : node.fs.PathLike, options : {  encoding :'buffer'} | 'buffer'): std.Promise<node.buffer.<global>.Buffer>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | node.buffer.<global>.BufferEncoding | string | undefined | null): std.Promise<string>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | string | undefined | null): std.Promise<string | node.buffer.<global>.Buffer>, None (path : node.fs.PathLike): std.Promise<string>} & {None (path : node.fs.PathLike, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void} */
  inline def native(path: PathLike): js.Promise[String] = ^.asInstanceOf[js.Dynamic].applyDynamic("native")(path.asInstanceOf[js.Any]).asInstanceOf[js.Promise[String]]
  /* Inlined {None (path : node.fs.PathLike, options : {  encoding :'buffer'} | 'buffer'): std.Promise<node.buffer.<global>.Buffer>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | node.buffer.<global>.BufferEncoding | string | undefined | null): std.Promise<string>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | string | undefined | null): std.Promise<string | node.buffer.<global>.Buffer>, None (path : node.fs.PathLike): std.Promise<string>} & {None (path : node.fs.PathLike, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void} */
  inline def native(
    path: PathLike,
    callback: js.Function2[
      /* err */ (/* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException */ Any) | Null, 
      /* resolvedPath */ String, 
      Unit
    ]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("native")(path.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Unit]
  /* Inlined {None (path : node.fs.PathLike, options : {  encoding :'buffer'} | 'buffer'): std.Promise<node.buffer.<global>.Buffer>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | node.buffer.<global>.BufferEncoding | string | undefined | null): std.Promise<string>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | string | undefined | null): std.Promise<string | node.buffer.<global>.Buffer>, None (path : node.fs.PathLike): std.Promise<string>} & {None (path : node.fs.PathLike, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void} */
  inline def native(path: PathLike, options: String): js.Promise[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("native")(path.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Promise[String]]
  /* Inlined {None (path : node.fs.PathLike, options : {  encoding :'buffer'} | 'buffer'): std.Promise<node.buffer.<global>.Buffer>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | node.buffer.<global>.BufferEncoding | string | undefined | null): std.Promise<string>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | string | undefined | null): std.Promise<string | node.buffer.<global>.Buffer>, None (path : node.fs.PathLike): std.Promise<string>} & {None (path : node.fs.PathLike, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void} */
  inline def native(path: PathLike, options: `2`): js.Promise[Buffer] = (^.asInstanceOf[js.Dynamic].applyDynamic("native")(path.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Promise[Buffer]]
  /* Inlined {None (path : node.fs.PathLike, options : {  encoding :'buffer'} | 'buffer'): std.Promise<node.buffer.<global>.Buffer>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | node.buffer.<global>.BufferEncoding | string | undefined | null): std.Promise<string>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | string | undefined | null): std.Promise<string | node.buffer.<global>.Buffer>, None (path : node.fs.PathLike): std.Promise<string>} & {None (path : node.fs.PathLike, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void} */
  inline def native(path: PathLike, options: `3`): js.Promise[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("native")(path.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Promise[String]]
  /* Inlined {None (path : node.fs.PathLike, options : {  encoding :'buffer'} | 'buffer'): std.Promise<node.buffer.<global>.Buffer>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | node.buffer.<global>.BufferEncoding | string | undefined | null): std.Promise<string>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | string | undefined | null): std.Promise<string | node.buffer.<global>.Buffer>, None (path : node.fs.PathLike): std.Promise<string>} & {None (path : node.fs.PathLike, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void} */
  inline def native(path: PathLike, options: buffer): js.Promise[Buffer] = (^.asInstanceOf[js.Dynamic].applyDynamic("native")(path.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Promise[Buffer]]
  /* Inlined {None (path : node.fs.PathLike, options : {  encoding :'buffer'} | 'buffer'): std.Promise<node.buffer.<global>.Buffer>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | node.buffer.<global>.BufferEncoding | string | undefined | null): std.Promise<string>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | string | undefined | null): std.Promise<string | node.buffer.<global>.Buffer>, None (path : node.fs.PathLike): std.Promise<string>} & {None (path : node.fs.PathLike, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void} */
  inline def native(path: PathLike, options: BufferEncoding): js.Promise[String] = (^.asInstanceOf[js.Dynamic].applyDynamic("native")(path.asInstanceOf[js.Any], options.asInstanceOf[js.Any])).asInstanceOf[js.Promise[String]]
  /* Inlined {None (path : node.fs.PathLike, options : {  encoding :'buffer'} | 'buffer'): std.Promise<node.buffer.<global>.Buffer>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | node.buffer.<global>.BufferEncoding | string | undefined | null): std.Promise<string>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | string | undefined | null): std.Promise<string | node.buffer.<global>.Buffer>, None (path : node.fs.PathLike): std.Promise<string>} & {None (path : node.fs.PathLike, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void} */
  inline def native(
    path: PathLike,
    options: BufferEncodingOption,
    callback: js.Function2[
      /* err */ (/* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException */ Any) | Null, 
      /* resolvedPath */ Buffer, 
      Unit
    ]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("native")(path.asInstanceOf[js.Any], options.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Unit]
  /* Inlined {None (path : node.fs.PathLike, options : {  encoding :'buffer'} | 'buffer'): std.Promise<node.buffer.<global>.Buffer>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | node.buffer.<global>.BufferEncoding | string | undefined | null): std.Promise<string>, None (path : node.fs.PathLike, options : {  encoding :node.buffer.<global>.BufferEncoding | string | null} | string | undefined | null): std.Promise<string | node.buffer.<global>.Buffer>, None (path : node.fs.PathLike): std.Promise<string>} & {None (path : node.fs.PathLike, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string | node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : node.buffer.<global>.Buffer): void): void, None (path : node.fs.PathLike, options : node.fs.EncodingOption, callback : (err : / * import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException * / any | null, resolvedPath : string): void): void} */
  inline def native(
    path: PathLike,
    options: EncodingOption,
    callback: js.Function2[
      (/* import warning: transforms.QualifyReferences#resolveTypeRef many Couldn't qualify NodeJS.ErrnoException */ Any) | Null, 
      Buffer | (/* resolvedPath */ String), 
      Unit
    ]
  ): Unit = (^.asInstanceOf[js.Dynamic].applyDynamic("native")(path.asInstanceOf[js.Any], options.asInstanceOf[js.Any], callback.asInstanceOf[js.Any])).asInstanceOf[Unit]
}
