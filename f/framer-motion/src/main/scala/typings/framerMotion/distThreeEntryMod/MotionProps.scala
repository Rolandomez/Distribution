package typings.framerMotion.distThreeEntryMod

import typings.react.mod.ReactNode
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Props for `motion` components.
  *
  * @public
  */
trait MotionProps
  extends StObject
     with AnimationProps
     with EventProps
     with PanHandlers
     with TapHandlers
     with HoverHandlers
     with FocusHandlers
     with ViewportProps
     with DraggableProps
     with LayoutProps
     with MotionAdvancedProps {
  
  var children: js.UndefOr[ReactNode | (MotionValue[Double | String])] = js.undefined
  
  /**
    *
    * The React DOM `style` prop, enhanced with support for `MotionValue`s and separate `transform` values.
    *
    * ```jsx
    * export const MyComponent = () => {
    *   const x = useMotionValue(0)
    *
    *   return <motion.div style={{ x, opacity: 1, scale: 0.5 }} />
    * }
    * ```
    */
  var style: js.UndefOr[MotionStyle] = js.undefined
  
  /**
    * By default, Framer Motion generates a `transform` property with a sensible transform order. `transformTemplate`
    * can be used to create a different order, or to append/preprend the automatically generated `transform` property.
    *
    * ```jsx
    * <motion.div
    *   style={{ x: 0, rotate: 180 }}
    *   transformTemplate={
    *     ({ x, rotate }) => `rotate(${rotate}deg) translateX(${x}px)`
    *   }
    * />
    * ```
    *
    * @param transform - The latest animated transform props.
    * @param generatedTransform - The transform string as automatically generated by Framer Motion
    *
    * @public
    */
  var transformTemplate: js.UndefOr[
    js.Function2[/* transform */ TransformProperties, /* generatedTransform */ String, String]
  ] = js.undefined
  
  /**
    * Internal.
    *
    * This allows values to be transformed before being animated or set as styles.
    *
    * For instance, this allows custom values in Framer Library like `size` to be converted into `width` and `height`.
    * It also allows us a chance to take a value like `Color` and convert it to an animatable color string.
    *
    * A few structural typing changes need making before this can be a public property:
    * - Allow `Target` values to be appended by user-defined types (delete `CustomStyles` - does `size` throw a type error?)
    * - Extract `CustomValueType` as a separate user-defined type (delete `CustomValueType` and animate a `Color` - does this throw a type error?).
    *
    * @param values -
    */
  var transformValues: js.UndefOr[js.Function1[/* values */ ResolvedValues, ResolvedValues]] = js.undefined
}
object MotionProps {
  
  inline def apply(): MotionProps = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[MotionProps]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: MotionProps] (val x: Self) extends AnyVal {
    
    inline def setChildren(value: ReactNode | (MotionValue[Double | String])): Self = StObject.set(x, "children", value.asInstanceOf[js.Any])
    
    inline def setChildrenUndefined: Self = StObject.set(x, "children", js.undefined)
    
    inline def setStyle(value: MotionStyle): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
    
    inline def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
    
    inline def setTransformTemplate(value: (/* transform */ TransformProperties, /* generatedTransform */ String) => String): Self = StObject.set(x, "transformTemplate", js.Any.fromFunction2(value))
    
    inline def setTransformTemplateUndefined: Self = StObject.set(x, "transformTemplate", js.undefined)
    
    inline def setTransformValues(value: /* values */ ResolvedValues => ResolvedValues): Self = StObject.set(x, "transformValues", js.Any.fromFunction1(value))
    
    inline def setTransformValuesUndefined: Self = StObject.set(x, "transformValues", js.undefined)
  }
}
