package typings.listr2.mod

import typings.listr2.listr2Strings.truncate
import typings.listr2.listr2Strings.wrap
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

trait ListrDefaultRendererOptions
  extends StObject
     with RendererPresetTimer
     with RendererLoggerOptions[ListrDefaultRendererLogLevels]
     with ListrLoggerStyleMap[ListrDefaultRendererLogLevels] {
  
  /**
    * Clear all the output generated by the renderer when the Listr completes the execution successfully.
    *
    * - This is a global option that can only be changed through the main Listr class.
    *
    * @defaultValue `false`
    */
  var clearOutput: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Collapse error messages into a single message and overwrite the task title.
    *
    * - `true` will collapse the error message.
    * - `false` will show the error message as a data output under the current task title.
    *
    * @defaultValue `true`
    */
  var collapseErrors: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Collapse skip messages into a single message and overwrite the task title.
    *
    * - `true` will collapse skiped tasks.
    * - `false` will show the skip message as a data output under the current task title.
    *
    * @defaultValue `true`
    */
  var collapseSkips: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Collapse subtasks after current task completes its execution.
    *
    * @defaultValue `true`
    */
  var collapseSubtasks: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Formats the output in to the given lines of `process.stdout.columns`.
    *
    * - This is a global option that can only be changed through the main Listr class.
    *
    * @defaultValue `'wrap'`
    */
  var formatOutput: js.UndefOr[truncate | wrap] = js.undefined
  
  /**
    * Indentation per-level.
    *
    * - This is a global option that can only be changed through the main Listr class.
    *
    * @defaultValue `2`
    */
  var indentation: js.UndefOr[Double] = js.undefined
  
  /**
    * Only update the render whenever there is a incoming request through the hook.
    *
    * - This is a global option that can only be changed through the main Listr class.
    * - Useful for snapshot tests, where this will disable showing spinner and only update the screen if something else has happened in the task worthy to show.
    *
    * @defaultValue `false`
    */
  var `lazy`: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Show duration for the pauses.
    *
    * @defaultValue `PRESET_TIMER`
    */
  var pausedTimer: js.UndefOr[PresetTimer] = js.undefined
  
  /**
    * Remove empty lines from the output section for decluterring multiple line output.
    *
    * @defaultValue `true`
    */
  var removeEmptyLines: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Show the error message or show the original title of the task.
    *
    * - `true` will output the current error encountered with the task if there is any.
    * - `false` will keep the current task title intact. This will also disable `collapseErrors`.
    *
    * @defaultValue `true`
    */
  var showErrorMessage: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Show skip messages or show the original title of the task.
    *
    * - `true` will output the given skip message if there is any.
    * - `false` will keep the current task title intact. This will also disable `collapseSkips`.
    *
    * @defaultValue `true`
    */
  var showSkipMessage: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Show the subtasks of the current task.
    *
    * @defaultValue `true`
    */
  var showSubtasks: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Spinner visually indicates that a task is running.
    *
    * - You can always implement your own spinner, if the current one does not please you visually.
    */
  var spinner: js.UndefOr[Spinner] = js.undefined
  
  /**
    * Suffix retry messages to clearly indicate the task is currently retrying.
    *
    * - `true` will add `[RETRY:COUNT]` as a suffix.
    * - `false` will not add a suffix.
    *
    * @defaultValue `false`
    */
  var suffixRetries: js.UndefOr[Boolean] = js.undefined
  
  /**
    * Suffix skip messages to clearly indicate the task has been skipped with in `collapseSkips` mode.
    *
    * - `true` will add `[SKIPPED]` as a suffix.
    * - `false` will not add a suffix.
    *
    * @defaultValue `false`
    */
  var suffixSkips: js.UndefOr[Boolean] = js.undefined
}
object ListrDefaultRendererOptions {
  
  inline def apply(): ListrDefaultRendererOptions = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ListrDefaultRendererOptions]
  }
  
  @scala.inline
  implicit open class MutableBuilder[Self <: ListrDefaultRendererOptions] (val x: Self) extends AnyVal {
    
    inline def setClearOutput(value: Boolean): Self = StObject.set(x, "clearOutput", value.asInstanceOf[js.Any])
    
    inline def setClearOutputUndefined: Self = StObject.set(x, "clearOutput", js.undefined)
    
    inline def setCollapseErrors(value: Boolean): Self = StObject.set(x, "collapseErrors", value.asInstanceOf[js.Any])
    
    inline def setCollapseErrorsUndefined: Self = StObject.set(x, "collapseErrors", js.undefined)
    
    inline def setCollapseSkips(value: Boolean): Self = StObject.set(x, "collapseSkips", value.asInstanceOf[js.Any])
    
    inline def setCollapseSkipsUndefined: Self = StObject.set(x, "collapseSkips", js.undefined)
    
    inline def setCollapseSubtasks(value: Boolean): Self = StObject.set(x, "collapseSubtasks", value.asInstanceOf[js.Any])
    
    inline def setCollapseSubtasksUndefined: Self = StObject.set(x, "collapseSubtasks", js.undefined)
    
    inline def setFormatOutput(value: truncate | wrap): Self = StObject.set(x, "formatOutput", value.asInstanceOf[js.Any])
    
    inline def setFormatOutputUndefined: Self = StObject.set(x, "formatOutput", js.undefined)
    
    inline def setIndentation(value: Double): Self = StObject.set(x, "indentation", value.asInstanceOf[js.Any])
    
    inline def setIndentationUndefined: Self = StObject.set(x, "indentation", js.undefined)
    
    inline def setLazy(value: Boolean): Self = StObject.set(x, "lazy", value.asInstanceOf[js.Any])
    
    inline def setLazyUndefined: Self = StObject.set(x, "lazy", js.undefined)
    
    inline def setPausedTimer(value: PresetTimer): Self = StObject.set(x, "pausedTimer", value.asInstanceOf[js.Any])
    
    inline def setPausedTimerUndefined: Self = StObject.set(x, "pausedTimer", js.undefined)
    
    inline def setRemoveEmptyLines(value: Boolean): Self = StObject.set(x, "removeEmptyLines", value.asInstanceOf[js.Any])
    
    inline def setRemoveEmptyLinesUndefined: Self = StObject.set(x, "removeEmptyLines", js.undefined)
    
    inline def setShowErrorMessage(value: Boolean): Self = StObject.set(x, "showErrorMessage", value.asInstanceOf[js.Any])
    
    inline def setShowErrorMessageUndefined: Self = StObject.set(x, "showErrorMessage", js.undefined)
    
    inline def setShowSkipMessage(value: Boolean): Self = StObject.set(x, "showSkipMessage", value.asInstanceOf[js.Any])
    
    inline def setShowSkipMessageUndefined: Self = StObject.set(x, "showSkipMessage", js.undefined)
    
    inline def setShowSubtasks(value: Boolean): Self = StObject.set(x, "showSubtasks", value.asInstanceOf[js.Any])
    
    inline def setShowSubtasksUndefined: Self = StObject.set(x, "showSubtasks", js.undefined)
    
    inline def setSpinner(value: Spinner): Self = StObject.set(x, "spinner", value.asInstanceOf[js.Any])
    
    inline def setSpinnerUndefined: Self = StObject.set(x, "spinner", js.undefined)
    
    inline def setSuffixRetries(value: Boolean): Self = StObject.set(x, "suffixRetries", value.asInstanceOf[js.Any])
    
    inline def setSuffixRetriesUndefined: Self = StObject.set(x, "suffixRetries", js.undefined)
    
    inline def setSuffixSkips(value: Boolean): Self = StObject.set(x, "suffixSkips", value.asInstanceOf[js.Any])
    
    inline def setSuffixSkipsUndefined: Self = StObject.set(x, "suffixSkips", js.undefined)
  }
}
