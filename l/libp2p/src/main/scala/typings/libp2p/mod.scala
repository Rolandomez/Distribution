package typings.libp2p

import typings.interfaceDatastore.mod.Datastore
import typings.libp2p.distSrcAddressManagerMod.AddressManagerInit
import typings.libp2p.distSrcComponentsMod.Components
import typings.libp2p.distSrcConnectionManagerMod.ConnectionManagerInit
import typings.libp2p.distSrcTransportManagerMod.TransportManagerInit
import typings.libp2pInterfaceConnection.mod.ConnectionProtector
import typings.libp2pInterfaceConnectionEncrypter.mod.ConnectionEncrypter
import typings.libp2pInterfaceConnectionGater.mod.ConnectionGater
import typings.libp2pInterfaceContentRouting.mod.ContentRouting_
import typings.libp2pInterfaceLibp2p.mod.Libp2p
import typings.libp2pInterfaceLibp2p.mod.ServiceMap
import typings.libp2pInterfaceMetrics.mod.Metrics
import typings.libp2pInterfacePeerDiscovery.mod.PeerDiscovery_
import typings.libp2pInterfacePeerId.mod.PeerId
import typings.libp2pInterfacePeerRouting.mod.PeerRouting_
import typings.libp2pInterfaceStreamMuxer.mod.StreamMuxerFactory
import typings.libp2pInterfaceTransport.mod.Transport
import typings.libp2pKeychain.mod.KeyChainInit
import typings.libp2pPeerStore.mod.PersistentPeerStoreInit
import typings.std.Record
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object mod {
  
  @JSImport("libp2p", JSImport.Namespace)
  @js.native
  val ^ : js.Any = js.native
  
  inline def createLibp2p[T /* <: ServiceMap */](options: Libp2pOptions[T]): js.Promise[Libp2p[T]] = ^.asInstanceOf[js.Dynamic].applyDynamic("createLibp2p")(options.asInstanceOf[js.Any]).asInstanceOf[js.Promise[Libp2p[T]]]
  
  trait Libp2pInit[T /* <: ServiceMap */] extends StObject {
    
    /**
      * Addresses for transport listening and to advertise to the network
      */
    var addresses: AddressManagerInit
    
    var connectionEncryption: js.UndefOr[js.Array[js.Function1[/* components */ Components, ConnectionEncrypter[Any]]]] = js.undefined
    
    /**
      * A connection gater can deny new connections based on user criteria
      */
    var connectionGater: ConnectionGater
    
    /**
      * libp2p Connection Manager configuration
      */
    var connectionManager: ConnectionManagerInit
    
    /**
      * A ConnectionProtector can be used to create a secure overlay on top of the network using pre-shared keys
      */
    var connectionProtector: js.UndefOr[js.Function1[/* components */ Components, ConnectionProtector]] = js.undefined
    
    var contentRouters: js.UndefOr[js.Array[js.Function1[/* components */ Components, ContentRouting_]]] = js.undefined
    
    /**
      * An optional datastore to persist peer information, DHT records, etc.
      *
      * An in-memory datastore will be used if one is not provided.
      */
    var datastore: Datastore[
        js.Object, 
        js.Object, 
        js.Object, 
        js.Object, 
        js.Object, 
        js.Object, 
        js.Object, 
        js.Object, 
        js.Object, 
        js.Object
      ]
    
    /**
      * keychain configuration
      */
    var keychain: KeyChainInit
    
    /**
      * A Metrics implementation can be supplied to collect metrics on this node
      */
    var metrics: js.UndefOr[js.Function1[/* components */ Components, Metrics]] = js.undefined
    
    var peerDiscovery: js.UndefOr[js.Array[js.Function1[/* components */ Components, PeerDiscovery_]]] = js.undefined
    
    /**
      * peerId instance (it will be created if not provided)
      */
    var peerId: PeerId
    
    var peerRouters: js.UndefOr[js.Array[js.Function1[/* components */ Components, PeerRouting_]]] = js.undefined
    
    /**
      * libp2p PeerStore configuration
      */
    var peerStore: PersistentPeerStoreInit
    
    /**
      * Arbitrary libp2p modules
      */
    var services: ServiceFactoryMap[T]
    
    var streamMuxers: js.UndefOr[js.Array[js.Function1[/* components */ Components, StreamMuxerFactory]]] = js.undefined
    
    /**
      * libp2p transport manager configuration
      */
    var transportManager: TransportManagerInit
    
    /**
      * An array that must include at least 1 compliant transport
      */
    var transports: js.Array[js.Function1[/* components */ Components, Transport]]
  }
  object Libp2pInit {
    
    inline def apply[T /* <: ServiceMap */](
      addresses: AddressManagerInit,
      connectionGater: ConnectionGater,
      connectionManager: ConnectionManagerInit,
      datastore: Datastore[
          js.Object, 
          js.Object, 
          js.Object, 
          js.Object, 
          js.Object, 
          js.Object, 
          js.Object, 
          js.Object, 
          js.Object, 
          js.Object
        ],
      keychain: KeyChainInit,
      peerId: PeerId,
      peerStore: PersistentPeerStoreInit,
      services: ServiceFactoryMap[T],
      transportManager: TransportManagerInit,
      transports: js.Array[js.Function1[/* components */ Components, Transport]]
    ): Libp2pInit[T] = {
      val __obj = js.Dynamic.literal(addresses = addresses.asInstanceOf[js.Any], connectionGater = connectionGater.asInstanceOf[js.Any], connectionManager = connectionManager.asInstanceOf[js.Any], datastore = datastore.asInstanceOf[js.Any], keychain = keychain.asInstanceOf[js.Any], peerId = peerId.asInstanceOf[js.Any], peerStore = peerStore.asInstanceOf[js.Any], services = services.asInstanceOf[js.Any], transportManager = transportManager.asInstanceOf[js.Any], transports = transports.asInstanceOf[js.Any])
      __obj.asInstanceOf[Libp2pInit[T]]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: Libp2pInit[?], T /* <: ServiceMap */] (val x: Self & Libp2pInit[T]) extends AnyVal {
      
      inline def setAddresses(value: AddressManagerInit): Self = StObject.set(x, "addresses", value.asInstanceOf[js.Any])
      
      inline def setConnectionEncryption(value: js.Array[js.Function1[/* components */ Components, ConnectionEncrypter[Any]]]): Self = StObject.set(x, "connectionEncryption", value.asInstanceOf[js.Any])
      
      inline def setConnectionEncryptionUndefined: Self = StObject.set(x, "connectionEncryption", js.undefined)
      
      inline def setConnectionEncryptionVarargs(value: (js.Function1[/* components */ Components, ConnectionEncrypter[Any]])*): Self = StObject.set(x, "connectionEncryption", js.Array(value*))
      
      inline def setConnectionGater(value: ConnectionGater): Self = StObject.set(x, "connectionGater", value.asInstanceOf[js.Any])
      
      inline def setConnectionManager(value: ConnectionManagerInit): Self = StObject.set(x, "connectionManager", value.asInstanceOf[js.Any])
      
      inline def setConnectionProtector(value: /* components */ Components => ConnectionProtector): Self = StObject.set(x, "connectionProtector", js.Any.fromFunction1(value))
      
      inline def setConnectionProtectorUndefined: Self = StObject.set(x, "connectionProtector", js.undefined)
      
      inline def setContentRouters(value: js.Array[js.Function1[/* components */ Components, ContentRouting_]]): Self = StObject.set(x, "contentRouters", value.asInstanceOf[js.Any])
      
      inline def setContentRoutersUndefined: Self = StObject.set(x, "contentRouters", js.undefined)
      
      inline def setContentRoutersVarargs(value: (js.Function1[/* components */ Components, ContentRouting_])*): Self = StObject.set(x, "contentRouters", js.Array(value*))
      
      inline def setDatastore(
        value: Datastore[
              js.Object, 
              js.Object, 
              js.Object, 
              js.Object, 
              js.Object, 
              js.Object, 
              js.Object, 
              js.Object, 
              js.Object, 
              js.Object
            ]
      ): Self = StObject.set(x, "datastore", value.asInstanceOf[js.Any])
      
      inline def setKeychain(value: KeyChainInit): Self = StObject.set(x, "keychain", value.asInstanceOf[js.Any])
      
      inline def setMetrics(value: /* components */ Components => Metrics): Self = StObject.set(x, "metrics", js.Any.fromFunction1(value))
      
      inline def setMetricsUndefined: Self = StObject.set(x, "metrics", js.undefined)
      
      inline def setPeerDiscovery(value: js.Array[js.Function1[/* components */ Components, PeerDiscovery_]]): Self = StObject.set(x, "peerDiscovery", value.asInstanceOf[js.Any])
      
      inline def setPeerDiscoveryUndefined: Self = StObject.set(x, "peerDiscovery", js.undefined)
      
      inline def setPeerDiscoveryVarargs(value: (js.Function1[/* components */ Components, PeerDiscovery_])*): Self = StObject.set(x, "peerDiscovery", js.Array(value*))
      
      inline def setPeerId(value: PeerId): Self = StObject.set(x, "peerId", value.asInstanceOf[js.Any])
      
      inline def setPeerRouters(value: js.Array[js.Function1[/* components */ Components, PeerRouting_]]): Self = StObject.set(x, "peerRouters", value.asInstanceOf[js.Any])
      
      inline def setPeerRoutersUndefined: Self = StObject.set(x, "peerRouters", js.undefined)
      
      inline def setPeerRoutersVarargs(value: (js.Function1[/* components */ Components, PeerRouting_])*): Self = StObject.set(x, "peerRouters", js.Array(value*))
      
      inline def setPeerStore(value: PersistentPeerStoreInit): Self = StObject.set(x, "peerStore", value.asInstanceOf[js.Any])
      
      inline def setServices(value: ServiceFactoryMap[T]): Self = StObject.set(x, "services", value.asInstanceOf[js.Any])
      
      inline def setStreamMuxers(value: js.Array[js.Function1[/* components */ Components, StreamMuxerFactory]]): Self = StObject.set(x, "streamMuxers", value.asInstanceOf[js.Any])
      
      inline def setStreamMuxersUndefined: Self = StObject.set(x, "streamMuxers", js.undefined)
      
      inline def setStreamMuxersVarargs(value: (js.Function1[/* components */ Components, StreamMuxerFactory])*): Self = StObject.set(x, "streamMuxers", js.Array(value*))
      
      inline def setTransportManager(value: TransportManagerInit): Self = StObject.set(x, "transportManager", value.asInstanceOf[js.Any])
      
      inline def setTransports(value: js.Array[js.Function1[/* components */ Components, Transport]]): Self = StObject.set(x, "transports", value.asInstanceOf[js.Any])
      
      inline def setTransportsVarargs(value: (js.Function1[/* components */ Components, Transport])*): Self = StObject.set(x, "transports", js.Array(value*))
    }
  }
  
  /* Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p.Libp2pInit<T>> & {  start :boolean | undefined} */
  trait Libp2pOptions[T /* <: ServiceMap */] extends StObject {
    
    var addresses: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: libp2p.libp2p/dist/src/address-manager.AddressManagerInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p/dist/src/address-manager.AddressManagerInit extends (args : ...any): any ? libp2p.libp2p/dist/src/address-manager.AddressManagerInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p/dist/src/address-manager.AddressManagerInit> * /
    {  announceFilter :libp2p.libp2p/dist/src/address-manager.AddressFilter | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p/dist/src/address-manager.AddressFilter | undefined extends (args : ...any): any ? libp2p.libp2p/dist/src/address-manager.AddressFilter | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p/dist/src/address-manager.AddressFilter | undefined> | undefined,   listen :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined,   announce :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined,   noAnnounce :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined} */ js.Any
      ] = js.undefined
    
    var connectionEncryption: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection-encrypter.@libp2p/interface-connection-encrypter.ConnectionEncrypter<unknown>> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection-encrypter.@libp2p/interface-connection-encrypter.ConnectionEncrypter<unknown>> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection-encrypter.@libp2p/interface-connection-encrypter.ConnectionEncrypter<unknown>> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection-encrypter.@libp2p/interface-connection-encrypter.ConnectionEncrypter<unknown>> | undefined> */ js.Any
      ] = js.undefined
    
    var connectionGater: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: @libp2p/interface-connection-gater.@libp2p/interface-connection-gater.ConnectionGater extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/interface-connection-gater.@libp2p/interface-connection-gater.ConnectionGater extends (args : ...any): any ? @libp2p/interface-connection-gater.@libp2p/interface-connection-gater.ConnectionGater : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/interface-connection-gater.@libp2p/interface-connection-gater.ConnectionGater> * /
    {  denyOutboundConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   denyOutboundEncryptedConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   denyInboundRelayReservation :(source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends (args : ...any): any ? (source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined> | undefined,   denyInboundConnection :(maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   filterMultiaddrForPeer :(peer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined extends (args : ...any): any ? (peer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined> | undefined,   denyDialMultiaddr :(multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined extends (args : ...any): any ? (multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined> | undefined,   denyOutboundRelayedConnection :(source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, destination : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, destination : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends (args : ...any): any ? (source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, destination : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, destination : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined> | undefined,   denyOutboundUpgradedConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   denyInboundRelayedConnection :(relay : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, remotePeer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (relay : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, remotePeer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends (args : ...any): any ? (relay : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, remotePeer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(relay : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, remotePeer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined> | undefined,   denyDialPeer :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined> | undefined,   denyInboundEncryptedConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   denyInboundUpgradedConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined} */ js.Any
      ] = js.undefined
    
    var connectionManager: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: libp2p.libp2p/dist/src/connection-manager.ConnectionManagerInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p/dist/src/connection-manager.ConnectionManagerInit extends (args : ...any): any ? libp2p.libp2p/dist/src/connection-manager.ConnectionManagerInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p/dist/src/connection-manager.ConnectionManagerInit> * /
    {  allow :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined,   inboundConnectionThreshold :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   maxParallelDials :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   resolvers :std.Record<string, @multiformats/multiaddr.@multiformats/multiaddr.Resolver> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Record<string, @multiformats/multiaddr.@multiformats/multiaddr.Resolver> | undefined extends (args : ...any): any ? std.Record<string, @multiformats/multiaddr.@multiformats/multiaddr.Resolver> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Record<string, @multiformats/multiaddr.@multiformats/multiaddr.Resolver> | undefined> | undefined,   addressSorter :@libp2p/interface-libp2p.@libp2p/interface-libp2p.AddressSorter | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/interface-libp2p.@libp2p/interface-libp2p.AddressSorter | undefined extends (args : ...any): any ? @libp2p/interface-libp2p.@libp2p/interface-libp2p.AddressSorter | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/interface-libp2p.@libp2p/interface-libp2p.AddressSorter | undefined> | undefined,   dialTimeout :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   maxParallelDialsPerPeer :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   autoDialConcurrency :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   autoDialInterval :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   maxPeerAddrsToDial :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   deny :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined,   maxConnections :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   autoDialPriority :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   minConnections :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   maxIncomingPendingConnections :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   inboundUpgradeTimeout :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined} */ js.Any
      ] = js.undefined
    
    var connectionProtector: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection.@libp2p/interface-connection.ConnectionProtector | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection.@libp2p/interface-connection.ConnectionProtector | undefined extends (args : ...any): any ? (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection.@libp2p/interface-connection.ConnectionProtector | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection.@libp2p/interface-connection.ConnectionProtector | undefined> */ js.Any
      ] = js.undefined
    
    var contentRouters: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-content-routing.@libp2p/interface-content-routing.ContentRouting> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-content-routing.@libp2p/interface-content-routing.ContentRouting> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-content-routing.@libp2p/interface-content-routing.ContentRouting> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-content-routing.@libp2p/interface-content-routing.ContentRouting> | undefined> */ js.Any
      ] = js.undefined
    
    var datastore: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: interface-datastore.interface-datastore.Datastore<{}, {}, {}, {}, {}, {}, {}, {}, {}, {}> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : interface-datastore.interface-datastore.Datastore<{}, {}, {}, {}, {}, {}, {}, {}, {}, {}> extends (args : ...any): any ? interface-datastore.interface-datastore.Datastore<{}, {}, {}, {}, {}, {}, {}, {}, {}, {}> : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<interface-datastore.interface-datastore.Datastore<{}, {}, {}, {}, {}, {}, {}, {}, {}, {}>> * /
    {  queryKeys :(query : interface-datastore.interface-datastore.KeyQuery): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (query : interface-datastore.interface-datastore.KeyQuery): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends (args : ...any): any ? (query : interface-datastore.interface-datastore.KeyQuery): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(query : interface-datastore.interface-datastore.KeyQuery): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>> | undefined,   query :(query : interface-datastore.interface-datastore.Query): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (query : interface-datastore.interface-datastore.Query): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> extends (args : ...any): any ? (query : interface-datastore.interface-datastore.Query): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(query : interface-datastore.interface-datastore.Query): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>> | undefined,   delete :(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<void> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<void> extends (args : ...any): any ? (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<void> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<void>> | undefined,   putMany :(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends (args : ...any): any ? (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>> | undefined,   has :(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<boolean> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<boolean> extends (args : ...any): any ? (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<boolean> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<boolean>> | undefined,   deleteMany :(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends (args : ...any): any ? (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>> | undefined,   batch :(): interface-datastore.interface-datastore.Batch<{}> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): interface-datastore.interface-datastore.Batch<{}> extends (args : ...any): any ? (): interface-datastore.interface-datastore.Batch<{}> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): interface-datastore.interface-datastore.Batch<{}>> | undefined,   put :(key : interface-datastore.interface-datastore/dist/src/key.Key, val : std.Uint8Array): interface-store.interface-store.Await<interface-datastore.interface-datastore/dist/src/key.Key> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (key : interface-datastore.interface-datastore/dist/src/key.Key, val : std.Uint8Array): interface-store.interface-store.Await<interface-datastore.interface-datastore/dist/src/key.Key> extends (args : ...any): any ? (key : interface-datastore.interface-datastore/dist/src/key.Key, val : std.Uint8Array): interface-store.interface-store.Await<interface-datastore.interface-datastore/dist/src/key.Key> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(key : interface-datastore.interface-datastore/dist/src/key.Key, val : std.Uint8Array): interface-store.interface-store.Await<interface-datastore.interface-datastore/dist/src/key.Key>> | undefined,   get :(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<std.Uint8Array> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<std.Uint8Array> extends (args : ...any): any ? (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<std.Uint8Array> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<std.Uint8Array>> | undefined,   getMany :(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> extends (args : ...any): any ? (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>> | undefined} */ js.Any
      ] = js.undefined
    
    var keychain: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: @libp2p/keychain.@libp2p/keychain.KeyChainInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/keychain.@libp2p/keychain.KeyChainInit extends (args : ...any): any ? @libp2p/keychain.@libp2p/keychain.KeyChainInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/keychain.@libp2p/keychain.KeyChainInit> * /
    {  pass :string | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : string | undefined extends (args : ...any): any ? string | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<string | undefined> | undefined,   dek :@libp2p/keychain.@libp2p/keychain.DEKConfig | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/keychain.@libp2p/keychain.DEKConfig | undefined extends (args : ...any): any ? @libp2p/keychain.@libp2p/keychain.DEKConfig | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/keychain.@libp2p/keychain.DEKConfig | undefined> | undefined} */ js.Any
      ] = js.undefined
    
    var metrics: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-metrics.@libp2p/interface-metrics.Metrics | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-metrics.@libp2p/interface-metrics.Metrics | undefined extends (args : ...any): any ? (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-metrics.@libp2p/interface-metrics.Metrics | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-metrics.@libp2p/interface-metrics.Metrics | undefined> */ js.Any
      ] = js.undefined
    
    var peerDiscovery: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-discovery.@libp2p/interface-peer-discovery.PeerDiscovery> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-discovery.@libp2p/interface-peer-discovery.PeerDiscovery> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-discovery.@libp2p/interface-peer-discovery.PeerDiscovery> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-discovery.@libp2p/interface-peer-discovery.PeerDiscovery> | undefined> */ js.Any
      ] = js.undefined
    
    var peerId: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId extends (args : ...any): any ? @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId> */ js.Any
      ] = js.undefined
    
    var peerRouters: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-routing.@libp2p/interface-peer-routing.PeerRouting> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-routing.@libp2p/interface-peer-routing.PeerRouting> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-routing.@libp2p/interface-peer-routing.PeerRouting> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-routing.@libp2p/interface-peer-routing.PeerRouting> | undefined> */ js.Any
      ] = js.undefined
    
    var peerStore: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: @libp2p/peer-store.@libp2p/peer-store.PersistentPeerStoreInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/peer-store.@libp2p/peer-store.PersistentPeerStoreInit extends (args : ...any): any ? @libp2p/peer-store.@libp2p/peer-store.PersistentPeerStoreInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/peer-store.@libp2p/peer-store.PersistentPeerStoreInit> * /
    {  addressFilter :@libp2p/peer-store.@libp2p/peer-store.AddressFilter | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/peer-store.@libp2p/peer-store.AddressFilter | undefined extends (args : ...any): any ? @libp2p/peer-store.@libp2p/peer-store.AddressFilter | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/peer-store.@libp2p/peer-store.AddressFilter | undefined> | undefined} */ js.Any
      ] = js.undefined
    
    var services: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: libp2p.libp2p.ServiceFactoryMap<T> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p.ServiceFactoryMap<T> extends (args : ...any): any ? libp2p.libp2p.ServiceFactoryMap<T> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p.ServiceFactoryMap<T>> */ js.Any
      ] = js.undefined
    
    var start: js.UndefOr[Boolean] = js.undefined
    
    var streamMuxers: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-stream-muxer.@libp2p/interface-stream-muxer.StreamMuxerFactory> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-stream-muxer.@libp2p/interface-stream-muxer.StreamMuxerFactory> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-stream-muxer.@libp2p/interface-stream-muxer.StreamMuxerFactory> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-stream-muxer.@libp2p/interface-stream-muxer.StreamMuxerFactory> | undefined> */ js.Any
      ] = js.undefined
    
    var transportManager: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: libp2p.libp2p/dist/src/transport-manager.TransportManagerInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p/dist/src/transport-manager.TransportManagerInit extends (args : ...any): any ? libp2p.libp2p/dist/src/transport-manager.TransportManagerInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p/dist/src/transport-manager.TransportManagerInit> * /
    {  faultTolerance :@libp2p/interface-transport.@libp2p/interface-transport.FaultTolerance | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/interface-transport.@libp2p/interface-transport.FaultTolerance | undefined extends (args : ...any): any ? @libp2p/interface-transport.@libp2p/interface-transport.FaultTolerance | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/interface-transport.@libp2p/interface-transport.FaultTolerance | undefined> | undefined} */ js.Any
      ] = js.undefined
    
    var transports: js.UndefOr[
        /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> * /
    {  map :<U>(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U): std.Array<U> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <U>(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U): std.Array<U> extends (args : ...any): any ? <U>(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U): std.Array<U> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<U>(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U): std.Array<U>> | undefined,   length :number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number extends (args : ...any): any ? number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number> | undefined,   entries :(): std.IterableIterator<[number, (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport]> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.IterableIterator<[number, (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport]> extends (args : ...any): any ? (): std.IterableIterator<[number, (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport]> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.IterableIterator<[number, (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport]>> | undefined,   pop :(): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends (args : ...any): any ? (): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined> | undefined,   findLast :<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined extends (args : ...any): any ? <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined> | undefined,   fill :(value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): this extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): this extends (args : ...any): any ? (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): this : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): this> | undefined,   join :(): string extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): string extends (args : ...any): any ? (): string : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): string> | undefined,   copyWithin :(target : number, start : number): this extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (target : number, start : number): this extends (args : ...any): any ? (target : number, start : number): this : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(target : number, start : number): this> | undefined,   keys :(): std.IterableIterator<number> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.IterableIterator<number> extends (args : ...any): any ? (): std.IterableIterator<number> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.IterableIterator<number>> | undefined,   sort :(): this extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): this extends (args : ...any): any ? (): this : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): this> | undefined,   forEach :(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): void): void extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): void): void extends (args : ...any): any ? (callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): void): void : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): void): void> | undefined,   concat :(items : ...std.ConcatArray<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (items : ...std.ConcatArray<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (items : ...std.ConcatArray<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(items : ...std.ConcatArray<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   includes :(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): boolean extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): boolean extends (args : ...any): any ? (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): boolean : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): boolean> | undefined,   slice :(): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   shift :(): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends (args : ...any): any ? (): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined> | undefined,   push :(items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends (args : ...any): any ? (items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number> | undefined,   reverse :(): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> extends (args : ...any): any ? <A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>>> | undefined,   splice :(start : number): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (start : number): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (start : number): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(start : number): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   some :(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): boolean extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): boolean extends (args : ...any): any ? (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): boolean : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): boolean> | undefined,   at :(index : number): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (index : number): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends (args : ...any): any ? (index : number): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(index : number): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined> | undefined,   unshift :(items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends (args : ...any): any ? (items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number> | undefined,   filter :<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): std.Array<S> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): std.Array<S> extends (args : ...any): any ? <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): std.Array<S> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): std.Array<S>> | undefined,   findLastIndex :(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number extends (args : ...any): any ? (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number> | undefined,   toString :(): string extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): string extends (args : ...any): any ? (): string : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): string> | undefined,   indexOf :(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends (args : ...any): any ? (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number> | undefined,   reduceRight :(callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport extends (args : ...any): any ? (callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> | undefined,   findIndex :(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number extends (args : ...any): any ? (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number> | undefined,   reduce :(callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport extends (args : ...any): any ? (callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> | undefined,   values :(): std.IterableIterator<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.IterableIterator<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (): std.IterableIterator<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.IterableIterator<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U | std.ReadonlyArray<U>): std.Array<U> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <U, This = undefined>(callback : (this : This, value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U | std.ReadonlyArray<U>): std.Array<U> extends (args : ...any): any ? <U, This = undefined>(callback : (this : This, value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U | std.ReadonlyArray<U>): std.Array<U> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<U, This = undefined>(callback : (this : This, value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U | std.ReadonlyArray<U>): std.Array<U>> | undefined,   toLocaleString :(): string extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): string extends (args : ...any): any ? (): string : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): string> | undefined,   every :<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): this is std.Array<S> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): this is std.Array<S> extends (args : ...any): any ? <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): this is std.Array<S> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): this is std.Array<S>> | undefined,   lastIndexOf :(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends (args : ...any): any ? (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number> | undefined,   find :<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined extends (args : ...any): any ? <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined> | undefined} */ js.Any
      ] = js.undefined
  }
  object Libp2pOptions {
    
    inline def apply[T /* <: ServiceMap */](): Libp2pOptions[T] = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Libp2pOptions[T]]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: Libp2pOptions[?], T /* <: ServiceMap */] (val x: Self & Libp2pOptions[T]) extends AnyVal {
      
      inline def setAddresses(
        value: /* import warning: importer.ImportType#apply Failed type conversion: libp2p.libp2p/dist/src/address-manager.AddressManagerInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p/dist/src/address-manager.AddressManagerInit extends (args : ...any): any ? libp2p.libp2p/dist/src/address-manager.AddressManagerInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p/dist/src/address-manager.AddressManagerInit> * /
      {  announceFilter :libp2p.libp2p/dist/src/address-manager.AddressFilter | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p/dist/src/address-manager.AddressFilter | undefined extends (args : ...any): any ? libp2p.libp2p/dist/src/address-manager.AddressFilter | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p/dist/src/address-manager.AddressFilter | undefined> | undefined,   listen :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined,   announce :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined,   noAnnounce :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined} */ js.Any
      ): Self = StObject.set(x, "addresses", value.asInstanceOf[js.Any])
      
      inline def setAddressesUndefined: Self = StObject.set(x, "addresses", js.undefined)
      
      inline def setConnectionEncryption(
        value: /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection-encrypter.@libp2p/interface-connection-encrypter.ConnectionEncrypter<unknown>> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection-encrypter.@libp2p/interface-connection-encrypter.ConnectionEncrypter<unknown>> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection-encrypter.@libp2p/interface-connection-encrypter.ConnectionEncrypter<unknown>> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection-encrypter.@libp2p/interface-connection-encrypter.ConnectionEncrypter<unknown>> | undefined> */ js.Any
      ): Self = StObject.set(x, "connectionEncryption", value.asInstanceOf[js.Any])
      
      inline def setConnectionEncryptionUndefined: Self = StObject.set(x, "connectionEncryption", js.undefined)
      
      inline def setConnectionGater(
        value: /* import warning: importer.ImportType#apply Failed type conversion: @libp2p/interface-connection-gater.@libp2p/interface-connection-gater.ConnectionGater extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/interface-connection-gater.@libp2p/interface-connection-gater.ConnectionGater extends (args : ...any): any ? @libp2p/interface-connection-gater.@libp2p/interface-connection-gater.ConnectionGater : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/interface-connection-gater.@libp2p/interface-connection-gater.ConnectionGater> * /
      {  denyOutboundConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   denyOutboundEncryptedConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   denyInboundRelayReservation :(source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends (args : ...any): any ? (source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined> | undefined,   denyInboundConnection :(maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   filterMultiaddrForPeer :(peer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined extends (args : ...any): any ? (peer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined> | undefined,   denyDialMultiaddr :(multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined extends (args : ...any): any ? (multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(multiaddr : @multiformats/multiaddr.@multiformats/multiaddr.Multiaddr): std.Promise<boolean> | undefined> | undefined,   denyOutboundRelayedConnection :(source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, destination : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, destination : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends (args : ...any): any ? (source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, destination : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, destination : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined> | undefined,   denyOutboundUpgradedConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   denyInboundRelayedConnection :(relay : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, remotePeer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (relay : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, remotePeer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends (args : ...any): any ? (relay : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, remotePeer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(relay : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, remotePeer : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined> | undefined,   denyDialPeer :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId): std.Promise<boolean> | undefined> | undefined,   denyInboundEncryptedConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined,   denyInboundUpgradedConnection :(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined extends (args : ...any): any ? (peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(peerId : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId, maConn : @libp2p/interface-connection.@libp2p/interface-connection.MultiaddrConnection): std.Promise<boolean> | undefined> | undefined} */ js.Any
      ): Self = StObject.set(x, "connectionGater", value.asInstanceOf[js.Any])
      
      inline def setConnectionGaterUndefined: Self = StObject.set(x, "connectionGater", js.undefined)
      
      inline def setConnectionManager(
        value: /* import warning: importer.ImportType#apply Failed type conversion: libp2p.libp2p/dist/src/connection-manager.ConnectionManagerInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p/dist/src/connection-manager.ConnectionManagerInit extends (args : ...any): any ? libp2p.libp2p/dist/src/connection-manager.ConnectionManagerInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p/dist/src/connection-manager.ConnectionManagerInit> * /
      {  allow :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined,   inboundConnectionThreshold :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   maxParallelDials :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   resolvers :std.Record<string, @multiformats/multiaddr.@multiformats/multiaddr.Resolver> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Record<string, @multiformats/multiaddr.@multiformats/multiaddr.Resolver> | undefined extends (args : ...any): any ? std.Record<string, @multiformats/multiaddr.@multiformats/multiaddr.Resolver> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Record<string, @multiformats/multiaddr.@multiformats/multiaddr.Resolver> | undefined> | undefined,   addressSorter :@libp2p/interface-libp2p.@libp2p/interface-libp2p.AddressSorter | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/interface-libp2p.@libp2p/interface-libp2p.AddressSorter | undefined extends (args : ...any): any ? @libp2p/interface-libp2p.@libp2p/interface-libp2p.AddressSorter | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/interface-libp2p.@libp2p/interface-libp2p.AddressSorter | undefined> | undefined,   dialTimeout :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   maxParallelDialsPerPeer :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   autoDialConcurrency :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   autoDialInterval :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   maxPeerAddrsToDial :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   deny :std.Array<string> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<string> | undefined extends (args : ...any): any ? std.Array<string> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<string> | undefined> | undefined,   maxConnections :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   autoDialPriority :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   minConnections :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   maxIncomingPendingConnections :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined,   inboundUpgradeTimeout :number | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number | undefined extends (args : ...any): any ? number | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number | undefined> | undefined} */ js.Any
      ): Self = StObject.set(x, "connectionManager", value.asInstanceOf[js.Any])
      
      inline def setConnectionManagerUndefined: Self = StObject.set(x, "connectionManager", js.undefined)
      
      inline def setConnectionProtector(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection.@libp2p/interface-connection.ConnectionProtector | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection.@libp2p/interface-connection.ConnectionProtector | undefined extends (args : ...any): any ? (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection.@libp2p/interface-connection.ConnectionProtector | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-connection.@libp2p/interface-connection.ConnectionProtector | undefined> */ js.Any
      ): Self = StObject.set(x, "connectionProtector", value.asInstanceOf[js.Any])
      
      inline def setConnectionProtectorUndefined: Self = StObject.set(x, "connectionProtector", js.undefined)
      
      inline def setContentRouters(
        value: /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-content-routing.@libp2p/interface-content-routing.ContentRouting> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-content-routing.@libp2p/interface-content-routing.ContentRouting> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-content-routing.@libp2p/interface-content-routing.ContentRouting> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-content-routing.@libp2p/interface-content-routing.ContentRouting> | undefined> */ js.Any
      ): Self = StObject.set(x, "contentRouters", value.asInstanceOf[js.Any])
      
      inline def setContentRoutersUndefined: Self = StObject.set(x, "contentRouters", js.undefined)
      
      inline def setDatastore(
        value: /* import warning: importer.ImportType#apply Failed type conversion: interface-datastore.interface-datastore.Datastore<{}, {}, {}, {}, {}, {}, {}, {}, {}, {}> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : interface-datastore.interface-datastore.Datastore<{}, {}, {}, {}, {}, {}, {}, {}, {}, {}> extends (args : ...any): any ? interface-datastore.interface-datastore.Datastore<{}, {}, {}, {}, {}, {}, {}, {}, {}, {}> : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<interface-datastore.interface-datastore.Datastore<{}, {}, {}, {}, {}, {}, {}, {}, {}, {}>> * /
      {  queryKeys :(query : interface-datastore.interface-datastore.KeyQuery): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (query : interface-datastore.interface-datastore.KeyQuery): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends (args : ...any): any ? (query : interface-datastore.interface-datastore.KeyQuery): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(query : interface-datastore.interface-datastore.KeyQuery): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>> | undefined,   query :(query : interface-datastore.interface-datastore.Query): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (query : interface-datastore.interface-datastore.Query): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> extends (args : ...any): any ? (query : interface-datastore.interface-datastore.Query): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(query : interface-datastore.interface-datastore.Query): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>> | undefined,   delete :(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<void> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<void> extends (args : ...any): any ? (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<void> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<void>> | undefined,   putMany :(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends (args : ...any): any ? (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>> | undefined,   has :(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<boolean> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<boolean> extends (args : ...any): any ? (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<boolean> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<boolean>> | undefined,   deleteMany :(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> extends (args : ...any): any ? (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>> | undefined,   batch :(): interface-datastore.interface-datastore.Batch<{}> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): interface-datastore.interface-datastore.Batch<{}> extends (args : ...any): any ? (): interface-datastore.interface-datastore.Batch<{}> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): interface-datastore.interface-datastore.Batch<{}>> | undefined,   put :(key : interface-datastore.interface-datastore/dist/src/key.Key, val : std.Uint8Array): interface-store.interface-store.Await<interface-datastore.interface-datastore/dist/src/key.Key> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (key : interface-datastore.interface-datastore/dist/src/key.Key, val : std.Uint8Array): interface-store.interface-store.Await<interface-datastore.interface-datastore/dist/src/key.Key> extends (args : ...any): any ? (key : interface-datastore.interface-datastore/dist/src/key.Key, val : std.Uint8Array): interface-store.interface-store.Await<interface-datastore.interface-datastore/dist/src/key.Key> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(key : interface-datastore.interface-datastore/dist/src/key.Key, val : std.Uint8Array): interface-store.interface-store.Await<interface-datastore.interface-datastore/dist/src/key.Key>> | undefined,   get :(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<std.Uint8Array> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<std.Uint8Array> extends (args : ...any): any ? (key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<std.Uint8Array> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(key : interface-datastore.interface-datastore/dist/src/key.Key): interface-store.interface-store.Await<std.Uint8Array>> | undefined,   getMany :(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> extends (args : ...any): any ? (source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(source : interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore/dist/src/key.Key>): interface-store.interface-store.AwaitIterable<interface-datastore.interface-datastore.Pair>> | undefined} */ js.Any
      ): Self = StObject.set(x, "datastore", value.asInstanceOf[js.Any])
      
      inline def setDatastoreUndefined: Self = StObject.set(x, "datastore", js.undefined)
      
      inline def setKeychain(
        value: /* import warning: importer.ImportType#apply Failed type conversion: @libp2p/keychain.@libp2p/keychain.KeyChainInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/keychain.@libp2p/keychain.KeyChainInit extends (args : ...any): any ? @libp2p/keychain.@libp2p/keychain.KeyChainInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/keychain.@libp2p/keychain.KeyChainInit> * /
      {  pass :string | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : string | undefined extends (args : ...any): any ? string | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<string | undefined> | undefined,   dek :@libp2p/keychain.@libp2p/keychain.DEKConfig | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/keychain.@libp2p/keychain.DEKConfig | undefined extends (args : ...any): any ? @libp2p/keychain.@libp2p/keychain.DEKConfig | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/keychain.@libp2p/keychain.DEKConfig | undefined> | undefined} */ js.Any
      ): Self = StObject.set(x, "keychain", value.asInstanceOf[js.Any])
      
      inline def setKeychainUndefined: Self = StObject.set(x, "keychain", js.undefined)
      
      inline def setMetrics(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-metrics.@libp2p/interface-metrics.Metrics | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-metrics.@libp2p/interface-metrics.Metrics | undefined extends (args : ...any): any ? (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-metrics.@libp2p/interface-metrics.Metrics | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-metrics.@libp2p/interface-metrics.Metrics | undefined> */ js.Any
      ): Self = StObject.set(x, "metrics", value.asInstanceOf[js.Any])
      
      inline def setMetricsUndefined: Self = StObject.set(x, "metrics", js.undefined)
      
      inline def setPeerDiscovery(
        value: /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-discovery.@libp2p/interface-peer-discovery.PeerDiscovery> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-discovery.@libp2p/interface-peer-discovery.PeerDiscovery> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-discovery.@libp2p/interface-peer-discovery.PeerDiscovery> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-discovery.@libp2p/interface-peer-discovery.PeerDiscovery> | undefined> */ js.Any
      ): Self = StObject.set(x, "peerDiscovery", value.asInstanceOf[js.Any])
      
      inline def setPeerDiscoveryUndefined: Self = StObject.set(x, "peerDiscovery", js.undefined)
      
      inline def setPeerId(
        value: /* import warning: importer.ImportType#apply Failed type conversion: @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId extends (args : ...any): any ? @libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/interface-peer-id.@libp2p/interface-peer-id.PeerId> */ js.Any
      ): Self = StObject.set(x, "peerId", value.asInstanceOf[js.Any])
      
      inline def setPeerIdUndefined: Self = StObject.set(x, "peerId", js.undefined)
      
      inline def setPeerRouters(
        value: /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-routing.@libp2p/interface-peer-routing.PeerRouting> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-routing.@libp2p/interface-peer-routing.PeerRouting> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-routing.@libp2p/interface-peer-routing.PeerRouting> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-peer-routing.@libp2p/interface-peer-routing.PeerRouting> | undefined> */ js.Any
      ): Self = StObject.set(x, "peerRouters", value.asInstanceOf[js.Any])
      
      inline def setPeerRoutersUndefined: Self = StObject.set(x, "peerRouters", js.undefined)
      
      inline def setPeerStore(
        value: /* import warning: importer.ImportType#apply Failed type conversion: @libp2p/peer-store.@libp2p/peer-store.PersistentPeerStoreInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/peer-store.@libp2p/peer-store.PersistentPeerStoreInit extends (args : ...any): any ? @libp2p/peer-store.@libp2p/peer-store.PersistentPeerStoreInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/peer-store.@libp2p/peer-store.PersistentPeerStoreInit> * /
      {  addressFilter :@libp2p/peer-store.@libp2p/peer-store.AddressFilter | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/peer-store.@libp2p/peer-store.AddressFilter | undefined extends (args : ...any): any ? @libp2p/peer-store.@libp2p/peer-store.AddressFilter | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/peer-store.@libp2p/peer-store.AddressFilter | undefined> | undefined} */ js.Any
      ): Self = StObject.set(x, "peerStore", value.asInstanceOf[js.Any])
      
      inline def setPeerStoreUndefined: Self = StObject.set(x, "peerStore", js.undefined)
      
      inline def setServices(
        value: /* import warning: importer.ImportType#apply Failed type conversion: libp2p.libp2p.ServiceFactoryMap<T> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p.ServiceFactoryMap<T> extends (args : ...any): any ? libp2p.libp2p.ServiceFactoryMap<T> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p.ServiceFactoryMap<T>> */ js.Any
      ): Self = StObject.set(x, "services", value.asInstanceOf[js.Any])
      
      inline def setServicesUndefined: Self = StObject.set(x, "services", js.undefined)
      
      inline def setStart(value: Boolean): Self = StObject.set(x, "start", value.asInstanceOf[js.Any])
      
      inline def setStartUndefined: Self = StObject.set(x, "start", js.undefined)
      
      inline def setStreamMuxers(
        value: /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-stream-muxer.@libp2p/interface-stream-muxer.StreamMuxerFactory> | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-stream-muxer.@libp2p/interface-stream-muxer.StreamMuxerFactory> | undefined extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-stream-muxer.@libp2p/interface-stream-muxer.StreamMuxerFactory> | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-stream-muxer.@libp2p/interface-stream-muxer.StreamMuxerFactory> | undefined> */ js.Any
      ): Self = StObject.set(x, "streamMuxers", value.asInstanceOf[js.Any])
      
      inline def setStreamMuxersUndefined: Self = StObject.set(x, "streamMuxers", js.undefined)
      
      inline def setTransportManager(
        value: /* import warning: importer.ImportType#apply Failed type conversion: libp2p.libp2p/dist/src/transport-manager.TransportManagerInit extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : libp2p.libp2p/dist/src/transport-manager.TransportManagerInit extends (args : ...any): any ? libp2p.libp2p/dist/src/transport-manager.TransportManagerInit : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<libp2p.libp2p/dist/src/transport-manager.TransportManagerInit> * /
      {  faultTolerance :@libp2p/interface-transport.@libp2p/interface-transport.FaultTolerance | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : @libp2p/interface-transport.@libp2p/interface-transport.FaultTolerance | undefined extends (args : ...any): any ? @libp2p/interface-transport.@libp2p/interface-transport.FaultTolerance | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<@libp2p/interface-transport.@libp2p/interface-transport.FaultTolerance | undefined> | undefined} */ js.Any
      ): Self = StObject.set(x, "transportManager", value.asInstanceOf[js.Any])
      
      inline def setTransportManagerUndefined: Self = StObject.set(x, "transportManager", js.undefined)
      
      inline def setTransports(
        value: /* import warning: importer.ImportType#apply Failed type conversion: std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : / * Inlined @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> * /
      {  map :<U>(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U): std.Array<U> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <U>(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U): std.Array<U> extends (args : ...any): any ? <U>(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U): std.Array<U> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<U>(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U): std.Array<U>> | undefined,   length :number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : number extends (args : ...any): any ? number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<number> | undefined,   entries :(): std.IterableIterator<[number, (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport]> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.IterableIterator<[number, (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport]> extends (args : ...any): any ? (): std.IterableIterator<[number, (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport]> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.IterableIterator<[number, (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport]>> | undefined,   pop :(): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends (args : ...any): any ? (): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined> | undefined,   findLast :<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined extends (args : ...any): any ? <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined> | undefined,   fill :(value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): this extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): this extends (args : ...any): any ? (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): this : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): this> | undefined,   join :(): string extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): string extends (args : ...any): any ? (): string : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): string> | undefined,   copyWithin :(target : number, start : number): this extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (target : number, start : number): this extends (args : ...any): any ? (target : number, start : number): this : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(target : number, start : number): this> | undefined,   keys :(): std.IterableIterator<number> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.IterableIterator<number> extends (args : ...any): any ? (): std.IterableIterator<number> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.IterableIterator<number>> | undefined,   sort :(): this extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): this extends (args : ...any): any ? (): this : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): this> | undefined,   forEach :(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): void): void extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): void): void extends (args : ...any): any ? (callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): void): void : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(callbackfn : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): void): void> | undefined,   concat :(items : ...std.ConcatArray<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (items : ...std.ConcatArray<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (items : ...std.ConcatArray<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(items : ...std.ConcatArray<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   includes :(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): boolean extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): boolean extends (args : ...any): any ? (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): boolean : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): boolean> | undefined,   slice :(): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   shift :(): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends (args : ...any): any ? (): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined> | undefined,   push :(items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends (args : ...any): any ? (items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number> | undefined,   reverse :(): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   flat :<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> extends (args : ...any): any ? <A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<A, D extends number = 1>(this : A): std.Array<std.FlatArray<A, D>>> | undefined,   splice :(start : number): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (start : number): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (start : number): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(start : number): std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   some :(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): boolean extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): boolean extends (args : ...any): any ? (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): boolean : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): boolean> | undefined,   at :(index : number): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (index : number): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined extends (args : ...any): any ? (index : number): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(index : number): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport | undefined> | undefined,   unshift :(items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends (args : ...any): any ? (items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(items : ...(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number> | undefined,   filter :<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): std.Array<S> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): std.Array<S> extends (args : ...any): any ? <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): std.Array<S> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): std.Array<S>> | undefined,   findLastIndex :(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number extends (args : ...any): any ? (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number> | undefined,   toString :(): string extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): string extends (args : ...any): any ? (): string : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): string> | undefined,   indexOf :(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends (args : ...any): any ? (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number> | undefined,   reduceRight :(callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport extends (args : ...any): any ? (callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> | undefined,   findIndex :(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number extends (args : ...any): any ? (predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): unknown): number> | undefined,   reduce :(callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport extends (args : ...any): any ? (callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(callbackfn : (previousValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentValue : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, currentIndex : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> | undefined,   values :(): std.IterableIterator<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): std.IterableIterator<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> extends (args : ...any): any ? (): std.IterableIterator<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): std.IterableIterator<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>> | undefined,   flatMap :<U, This = undefined>(callback : (this : This, value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U | std.ReadonlyArray<U>): std.Array<U> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <U, This = undefined>(callback : (this : This, value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U | std.ReadonlyArray<U>): std.Array<U> extends (args : ...any): any ? <U, This = undefined>(callback : (this : This, value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U | std.ReadonlyArray<U>): std.Array<U> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<U, This = undefined>(callback : (this : This, value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): U | std.ReadonlyArray<U>): std.Array<U>> | undefined,   toLocaleString :(): string extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (): string extends (args : ...any): any ? (): string : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(): string> | undefined,   every :<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): this is std.Array<S> extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): this is std.Array<S> extends (args : ...any): any ? <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): this is std.Array<S> : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, array : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): this is std.Array<S>> | undefined,   lastIndexOf :(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number extends (args : ...any): any ? (searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<(searchElement : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport): number> | undefined,   find :<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined extends std.Array<infer I> ? std.Array<@libp2p/interfaces.@libp2p/interfaces.RecursivePartial<I>> : <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined extends (args : ...any): any ? <S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined : @libp2p/interfaces.@libp2p/interfaces.RecursivePartial<<S extends (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>(predicate : (value : (components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport, index : number, obj : std.Array<(components : libp2p.libp2p/dist/src/components.Components): @libp2p/interface-transport.@libp2p/interface-transport.Transport>): value is S): S | undefined> | undefined} */ js.Any
      ): Self = StObject.set(x, "transports", value.asInstanceOf[js.Any])
      
      inline def setTransportsUndefined: Self = StObject.set(x, "transports", js.undefined)
    }
  }
  
  /** NOTE: Mapped type definitions are impossible to translate to Scala.
    * See https://www.typescriptlang.org/docs/handbook/2/mapped-types.html for an intro.
    * You'll have to cast your way around this structure, unfortunately. 
    * TS definition: {{{
    {[ Property in keyof T ]: (components : libp2p.libp2p/dist/src/components.Components): T[Property]}
    }}}
    */
  @js.native
  trait ServiceFactoryMap[T /* <: Record[String, Any] */] extends StObject
}
