package typings.expressValidator

import typings.expressValidator.srcBaseMod.Request
import typings.expressValidator.srcChainContextHandlerMod.ContextHandler
import typings.expressValidator.srcChainContextRunnerMod.ContextRunner
import typings.expressValidator.srcChainSanitizersMod.Sanitizers
import typings.expressValidator.srcChainValidatorsMod.Validators
import typings.expressValidator.srcContextBuilderMod.ContextBuilder
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object srcChainValidationChainMod {
  
  @js.native
  trait ValidationChain
    extends StObject
       with Validators[ValidationChain]
       with Sanitizers[ValidationChain]
       with ContextHandler[ValidationChain]
       with ContextRunner {
    
    def apply(req: Request, res: Any, next: js.Function1[/* error */ js.UndefOr[Any], Unit]): Unit = js.native
    
    var builder: ContextBuilder = js.native
  }
  
  /* Inlined {[ K in keyof express-validator.express-validator/src/chain/validation-chain.ValidationChain ]: express-validator.express-validator/src/chain/validation-chain.ValidationChain[K] extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain? (args : A): any : express-validator.express-validator/src/chain/validation-chain.ValidationChain[K]} */
  trait ValidationChainLike extends StObject {
    
    var default: /* import warning: importer.ImportType#apply Failed type conversion: (default_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (default_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var bail: /* import warning: importer.ImportType#apply Failed type conversion: (opts : express-validator.express-validator/src/chain/context-handler.BailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (opts : express-validator.express-validator/src/chain/context-handler.BailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var blacklist: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var builder: /* import warning: importer.ImportType#apply Failed type conversion: express-validator.express-validator/src/context-builder.ContextBuilder extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : express-validator.express-validator/src/context-builder.ContextBuilder */ js.Any
    
    var contains: /* import warning: importer.ImportType#apply Failed type conversion: (elem : any, options : express-validator.express-validator/src/options.ContainsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (elem : any, options : express-validator.express-validator/src/options.ContainsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var custom: /* import warning: importer.ImportType#apply Failed type conversion: (validator : express-validator.express-validator/src/base.CustomValidator): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (validator : express-validator.express-validator/src/base.CustomValidator): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var customSanitizer: /* import warning: importer.ImportType#apply Failed type conversion: (sanitizer : express-validator.express-validator/src/base.CustomSanitizer): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (sanitizer : express-validator.express-validator/src/base.CustomSanitizer): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    @JSName("equals")
    var equals_FValidationChainLike: /* import warning: importer.ImportType#apply Failed type conversion: (comparison : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (comparison : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var escape: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var exists: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/chain/validators.ExistsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/chain/validators.ExistsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var `if`: /* import warning: importer.ImportType#apply Failed type conversion: (condition : express-validator.express-validator/src/base.CustomValidator | express-validator.express-validator/src/chain/context-runner.ContextRunner): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (condition : express-validator.express-validator/src/base.CustomValidator | express-validator.express-validator/src/chain/context-runner.ContextRunner): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isAfter: /* import warning: importer.ImportType#apply Failed type conversion: (dateOrOptions : string | express-validator.express-validator/src/options.IsAfterOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (dateOrOptions : string | express-validator.express-validator/src/options.IsAfterOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isAlpha: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.AlphaLocale | undefined, options : express-validator.express-validator/src/options.IsAlphaOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.AlphaLocale | undefined, options : express-validator.express-validator/src/options.IsAlphaOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isAlphanumeric: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.AlphanumericLocale | undefined, options : express-validator.express-validator/src/options.IsAlphanumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.AlphanumericLocale | undefined, options : express-validator.express-validator/src/options.IsAlphanumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isArray: /* import warning: importer.ImportType#apply Failed type conversion: (options : {  min :number | undefined,   max :number | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : {  min :number | undefined,   max :number | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isAscii: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isBIC: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isBase32: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsBase32Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsBase32Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isBase58: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isBase64: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsBase64Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsBase64Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isBefore: /* import warning: importer.ImportType#apply Failed type conversion: (date : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (date : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isBoolean: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsBooleanOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsBooleanOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isBtcAddress: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isByteLength: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.MinMaxExtendedOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.MinMaxExtendedOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isCreditCard: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsCreditCard | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsCreditCard | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isCurrency: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsCurrencyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsCurrencyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isDataURI: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isDate: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsDateOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsDateOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isDecimal: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsDecimalOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsDecimalOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isDivisibleBy: /* import warning: importer.ImportType#apply Failed type conversion: (number : number): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (number : number): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isEAN: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isEmail: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isEmpty: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isEthereumAddress: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isFQDN: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsFQDNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsFQDNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isFloat: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsFloatOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsFloatOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isFullWidth: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isHSL: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isHalfWidth: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isHash: /* import warning: importer.ImportType#apply Failed type conversion: (algorithm : express-validator.express-validator/src/options.HashAlgorithm): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (algorithm : express-validator.express-validator/src/options.HashAlgorithm): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isHexColor: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isHexadecimal: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isIBAN: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isIMEI: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsIMEIOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsIMEIOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isIP: /* import warning: importer.ImportType#apply Failed type conversion: (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isIPRange: /* import warning: importer.ImportType#apply Failed type conversion: (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isISBN: /* import warning: importer.ImportType#apply Failed type conversion: (versionOrOptions : number | express-validator.express-validator/src/options.IsISBNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (versionOrOptions : number | express-validator.express-validator/src/options.IsISBNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isISIN: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isISO31661Alpha2: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isISO31661Alpha3: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isISO4217: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isISO6391: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isISO8601: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsISO8601Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsISO8601Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isISRC: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isISSN: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsISSNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsISSNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isIdentityCard: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.IdentityCardLocale | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.IdentityCardLocale | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isIn: /* import warning: importer.ImportType#apply Failed type conversion: (values : std.Array<any>): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (values : std.Array<any>): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isInt: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsIntOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsIntOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isJSON: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsJSONOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsJSONOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isJWT: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isLatLong: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsLatLongOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsLatLongOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isLength: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.MinMaxOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.MinMaxOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isLicensePlate: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.IsLicensePlateLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.IsLicensePlateLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isLocale: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isLowercase: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isLuhnNumber: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isMACAddress: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsMACAddressOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsMACAddressOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isMD5: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isMagnetURI: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isMimeType: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isMobilePhone: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.MobilePhoneLocale | std.Array<express-validator.express-validator/src/options.MobilePhoneLocale>, options : express-validator.express-validator/src/options.IsMobilePhoneOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.MobilePhoneLocale | std.Array<express-validator.express-validator/src/options.MobilePhoneLocale>, options : express-validator.express-validator/src/options.IsMobilePhoneOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isMongoId: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isMultibyte: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isNumeric: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsNumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsNumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isObject: /* import warning: importer.ImportType#apply Failed type conversion: (options : {  strict :boolean | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : {  strict :boolean | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isOctal: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isPassportNumber: /* import warning: importer.ImportType#apply Failed type conversion: (countryCode : express-validator.express-validator/src/options.PassportCountryCode | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (countryCode : express-validator.express-validator/src/options.PassportCountryCode | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isPort: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isPostalCode: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.PostalCodeLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.PostalCodeLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isRFC3339: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isRgbColor: /* import warning: importer.ImportType#apply Failed type conversion: (includePercentValues : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (includePercentValues : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isSemVer: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isSlug: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isString: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isStrongPassword: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsStrongPasswordOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsStrongPasswordOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isSurrogatePair: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isTaxID: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.TaxIDLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.TaxIDLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isTime: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsTimeOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsTimeOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isURL: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsURLOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsURLOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isUUID: /* import warning: importer.ImportType#apply Failed type conversion: (version : express-validator.express-validator/src/options.UUIDVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (version : express-validator.express-validator/src/options.UUIDVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isUppercase: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isVAT: /* import warning: importer.ImportType#apply Failed type conversion: (countryCode : express-validator.express-validator/src/options.VATCountryCode): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (countryCode : express-validator.express-validator/src/options.VATCountryCode): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isVariableWidth: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var isWhitelisted: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | std.Array<string>): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | std.Array<string>): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var ltrim: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var matches: /* import warning: importer.ImportType#apply Failed type conversion: (pattern : std.RegExp | string, modifiers : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (pattern : std.RegExp | string, modifiers : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var normalizeEmail: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.NormalizeEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.NormalizeEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var not: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var notEmpty: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var optional: /* import warning: importer.ImportType#apply Failed type conversion: (options : {  values :express-validator.express-validator/src/context.Optional | undefined,   checkFalsy :boolean | undefined,   nullable :boolean | undefined} | boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : {  values :express-validator.express-validator/src/context.Optional | undefined,   checkFalsy :boolean | undefined,   nullable :boolean | undefined} | boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var replace: /* import warning: importer.ImportType#apply Failed type conversion: (values_to_replace : any, new_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (values_to_replace : any, new_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var rtrim: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var run: /* import warning: importer.ImportType#apply Failed type conversion: (req : express-validator.express-validator/src/base.Request, options : express-validator.express-validator/src/chain/context-runner.ContextRunningOptions | undefined): std.Promise<express-validator.express-validator/src/chain/context-runner.ResultWithContext> extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (req : express-validator.express-validator/src/base.Request, options : express-validator.express-validator/src/chain/context-runner.ContextRunningOptions | undefined): std.Promise<express-validator.express-validator/src/chain/context-runner.ResultWithContext> */ js.Any
    
    var stripLow: /* import warning: importer.ImportType#apply Failed type conversion: (keep_new_lines : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (keep_new_lines : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var toArray: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var toBoolean: /* import warning: importer.ImportType#apply Failed type conversion: (strict : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (strict : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var toDate: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var toFloat: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var toInt: /* import warning: importer.ImportType#apply Failed type conversion: (radix : number | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (radix : number | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var toLowerCase: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var toUpperCase: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var trim: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var unescape: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var whitelist: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    
    var withMessage: /* import warning: importer.ImportType#apply Failed type conversion: (message : express-validator.express-validator/src/base.FieldMessageFactory | express-validator.express-validator/src/base.ErrorMessage): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (message : express-validator.express-validator/src/base.FieldMessageFactory | express-validator.express-validator/src/base.ErrorMessage): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
  }
  object ValidationChainLike {
    
    inline def apply(
      bail: /* import warning: importer.ImportType#apply Failed type conversion: (opts : express-validator.express-validator/src/chain/context-handler.BailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (opts : express-validator.express-validator/src/chain/context-handler.BailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      blacklist: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      builder: /* import warning: importer.ImportType#apply Failed type conversion: express-validator.express-validator/src/context-builder.ContextBuilder extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : express-validator.express-validator/src/context-builder.ContextBuilder */ js.Any,
      contains: /* import warning: importer.ImportType#apply Failed type conversion: (elem : any, options : express-validator.express-validator/src/options.ContainsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (elem : any, options : express-validator.express-validator/src/options.ContainsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      custom: /* import warning: importer.ImportType#apply Failed type conversion: (validator : express-validator.express-validator/src/base.CustomValidator): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (validator : express-validator.express-validator/src/base.CustomValidator): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      customSanitizer: /* import warning: importer.ImportType#apply Failed type conversion: (sanitizer : express-validator.express-validator/src/base.CustomSanitizer): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (sanitizer : express-validator.express-validator/src/base.CustomSanitizer): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      default: /* import warning: importer.ImportType#apply Failed type conversion: (default_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (default_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      equals_ : /* import warning: importer.ImportType#apply Failed type conversion: (comparison : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (comparison : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      escape: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      exists: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/chain/validators.ExistsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/chain/validators.ExistsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      `if`: /* import warning: importer.ImportType#apply Failed type conversion: (condition : express-validator.express-validator/src/base.CustomValidator | express-validator.express-validator/src/chain/context-runner.ContextRunner): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (condition : express-validator.express-validator/src/base.CustomValidator | express-validator.express-validator/src/chain/context-runner.ContextRunner): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isAfter: /* import warning: importer.ImportType#apply Failed type conversion: (dateOrOptions : string | express-validator.express-validator/src/options.IsAfterOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (dateOrOptions : string | express-validator.express-validator/src/options.IsAfterOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isAlpha: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.AlphaLocale | undefined, options : express-validator.express-validator/src/options.IsAlphaOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.AlphaLocale | undefined, options : express-validator.express-validator/src/options.IsAlphaOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isAlphanumeric: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.AlphanumericLocale | undefined, options : express-validator.express-validator/src/options.IsAlphanumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.AlphanumericLocale | undefined, options : express-validator.express-validator/src/options.IsAlphanumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isArray: /* import warning: importer.ImportType#apply Failed type conversion: (options : {  min :number | undefined,   max :number | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : {  min :number | undefined,   max :number | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isAscii: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isBIC: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isBase32: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsBase32Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsBase32Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isBase58: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isBase64: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsBase64Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsBase64Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isBefore: /* import warning: importer.ImportType#apply Failed type conversion: (date : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (date : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isBoolean: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsBooleanOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsBooleanOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isBtcAddress: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isByteLength: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.MinMaxExtendedOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.MinMaxExtendedOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isCreditCard: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsCreditCard | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsCreditCard | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isCurrency: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsCurrencyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsCurrencyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isDataURI: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isDate: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsDateOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsDateOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isDecimal: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsDecimalOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsDecimalOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isDivisibleBy: /* import warning: importer.ImportType#apply Failed type conversion: (number : number): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (number : number): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isEAN: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isEmail: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isEmpty: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isEthereumAddress: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isFQDN: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsFQDNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsFQDNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isFloat: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsFloatOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsFloatOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isFullWidth: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isHSL: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isHalfWidth: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isHash: /* import warning: importer.ImportType#apply Failed type conversion: (algorithm : express-validator.express-validator/src/options.HashAlgorithm): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (algorithm : express-validator.express-validator/src/options.HashAlgorithm): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isHexColor: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isHexadecimal: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isIBAN: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isIMEI: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsIMEIOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsIMEIOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isIP: /* import warning: importer.ImportType#apply Failed type conversion: (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isIPRange: /* import warning: importer.ImportType#apply Failed type conversion: (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isISBN: /* import warning: importer.ImportType#apply Failed type conversion: (versionOrOptions : number | express-validator.express-validator/src/options.IsISBNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (versionOrOptions : number | express-validator.express-validator/src/options.IsISBNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isISIN: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isISO31661Alpha2: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isISO31661Alpha3: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isISO4217: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isISO6391: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isISO8601: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsISO8601Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsISO8601Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isISRC: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isISSN: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsISSNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsISSNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isIdentityCard: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.IdentityCardLocale | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.IdentityCardLocale | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isIn: /* import warning: importer.ImportType#apply Failed type conversion: (values : std.Array<any>): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (values : std.Array<any>): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isInt: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsIntOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsIntOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isJSON: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsJSONOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsJSONOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isJWT: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isLatLong: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsLatLongOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsLatLongOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isLength: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.MinMaxOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.MinMaxOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isLicensePlate: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.IsLicensePlateLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.IsLicensePlateLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isLocale: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isLowercase: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isLuhnNumber: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isMACAddress: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsMACAddressOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsMACAddressOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isMD5: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isMagnetURI: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isMimeType: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isMobilePhone: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.MobilePhoneLocale | std.Array<express-validator.express-validator/src/options.MobilePhoneLocale>, options : express-validator.express-validator/src/options.IsMobilePhoneOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.MobilePhoneLocale | std.Array<express-validator.express-validator/src/options.MobilePhoneLocale>, options : express-validator.express-validator/src/options.IsMobilePhoneOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isMongoId: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isMultibyte: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isNumeric: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsNumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsNumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isObject: /* import warning: importer.ImportType#apply Failed type conversion: (options : {  strict :boolean | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : {  strict :boolean | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isOctal: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isPassportNumber: /* import warning: importer.ImportType#apply Failed type conversion: (countryCode : express-validator.express-validator/src/options.PassportCountryCode | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (countryCode : express-validator.express-validator/src/options.PassportCountryCode | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isPort: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isPostalCode: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.PostalCodeLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.PostalCodeLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isRFC3339: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isRgbColor: /* import warning: importer.ImportType#apply Failed type conversion: (includePercentValues : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (includePercentValues : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isSemVer: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isSlug: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isString: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isStrongPassword: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsStrongPasswordOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsStrongPasswordOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isSurrogatePair: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isTaxID: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.TaxIDLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.TaxIDLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isTime: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsTimeOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsTimeOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isURL: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsURLOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsURLOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isUUID: /* import warning: importer.ImportType#apply Failed type conversion: (version : express-validator.express-validator/src/options.UUIDVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (version : express-validator.express-validator/src/options.UUIDVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isUppercase: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isVAT: /* import warning: importer.ImportType#apply Failed type conversion: (countryCode : express-validator.express-validator/src/options.VATCountryCode): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (countryCode : express-validator.express-validator/src/options.VATCountryCode): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isVariableWidth: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      isWhitelisted: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | std.Array<string>): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | std.Array<string>): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      ltrim: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      matches: /* import warning: importer.ImportType#apply Failed type conversion: (pattern : std.RegExp | string, modifiers : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (pattern : std.RegExp | string, modifiers : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      normalizeEmail: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.NormalizeEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.NormalizeEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      not: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      notEmpty: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      optional: /* import warning: importer.ImportType#apply Failed type conversion: (options : {  values :express-validator.express-validator/src/context.Optional | undefined,   checkFalsy :boolean | undefined,   nullable :boolean | undefined} | boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : {  values :express-validator.express-validator/src/context.Optional | undefined,   checkFalsy :boolean | undefined,   nullable :boolean | undefined} | boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      replace: /* import warning: importer.ImportType#apply Failed type conversion: (values_to_replace : any, new_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (values_to_replace : any, new_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      rtrim: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      run: /* import warning: importer.ImportType#apply Failed type conversion: (req : express-validator.express-validator/src/base.Request, options : express-validator.express-validator/src/chain/context-runner.ContextRunningOptions | undefined): std.Promise<express-validator.express-validator/src/chain/context-runner.ResultWithContext> extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (req : express-validator.express-validator/src/base.Request, options : express-validator.express-validator/src/chain/context-runner.ContextRunningOptions | undefined): std.Promise<express-validator.express-validator/src/chain/context-runner.ResultWithContext> */ js.Any,
      stripLow: /* import warning: importer.ImportType#apply Failed type conversion: (keep_new_lines : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (keep_new_lines : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      toArray: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      toBoolean: /* import warning: importer.ImportType#apply Failed type conversion: (strict : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (strict : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      toDate: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      toFloat: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      toInt: /* import warning: importer.ImportType#apply Failed type conversion: (radix : number | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (radix : number | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      toLowerCase: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      toUpperCase: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      trim: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      unescape: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      whitelist: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any,
      withMessage: /* import warning: importer.ImportType#apply Failed type conversion: (message : express-validator.express-validator/src/base.FieldMessageFactory | express-validator.express-validator/src/base.ErrorMessage): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (message : express-validator.express-validator/src/base.FieldMessageFactory | express-validator.express-validator/src/base.ErrorMessage): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
    ): ValidationChainLike = {
      val __obj = js.Dynamic.literal(bail = bail.asInstanceOf[js.Any], blacklist = blacklist.asInstanceOf[js.Any], builder = builder.asInstanceOf[js.Any], contains = contains.asInstanceOf[js.Any], custom = custom.asInstanceOf[js.Any], customSanitizer = customSanitizer.asInstanceOf[js.Any], default = default.asInstanceOf[js.Any], escape = escape.asInstanceOf[js.Any], exists = exists.asInstanceOf[js.Any], isAfter = isAfter.asInstanceOf[js.Any], isAlpha = isAlpha.asInstanceOf[js.Any], isAlphanumeric = isAlphanumeric.asInstanceOf[js.Any], isArray = isArray.asInstanceOf[js.Any], isAscii = isAscii.asInstanceOf[js.Any], isBIC = isBIC.asInstanceOf[js.Any], isBase32 = isBase32.asInstanceOf[js.Any], isBase58 = isBase58.asInstanceOf[js.Any], isBase64 = isBase64.asInstanceOf[js.Any], isBefore = isBefore.asInstanceOf[js.Any], isBoolean = isBoolean.asInstanceOf[js.Any], isBtcAddress = isBtcAddress.asInstanceOf[js.Any], isByteLength = isByteLength.asInstanceOf[js.Any], isCreditCard = isCreditCard.asInstanceOf[js.Any], isCurrency = isCurrency.asInstanceOf[js.Any], isDataURI = isDataURI.asInstanceOf[js.Any], isDate = isDate.asInstanceOf[js.Any], isDecimal = isDecimal.asInstanceOf[js.Any], isDivisibleBy = isDivisibleBy.asInstanceOf[js.Any], isEAN = isEAN.asInstanceOf[js.Any], isEmail = isEmail.asInstanceOf[js.Any], isEmpty = isEmpty.asInstanceOf[js.Any], isEthereumAddress = isEthereumAddress.asInstanceOf[js.Any], isFQDN = isFQDN.asInstanceOf[js.Any], isFloat = isFloat.asInstanceOf[js.Any], isFullWidth = isFullWidth.asInstanceOf[js.Any], isHSL = isHSL.asInstanceOf[js.Any], isHalfWidth = isHalfWidth.asInstanceOf[js.Any], isHash = isHash.asInstanceOf[js.Any], isHexColor = isHexColor.asInstanceOf[js.Any], isHexadecimal = isHexadecimal.asInstanceOf[js.Any], isIBAN = isIBAN.asInstanceOf[js.Any], isIMEI = isIMEI.asInstanceOf[js.Any], isIP = isIP.asInstanceOf[js.Any], isIPRange = isIPRange.asInstanceOf[js.Any], isISBN = isISBN.asInstanceOf[js.Any], isISIN = isISIN.asInstanceOf[js.Any], isISO31661Alpha2 = isISO31661Alpha2.asInstanceOf[js.Any], isISO31661Alpha3 = isISO31661Alpha3.asInstanceOf[js.Any], isISO4217 = isISO4217.asInstanceOf[js.Any], isISO6391 = isISO6391.asInstanceOf[js.Any], isISO8601 = isISO8601.asInstanceOf[js.Any], isISRC = isISRC.asInstanceOf[js.Any], isISSN = isISSN.asInstanceOf[js.Any], isIdentityCard = isIdentityCard.asInstanceOf[js.Any], isIn = isIn.asInstanceOf[js.Any], isInt = isInt.asInstanceOf[js.Any], isJSON = isJSON.asInstanceOf[js.Any], isJWT = isJWT.asInstanceOf[js.Any], isLatLong = isLatLong.asInstanceOf[js.Any], isLength = isLength.asInstanceOf[js.Any], isLicensePlate = isLicensePlate.asInstanceOf[js.Any], isLocale = isLocale.asInstanceOf[js.Any], isLowercase = isLowercase.asInstanceOf[js.Any], isLuhnNumber = isLuhnNumber.asInstanceOf[js.Any], isMACAddress = isMACAddress.asInstanceOf[js.Any], isMD5 = isMD5.asInstanceOf[js.Any], isMagnetURI = isMagnetURI.asInstanceOf[js.Any], isMimeType = isMimeType.asInstanceOf[js.Any], isMobilePhone = isMobilePhone.asInstanceOf[js.Any], isMongoId = isMongoId.asInstanceOf[js.Any], isMultibyte = isMultibyte.asInstanceOf[js.Any], isNumeric = isNumeric.asInstanceOf[js.Any], isObject = isObject.asInstanceOf[js.Any], isOctal = isOctal.asInstanceOf[js.Any], isPassportNumber = isPassportNumber.asInstanceOf[js.Any], isPort = isPort.asInstanceOf[js.Any], isPostalCode = isPostalCode.asInstanceOf[js.Any], isRFC3339 = isRFC3339.asInstanceOf[js.Any], isRgbColor = isRgbColor.asInstanceOf[js.Any], isSemVer = isSemVer.asInstanceOf[js.Any], isSlug = isSlug.asInstanceOf[js.Any], isString = isString.asInstanceOf[js.Any], isStrongPassword = isStrongPassword.asInstanceOf[js.Any], isSurrogatePair = isSurrogatePair.asInstanceOf[js.Any], isTaxID = isTaxID.asInstanceOf[js.Any], isTime = isTime.asInstanceOf[js.Any], isURL = isURL.asInstanceOf[js.Any], isUUID = isUUID.asInstanceOf[js.Any], isUppercase = isUppercase.asInstanceOf[js.Any], isVAT = isVAT.asInstanceOf[js.Any], isVariableWidth = isVariableWidth.asInstanceOf[js.Any], isWhitelisted = isWhitelisted.asInstanceOf[js.Any], ltrim = ltrim.asInstanceOf[js.Any], matches = matches.asInstanceOf[js.Any], normalizeEmail = normalizeEmail.asInstanceOf[js.Any], not = not.asInstanceOf[js.Any], notEmpty = notEmpty.asInstanceOf[js.Any], optional = optional.asInstanceOf[js.Any], replace = replace.asInstanceOf[js.Any], rtrim = rtrim.asInstanceOf[js.Any], run = run.asInstanceOf[js.Any], stripLow = stripLow.asInstanceOf[js.Any], toArray = toArray.asInstanceOf[js.Any], toBoolean = toBoolean.asInstanceOf[js.Any], toDate = toDate.asInstanceOf[js.Any], toFloat = toFloat.asInstanceOf[js.Any], toInt = toInt.asInstanceOf[js.Any], toLowerCase = toLowerCase.asInstanceOf[js.Any], toUpperCase = toUpperCase.asInstanceOf[js.Any], trim = trim.asInstanceOf[js.Any], unescape = unescape.asInstanceOf[js.Any], whitelist = whitelist.asInstanceOf[js.Any], withMessage = withMessage.asInstanceOf[js.Any])
      __obj.updateDynamic("equals")(equals_.asInstanceOf[js.Any])
      __obj.updateDynamic("if")(`if`.asInstanceOf[js.Any])
      __obj.asInstanceOf[ValidationChainLike]
    }
    
    @scala.inline
    implicit open class MutableBuilder[Self <: ValidationChainLike] (val x: Self) extends AnyVal {
      
      inline def setBail(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (opts : express-validator.express-validator/src/chain/context-handler.BailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (opts : express-validator.express-validator/src/chain/context-handler.BailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "bail", value.asInstanceOf[js.Any])
      
      inline def setBlacklist(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "blacklist", value.asInstanceOf[js.Any])
      
      inline def setBuilder(
        value: /* import warning: importer.ImportType#apply Failed type conversion: express-validator.express-validator/src/context-builder.ContextBuilder extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : express-validator.express-validator/src/context-builder.ContextBuilder */ js.Any
      ): Self = StObject.set(x, "builder", value.asInstanceOf[js.Any])
      
      inline def setContains(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (elem : any, options : express-validator.express-validator/src/options.ContainsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (elem : any, options : express-validator.express-validator/src/options.ContainsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "contains", value.asInstanceOf[js.Any])
      
      inline def setCustom(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (validator : express-validator.express-validator/src/base.CustomValidator): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (validator : express-validator.express-validator/src/base.CustomValidator): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "custom", value.asInstanceOf[js.Any])
      
      inline def setCustomSanitizer(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (sanitizer : express-validator.express-validator/src/base.CustomSanitizer): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (sanitizer : express-validator.express-validator/src/base.CustomSanitizer): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "customSanitizer", value.asInstanceOf[js.Any])
      
      inline def setDefault(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (default_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (default_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "default", value.asInstanceOf[js.Any])
      
      inline def setEquals_(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (comparison : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (comparison : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "equals", value.asInstanceOf[js.Any])
      
      inline def setEscape(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "escape", value.asInstanceOf[js.Any])
      
      inline def setExists(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/chain/validators.ExistsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/chain/validators.ExistsOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "exists", value.asInstanceOf[js.Any])
      
      inline def setIf(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (condition : express-validator.express-validator/src/base.CustomValidator | express-validator.express-validator/src/chain/context-runner.ContextRunner): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (condition : express-validator.express-validator/src/base.CustomValidator | express-validator.express-validator/src/chain/context-runner.ContextRunner): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "if", value.asInstanceOf[js.Any])
      
      inline def setIsAfter(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (dateOrOptions : string | express-validator.express-validator/src/options.IsAfterOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (dateOrOptions : string | express-validator.express-validator/src/options.IsAfterOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isAfter", value.asInstanceOf[js.Any])
      
      inline def setIsAlpha(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.AlphaLocale | undefined, options : express-validator.express-validator/src/options.IsAlphaOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.AlphaLocale | undefined, options : express-validator.express-validator/src/options.IsAlphaOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isAlpha", value.asInstanceOf[js.Any])
      
      inline def setIsAlphanumeric(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.AlphanumericLocale | undefined, options : express-validator.express-validator/src/options.IsAlphanumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.AlphanumericLocale | undefined, options : express-validator.express-validator/src/options.IsAlphanumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isAlphanumeric", value.asInstanceOf[js.Any])
      
      inline def setIsArray(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : {  min :number | undefined,   max :number | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : {  min :number | undefined,   max :number | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isArray", value.asInstanceOf[js.Any])
      
      inline def setIsAscii(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isAscii", value.asInstanceOf[js.Any])
      
      inline def setIsBIC(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isBIC", value.asInstanceOf[js.Any])
      
      inline def setIsBase32(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsBase32Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsBase32Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isBase32", value.asInstanceOf[js.Any])
      
      inline def setIsBase58(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isBase58", value.asInstanceOf[js.Any])
      
      inline def setIsBase64(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsBase64Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsBase64Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isBase64", value.asInstanceOf[js.Any])
      
      inline def setIsBefore(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (date : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (date : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isBefore", value.asInstanceOf[js.Any])
      
      inline def setIsBoolean(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsBooleanOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsBooleanOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isBoolean", value.asInstanceOf[js.Any])
      
      inline def setIsBtcAddress(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isBtcAddress", value.asInstanceOf[js.Any])
      
      inline def setIsByteLength(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.MinMaxExtendedOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.MinMaxExtendedOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isByteLength", value.asInstanceOf[js.Any])
      
      inline def setIsCreditCard(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsCreditCard | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsCreditCard | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isCreditCard", value.asInstanceOf[js.Any])
      
      inline def setIsCurrency(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsCurrencyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsCurrencyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isCurrency", value.asInstanceOf[js.Any])
      
      inline def setIsDataURI(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isDataURI", value.asInstanceOf[js.Any])
      
      inline def setIsDate(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsDateOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsDateOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isDate", value.asInstanceOf[js.Any])
      
      inline def setIsDecimal(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsDecimalOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsDecimalOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isDecimal", value.asInstanceOf[js.Any])
      
      inline def setIsDivisibleBy(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (number : number): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (number : number): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isDivisibleBy", value.asInstanceOf[js.Any])
      
      inline def setIsEAN(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isEAN", value.asInstanceOf[js.Any])
      
      inline def setIsEmail(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isEmail", value.asInstanceOf[js.Any])
      
      inline def setIsEmpty(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isEmpty", value.asInstanceOf[js.Any])
      
      inline def setIsEthereumAddress(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isEthereumAddress", value.asInstanceOf[js.Any])
      
      inline def setIsFQDN(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsFQDNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsFQDNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isFQDN", value.asInstanceOf[js.Any])
      
      inline def setIsFloat(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsFloatOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsFloatOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isFloat", value.asInstanceOf[js.Any])
      
      inline def setIsFullWidth(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isFullWidth", value.asInstanceOf[js.Any])
      
      inline def setIsHSL(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isHSL", value.asInstanceOf[js.Any])
      
      inline def setIsHalfWidth(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isHalfWidth", value.asInstanceOf[js.Any])
      
      inline def setIsHash(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (algorithm : express-validator.express-validator/src/options.HashAlgorithm): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (algorithm : express-validator.express-validator/src/options.HashAlgorithm): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isHash", value.asInstanceOf[js.Any])
      
      inline def setIsHexColor(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isHexColor", value.asInstanceOf[js.Any])
      
      inline def setIsHexadecimal(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isHexadecimal", value.asInstanceOf[js.Any])
      
      inline def setIsIBAN(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isIBAN", value.asInstanceOf[js.Any])
      
      inline def setIsIMEI(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsIMEIOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsIMEIOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isIMEI", value.asInstanceOf[js.Any])
      
      inline def setIsIP(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isIP", value.asInstanceOf[js.Any])
      
      inline def setIsIPRange(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (version : express-validator.express-validator/src/options.IPVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isIPRange", value.asInstanceOf[js.Any])
      
      inline def setIsISBN(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (versionOrOptions : number | express-validator.express-validator/src/options.IsISBNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (versionOrOptions : number | express-validator.express-validator/src/options.IsISBNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isISBN", value.asInstanceOf[js.Any])
      
      inline def setIsISIN(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isISIN", value.asInstanceOf[js.Any])
      
      inline def setIsISO31661Alpha2(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isISO31661Alpha2", value.asInstanceOf[js.Any])
      
      inline def setIsISO31661Alpha3(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isISO31661Alpha3", value.asInstanceOf[js.Any])
      
      inline def setIsISO4217(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isISO4217", value.asInstanceOf[js.Any])
      
      inline def setIsISO6391(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isISO6391", value.asInstanceOf[js.Any])
      
      inline def setIsISO8601(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsISO8601Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsISO8601Options | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isISO8601", value.asInstanceOf[js.Any])
      
      inline def setIsISRC(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isISRC", value.asInstanceOf[js.Any])
      
      inline def setIsISSN(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsISSNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsISSNOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isISSN", value.asInstanceOf[js.Any])
      
      inline def setIsIdentityCard(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.IdentityCardLocale | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.IdentityCardLocale | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isIdentityCard", value.asInstanceOf[js.Any])
      
      inline def setIsIn(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (values : std.Array<any>): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (values : std.Array<any>): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isIn", value.asInstanceOf[js.Any])
      
      inline def setIsInt(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsIntOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsIntOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isInt", value.asInstanceOf[js.Any])
      
      inline def setIsJSON(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsJSONOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsJSONOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isJSON", value.asInstanceOf[js.Any])
      
      inline def setIsJWT(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isJWT", value.asInstanceOf[js.Any])
      
      inline def setIsLatLong(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsLatLongOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsLatLongOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isLatLong", value.asInstanceOf[js.Any])
      
      inline def setIsLength(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.MinMaxOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.MinMaxOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isLength", value.asInstanceOf[js.Any])
      
      inline def setIsLicensePlate(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.IsLicensePlateLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.IsLicensePlateLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isLicensePlate", value.asInstanceOf[js.Any])
      
      inline def setIsLocale(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isLocale", value.asInstanceOf[js.Any])
      
      inline def setIsLowercase(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isLowercase", value.asInstanceOf[js.Any])
      
      inline def setIsLuhnNumber(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isLuhnNumber", value.asInstanceOf[js.Any])
      
      inline def setIsMACAddress(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsMACAddressOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsMACAddressOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isMACAddress", value.asInstanceOf[js.Any])
      
      inline def setIsMD5(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isMD5", value.asInstanceOf[js.Any])
      
      inline def setIsMagnetURI(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isMagnetURI", value.asInstanceOf[js.Any])
      
      inline def setIsMimeType(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isMimeType", value.asInstanceOf[js.Any])
      
      inline def setIsMobilePhone(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.MobilePhoneLocale | std.Array<express-validator.express-validator/src/options.MobilePhoneLocale>, options : express-validator.express-validator/src/options.IsMobilePhoneOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.MobilePhoneLocale | std.Array<express-validator.express-validator/src/options.MobilePhoneLocale>, options : express-validator.express-validator/src/options.IsMobilePhoneOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isMobilePhone", value.asInstanceOf[js.Any])
      
      inline def setIsMongoId(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isMongoId", value.asInstanceOf[js.Any])
      
      inline def setIsMultibyte(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isMultibyte", value.asInstanceOf[js.Any])
      
      inline def setIsNumeric(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsNumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsNumericOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isNumeric", value.asInstanceOf[js.Any])
      
      inline def setIsObject(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : {  strict :boolean | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : {  strict :boolean | undefined} | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isObject", value.asInstanceOf[js.Any])
      
      inline def setIsOctal(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isOctal", value.asInstanceOf[js.Any])
      
      inline def setIsPassportNumber(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (countryCode : express-validator.express-validator/src/options.PassportCountryCode | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (countryCode : express-validator.express-validator/src/options.PassportCountryCode | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isPassportNumber", value.asInstanceOf[js.Any])
      
      inline def setIsPort(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isPort", value.asInstanceOf[js.Any])
      
      inline def setIsPostalCode(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.PostalCodeLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.PostalCodeLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isPostalCode", value.asInstanceOf[js.Any])
      
      inline def setIsRFC3339(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isRFC3339", value.asInstanceOf[js.Any])
      
      inline def setIsRgbColor(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (includePercentValues : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (includePercentValues : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isRgbColor", value.asInstanceOf[js.Any])
      
      inline def setIsSemVer(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isSemVer", value.asInstanceOf[js.Any])
      
      inline def setIsSlug(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isSlug", value.asInstanceOf[js.Any])
      
      inline def setIsString(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isString", value.asInstanceOf[js.Any])
      
      inline def setIsStrongPassword(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsStrongPasswordOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsStrongPasswordOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isStrongPassword", value.asInstanceOf[js.Any])
      
      inline def setIsSurrogatePair(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isSurrogatePair", value.asInstanceOf[js.Any])
      
      inline def setIsTaxID(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (locale : express-validator.express-validator/src/options.TaxIDLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (locale : express-validator.express-validator/src/options.TaxIDLocale): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isTaxID", value.asInstanceOf[js.Any])
      
      inline def setIsTime(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsTimeOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsTimeOptions): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isTime", value.asInstanceOf[js.Any])
      
      inline def setIsURL(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsURLOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsURLOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isURL", value.asInstanceOf[js.Any])
      
      inline def setIsUUID(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (version : express-validator.express-validator/src/options.UUIDVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (version : express-validator.express-validator/src/options.UUIDVersion | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isUUID", value.asInstanceOf[js.Any])
      
      inline def setIsUppercase(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isUppercase", value.asInstanceOf[js.Any])
      
      inline def setIsVAT(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (countryCode : express-validator.express-validator/src/options.VATCountryCode): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (countryCode : express-validator.express-validator/src/options.VATCountryCode): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isVAT", value.asInstanceOf[js.Any])
      
      inline def setIsVariableWidth(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isVariableWidth", value.asInstanceOf[js.Any])
      
      inline def setIsWhitelisted(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | std.Array<string>): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | std.Array<string>): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "isWhitelisted", value.asInstanceOf[js.Any])
      
      inline def setLtrim(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "ltrim", value.asInstanceOf[js.Any])
      
      inline def setMatches(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (pattern : std.RegExp | string, modifiers : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (pattern : std.RegExp | string, modifiers : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "matches", value.asInstanceOf[js.Any])
      
      inline def setNormalizeEmail(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.NormalizeEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.NormalizeEmailOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "normalizeEmail", value.asInstanceOf[js.Any])
      
      inline def setNot(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "not", value.asInstanceOf[js.Any])
      
      inline def setNotEmpty(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : express-validator.express-validator/src/options.IsEmptyOptions | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "notEmpty", value.asInstanceOf[js.Any])
      
      inline def setOptional(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (options : {  values :express-validator.express-validator/src/context.Optional | undefined,   checkFalsy :boolean | undefined,   nullable :boolean | undefined} | boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (options : {  values :express-validator.express-validator/src/context.Optional | undefined,   checkFalsy :boolean | undefined,   nullable :boolean | undefined} | boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "optional", value.asInstanceOf[js.Any])
      
      inline def setReplace(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (values_to_replace : any, new_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (values_to_replace : any, new_value : any): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "replace", value.asInstanceOf[js.Any])
      
      inline def setRtrim(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "rtrim", value.asInstanceOf[js.Any])
      
      inline def setRun(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (req : express-validator.express-validator/src/base.Request, options : express-validator.express-validator/src/chain/context-runner.ContextRunningOptions | undefined): std.Promise<express-validator.express-validator/src/chain/context-runner.ResultWithContext> extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (req : express-validator.express-validator/src/base.Request, options : express-validator.express-validator/src/chain/context-runner.ContextRunningOptions | undefined): std.Promise<express-validator.express-validator/src/chain/context-runner.ResultWithContext> */ js.Any
      ): Self = StObject.set(x, "run", value.asInstanceOf[js.Any])
      
      inline def setStripLow(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (keep_new_lines : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (keep_new_lines : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "stripLow", value.asInstanceOf[js.Any])
      
      inline def setToArray(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "toArray", value.asInstanceOf[js.Any])
      
      inline def setToBoolean(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (strict : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (strict : boolean | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "toBoolean", value.asInstanceOf[js.Any])
      
      inline def setToDate(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "toDate", value.asInstanceOf[js.Any])
      
      inline def setToFloat(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "toFloat", value.asInstanceOf[js.Any])
      
      inline def setToInt(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (radix : number | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (radix : number | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "toInt", value.asInstanceOf[js.Any])
      
      inline def setToLowerCase(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "toLowerCase", value.asInstanceOf[js.Any])
      
      inline def setToUpperCase(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "toUpperCase", value.asInstanceOf[js.Any])
      
      inline def setTrim(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string | undefined): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "trim", value.asInstanceOf[js.Any])
      
      inline def setUnescape(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "unescape", value.asInstanceOf[js.Any])
      
      inline def setWhitelist(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (chars : string): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "whitelist", value.asInstanceOf[js.Any])
      
      inline def setWithMessage(
        value: /* import warning: importer.ImportType#apply Failed type conversion: (message : express-validator.express-validator/src/base.FieldMessageFactory | express-validator.express-validator/src/base.ErrorMessage): express-validator.express-validator/src/chain/validation-chain.ValidationChain extends (args : infer A): express-validator.express-validator/src/chain/validation-chain.ValidationChain ? (args : A): any : (message : express-validator.express-validator/src/base.FieldMessageFactory | express-validator.express-validator/src/base.ErrorMessage): express-validator.express-validator/src/chain/validation-chain.ValidationChain */ js.Any
      ): Self = StObject.set(x, "withMessage", value.asInstanceOf[js.Any])
    }
  }
}
